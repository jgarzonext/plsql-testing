CREATE OR REPLACE PACKAGE BODY PAC_IAX_PRODUCCION
IS
   /***********************************************************************************************
   NOMBRE: PAC_IAX_PRODUCCION
   PROPOSITO: Funciones para contracion
   REVISIONES:
   Ver        Fecha        Autor             Descripcion
   ---  ----------  ----------  ------------------------------------
   1.0        22/11/2007   ACC                1. Creacion del package.
   2.0        30/11/2007   ACC                2. Incluye metodos para consultar una poliza
   3.0        04/03/2009   DRA                3. 0009296: IAX - Implementar el circuit de recobrament de rebuts en l'emissio de polisses pendents d'emetre
   3.0        16/02/2009   SBG                3. S'informa CTIPGRU de l'objecte OB_IAX_PREGUNTAS (Bug 6296)
   4.0        12/02/2009   RSC                4. Preguntas semiautomaticas
   5.0        27/02/2009   RSC                5. Adaptacion iAxis a productos colectivos con certificados
   6.0        11/03/2009   RSC                6. Analisis adaptacion productos indexados
   7.0        01/04/2009   SBG                7. S'afegeix parametre p_filtroprod a funcio f_consultapoliza
   8.0        23/04/2009   DRA                8. 0009640: IAX - Modificar missatge de retencio de polisses pendents de facultatiu
   9.0        23/04/2009   DRA                9. 0009718: IAX - clausulas especiales por producto
   10.0       20/04/2009   SBG                10. Modifs. en cridar a pac_md_listvalores.p_ompledadesdireccions (Bug 7624)
   11.0       29/04/2009   JTS                11. 9883: IAX - preguntas duplicadas en el detalle de garantias
   12.0       11/05/2009   DRA                12. 0009263: CRE - Comision de Comercializacion
   13.0       29/04/2009   DRA                11. 0009906: APR - Ampliar la parametritzacio de la revaloracio a nivell de garantia
   14.0       27/05/2009   ETM                14. 0010231: APR - Limite de aportaciones en productos fiscales
   15.0       02/07/2009   ETM                15. 0009916: IAX -ACTIVIDAD - A�adir la actividad a nivel de poliza
   16.0       10/07/2009   APD                16. 0009513: CEM - Validacion de prima minima
   17.0       16/07/2009   XPL                17. 10194:APR - A�adir el campo Recargo Fraccionamiento en la pantalla de Simulacion
   18.0       25/06/2009   RSC                18. 0010101: APR - Detalle de garantia (Consulta)
   19.0       14/07/2009   DRA                19. 0008947: CRE046 - Gestion de cobertura Enfermedad Grave en siniestros
   20.0       13-08-2009   XPL                20. 0010093, se a�ade el cramo, consulta polizas
   21.0       20/07/2009   JRH                21. Bug-10336 : CRE - Simular producto de rentas a partir del importe de renta y no de la prima
   22.0       01-09-2009   XPL                22. 11008, CRE - Afegir camps de cerca en la pantalla de seleccio de certificat 0.
   23.0       07/09/2009   DRA                23. 0011047: CRE - Suplemento Baja de Asegurado
   24.0       17/09/2009   DCT                24. 0010550: BPM - Incorporar el BPM al flujo de trabajo del producto i-Axis
   25.0       17/09/2009   AMC                25. 11165: Se sustituye  T_iax_saldodeutorseg por t_iax_prestamoseg
   26.0       01/07/2009   NMM                26. 0010470: CEM - ESCUT - Profesiones sobreprimas y extraprimas
   27.0       21/10/2009   DRA                27. 0009496: IAX - Contractacio: Gestio de preguntes de garantia + control seleccio minim 1 garantia
   28.0       17/12/2009   JMF                28. 0010908 CRE - ULK - Parametritzacio del suplement automatic d'actualitzacio de patrimoni
   29.0       18/12/2009   JMF                29. 0012227 AGA - Adaptar profesiones con empresa y producto
   30.0       15/01/2010   NMM                30. 12674: CRE087 - Producto ULK- Eliminar pantalla beneficiarios de wizard de contratacion
   31.0       29/01/2010   DRA                31. 0012421: CRE 80- Saldo deutors II
   32.0       19/01/2010   RSC                32. 0011735: APR - suplemento de modificacion de capital /prima
   33.0       28/01/2010   DRA                33. 0010464: CRE - L'anul.lacio de propostes pendents d'emetre no tira enderrera correctament el moviment anul.lat.
   34.0       11/03/2010   xpl                34. 12583: CEM103 - Recuperacio dades interficie de pr‚stecs
   35.0       03/02/2010   DRA                35. 0012760: CRE200 - Consulta de polizas: mostrar preguntas automaticas.
   36.0       24/03/2010   JRH                36. 0012136: CEM - RVI - Verificacion productos RVI
   37.0       21/04/2010   DRA                37. 0011263: AGA - Revisar el producto de hogar, actualmente no da la opcion de grabar propiestarios(asegurados)
   38.0       27/04/2010   JRH                38. 0014285: CEM Se a�ade interes y fppren
   39.0       12/05/2010   RSC                39. 0011735: APR - suplemento de modificacion de capital /prima
   40.0       12/05/2010   AMC                40. Bug 14443 - Se a�ade la funcion f_get_domicili_prenedor
   41.0       26/05/2010   DRA                41. 0011288: CRE - Modificacion de propuestas retenidas
   42.0       01/06/2010   DRA                42. 0014754: CRE800- Edicion propuesta suplemento poliza 2005407
   43.0       04/06/2010   ETM                43. 0014827: CEM800 - Contractacio: control de productes contractable per agent de context
   44.0       08/06/2010   RSC                44. 0013832: APRS015 - suplemento de aportaciones unicas
   45.0       30/07/2010   XPL                45. 14429: AGA005 - Primes manuals pels productes de Llar
   46.0       01/10/2010   FAL                46. 0016170: CRT101 - Si un producto tiene una actividad definida escoja esa actividad por defecto
   47.0       05/08/2010   VCL                46. 0015468: GRC - Busqueda de polizas. A�adir No.Solicitud
   48.0       22/11/2010   JBN                48. 0016410: JBN - CRT003 - Clausulas con parametros
   49.0       22/11/2010   APD                49. 16768: APR - Implementacion y parametrizacion del producto GROUPLIFE (II)
   50.0       02/02/2011   RSC                50. 0017341: APR703 - Suplemento de preguntas - FlexiLife
   51.0       16/02/2011   JMP                51. 0015137: No se pasa correctamente la fecha de efecto en la valildacion de preguntas de garantia
   52.0       14/04/2011   DRA                52. 0018024: CRT - Parametrizar comision de seguro
   53.0       27/04/2011   JMC                53. 0016730: CRT902 - Aplicar visibilidad oficina en consultas masivas
   54.0       29/04/2011   ICV                54. 0017950: CRT003 - Alta rapida poliza correduria (simplificar campos)
   55.0       20/05/2011   ICV                55. 0018610: CRT901 - Nuevo requerimiento nota informativa
   56.0       20/05/2011   APD                56. 0018362: LCOL003 - Parametros en clausulas y visualizacion clausulas automaticas
   57.0       30/06/2011   DRA                57. 0018893: CRE - No es pot donar d'alta un nou assegurat
   58.0       15/07/2011   JTS                58. 0018926: MSGV003- Activar el suplement de canvi de forma de pagament
   59.0       22/07/2011   DRA                59. 0017255: CRT003 - Definir propuestas de suplementos en productos
   60.0       28/07/2011   DRA                60. 0019077: CIV802-Error en la p?lissa 70001084
   61.0       30/08/2011   JMF                61. 0019332: LCOL001 -numeracion de polizas y de solicitudes
   62.0       30/08/2011   JMF                62. 0018910: CIV801- Error en traspasos de entrada (II)
   63.0       05/09/2011   ICV                63. 0019287: ENSA102-Seleccionar cobrador bancario desde la pantalla de gestion
   64.0       21/09/2011   RSC                64. 0018351: LCOL003 - Documentacion requerida en contratacion y suplementos
   65.0       27/09/2011   DRA                65. 0018682: AGM102 - Producto SobrePrecio- Definicion y Parametrizacion
   66.0       21/10/2011   DRA                66. 0019863: CIV903 - Desconnexio de les crides a Eclipse pels productes PPA i PIES
   67.0       25/10/2011   JMF                67. 0019745: CRE800 - Edicio de propostes
   68.0       21/10/2011   ICV                68. 0019152: LCOL_T001- Beneficiari Nominats - LCOL_TEC-02_Emision_Brechas01
   69.0       27/09/2011   DRA                69. 0019069: LCOL_C001 - Co-corretaje
   70.0       17/11/2011   XPL                70. 0019684: LCOL - P.S.U. Adaptacion a Nuevo Modulo PSU
   71.0       26/11/2011   DRA                71. 0020234: AGM - Error en la pantalla AXISCTR005 (Multiriesgo innominado)
   72.0       02/01/2012   DRA                72. 0020431: CRE800 - Alta assegurats polisses col.lectives
   73.0       17/01/2012   RSC                73. 0020672: LCOL_T001-LCOL - UAT - TEC: Suplementos
   74.0       03/01/2012   JMF                74. 0020761 LCOL_A001- Quotes targetes
   75.0       03/01/2012   JMF                75. 0020671: LCOL_T001-LCOL - UAT - TEC: Contratacion
   76.0       09/01/2012   DRA                76. 0020498: LCOL_T001-LCOL - UAT - TEC - Beneficiaris de la p?lissa
   77.0       20/02/2012   DRA                77. 0020741: GIP998 - Imprimir os segurados no condicionado (GIP-016)
   78.0       07/03/2012   FAL                78. 0020694: GIP701-ID11- PUNTO B: GESTION DE PEDIDOS DE COTIZACION DE LOS AGENTES
   79.0       01/03/2012   DRA                79. 0021467: AGM- Quitar en la descripcion de riesgos el plan y al final se muestran caracteres raros
   80.0       28/02/2012   DRA                80. 0021469: AGM - Circuito de contratacion de poliza
   81.0       08/03/2012   JMF                0021592: MdP - TEC - Gestor de Cobro
   82.0       17/04/2012   RSC                0020694: GIP701-ID11- PUNTO B: GESTION DE PEDIDOS DE COTIZACION DE LOS AGENTES
   83.0       20/04/2012   APD                0021709: MDP - TEC - Datos Tomador en Simulaci�n
   84.0       17/04/2012   ETM                84.0021924: MDP - TEC - Nuevos campos en pantalla de Gesti�n (Tipo de retribuci�n, Domiciliar 1� recibo, Revalorizaci�n franquicia)
   85.0       23/04/2011   MDS                85. 0021907: MDP - TEC - Descuentos y recargos (t�cnico y comercial) a nivel de p�liza/riesgo/garant�a
   86.0       18/06/2012   MDS                86. 0021924: MDP - TEC - Nuevos campos en pantalla de Gesti�n (Tipo de retribuci�n, Domiciliar 1� recibo, Revalorizaci�n franquicia)
   87.0       04/06/2012   ETM                87. 0021657: MDP - TEC - Pantalla Inquilinos y Avalistas
   88.0       01/08/2012   FPG                88. 0023075: LCOL_T010-Figura del pagador
   89.0       14/08/2012   DCG                89. 0023183: LCOL_T020-COA-Circuit d'alta de propostes amb coasseguran
   90.0       03/09/2012   JMF                90. 0022701: LCOL: Implementaci�n de Retorno
   91.0       26/09/2012   DRA                91. 0022839: LCOL_T010-LCOL - Funcionalidad Certificado 0
   92.0       16/10/2012   DRA                92. 0022402: LCOL_C003: Adaptacin del co-corretaje
   93.0       18/10/2012   DRA                93. 0023911: LCOL: Aadir Retorno para los productos Colectivos
   94.0       06/11/2012   XVM                94. 0023183: LCOL_T020-COA-Circuit d'alta de propostes amb coasseguran
   95.0       05/12/2012   APD                95. 0024278: LCOL_T010 - Suplementos diferidos - Cartera - colectivos
   96.0       10/12/2012   FAL                96. 0023860: LCOL - Parametrizaci�n y suplementos - Vida Grupo
   97.0       14/12/2012   FPG                97. 0024240: LCOL899 - Piloto Vida Grupo
   98.0       27/12/2012   ECP                98. 0024655: LCOL_T010-LCOL - Revision incidencias qtracker (II)
   99.0       03/01/2013   APD                99. 0023940: LCOL_T010-LCOL - Certificado 0 renovable - Renovaci?n colectivos
   100.0       18/01/2013   AEG               100. 0024505: LCOL_T001-QTracker: 4877: Hace cesion cuando hay movimientos de ahorro
   101.0       29/01/2013   JMF               0025862: LCOL: Suplemento Retorno
   102.0       31/01/2013   FAL               0025583: LCOL - Revision incidencias qtracker (IV)
   103.0       20/12/2012   MDS               0024717: (POSPG600)-Parametrizacion-Tecnico-Descripcion en listas Tipos Beneficiarios RV - Cambiar descripcion en listas Tipos Beneficiar
   104.0       07/02/2013   JDS                104. -0025583: LCOL - Revision incidencias qtracker (IV)
   105.0       21/02/2013   JMC               0025853: LCOL_T010-LCOL - Revision incidencias qtracker (IV) 24/01/2013
   106.0       12/03/2013   JMF          0026341: LCOL: Comisiones de recibos
   107.0       12/03/2013   svj          0026343: LCOL: Reemplazos autos
   108.0       08/03/2013   JMC          108. 0026261: LCOL_T010-LCOL - Revision incidencias qtracker (IV)
   109.0       11/03/2013   AEG          109. 0024685: (POSDE600)-Desarrollo-GAPS Tecnico-Id 5
   110.0       25/02/2013   NMM          110. 24735: (POSDE600)-Desarrollo-GAPS Tecnico-Id 33 - Mesadas Extras diferentes a la propia (preguntas)
   111.0       21/03/2013   ECP          111. 0025859: LCOL_T031-LCOL - AUT - Pantalla conductores (axisctr061) Id 428. Nota 141027
   112.0       02/04/2013   dlF          112. 0026588: AGM998-Problema al editar solicitud de Sobreprecio.
   113.0       09/04/2013   JGR          113. 0026578: LCOL_A005-Error en alta de propuesta producto autos en entorno LCOL Fase 3 al en p?lizas domiciliadas.
   114.0       10/04/2013   MMS          114. 0025584: POSDE600-(POSDE600)-Desarrollo-GAPS Tecnico-Id 6 - Tipo de duracion de poliza ¿hasta edad¿ y edades permitidas por producto. Agregamos NEDAMAR a f_grabardatosgestion
   115.0       16/04/2013   FAL          115. 0026100: RSAG101 - Producto RC Argentina. Incidencias
   116.0       29/04/2013   APD          116. 0025911: LCOL_T031-axisctr207 - No es baixen els capitals a les garanties dependents
   117.0       23/05/2013   APD          117. 0026419: LCOL - TEC - Revisi�n Q-Trackers Fase 3A
   118.0       04/06/2013   JDS          118. 0025221: LCOL_T031-LCOL - Fase 3 - Desarrollo Inspecci�n de Riesgo
   119.0       02/07/2013   ECP          119. 0027539: LCOL_T010-LCOL - Revision incidencias qtracker (VII). Nota 148001
   120.0       05/07/2013   DCT          120. 0027048: LCOL_T010-Revision incidencias qtracker (V)
   121.0       19/07/2013   DCT          121. 0027539: LCOL_T010-LCOL - Revision incidencias qtracker (VII)
   122.0       02/08/2013   SHA          122. 0027505: POSS518 (POSSF200)- Resolucion de Incidencias FASE 1-2: Tecnico - Generales
   123.0       02/08/2013   LPP          123. 0027268: Recomponemos el objeto de riesgos para que no queden registros vac�os en ¿l cuando se borra un registro
   Fallaba a la hora de borrar un riesgo en multiriesgos
   124.0       12/08/2013   RCL          124. 0027610: LCOL - AUT - No borrar simulaci?n cuando se pasa a propuesta (f_grabarsimulacion_sinvalidar)
   125.0       14/08/2013   MMM          125. 0027896: LCOL_T020-Qtracker 8867 COASEGURADORAS NO ESTN LLEGANDO A JDE
   126.0       19/08/2013   KBR          126. 0027896: LCOL_T020-Qtracker 8867 Error en la creaci�n de cuadro de coaseguro
   127.0       25/09/2013   RCL          127. 0025599: LCOL - PER - Revision incidencias qtracker y Releases - Error en reemplazos con tomador <> asegurado
   128.0       30/09/2013   JMF          128. 0027305: POSS518 (POSSF200)- Resolucion de Incidencias FASE 1-2: Tecnico - Conmutacion Pensional
   129.0       28/10/2013   RCL          129. 0028455: LCOL_T031- TEC - Revisi�n Q-Trackers Fase 3A II
   130.0       05/11/2013   FPG          130. 0028263: Proceso Emision Vida Grupo - Desarrollo modificaciones de iAxis para BPM
   131.0       14/11/2013   JDS          131. 0028504: LCOL_C001-LCOL: Revisi?n error comisi?n especial p?liza
   132.0       08/10/2013   HRE          132. Bug 0028462: HRE - Cambio dimension campo NPOLIZA
   133.0       20/12/2013   HRE          133. Bug 0027417: HRE - Actualizacion mensajes
   134.0       16/01/2014   MMS          134. 0027305: POSS518 (POSSF200)- Resolucion de Incidencias FASE 1-2: Tecnico - Conmutacion Pensional
   135.0       31/01/2014   JDS          135. 0029582: LCOL_T010-Revision incidencias qtracker (2014/01)
   136.0       04/02/2014   JDS          136. 0029582: LCOL_T010-Revision incidencias qtracker (2014/01)
   137.0       11/02/2014   JDS          137. 0029582: LCOL_T010-Revision incidencias qtracker (2014/01)
   138.0       31/01/2014   DEV          138. 0027305: POSS518 (POSSF200)- Resolucion de Incidencias FASE 1-2: Tecnico - Conmutacion Pensional
   139.0       14/04/2014   FAL          139. 0029965: RSA702 - GAPS renovaci�n
   140.00      14/05/2014   FAC          140 .0027305: POSS518 (POSSF200)- Resolucion de Incidencias FASE 1-2: Tecnico - Conmutacion Pensional
   141.0       23-06-2014   SSM          141  (30145/175326) LCOL999-Nueva Estructura de Tarifas AUTOS  - Modificaci�n, se a�ade parametro pcodgrup a function pac_bonfran.f_resuelve_formula
   142.0       06/06/2014   ELP          142  0027500: Nueva operativa mandatos rsa
   143.0       19/11/2014   FAL          143  0033510: COLM004-Tarificaci�n colectivo complementario de salud.
   144.0       16/10/2014   MMS          144. 0032676: COLM004-Fecha fin de vigencia de mandato. Campo no obligatorio a informar en la pantallas que se informa la fecha de firma
   145.0       31/03/2015   FAL          145. 0034462: I - GTEC2 + GTEC3. Suplementos Convenios
   146.0       27/07/2015   IGIL         146. 0036596: MSV - Alta , baja y modificacion de citas medicas
   147.0       09/12/2015   FAL          147. 0036730: I - Producto Subsidio Individual
   148.0       16/12/2015   FAL          148. 0039240: Cambio Domiciliacion Bancaria (bug hermano interno)
   149.0       22/03/2016   JCP          149. 0040860: Creacion f_val_tomador_cbancar
   150.0       11/04/2016   JMT          150. 0026373: ENSA998-Envio Autom?tico de email para os contribuintes
   151.0       17/03/2016   JAEG         151. 41143/229973: Desarrollo Dise�o t�cnico CONF_TEC-01_VIGENCIA_AMPARO
   152.0       09/06/2016   APR          152. CONF-55: Desarrollo Dise�o t�cnico VISUALIZAR EL % DE COMISI�N DESDE PROPUESTAS DE ALTA Y EN CONSULTA DE P�LIZAS
   153.0       17/06/2016   VCG          153. AMA-187-Realizar el desarrollo del GAP 114
   154.0       05/08/2016   VCG          154. DESARROLLO CONF_TEC-08_ADAPTACION_CORE_II_V2.0_GTEC45
   155.0       07/03/2016   JAEG         155. 40927/228750: Desarrollo Dise�o t�cnico CONF_TEC-03_CONTRAGARANTIAS
   156.0       12/09/2016   ASDQ         156. CONF-209-GAP_GTEC50 - Productos multimoneda
   157.0       22/08/2016  HRE           157  CONF-186: Se incluyen procesos para gestion de marcas.
   158.0       23/01/2018   JLTS         158  CONF-1243 QT_724: Grabar datos de fechas para Vigencia Amparos (SUPLEMENTO 918)
   159.0       05/02/2018   JLTS         159  CONF-1243 QT_728: Error en traslados - iAxis est� devolviendo prima
   160.0       12/04/2018   VCG          160  QT-0002016: Suplementos Reaseguro Back to Back
   161.0       27/02/2019   ACL          TCS_827 Se agrega la funci�n f_consultapoliza_contrag.
   162.0       11/03/2019   DFR          162  IAXIS-2016: Scoring
   163.0       13/03/2019   CJMR         163 IAXIS-3059: Marcas
   164.0       19/03/2019   CJMR         164. IAXIS-3194: Adici�n de nuevos campo de b�squeda
   165.0       22/03/2019   CJMR         165. IAXIS-3195: Adici�n de nuevos campo de b�squeda
   166.0       09/04/2019   CJMR         166. IAXIS-3396: Se agrega campo para ajustar cambios de fechas de vigencias
   167.0       05/07/2019    ECP         167. IAXIS-4457. Tasas Puras
   168.0       06/07/2019   GEK          168. IAXIS-4205: Exclusi�n de cl�usulas
   169.0       10/074/2019  ECP          169. IAXIS-3981  Marcas Integrantes Consorcios y Uniones Temporales
   170.0       18/07/2019   CJMR         170. IAXIS-4779 Tarifaci�n RC General
   171.0       18/07/2019   SPV          167. IAXIS-4201 Deducibles
   172.0       08/08/2019   ECP          172. IAXIS-4985 Tarifa Endosos
   173.0       15/08/2019   ECP          173. IAXIS-4205 Endosos RC: Ajuste de actividad
   174.0       23/08/2019   DFRP         174. IAXIS-5093: Verificaci�n de campo de Actividad, amparos y otros campos en cotizaciones guardadas 
   175.0       04/09/2019   CJMR         175. IAXIS-5222. Fechas de vigencia en Amparo de salarios (7005) - Cumplimiento 
   176.0       08/09/2019   ECP          176.  IAXIS-4082. Convenio RC 
   177.0       13/09/2019   SPV          177. IAXIS-5247 Deducibles para Suplementos (Endosos)
   178.0       17/09/2019   CJMR         178. IAXIS-5281 Beneficiario TERCEROS AFECTADOS no debe ser eliminado en RC
   179.0       18/10/2019   ECP          179. IAXIS-4082. Convenio RC 
   180.0       23/09/2019   CJMR         180. IAXIS-5423. Ajustes deducibles.
   181.0       28/11/2019   JLTS         181. IAXIS-5420. Ajuste al riesgo para que tome el primer asegurado (parproducto = RIESGO_EN_ASEG_1)
   182.0       02/01/2020   JLTS         182. IAXIS-3264. Se ajusta la funci�n f_tarificar para calculo de Baja de Amparo (Supl. 239)
   183.0       21/01/2020   JLTS         183. IAXIS-10627. Se ajust� la funci�n f_leecorretaje incluyendo el par�metro NMOVIMI
   184.0       04/02/2020   CJMR         184. IAXIS-3394. Soluci�n bug IAXIS-11908
   185.0       20/02/2020   ECP          185. IAXIS-11905. Error pantalla Gesti�n Suplementos
   186.0       25/02/2020   CJMR         186. IAXIS-12903. Soluci�n al bug
   186.0       02/03/2020   JLTS         186. IAXIS-5420. Ajuste de la posibilidad de borrar asegurado, generaba error al borrarlo
   ******************************************************************************/
   e_object_error   EXCEPTION;
   e_param_error    EXCEPTION;

   /*************************************************************************
   Define con que tablas se trabajara
   param in pmode     : mode en que se debe trabajar
   param out mensajes : mensajes de error
   *************************************************************************/
   PROCEDURE define_mode (pmode IN VARCHAR2, mensajes OUT t_iax_mensajes)
   IS
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (20)  := 'pmode=' || pmode;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.Define_Mode';
   BEGIN
      SELECT DECODE (NVL (pmode, 'SOL'),
                     'EST', 'EST',
                     'SOL', 'SOL',
                     'POL', 'POL',
                     'SOL'
                    )
        INTO vpmode
        FROM DUAL;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
   END define_mode;

   /* Funciones de uso interno */
   /*************************************************************************
   Crea los objetos necesarios
   param in out mensajes : mensajes de error
   *************************************************************************/
   PROCEDURE inicializaobjetos (mensajes IN OUT t_iax_mensajes)
   IS
      dtpoliza           ob_iax_detpoliza;
      triesgos           t_iax_riesgos;
      gestion            ob_iax_gestion;
      nerr               NUMBER;
      vpasexec           NUMBER (8)                    := 1;
      vparam             VARCHAR2 (1)                  := NULL;
      vobject            VARCHAR2 (200)
                                    := 'PAC_IAX_PRODUCCION.InicializaObjetos';
      vcmodextra         NUMBER;
      /* Bug 8745 - 27/02/2009 - RSC - Adaptacion iAxis a productos colectivos con certificados*/
      vcsubpro           NUMBER;
      vpolcol            NUMBER;
      /* Fin Bug 8745*/
      /* Bug 17341 - RSC - 02/02/2011 - APR703 - Suplemento de preguntas - FlexiLife*/
      v_det_poliza       ob_iax_detpoliza;
      v_pol              NUMBER;
      /* Fin Bug 17341*/
      /* Bug.: 17950 - ICV - 29/04/2011*/
      v_sperson          NUMBER;
      v_sperson_est      NUMBER;
      v_tdomici          VARCHAR2 (60);
      v_cprovin          NUMBER;
      v_cpoblac          NUMBER;
      v_cpostal          VARCHAR2 (30);
      v_tnatrie          VARCHAR2 (300);
      v_tnatrie1         VARCHAR2 (300);
      v_cpais            NUMBER;
      v_indice_riesgos   NUMBER;
      t_aut              t_iax_autriesgos              := t_iax_autriesgos
                                                                          ();
      t_autconduct       t_iax_autconductores      := t_iax_autconductores
                                                                          ();
      t_pers             t_iax_personas                := t_iax_personas ();
      t_gries            t_iax_gestriesgos            := t_iax_gestriesgos
                                                                          ();
      v_cversion         aut_versiones.cversion%TYPE;
      v_cmodelo          aut_versiones.cmodelo%TYPE;
      v_cmarca           aut_versiones.cmarca%TYPE;
      vsolicitud         NUMBER;
   /*Fin Bug.: 17950*/
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         dtpoliza := ob_iax_detpoliza ();
      ELSE
         vpasexec := 2;
         dtpoliza := poliza.det_poliza;
      END IF;

      vpasexec := 3;

      IF dtpoliza.gestion IS NULL
      THEN
         vpasexec := 4;
         gestion := ob_iax_gestion ();
      ELSE
         vpasexec := 5;
         gestion := dtpoliza.gestion;
      END IF;

      vpasexec := 6;
      dtpoliza.sseguro := vsolicit;
      dtpoliza.ssegpol := vssegpol;

      /* ini BUG 0019332 - 30/08/2011 - JMF*/
      /*    dtpoliza.npoliza := vsolicit;   --// ACC si algo surt raro mirar auqi*/
      DECLARE
         v_numaddpoliza   NUMBER;
         v_calemp         NUMBER;
      BEGIN
         v_calemp := NVL (vempresa, pac_md_common.f_get_cxtempresa);
         v_numaddpoliza :=
                     pac_parametros.f_parempresa_n (v_calemp, 'NUMADDPOLIZA');
         dtpoliza.npoliza := vsolicit + NVL (v_numaddpoliza, 0);
      END;

      /* fin BUG 0019332 - 30/08/2011 - JMF*/
      IF NOT issuplem
      THEN
         pac_iax_suplementos.lstmotmov := t_iax_motmovsuple ();
      END IF;

      /* Bug 8745 - 27/02/2009 - RSC - Adaptacion iAxis a productos colectivos con certificados*/
      vcsubpro := pac_mdpar_productos.f_get_subtipoprod (vproducto);

      IF    vcsubpro = 3
         OR NVL (f_parproductos_v (vproducto, 'ADMITE_CERTIFICADOS'), 0) = 1
      THEN
         /*Colectivo individualizado + Colectivo multiple*/
         vpolcol :=
            pac_iaxpar_productos.f_get_parproducto ('NPOLIZA_COLECTIVO',
                                                    vproducto
                                                   );

         IF vpolcol IS NOT NULL AND vpolcol != 0
         THEN
            dtpoliza.npoliza := vpolcol;
         /*JTS - 03/11/2010 - BUG16106*/
         ELSE
            /* Bug 17341 - RSC - 02/02/2011 - APR703 - Suplemento de preguntas - FlexiLife*/
            IF NVL (f_parproductos_v (vproducto, 'ADMITE_CERTIFICADOS'), 0) =
                                                                            1
            THEN
               IF issave
               THEN
                  vsolicitud := vsolicit;
               ELSE
                  vsolicitud := dtpoliza.npoliza;
               END IF;

               /* BUG20431:DRA:02/01/2012:Inici*/
               nerr :=
                  pac_md_obtenerdatos.f_inicializa (vpmode,
                                                    vsolicitud,
                                                    vnmovimi,
                                                    mensajes
                                                   );
               v_det_poliza := pac_md_obtenerdatos.f_leedatospoliza (mensajes);

               IF issuplem
               THEN
                  IF v_det_poliza.ncertif = 0
                  THEN
                     dtpoliza.npoliza := vsolicitud;
                  ELSE
                     dtpoliza.npoliza := v_det_poliza.npoliza;
                  END IF;
               ELSE
                  IF ismodifprop
                  THEN
                     /* ini BUG 0019745 - 25/10/2011 - JMF*/
                     IF v_det_poliza.npoliza IS NULL
                     THEN
                        dtpoliza.npoliza := vsolicitud;
                     ELSE
                        dtpoliza.npoliza := v_det_poliza.npoliza;
                     END IF;
                  /* fin BUG 0019745 - 25/10/2011 - JMF*/
                  ELSE
                     IF NVL (v_det_poliza.ncertif, 0) <> 0
                     THEN
                        dtpoliza.npoliza := v_det_poliza.npoliza;
                     ELSE
                        dtpoliza.npoliza := vsolicitud;
                     END IF;
                  END IF;
               END IF;
            /* BUG20431:DRA:02/01/2012:Fi*/
            ELSE
               /* Fin Bug 17341*/
               dtpoliza.npoliza := vsolicit;
            /* Bug 17341 - RSC - 02/02/2011 - APR703 - Suplemento de preguntas - FlexiLife*/
            END IF;
         /* Fin Bug 17341*/
         END IF;
      /*Fi BUG16106*/
      END IF;

      /* Fin Bug 8745*/
      dtpoliza.nmovimi := 0;
      dtpoliza.cmodali := vmodalidad;
      dtpoliza.sproduc := vproducto;
      dtpoliza.cagente := vagente;
      /* Bug 10665 - 02/11/2009 - AMC*/
      /*dtpoliza.cactivi := 0;   --BUG 9916 02/07/2009: ETM*/
      /* Fi Bug 10665 - 02/11/2009 - AMC*/
      dtpoliza.nmovimi := NVL (vnmovimi, 1);
      vpasexec := 7;
      dtpoliza.ccolect := vccolect;
      dtpoliza.cramo := vcramo;
      dtpoliza.ctipseg := vctipseg;
      dtpoliza.cempres := NVL (vempresa, pac_md_common.f_get_cxtempresa);
      vpasexec := 8;
      pac_md_produccion.inicializaobjetos (dtpoliza, gestion, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 9;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 10;
      dtpoliza.nsuplem := 0;
      dtpoliza.crecman := 0;

      /* bug 16800 - 30/11/2010 - AMC*/
      /*Bug.: 18610 - ICV - 20/05/2011*/
      IF isnotainfor
      THEN
         dtpoliza.csituac :=
                      NVL (f_parproductos_v (vproducto, 'CSIT_NOTAINFOR'), 4);
      ELSE
         dtpoliza.csituac :=
                           NVL (f_parproductos_v (vproducto, 'CSIT_PROP'), 4);
      END IF;

      /*fi Bug.: 18610*/
      /* Fi bug 16800 - 30/11/2010 - AMC*/
      dtpoliza.nanuali := 1;
      dtpoliza.casegur := 0;
      dtpoliza.creafac := 0;
      dtpoliza.ctiprea := 0;
      dtpoliza.ctipcol := 1;
      dtpoliza.ctipcoa := 0;
      vpasexec := 11;
      gestion.fefecto := NVL (vfefecto, f_sysdate);
      /* Per defecte s'agafa l'idioma de la empresa.#6.*/
      gestion.cidioma :=
         pac_parametros.f_parempresa_n (pac_md_common.f_get_cxtempresa,
                                        'IDIOMA_DEF'
                                       );
      nerr :=
         pac_md_produccion.f_set_calc_fefecto (dtpoliza.sproduc,
                                               gestion.fefecto,
                                               mensajes
                                              );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 12;
            RAISE e_object_error;
         END IF;
      END IF;

      gestion.ctipcom := 0;
      /*gestion.ccobban :=1 ;*/
      gestion.cforpag := dtpoliza.cpagdef;

      /*forma pagament defecte*/
      /* Bug 16170 - 01/10/2010. FAL*/

      IF gestion.cactivi is NULL THEN  -- IAXIS-4205 CJMR 15/08/2019
        IF pac_seguros.ff_get_actividad (vsolicit, 1, 'EST') IS NULL THEN -- IAXIS-5093 23/08/2019
          BEGIN
            SELECT NVL (MIN (a.cactivi), 0)
           /* ponemos la 0 por defecto pero esto nunca deberia pasar*/
              INTO   gestion.cactivi
              FROM activiprod a, productos p
             WHERE a.cramo = p.cramo
               AND a.cmodali = p.cmodali
               AND a.ctipseg = p.ctipseg
               AND a.ccolect = p.ccolect
               AND p.sproduc = vproducto;
          EXCEPTION
            WHEN OTHERS THEN
              gestion.cactivi := 0;
          /*BUG 9916 02/07/2009: ETM : a�adimos*/
          END;
        -- Inicio IAXIS-5093 23/08/2019
        ELSE
           gestion.cactivi := pac_seguros.ff_get_actividad (vsolicit, 1, 'EST');
        END IF;     
        -- Fin IAXIS-5093 23/08/2019
      END IF;  -- IAXIS-4205 CJMR 15/08/2019

      /* Fi Bug 16170*/
      vpasexec := 13;
      dtpoliza.gestion := gestion;
      poliza.det_poliza := dtpoliza;
      vpasexec := 14;
      /* Bug 16170 - 01/10/2010. FAL. Asigna actividad*/
      nerr := f_set_actividad (gestion.cactivi, mensajes);

      /* lo asigno*/
      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 18;
            RAISE e_object_error;
         END IF;
      END IF;

      /* Fi Bug 16170*/
      /* JRH 07/2008 Lo quiramos de aqui nerr:=PAC_MD_PRODUCCION.F_Set_Calc_Vencim_Nduraci(gestion,mensajes);*/
      vpasexec := 15;
      poliza.det_poliza.gestion := gestion;
      vpasexec := 16;
      nerr :=
         pac_md_produccion.f_calcula_nrenova (dtpoliza.sproduc,
                                              NVL (gestion.fefecto, f_sysdate),
                                              dtpoliza,
                                              mensajes
                                             );
      /* Recuperamos los meses con paga extra*/
      vpasexec := 17;
      poliza.det_poliza.nmesextra :=
         pac_md_obtenerdatos.f_leermesesextra (poliza.det_poliza.sseguro,
                                               mensajes
                                              );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 18;
            RAISE e_object_error;
         END IF;
      END IF;

      IF poliza.det_poliza.nmesextra IS NULL
      THEN
         poliza.det_poliza.nmesextra :=
            pac_md_obtenerdatos.f_leermesesextrapro
                                                  (poliza.det_poliza.sproduc,
                                                   vcmodextra,
                                                   mensajes
                                                  );
         poliza.det_poliza.cmodextra := vcmodextra;

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 19;
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      /* Bug.: 17950 - ICV - 29/04/2011*/
      /*Creamos los riesgos por defectos*/
      IF dtpoliza.csituac = 14
      THEN
         nerr :=
            pac_md_produccion.f_get_riesgo_defecto
                                             (pac_md_common.f_get_cxtempresa,
                                              poliza.det_poliza.cobjase,
                                              poliza.det_poliza.sproduc,
                                              gestion.cactivi,
                                              v_sperson,
                                              v_tdomici,
                                              v_cpais,
                                              v_cprovin,
                                              v_cpoblac,
                                              v_cpostal,
                                              v_tnatrie,
                                              v_cversion,
                                              v_cmodelo,
                                              v_cmarca,
                                              mensajes
                                             );

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 20;
               RAISE e_object_error;
            END IF;
         END IF;

         /*Dependiendo del cobjase insertamos el riesgo de una forma o de otra*/
         IF poliza.det_poliza.cobjase = 1
         THEN
            /*Persona*/
            IF v_sperson IS NOT NULL
            THEN
               /*Pasamos la persona a las est*/
               pac_persona.traspaso_tablas_per (v_sperson, v_sperson_est);
               nerr :=
                  pac_iax_produccion.f_insertasegurado (v_sperson_est,
                                                        NULL,
                                                        mensajes
                                                       );

               IF mensajes IS NOT NULL
               THEN
                  IF mensajes.COUNT > 0
                  THEN
                     vpasexec := 20;
                     RAISE e_object_error;
                  END IF;
               END IF;
            END IF;
         ELSIF poliza.det_poliza.cobjase = 2
         THEN
            /*domicilio*/
            IF     v_tdomici IS NOT NULL
               AND v_cprovin IS NOT NULL
               AND v_cpoblac IS NOT NULL
               AND v_cpostal IS NOT NULL
            THEN
               nerr :=
                  pac_iax_produccion.f_grabariedomicilio (1,
                                                          v_tdomici,
                                                          v_cpostal,
                                                          v_cpoblac,
                                                          v_cprovin,
                                                          v_cpais,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          NULL,
                                                          mensajes
                                                         );

               IF mensajes IS NOT NULL
               THEN
                  IF mensajes.COUNT > 0
                  THEN
                     vpasexec := 20;
                     RAISE e_object_error;
                  END IF;
               END IF;
            END IF;
         ELSIF poliza.det_poliza.cobjase IN (3, 4)
         THEN
            /*descripcion*/
            nerr :=
               pac_iax_produccion.f_grabariedescripcion (1,
                                                         v_tnatrie,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         mensajes
                                                        );

            IF mensajes IS NOT NULL
            THEN
               IF mensajes.COUNT > 0
               THEN
                  vpasexec := 20;
                  RAISE e_object_error;
               END IF;
            END IF;
         ELSIF poliza.det_poliza.cobjase = 5
         THEN
            /*Autos*/
            /*Pasamos la persona a las est e inicializamos el objeto de riesgos y el de asegurados.*/
            pac_persona.traspaso_tablas_per (v_sperson, v_sperson_est);
            nerr :=
               pac_iax_produccion.f_insertasegurado (v_sperson_est,
                                                     NULL,
                                                     mensajes
                                                    );

            IF mensajes IS NOT NULL
            THEN
               IF mensajes.COUNT > 0
               THEN
                  vpasexec := 20;
                  RAISE e_object_error;
               END IF;
            END IF;

            /*Creamos autriesgos por cada riesgo*/
            IF     poliza.det_poliza.riesgos IS NOT NULL
               AND poliza.det_poliza.riesgos.COUNT > 0
            THEN
               FOR v_indice_riesgos IN
                  poliza.det_poliza.riesgos.FIRST .. poliza.det_poliza.riesgos.LAST
               LOOP
                  IF poliza.det_poliza.riesgos.EXISTS (v_indice_riesgos)
                  THEN
                     /*ACC corregit 29122008*/
                     IF poliza.det_poliza.cobjase IN (5)
                     THEN
                        /*autos*/
                        /*Inicializamos autriesgos*/
                        t_aut.EXTEND;
                        t_aut (t_aut.LAST) := ob_iax_autriesgos ();
                        t_aut (t_aut.LAST).sseguro := dtpoliza.sseguro;
                        t_aut (t_aut.LAST).nriesgo :=
                           poliza.det_poliza.riesgos (v_indice_riesgos).nriesgo;
                        t_aut (t_aut.LAST).cversion := v_cversion;
                        t_aut (t_aut.LAST).triesgo := v_tnatrie;
                        t_aut (t_aut.LAST).cmodelo := v_cmodelo;
                        t_aut (t_aut.LAST).cmarca := v_cmarca;
                        /*Inicializamos autconductores*/
                        t_autconduct.EXTEND;
                        t_autconduct (t_autconduct.LAST) :=
                                                     ob_iax_autconductores
                                                                          ();
                        t_autconduct (t_autconduct.LAST).sseguro :=
                                                             dtpoliza.sseguro;
                        t_autconduct (t_autconduct.LAST).nriesgo :=
                           poliza.det_poliza.riesgos (v_indice_riesgos).nriesgo;
                        t_autconduct (t_autconduct.LAST).nmovimi :=
                                                             dtpoliza.nmovimi;
                        t_autconduct (t_autconduct.LAST).sperson :=
                                                                v_sperson_est;
                        t_autconduct (t_autconduct.LAST).norden := 0;
                        t_autconduct (t_autconduct.LAST).csexo := NULL;
                        t_autconduct (t_autconduct.LAST).fcarnet := NULL;
                        t_autconduct (t_autconduct.LAST).persona :=
                                                           ob_iax_personas
                                                                          ();
                        t_pers :=
                           poliza.det_poliza.riesgos (v_indice_riesgos).riespersonal;
                        t_autconduct (t_autconduct.LAST).persona :=
                                                         t_pers (t_pers.LAST);
                        t_aut (t_aut.LAST).conductores := t_autconduct;
                        /*Cargamos riesautos en el objeto de riesgos*/
                        poliza.det_poliza.riesgos (v_indice_riesgos).riesautos :=
                                                                        t_aut;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      END IF;

      /*CONF-215-VCG-05/08/2016 ini*/
      /*Se valida poliza.det_poliza.cobjase = 3*/
      IF NVL (pac_parametros.f_parproducto_n (poliza.det_poliza.sproduc,
                                              'DESC_AUTOMATI_RIESGO'
                                             ),
              0
             ) = 1
      THEN
         IF poliza.det_poliza.cobjase IN (3, 4)
         THEN
            nerr :=
               pac_md_produccion.f_get_riesgo_defecto
                                             (pac_md_common.f_get_cxtempresa,
                                              poliza.det_poliza.cobjase,
                                              poliza.det_poliza.sproduc,
                                              gestion.cactivi,
                                              v_sperson,
                                              v_tdomici,
                                              v_cpais,
                                              v_cprovin,
                                              v_cpoblac,
                                              v_cpostal,
                                              v_tnatrie,
                                              v_cversion,
                                              v_cmodelo,
                                              v_cmarca,
                                              mensajes
                                             );

            IF mensajes IS NOT NULL
            THEN
               IF mensajes.COUNT > 0
               THEN
                  vpasexec := 20;
                  RAISE e_object_error;
               END IF;
            END IF;

            /*descripcion*/
            v_tnatrie1 :=
               NVL
                  (pac_parametros.f_parproducto_t (poliza.det_poliza.sproduc,
                                                   'TEXTO_DEFECTO'
                                                  ),
                   'OBJETO:'
                  );
            nerr :=
               pac_iax_produccion.f_grabariedescripcion (1,
                                                         v_tnatrie1,
                                                         NULL,
                                                         NULL,
                                                         NULL,
                                                         mensajes
                                                        );

            IF mensajes IS NOT NULL
            THEN
               IF mensajes.COUNT > 0
               THEN
                  vpasexec := 20;
                  RAISE e_object_error;
               END IF;
            END IF;

-----------------------------------FAC-------------------------
            nerr :=
                 pac_iax_produccion.f_grabariedetalle (1, v_tnatrie, mensajes);

            IF mensajes IS NOT NULL
            THEN
               IF mensajes.COUNT > 0
               THEN
                  vpasexec := 20;
                  RAISE e_object_error;
               END IF;
            END IF;
         END IF;
      END IF;

      /*CONF-215-VCG-05/08/2016 fin*/
      /*Fin Bug.: 17950*/
      vpasexec := 18;

      IF NOT isaltacol OR issuplem
      THEN
         nerr := f_set_isaltacolect (mensajes);

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 18;
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      /* Bug 22839 - RSC - 18/07/2012 - LCOL - Funcionalidad Certificado 0 (Lo movemos aqu arriba!)*/
      IF NVL (pac_parametros.f_parproducto_n (poliza.det_poliza.sproduc,
                                              'ALTACERO_DESCRIPCION'
                                             ),
              0
             ) = 1
      THEN
         IF isaltacol
         THEN
            poliza.det_poliza.cobjase := 3;
         END IF;
      END IF;
   /* Fin Bug 22839*/
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
   END inicializaobjetos;

   /*************************************************************************
   Llena los objetos con los datos segun ssolicit
   param in out mensajes : mensajes de error
   *************************************************************************/
   PROCEDURE llenadatosobjetos (mensajes IN OUT t_iax_mensajes)
   IS
      nerr         NUMBER;
      idtprd       pac_iax_common.prodidentified;
      vpasexec     NUMBER (8)                    := 1;
      vparam       VARCHAR2 (1)                  := NULL;
      vobject      VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.LlenaDatosObjetos';
      vcmodextra   NUMBER;
   BEGIN
      /* BUG20431:DRA:02/01/2012:Inici: Intercanviem l'ordre per inicialitzar abans*/
      vpasexec := 2;
      nerr :=
         pac_md_obtenerdatos.f_inicializa (vpmode,
                                           vsolicit,
                                           vnmovimi,
                                           mensajes
                                          );

      IF nerr = 1
      THEN
         RAISE e_object_error;
      END IF;

      vpasexec := 3;
      inicializaobjetos (mensajes);
      /* BUG20431:DRA:02/01/2012:Fi*/
      vpasexec := 4;
      poliza.det_poliza := pac_md_obtenerdatos.f_leedatospoliza (mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;
      poliza.det_poliza.tomadores :=
                                 pac_md_obtenerdatos.f_leetomadores (mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 7;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 8;
      poliza.det_poliza.preguntas :=
                           pac_md_obtenerdatos.f_leepreguntaspoliza (mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 9;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 10;
      poliza.det_poliza.gestion :=
                              pac_md_obtenerdatos.f_leedatosgestion (mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 11;
            RAISE e_object_error;
         END IF;
      END IF;

      /* BUG16436:DRA:03/11/2010:Inici*/
      vpasexec := 11;
      pac_iaxpar_productos.p_set_prodactiviti
                                      (NVL (poliza.det_poliza.gestion.cactivi,
                                            0
                                           )
                                      );
      /* BUG16436:DRA:03/11/2010:Fi*/
      vpasexec := 12;
      poliza.det_poliza.clausulas :=
                                 pac_md_obtenerdatos.f_leeclausulas (mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 13;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 14;
      poliza.det_poliza.gstcomision :=
                               pac_md_obtenerdatos.f_leegstcomision (mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 15;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 16;
      poliza.det_poliza.riesgos := pac_md_obtenerdatos.f_leeriesgos (mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 17;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 18;
      poliza.det_poliza.primas :=
                 pac_md_obtenerdatos.f_leeprimas (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 19;
            RAISE e_object_error;
         END IF;
      END IF;

      /* Recuperamos los meses con paga extra*/
      vpasexec := 19;
      poliza.det_poliza.nmesextra :=
         pac_md_obtenerdatos.f_leermesesextra (poliza.det_poliza.sseguro,
                                               mensajes
                                              );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 20;
            RAISE e_object_error;
         END IF;
      END IF;

      IF poliza.det_poliza.nmesextra IS NULL
      THEN
         poliza.det_poliza.nmesextra :=
            pac_md_obtenerdatos.f_leermesesextrapro
                                                  (poliza.det_poliza.sproduc,
                                                   vcmodextra,
                                                   mensajes
                                                  );

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 20;
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      vpasexec := 20;
      poliza.det_poliza.modeloinv :=
                          pac_md_obtenerdatos.f_leedistribucionfinv (mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 21;
            RAISE e_object_error;
         END IF;
      END IF;

      /* BUG19069:DRA:05/11/2011:Inici*/
      vpasexec := 22;
      -- INI -IAXIS-10627 -21/01/2020
      poliza.det_poliza.corretaje :=
                                 pac_md_obtenerdatos.f_leecorretaje (null,mensajes);
      -- FIN -IAXIS-10627 -21/01/2020
      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 23;
            RAISE e_object_error;
         END IF;
      END IF;

      /* BUG19069:DRA:05/11/2011:Fi*/
      /* BUG 0021592 - 08/03/2012 - JMF*/
      vpasexec := 25;
      poliza.det_poliza.gestorcobro :=
                                  pac_md_obtenerdatos.f_leegescobro (mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 27;
            RAISE e_object_error;
         END IF;
      END IF;

      /* BUG 21657 --ETM --01/06/2012 -ini*/
      vpasexec := 28;
      poliza.det_poliza.inquiaval :=
                                 pac_md_obtenerdatos.f_leeinquiaval (mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 29;
            RAISE e_object_error;
         END IF;
      END IF;

      /* fin --BUG 21657 --ETM --01/06/2012*/
      /* Bug 0023183 - DCG - 14/08/2012 - LCOL_T020-COA-Circuit d'alta de propostes amb coasseguran*/
      vpasexec := 30;
      poliza.det_poliza.coacuadro :=
         pac_md_obtenerdatos.f_leercoacuadro (poliza.det_poliza.sseguro,
                                              mensajes
                                             );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 31;
            RAISE e_object_error;
         END IF;
      END IF;

      /* Fin Bug 0023183*/
      /*CONVENIOS*/
      vpasexec := 301;

      IF pac_md_convenios_emp.f_es_productoconvenios
                                                    (poliza.det_poliza.sproduc) =
                                                                             1
      THEN
         poliza.det_poliza.convempvers :=
            pac_md_obtenerdatos.f_leer_convempvers
                                                  (poliza.det_poliza.sseguro,
                                                   mensajes
                                                  );

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 31;
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      /*CONVENIOS*/
      -- AGENDA JLTS
      poliza.det_poliza.agensegu :=
         pac_md_obtenerdatos.f_leeragensegu (vpmode,
                                             poliza.det_poliza.sseguro,
                                             mensajes
                                            );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 31;
            RAISE e_object_error;
         END IF;
      END IF;

      -- AGENDA JLTS
      /* ini Bug 0022701 - 03/09/2012 - JMF*/
      vpasexec := 30;
      poliza.det_poliza.retorno := pac_md_obtenerdatos.f_leeretorno (mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 31;
            RAISE e_object_error;
         END IF;
      END IF;

      -- AGENDA JLTS
      /* ini Bug 0022701 - 03/09/2012 - JMF*/
      vpasexec := 30;
      poliza.det_poliza.retorno := pac_md_obtenerdatos.f_leeretorno (mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 31;
            RAISE e_object_error;
         END IF;
      END IF;

      /* fin Bug 0022701 - 03/09/2012 - JMF*/
      /* Ini Bug 28263 - 25-10-2013 - FPG*/
      vpasexec := 40;
      poliza.det_poliza.datos_bpm :=
                              pac_md_obtenerdatos.f_lee_caso_bpmseg (mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 41;
            RAISE e_object_error;
         END IF;
      END IF;
   /* Fin Bug 28263 - 25-10-2013 - FPG*/
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
   END llenadatosobjetos;

   /**/
   /*************************************************************************
   Crea una nueva solicitud
   param out ssolit : devuelve el codigo de la solicitud segun el modo
   param in out     : mensajes de error
   *************************************************************************/
   PROCEDURE crea_solicitud (ssolit OUT NUMBER, mensajes IN OUT t_iax_mensajes)
   IS
      errnum     NUMBER;
      errdes     VARCHAR2 (100);
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.Crea_Solicitud';
   BEGIN
      IF vfefecto IS NULL
      THEN
         vfefecto := f_sysdate;
      END IF;

      IF vpmode = 'SOL'
      THEN
         BEGIN
            SELECT ssolicit.NEXTVAL
              INTO ssolit
              FROM DUAL;
         EXCEPTION
            WHEN OTHERS
            THEN
               errnum := -233;
               errdes := 'Error en sequencia simulaciones';
         END;
      ELSIF vpmode = 'EST'
      THEN
         BEGIN
            SELECT sestudi.NEXTVAL
              INTO ssolit
              FROM DUAL;
         EXCEPTION
            WHEN OTHERS
            THEN
               errnum := -234;
               errdes := 'Error en sequencia estudio';
         END;

         BEGIN
            SELECT sseguro.NEXTVAL
              INTO vssegpol
              FROM DUAL;
         EXCEPTION
            WHEN OTHERS
            THEN
               errnum := -235;
               errdes := 'Error en sequencia seguro';
         END;
      END IF;

      IF errnum <> 0
      THEN
         vpasexec := errnum;
         RAISE e_object_error;
      END IF;

      isnewsol := TRUE;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
   END crea_solicitud;

   /*************************************************************************
   Comprova que existeixi el asegurat
   param in sperson : codigo de persona
   param in out     : mensajes de error
   return           : 0 no existe
   1 existe
   *************************************************************************/
   FUNCTION f_existtomaseg (sperson IN NUMBER, mensajes IN OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      aseg       t_iax_asegurados;
      ries       t_iax_riesgos;
      rie        ob_iax_riesgos;
      nerr       NUMBER           := 0;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_ExistTomAseg';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

      IF ries IS NULL
      THEN
         RETURN 0;
      ELSE
         IF ries.COUNT = 0
         THEN
            RETURN 0;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            RETURN 0;
         END IF;
      END IF;

      FOR vrie IN ries.FIRST .. ries.LAST
      LOOP
         IF ries.EXISTS (vrie)
         THEN
            aseg := pac_iobj_prod.f_partriesasegurado (ries (vrie), mensajes);

            IF aseg IS NULL
            THEN
               RETURN 0;
            END IF;

            IF aseg.COUNT > 0
            THEN
               IF mensajes IS NOT NULL
               THEN
                  IF mensajes.COUNT > 0
                  THEN
                     RETURN 0;
                  END IF;
               END IF;

               FOR vaseg IN aseg.FIRST .. aseg.LAST
               LOOP
                  IF aseg.EXISTS (vaseg)
                  THEN
                     IF     aseg (vaseg).sperson = sperson
                        AND aseg (vaseg).ffecfin IS NULL
                     THEN
                        /* acc.*/
                        RETURN 1;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      END LOOP;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 0;
   END f_existtomaseg;

   /*************************************************************************
   Comprova que existeixi el prenador
   param in sperson : codigo de persona
   param in out     : mensajes de error
   return           : 0 no existe
   1 existe
   *************************************************************************/
   FUNCTION f_existtom (sperson IN NUMBER, mensajes IN OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      tom        t_iax_tomadores;
      nerr       NUMBER          := 0;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_ExistTom';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      tom := pac_iobj_prod.f_partpoltomadores (poliza.det_poliza, mensajes);

      IF tom IS NULL
      THEN
         RETURN 0;
      ELSE
         IF tom.COUNT = 0
         THEN
            RETURN 0;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            RETURN 0;
         END IF;
      END IF;

      FOR vtom IN tom.FIRST .. tom.LAST
      LOOP
         IF tom.EXISTS (vtom)
         THEN
            IF tom (vtom).sperson = sperson
            THEN
               RETURN 1;
            END IF;
         END IF;
      END LOOP;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 0;
   END f_existtom;

   /*************************************************************************
   Comprova el numero asegurats permessos
   param in out     : mensajes de error
   return           : 0 pot afegir com asegurat
   1 no pot afegir com asegurat
   *************************************************************************/
   FUNCTION comprovanumtomaseg (
      sperson    IN       NUMBER,
      mensajes   IN OUT   t_iax_mensajes
   )
      RETURN NUMBER
   IS
      naseg      NUMBER           := 0;
      aaseg      NUMBER           := pac_iaxpar_productos.f_permitirmultiaseg;
      aseg       t_iax_asegurados;
      ries       t_iax_riesgos;
      rie        ob_iax_riesgos;
      nerr       NUMBER           := 0;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.ComprovaNumTomAseg';
   BEGIN
      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

      IF ries IS NULL
      THEN
         RETURN 0;
      ELSE
         IF ries.COUNT = 0
         THEN
            RETURN 0;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            RETURN 0;
         END IF;
      END IF;

      FOR vrie IN ries.FIRST .. ries.LAST
      LOOP
         IF ries.EXISTS (vrie)
         THEN
            aseg := pac_iobj_prod.f_partriesasegurado (ries (vrie), mensajes);

            IF aseg IS NOT NULL
            THEN
               IF aseg.COUNT > 0
               THEN
                  IF mensajes IS NULL
                  THEN
                     FOR vaseg IN aseg.FIRST .. aseg.LAST
                     LOOP
                        IF aseg.EXISTS (vaseg)
                        THEN
                           IF aseg (vaseg).sperson <> sperson
                           THEN
                              naseg := naseg + 1;
                           END IF;
                        END IF;
                     END LOOP;
                  END IF;
               END IF;
            END IF;
         END IF;
      END LOOP;

      IF aaseg = 1 AND naseg >= 1
      THEN
         RETURN 0;
      ELSIF aaseg = 0 AND naseg > 0
      THEN
         RETURN 1;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 0;
   END comprovanumtomaseg;

   /*************************************************************************
   Modifica el tomador para indicar que es asegurado
   param in out tom  : objeto tomadores
   *************************************************************************/
   PROCEDURE p_findistomador (tom IN OUT t_iax_tomadores, sperson IN NUMBER)
   IS
      msj        t_iax_mensajes;
      exist      NUMBER         := 0;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (100) := 'SPERSON= ' || sperson;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.P_FindIsTomador';
   BEGIN
      FOR i IN tom.FIRST .. tom.LAST
      LOOP
         IF tom (i).sperson = sperson
         THEN
            tom (i).isaseg := 1;
         END IF;
      END LOOP;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (msj,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (msj,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (msj,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
   END p_findistomador;

   /*************************************************************************
   Renumera els riscos amb el nriesgo corresponent
   *************************************************************************/
   PROCEDURE p_renumriesgo (
      ries       IN OUT   t_iax_riesgos,
      mensajes   IN OUT   t_iax_mensajes
   )
   IS
      nrie        NUMBER           := 0;
      naseg       NUMBER           := 0;
      vpasexec    NUMBER           := 1;
      aseg        t_iax_asegurados;
      t_riesgos   t_iax_riesgos;
      b_flag      BOOLEAN          := FALSE;
      vparam      VARCHAR2 (500)   := 'valors risc';
      vobject     VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.P_RENUMRIESGO';
   BEGIN
      IF ries IS NOT NULL
      THEN
         IF ries.COUNT > 0
         THEN
            t_riesgos := t_iax_riesgos ();

            FOR vrie IN ries.FIRST .. ries.LAST
            LOOP
               vpasexec := 2;
               b_flag := TRUE;

               IF ries.EXISTS (vrie)
               THEN
                  vpasexec := 3;
                  nrie := nrie + 1;
                  ries (vrie).nriesgo := nrie;
                  aseg :=
                     pac_iobj_prod.f_partriesasegurado (ries (vrie),
                                                        mensajes);
                  vpasexec := 4;

                  IF aseg IS NOT NULL
                  THEN
                     IF aseg.COUNT > 0
                     THEN
                        vpasexec := 8;
                        naseg := 0;

                        FOR vaseg IN aseg.FIRST .. aseg.LAST
                        LOOP
                           vpasexec := 9;

                           IF aseg.EXISTS (vaseg)
                           THEN
                              vpasexec := 10;

                              IF poliza.det_poliza.csubpro = 2
                              THEN
                                 aseg (vaseg).norden := ries (vrie).nriesgo;
                              ELSE
                                 naseg := naseg + 1;
                                 aseg (vaseg).norden := naseg;
                              END IF;

                              vpasexec := 11;
                              aseg (vaseg).nriesgo := ries (vrie).nriesgo;
                              ries (vrie).riesgoase := aseg;
                           END IF;
                        END LOOP;
                     END IF;
                  END IF;

                  t_riesgos.EXTEND;
                  t_riesgos (nrie) := ries (vrie);
               END IF;
            END LOOP;

            IF b_flag
            THEN
               ries := t_riesgos;
            END IF;
         END IF;
      END IF;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
   END p_renumriesgo;

/************************************************************/
/*************************************************************************
Inicializa el package para emision de polizas
param in pmode     : mode en que debe trabajar la aplicacion
param in pproducto : codigo del producto seleccionado
param out          : mensajes de error
return             : 0 todo ha sido correcto
1 ha habido un error
*************************************************************************/
   FUNCTION f_inicializa (
      pmode       IN       VARCHAR2,
      pproducto            NUMBER,
      pcagente             NUMBER,
      pmodopant   IN       VARCHAR2 DEFAULT NULL,
      /*Bug.: 18610 - ICV - 20/05/2011*/
      pssolicit   OUT      NUMBER,
      purl        OUT      VARCHAR2,
      mensajes    OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      idtprd        pac_iax_common.prodidentified;
      nerror        NUMBER;
      vpasexec      NUMBER (8)                         := 1;
      vparam        VARCHAR2 (500)
                           := 'pmode ' || pmode || ' pproducto ' || pproducto;
      vobject       VARCHAR2 (200)       := 'PAC_IAX_PRODUCCION.F_Inicializa';
      v_error       NUMBER;
      /* BUG 0022839 - FAL - 24/07/2012*/
      v_cagente     prodherencia_colect.cagente%TYPE;
      v_codi        agentes.cagente%TYPE;
      v_nombre      VARCHAR2 (2000);
      v_nnumide     per_personas.nnumide%TYPE;
      v_ccomisi     agentes.ccomisi%TYPE;
      v_ctipage     agentes.ctipage%TYPE;
      v_cpadre      redcomercial.cpadre%TYPE;
      v_tsucursal   VARCHAR2 (2000);
      cur           sys_refcursor;
      visible       NUMBER;                   --inc 1916 KJSC CONF 05/03/2018
   /* FI BUG 0022839*/
   BEGIN
      poliza := NULL;
      poliza := ob_iax_poliza ();
      issave := FALSE;
      isnewsol := FALSE;
      issuplem := FALSE;
      vsseguro := NULL;
      issimul := FALSE;
      isneedtom := TRUE;
      /*ACC 13122008 indica que estem consultant polissa*/
      isconsult := FALSE;
      /* Bug 11735 - RSC - 19/01/2010 - APR - suplemento de modificacion de capital /prima*/
      isaltagar := FALSE;
      imodifgar := FALSE;
      /* Fin Bug 11735*/
      /* Bug 11735 - RSC - 22/03/2010 - APR - suplemento de modificacion de capital /prima*/
      isbajagar := FALSE;
      /* Fin Bug 11735*/
      /* Bug 16106 - RSC - 21/09/2010 - APR - Ajustes e implementacion para el alta de colectivos*/
      /*isaltacol := FALSE;*/
      /* Fin Bug 16106*/
      vcaseid := NULL;

      /* Bug 18610 - ICV - 20/05/2011*/
      IF pmodopant = 'NOTA_INFORMATIVA'
      THEN
         isnotainfor := TRUE;
      ELSE
         isnotainfor := FALSE;
      END IF;

      IF pmodopant IN ('ALTA_COLECTIVO', 'REEMPLAZOCOL')
      THEN
         isaltacol := TRUE;
      ELSE
         isaltacol := FALSE;
      END IF;

      /*// Asigna variables globales*/
      define_mode (pmode, mensajes);
      vproducto := NVL (pproducto, 0);
      vnmovimi := 1;
      vpasexec := 2;
      vempresa := pac_md_common.f_get_cxtempresa ();

      /* BUG 0022839 - FAL - 24/07/2012*/
      /* vagente := pcagente;*/
      IF NVL (pac_iaxpar_productos.f_get_parproducto ('ADMITE_CERTIFICADOS',
                                                      vproducto
                                                     ),
              0
             ) = 1
      THEN
         v_error :=
                   pac_productos.f_get_herencia_col (vproducto, 1, v_cagente);

         IF     NVL (v_cagente, 0) = 1
            AND v_error = 0
            AND pmodopant NOT IN ('ALTA_COLECTIVO', 'REEMPLAZOCOL')
         THEN
            cur :=
               pac_iax_listvalores.f_get_lstagentes_cond
                                                       (NULL,
                                                        NULL,
                                                        NULL,
                                                        1,
                                                        'CORRETAJE_TIPAGE_4',
                                                        mensajes
                                                       );

            LOOP
               FETCH cur
                INTO v_codi, v_nombre, v_ccomisi, v_ctipage, v_cpadre,
                     v_tsucursal, v_nnumide;

               EXIT;
            END LOOP;

            vagente := v_codi;
         ELSE
            vagente := pcagente;
         END IF;
      ELSE
         vagente := pcagente;
      END IF;

      /* pac_md_common.p_set_cxtagenteprod(pcagente);*/
      pac_md_common.p_set_cxtagenteprod (vagente);
      /* FI BUG 0022839*/
      vfefecto := TRUNC (f_sysdate);
      /*//*/
      vpasexec := 3;

      IF vproducto <> 0
      THEN
         v_error :=
            pac_mdpar_productos.f_get_identprod (vproducto,
                                                 vcramo,
                                                 vmodalidad,
                                                 vctipseg,
                                                 vccolect,
                                                 mensajes
                                                );
         vpasexec := 4;
      /*FOR I IN 1..idtprd.count LOOP
      vcramo     := idtprd(I).CRAMO;
      vmodalidad := idtprd(I).CMODALI;
      vctipseg   := idtprd(I).CTIPSEG;
      vccolect   := idtprd(I).CCOLECT;
      END LOOP;*/
      ELSE
         vpasexec := 5;

         IF     NVL (vcramo, -1) <> -1
            AND NVL (vmodalidad, -1) <> -1
            AND NVL (vctipseg, -1) <> -1
         THEN
            vproducto :=
               pac_mdpar_productos.f_get_sproduc (vcramo,
                                                  vmodalidad,
                                                  vctipseg,
                                                  vccolect,
                                                  mensajes
                                                 );
         ELSE
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000817);
         END IF;
      END IF;

      vpasexec := 6;

      IF NVL (vmodalidad, -1) = -1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000818);
      END IF;

      IF NVL (vempresa, -1) = -1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000819);
      END IF;

      IF NVL (gidioma, -1) = -1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000820);
      END IF;

      IF NVL (vagente, -1) = -1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000821);
      END IF;

      IF vfefecto IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000822);
      END IF;

      IF TO_CHAR (vfefecto, 'dd/mm/yyyy') < TO_CHAR (f_sysdate, 'dd/mm/yyyy')
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000823);
      END IF;

      vpasexec := 7;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            RAISE e_param_error;
         END IF;
      END IF;

      /* Validem l'agent*/
      vpasexec := 8;
      /* BUG 0022839 - FAL - 24/07/2012*/
      /*nerror := pac_md_validaciones.f_valida_agente(pcagente, vproducto, mensajes);*/
      nerror :=
            pac_md_validaciones.f_valida_agente (vagente, vproducto, mensajes);
        /* FI BUG 0022839*/
      --  IF nerror <> 0
      --  THEN

      -- RAISE e_object_error;
      -- END IF;
       /* dra 16-12-2008: bug mantis 7826*/
       /* Validem si te acces per contractar el producte*/
      vpasexec := 81;

      IF NOT isnotainfor
      THEN
         /* si es nota informativa no validademos si el producto tiene acceso*/
         nerror :=
            pac_md_validaciones.f_valida_acces_prod
                                         (vproducto,
                                          NVL (vagente,
                                               pac_md_common.f_get_cxtagente
                                              ),
                                          2,
                                          mensajes
                                         );

         /*ETM*/
         IF nerror <> 0
         THEN
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 9;

      IF f_parproductos_v (pproducto, 'PRO_POL_EXTERNA') = 1
      THEN
         purl :=
            pac_md_produccion.f_url_prodexterno (pproducto,
                                                 'ALTA',
                                                 NULL,
                                                 mensajes
                                                );

         IF purl IS NULL
         THEN
            vpasexec := 91;
            RAISE e_object_error;
         END IF;
      END IF;

      nerror :=
         pac_iaxpar_productos.f_inicializa (pproducto,
                                            vmodalidad,
                                            vempresa,
                                            gidioma,
                                            vccolect,
                                            vcramo,
                                            vctipseg,
                                            mensajes
                                           );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 10;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 11;
      crea_solicitud (vsolicit, mensajes);
      pssolicit := vsolicit;
      vpasexec := 12;
      /* Crea los objetos necesarios*/
      inicializaobjetos (mensajes);
      vpasexec := 13;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 14;
            RAISE e_object_error;
         END IF;
      END IF;
/**TCS-jpaezr-SQL_100**/
      SELECT /*+ USE_NL(CP) ORDERED */ COUNT(1) 
  INTO visible 
  FROM cfg_form cf 
       INNER JOIN cfg_form_property cp 
          ON cf.cempres = cp.cempres + 0 
             AND cf.cidcfg = cp.cidcfg 
             AND cf.cform = cp.cform || '' 
 WHERE cf.cform || '' = 'AXISCTR004' || SUBSTR(ORA_INVOKING_USER, 1, 0) 
   AND cf.cmodo || '' = 'ALTA_POLIZA' 
   AND cp.citem = 'CACTIVI' 
   AND cp.cprpty = 1 
   AND cp.cvalue = 0 
   AND cf.sproduc = pproducto;

      IF visible = 0
      THEN
         poliza.det_poliza.gestion.cactivi := NULL;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_inicializa;

   /*************************************************************************
   Indica si estamos en modo suplemento
   return : 1 indicando que es suplemento
   0 no estamos en modo suplemento
   *************************************************************************/
   FUNCTION f_get_essuplemento
      RETURN NUMBER
   IS
   BEGIN
      IF issuplem
      THEN
         RETURN 1;
      END IF;

      RETURN 0;
   END f_get_essuplemento;

   /*************************************************************************
   Establece la fecha efecto de
   return : 1 se ha producido un error
   0 ha sido correcto
   *************************************************************************/
   FUNCTION f_set_fechaefecto (pfefecto IN DATE, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Set_FechaEfecto';
      gest       ob_iax_gestion;
   BEGIN
      gest :=
            pac_iobj_prod.f_partpoldatosgestion (poliza.det_poliza, mensajes);

      IF gest IS NULL
      THEN
         RAISE e_object_error;
      END IF;

      gest.fefecto := pfefecto;
      poliza.det_poliza.gestion := gest;
      vfefecto := pfefecto;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_fechaefecto;

   /*************************************************************************
   Graba la informacion del objeto poliza a la base de datos
   param out  : mensajes de error
   return     : 0 todo ha sido correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabarobjetodb (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      nerror     NUMBER;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_GrabarObjetoDB';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /*        IF isSimul=true THEN*/
      /* IF poliza.det_poliza.csituac = 7 THEN   --// ACC canvi especial perque es una simulacio
      poliza.det_poliza.csituac := 4;
      --ELSE
      ELS*/
      IF poliza.det_poliza.csituac = -1
      THEN
         poliza.det_poliza.csituac := 7;
      END IF;

      /*        ELSE*/
      /*            poliza.det_poliza.csituac:=4;*/
      /*        END IF;*/
      /* Bug 16768 - APD - 22/11/2010 - si el producto es colectivo, el agente debe ser*/
      /* el del certificado 0*/
      IF     NVL (f_parproductos_v (poliza.det_poliza.sproduc,
                                    'DETALLE_GARANT'
                                   ),
                  0
                 ) IN (1, 2)
         AND NVL (f_parproductos_v (poliza.det_poliza.sproduc,
                                    'ADMITE_CERTIFICADOS'
                                   ),
                  0
                 ) = 1
         AND NOT pac_iax_produccion.isaltacol
      THEN
         poliza.det_poliza.cagente :=
            pac_md_produccion.f_get_agentecol (poliza.det_poliza.npoliza,
                                               mensajes
                                              );
      END IF;

      /* fin Bug 16768 - APD - 22/11/2010*/
      /* toda la informacio s'ha de baixar a la base de dades*/
      nerror :=
         pac_md_grabardatos.f_inicializa (vpmode, vsolicit, vnmovimi,
                                          mensajes);

      IF nerror = 1
      THEN
         vpasexec := 1;
         RAISE e_object_error;
      END IF;

      nerror :=
          pac_md_grabardatos.f_grabardatospoliza (poliza.det_poliza, mensajes);

      IF nerror = 1
      THEN
         vpasexec := 2;
         RAISE e_object_error;
      END IF;

      IF    isneedtom
         OR (    issimul = TRUE
             AND poliza.det_poliza.tomadores IS NOT NULL
             AND poliza.det_poliza.tomadores.COUNT > 0
            )
      THEN
         nerror :=
            pac_md_grabardatos.f_grabartomadores
                                                (poliza.det_poliza.tomadores,
                                                 mensajes
                                                );

         IF nerror = 1
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      nerror :=
         pac_md_grabardatos.f_grabarpreguntes (poliza.det_poliza.preguntas,
                                               mensajes
                                              );

      IF nerror = 1
      THEN
         vpasexec := 4;
         RAISE e_object_error;
      END IF;

      nerror :=
         pac_md_grabardatos.f_grabarclausulas (poliza.det_poliza.clausulas,
                                               mensajes
                                              );

      IF nerror = 1
      THEN
         vpasexec := 6;
         RAISE e_object_error;
      END IF;

      nerror :=
         pac_md_grabardatos.f_grabargstcomision
                                               (poliza.det_poliza.gstcomision,
                                                mensajes
                                               );

      IF nerror = 1
      THEN
         vpasexec := 7;
         RAISE e_object_error;
      END IF;

      -- INI BUG CONF-1243 QT_724 - 23/01/2018 - Grabar datos de fechas para Vigencia Amparos (SUPLEMENTO 918)
      nerror :=
         pac_md_grabardatos.f_grabargardat_vigamparo
                                           (poliza.det_poliza.sproduc,
                                            poliza.det_poliza.gestion.cactivi,
                                            poliza.det_poliza.riesgos,
                                            mensajes
                                           );

      IF nerror = 1
      THEN
         vpasexec := 71;
         RAISE e_object_error;
      END IF;

      -- FIN BUG CONF-1243 QT_724
      -- INI BUG CONF-1243 QT_728 - JLTS - 05/02/2018
      IF NOT (    pac_iax_produccion.issuplem
              AND pac_iax_suplementos.lstmotmov (1).cmotmov = 918
             )
      THEN
         nerror :=
            pac_md_grabardatos.f_grabarriesgos (poliza.det_poliza.riesgos,
                                                mensajes
                                               );

         IF nerror = 1
         THEN
            vpasexec := 8;
            RAISE e_object_error;
         END IF;
      END IF;

      -- FIN BUG CONF-1243 QT_728 - JLTS - 05/02/2018
      /*JRH 03/2008 Grabamos intereses*/
      DECLARE
         vtramo   NUMBER;
      BEGIN
         /* IF nvl(PAC_IAXPAR_PRODUCTOS.F_Get_ParProducto( 'TRAMOINTTEC',poliza.det_poliza.sproduc), 0)=2 then
         vtramo := greatest(greatest(nvl(pac_calc_comu.ff_capital_gar_tipo('EST', poliza.det_poliza.sseguro, 1, 3, 1),0), nvl(pac_calc_comu.ff_capital_gar_tipo('EST', poliza.det_poliza.sseguro, 1, 4, 1),0)));
         else
         vtramo:=1;
         end if;
         if nvl(vtramo,0) <>0 then --Nos aseguramos que exista el capital*/
         nerror :=
             pac_md_grabardatos.f_grabar_inttec (poliza.det_poliza, mensajes);

         IF nerror = 1
         THEN
            vpasexec := 9;
            RAISE e_object_error;
         END IF;
      /* end if;*/
      EXCEPTION
         WHEN OTHERS
         THEN
            NULL;
      END;

      /*JRH 03/2008 Grabamos penalizaciones*/
      nerror :=
         pac_md_grabardatos.f_grabar_penalizacion (poliza.det_poliza,
                                                   mensajes);

      IF nerror = 1
      THEN
         vpasexec := 10;
         RAISE e_object_error;
      END IF;

      /*ACC 27052009 actualitzar data efecte al risc*/
      /* BUG9107:DRA:19-02-2009*/
      /* BUG : 24505 AEG : 17-01-2013 se agrega condicion al if : AND NVL(vnmovimi, 1) = 1*/
      IF issuplem = FALSE AND ismodifprop = FALSE AND NVL (vnmovimi, 1) = 1
      THEN
         nerror :=
            pac_md_grabardatos.f_actualizafefectoriesgo
                                          (vsolicit,
                                           poliza.det_poliza.gestion.fefecto,
                                           mensajes
                                          );

         IF nerror = 1
         THEN
            vpasexec := 11;
            RAISE e_object_error;
         END IF;
      END IF;

      nerror :=
         pac_md_grabardatos.f_grabarmesextra (poliza.det_poliza.sseguro,
                                              poliza.det_poliza.nmesextra,
                                              mensajes
                                             );

      IF nerror = 1
      THEN
         vpasexec := 12;
         RAISE e_object_error;
      END IF;

      /* 24735.03/2013.NMM.i*/
      nerror :=
         pac_md_grabardatos.f_gravaimesextra (poliza.det_poliza.sseguro,
                                              poliza.det_poliza.nmesextra,
                                              mensajes
                                             );

      IF nerror = 1
      THEN
         vpasexec := 20;
         RAISE e_object_error;
      END IF;

      /* 24735.03/2013.NMM.f*/
      /* Bug 9031 - 11/03/2009 - RSC - Axis: Analisis adaptacion productos indexados*/
      nerror :=
         pac_md_grabardatos.f_grabardistribucion
                                           (poliza.det_poliza.modeloinv,
                                            poliza.det_poliza.gestion.fefecto,
                                            mensajes
                                           );

      IF nerror = 1
      THEN
         vpasexec := 30;
         RAISE e_object_error;
      END IF;

      /* Fin Bug 9031*/
      /* BUG19069:DRA:27/09/2011:Inici*/
      nerror :=
         pac_md_grabardatos.f_grabarcorretaje (poliza.det_poliza.corretaje,
                                               mensajes
                                              );

      IF nerror = 1
      THEN
         vpasexec := 40;
         RAISE e_object_error;
      END IF;

      /* BUG19069:DRA:27/09/2011:Fi*/
      /* BUG 0021592 - 08/03/2012 - JMF*/
      nerror :=
         pac_md_grabardatos.f_grabargescobro (poliza.det_poliza.gestorcobro,
                                              mensajes
                                             );

      IF nerror = 1
      THEN
         vpasexec := 50;
         RAISE e_object_error;
      END IF;

      /* bug 21657 --ETM--04/06/2012*/
      nerror :=
         pac_md_grabardatos.f_grabarinquiaval (poliza.det_poliza.inquiaval,
                                               mensajes
                                              );

      IF nerror = 1
      THEN
         vpasexec := 60;
         RAISE e_object_error;
      END IF;

      /* FIN --bug 21657 --ETM--04/06/2012*/
      /* Bug 0023183 - DCG - 14/08/2012 - LCOL_T020-COA-Circuit d'alta de propostes amb coasseguran*/
      nerror :=
         pac_md_grabardatos.f_grabardetcoaseguro (poliza.det_poliza.coacuadro,
                                                  mensajes
                                                 );

      IF nerror = 1
      THEN
         vpasexec := 70;
         RAISE e_object_error;
      END IF;

      /* Fin Bug 0023183*/
      /*  CONVENIOS*/
      nerror :=
         pac_md_grabardatos.f_grabar_convempvers
                                               (poliza.det_poliza.convempvers,
                                                mensajes
                                               );

      IF nerror = 1
      THEN
         vpasexec := 70;
         RAISE e_object_error;
      END IF;

      /*CONVENIOS*/
      /* ini Bug 0022701 - 03/09/2012 - JMF*/
      nerror :=
         pac_md_grabardatos.f_grabarretorno (poliza.det_poliza.retorno,
                                             mensajes
                                            );

      IF nerror = 1
      THEN
         vpasexec := 80;
         RAISE e_object_error;
      END IF;

      /* fin Bug 0022701 - 03/09/2012 - JMF*/
      /* Bug 28263/153355 - 01/10/2013 - AMC*/
      IF poliza.det_poliza.datos_bpm IS NOT NULL
      THEN
         IF poliza.det_poliza.datos_bpm.nnumcaso IS NOT NULL
         THEN
            nerror :=
               pac_md_grabardatos.f_grabar_caso_bpmseg
                                       (poliza.det_poliza.datos_bpm.nnumcaso,
                                        mensajes
                                       );

            IF nerror = 1
            THEN
               vpasexec := 90;
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      /* Fi Bug 28263/153355 - 01/10/2013 - AMC*/
      COMMIT;
      /* Bug 0023183 - DCG - 14/08/2012 - LCOL_T020-COA-Circuit d'alta de propostes amb coasseguran*/
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabarobjetodb;

   /*************************************************************************
   Graba la informacion del objeto garantias del risc a la base de datos
   param in gar    : objeto garantia
   param in nriego : numero de riesgo
   param out       : mensajes de error
   return          : 0 todo ha sido correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabarobjetodbgar (
      gar        IN       ob_iax_garantias,
      nriesgo    IN       NUMBER,
      mensajes   IN OUT   t_iax_mensajes
   )
      RETURN NUMBER
   IS
      nerror     NUMBER;
      rie        ob_iax_riesgos;
      gars       t_iax_garantias;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_GrabarObjetoDBGar';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      IF gar IS NULL
      THEN
         RETURN 0;
      END IF;

      /* toda la informacio garantias es torna a baixar*/
      vpasexec := 2;
      nerror :=
         pac_md_grabardatos.f_inicializa (vpmode, vsolicit, vnmovimi,
                                          mensajes);

      IF nerror = 1
      THEN
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      IF gar IS NOT NULL
      THEN
         vpasexec := 4;

         /* Bug 11735 - RSC - 14/01/2010 - suplemento de modificacion de capital /prima*/
         IF pac_parametros.f_parproducto_n (poliza.det_poliza.sproduc,
                                            'DETALLE_GARANT'
                                           ) IN (1, 2)
         THEN
            /* Bug 11735 - RSC - 22/03/2010 - APR - suplemento de modificacion de capital /prima (a¿adimos isbajagar)*/
            IF pac_iax_produccion.isaltagar
            THEN
               nerror :=
                  pac_md_grabardatos.f_grabargarantia_alta (gar,
                                                            nriesgo,
                                                            mensajes
                                                           );
            ELSIF pac_iax_produccion.imodifgar
            THEN
               nerror :=
                  pac_md_grabardatos.f_grabargarantia_modif
                                    (gar,
                                     nriesgo,
                                     mensajes,
                                     /* Bug 13832 - RSC - 08/06/2010 - APRS015 - suplemento de aportaciones unicas*/
                                     pac_iax_suplementos.lstmotmov (1).cmotmov
                                    );
            /* Fin Bug 13832*/
            ELSIF pac_iax_produccion.isbajagar
            THEN
               nerror :=
                  pac_md_grabardatos.f_grabargarantia_baja (gar,
                                                            nriesgo,
                                                            mensajes
                                                           );
            ELSE
               nerror :=
                  pac_md_grabardatos.f_grabargarantia (gar, nriesgo,
                                                       mensajes);
            END IF;

            IF nerror = 1
            THEN
               vpasexec := 5;
               RAISE e_object_error;
            END IF;
         ELSE
            /* Fin Bug 11735*/
            nerror :=
                 pac_md_grabardatos.f_grabargarantia (gar, nriesgo, mensajes);

            IF nerror = 1
            THEN
               vpasexec := 5;
               RAISE e_object_error;
            END IF;
         /* Bug 11735 - RSC - 14/01/2010 - suplemento de modificacion de capital /prima*/
         END IF;
      /* Fin Bug 11735*/
      ELSE
         rie :=
            pac_iobj_prod.f_partpolriesgo (poliza.det_poliza,
                                           nriesgo,
                                           mensajes
                                          );

         IF rie IS NULL
         THEN
            RETURN 1;
         END IF;

         gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

         IF gars IS NULL
         THEN
            RETURN 1;
         END IF;

         IF gars.COUNT = 0
         THEN
            RETURN 1;
         END IF;

         FOR vgr IN gars.FIRST .. gars.LAST
         LOOP
            IF gars.EXISTS (vgr)
            THEN
               nerror :=
                  pac_md_grabardatos.f_grabargarantia (gars (vgr),
                                                       nriesgo,
                                                       mensajes
                                                      );

               IF nerror = 1
               THEN
                  vpasexec := 5;
                  RAISE e_object_error;
               END IF;
            END IF;
         END LOOP;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabarobjetodbgar;

   /*************************************************************************
   Inserta un nuevo tomador al objeto poliza
   param in sperson   : codigo de persona a insertar
   param out mensajes : mensajes de error
   param out ppregun  : Pregunta sobre asegurado
   return             : 0 todo ha sido correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_inserttomadores (
      psperson   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes,
      ppregun    OUT      NUMBER
   )
      RETURN NUMBER
   IS
      dtpoliza       ob_iax_detpoliza;
      toma           t_iax_tomadores;
      ntom           NUMBER           := 1;
      nerr           NUMBER;
      vpasexec       NUMBER (8)       := 1;
      npartom        NUMBER           := 0;
      /* Tarea 8695: numero de tomadores admitidos para el producto.*/
      vparam         VARCHAR2 (200)   := 'sperson=' || psperson;
      vobject        VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_InsertTomadores';
      v_mismoaseg    NUMBER;
      vctipper       NUMBER;
      /* Bug 30365/167876 - 22/05/2014 - AMC*/
      v_chereda      NUMBER           := 0;
      tom0           t_iax_tomadores;
      v_sseguro      NUMBER;
      aseg0          t_iax_asegurados;
      vriesgos       t_iax_riesgos;
      vheredat       NUMBER           := 0;
      vsperson_out   NUMBER;
      vmensaje       VARCHAR2 (1000);
      vaseginsert    NUMBER           := 0;
      aseg           t_iax_asegurados;
      vexisteaseg    NUMBER           := 0;
      vexisteper     NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      ELSE
         dtpoliza := poliza.det_poliza;
      END IF;

      vpasexec := 2;

      IF dtpoliza.tomadores IS NULL
      THEN
         toma := t_iax_tomadores ();
      ELSE
         toma := dtpoliza.tomadores;
      END IF;

      isneedtom := TRUE;
      /* BUG 0008695 - 28-01-09 - jmf - 0008695: IAX - Control del numero maximo de tomadores*/
      npartom :=
         pac_iaxpar_productos.f_get_parproducto ('NUM_TOMADORES',
                                                 poliza.det_poliza.sproduc
                                                );

      IF toma.COUNT > npartom AND npartom <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                           (mensajes,
                            1,
                            42321,
                               f_axis_literales (9000795,
                                                 pac_md_common.f_get_cxtidioma
                                                )
                            || ' '
                            || npartom
                            || ' '
                            || f_axis_literales (1000380,
                                                 pac_md_common.f_get_cxtidioma
                                                )
                           );
         RAISE e_object_error;
      END IF;

      vpasexec := 5;

      /* BUG 0008695 - 28-01-09 - jmf - 0008695: IAX - Control del numero maximo de tomadores*/
      /* 2 CABEZAS ACC 040308*/
      IF f_existtom (psperson, mensajes) = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000824);
         RETURN 1;
      END IF;

      vpasexec := 7;
      ntom := toma.COUNT + 1;
      toma.EXTEND;
      toma (toma.LAST) := ob_iax_tomadores ();
      toma (toma.LAST).sperson := psperson;
      toma (toma.LAST).nordtom := ntom;
      toma (toma.LAST).direcciones := t_iax_direcciones ();

      IF f_existtomaseg (psperson, mensajes) = 1
      THEN
         toma (toma.LAST).isaseg := 1;
      ELSE
         toma (toma.LAST).isaseg := 0;
      END IF;

      v_mismoaseg :=
         pac_iaxpar_productos.f_get_parproducto ('MISMO_ASEG',
                                                 poliza.det_poliza.sproduc
                                                );
      vpasexec := 9;
      nerr :=
         pac_md_persona.f_get_persona_agente (psperson,
                                              poliza.det_poliza.cagente,
                                              vpmode,
                                              toma (toma.LAST),
                                              mensajes
                                             );
      vpasexec := 11;
      vpasexec := 11;
      /*INI JBN--*/
      nerr :=
         pac_md_validaciones.f_valida_edad_tomador (toma,
                                                    poliza.det_poliza.sproduc,
                                                    f_sysdate,
                                                    mensajes
                                                   );

      IF nerr <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, nerr);
         RAISE e_object_error;
      END IF;

      /*  FIN JBN: BUG 0017041*/
      /* Bug 30365/167876 - 22/05/2014 - AMC*/
      IF pac_mdpar_productos.f_get_parproducto ('ADMITE_CERTIFICADOS',
                                                poliza.det_poliza.sproduc
                                               ) = 1
      THEN
         nerr :=
            pac_productos.f_get_herencia_col (poliza.det_poliza.sproduc,
                                              19,
                                              v_chereda
                                             );
      END IF;

      IF v_chereda = 1
      THEN
         IF     pac_mdpar_productos.f_get_parproducto
                                                   ('ADMITE_CERTIFICADOS',
                                                    poliza.det_poliza.sproduc
                                                   ) = 1
            AND NOT pac_iax_produccion.isaltacol
         THEN
            nerr :=
               pac_seguros.f_get_sseguro (poliza.det_poliza.npoliza,
                                          0,
                                          'POL',
                                          v_sseguro
                                         );

            IF nerr <> 0
            THEN
               RAISE e_object_error;
            END IF;

            nerr :=
               pac_md_obtenerdatos.f_inicializa ('POL',
                                                 v_sseguro,
                                                 NULL,
                                                 mensajes
                                                );

            IF nerr <> 0
            THEN
               RAISE e_object_error;
            END IF;

            aseg0 := pac_md_obtenerdatos.f_leeasegurados (1, mensajes);
            tom0 := pac_iax_anulaciones.f_get_tomadores (v_sseguro, mensajes);

            /*INICIO BUG:32705/182978 - DCT - 17/09/2014*/
            IF     aseg0 IS NOT NULL
               AND aseg0.COUNT > 0
               AND tom0 IS NOT NULL
               AND tom0.COUNT > 0
            THEN
               /*IF tom0(tom0.LAST).sperson <> aseg0(aseg0.LAST).sperson THEN --ini JDS 07/11/2015 32705#c191109*/
               /* Bug 31686/179631 - 21/07/2014 - AMC*/
               vriesgos :=
                  pac_iobj_prod.f_partpolriesgos (poliza.det_poliza,
                                                  mensajes);

               IF vriesgos IS NOT NULL
               THEN
                  IF vriesgos.COUNT > 0
                  THEN
                     FOR vrie IN vriesgos.FIRST .. vriesgos.LAST
                     LOOP
                        IF vriesgos.EXISTS (vrie)
                        THEN
                           aseg :=
                              pac_iobj_prod.f_partriesasegurado
                                                             (vriesgos (vrie),
                                                              mensajes
                                                             );

                           IF aseg IS NOT NULL
                           THEN
                              IF aseg.COUNT > 0
                              THEN
                                 FOR vaseg IN aseg.FIRST .. aseg.LAST
                                 LOOP
                                    IF aseg.EXISTS (vaseg)
                                    THEN
                                       IF aseg (vaseg).spereal =
                                                   aseg0 (aseg0.LAST).sperson
                                       THEN
                                          vaseginsert := 1;
                                          vheredat := 1;
                                       END IF;
                                    END IF;
                                 END LOOP;
                              END IF;
                           END IF;
                        END IF;
                     END LOOP;
                  END IF;
               END IF;

               IF vaseginsert = 0
               THEN
                  SELECT COUNT (1)
                    INTO vexisteper
                    FROM estper_personas
                   WHERE spereal = aseg0 (aseg0.LAST).sperson
                     AND sseguro = dtpoliza.sseguro;

                  vsperson_out := psperson;

                  IF vexisteper = 0
                  THEN
                     nerr :=
                        pac_iax_persona.f_traspasapersonaest
                                                  (aseg0 (aseg0.LAST).sperson,
                                                   NULL,
                                                   NULL,
                                                   'POL',
                                                   vsperson_out,
                                                   dtpoliza.sseguro,
                                                   vmensaje,
                                                   mensajes
                                                  );
                  END IF;

                  nerr := f_insertasegurado (vsperson_out, NULL, mensajes);

                  IF nerr <> 0
                  THEN
                     RAISE e_object_error;
                  END IF;

                  vheredat := 1;
               END IF;
            /* Fi Bug 31686/179631 - 21/07/2014 - AMC*/
            /*END IF; --fin JDS 07/11/2015 32705#c191109*/
            END IF;
         END IF;
      END IF;

      /* Fi Bug 30365/167876 - 22/05/2014 - AMC*/
      IF vheredat = 0
      THEN
         /* Bug 30365/167876 - 22/05/2014 - AMC*/
         /* bug 21583/109050 - 09/03/2012 - AMC*/
         IF
            /*(pac_iaxpar_productos.f_get_parproducto('2_CABEZAS', poliza.det_poliza.sproduc) = 1*/
            /*OR v_mismoaseg = 1)*/
            v_mismoaseg = 1
         THEN
            /* Fi bug 21583/109050 - 09/03/2012 - AMC*/
            /*XPL#19421#4012011*/
            IF (issuplem IS NULL OR (issuplem IS NOT NULL AND NOT issuplem)
               )
            THEN
               /*BUG 0027768 - INICIO - DCT - LCOL_F3B-Fase 3B - Parametrizaci¿n B¿sica AWS*/
               IF NOT (issimul AND poliza.det_poliza.cobjase = 5)
               THEN
                  /*BUG 0027768 - FIN - DCT - LCOL_F3B-Fase 3B - Parametrizaci¿n B¿sica AWS*/
                  IF toma (toma.FIRST).sperson = psperson
                  THEN
                     toma (toma.LAST).isaseg := 1;

                     IF pac_iax_simulaciones.isparammismo_aseg = FALSE
                     THEN
                        /*Bug 7581*/
                        vpasexec := 13;
                        vriesgos :=
                           pac_iobj_prod.f_partpolriesgos (poliza.det_poliza,
                                                           mensajes
                                                          );

                        IF vriesgos IS NOT NULL
                        THEN
                           IF vriesgos.COUNT > 0
                           THEN
                              FOR vrie IN vriesgos.FIRST .. vriesgos.LAST
                              LOOP
                                 IF vriesgos.EXISTS (vrie)
                                 THEN
                                    aseg :=
                                       pac_iobj_prod.f_partriesasegurado
                                                             (vriesgos (vrie),
                                                              mensajes
                                                             );

                                    IF aseg IS NOT NULL
                                    THEN
                                       IF aseg.COUNT > 0
                                       THEN
                                          FOR vaseg IN
                                             aseg.FIRST .. aseg.LAST
                                          LOOP
                                             IF aseg.EXISTS (vaseg)
                                             THEN
                                                IF aseg (vaseg).sperson =
                                                                     psperson
                                                THEN
                                                   vexisteaseg := 1;
                                                END IF;
                                             END IF;
                                          END LOOP;
                                       END IF;
                                    END IF;
                                 END IF;
                              END LOOP;
                           END IF;
                        END IF;

                        IF vexisteaseg = 0
                        THEN
                           nerr :=
                                 f_insertasegurado (psperson, NULL, mensajes);
                        END IF;

                        IF nerr <> 0
                        THEN
                           RAISE e_object_error;
                        END IF;
                     END IF;
                  /*Bug 7581*/
                  END IF;
               END IF;
            END IF;

            ppregun := 0;
         ELSIF v_mismoaseg = 4
         THEN
            /*Si, persona fisica*/
            IF     toma (toma.FIRST).sperson = psperson
               AND (   NVL (toma (toma.LAST).ctipper, 0) = 1
                    OR (NVL (toma (toma.LAST).ctipper, 0) = 2 AND isaltacol)
                   )
            THEN
               toma (toma.LAST).isaseg := 1;

               /*XPL#19421#4012011*/
               IF (issuplem IS NULL
                   OR (issuplem IS NOT NULL AND NOT issuplem)
                  )
               THEN
                  IF pac_iax_simulaciones.isparammismo_aseg = FALSE
                  THEN
                     /*Bug 7581*/
                     vpasexec := 15;

                     IF vriesgos IS NOT NULL
                     THEN
                        IF vriesgos.COUNT > 0
                        THEN
                           FOR vrie IN vriesgos.FIRST .. vriesgos.LAST
                           LOOP
                              IF vriesgos.EXISTS (vrie)
                              THEN
                                 aseg :=
                                    pac_iobj_prod.f_partriesasegurado
                                                             (vriesgos (vrie),
                                                              mensajes
                                                             );

                                 IF aseg IS NOT NULL
                                 THEN
                                    IF aseg.COUNT > 0
                                    THEN
                                       FOR vaseg IN aseg.FIRST .. aseg.LAST
                                       LOOP
                                          IF aseg.EXISTS (vaseg)
                                          THEN
                                             IF aseg (vaseg).sperson =
                                                                     psperson
                                             THEN
                                                vexisteaseg := 1;
                                             END IF;
                                          END IF;
                                       END LOOP;
                                    END IF;
                                 END IF;
                              END IF;
                           END LOOP;
                        END IF;
                     END IF;

                     IF vexisteaseg = 0
                     THEN
                        nerr := f_insertasegurado (psperson, NULL, mensajes);
                     END IF;

                     IF nerr <> 0
                     THEN
                        nerr := 0;
                        /*XPL 10/02/2010 Bug 12727   , es comenta per tal que sortir els missatges per pantalla quan hi hagi errors*/
                        /*   mensajes.DELETE;*/
                        toma (toma.LAST).isaseg := 0;
                     END IF;
                  END IF;
               /*BUG 7581*/
               END IF;
            END IF;

            ppregun := 0;
         ELSIF v_mismoaseg = 2 OR (v_mismoaseg = 5 AND NOT issuplem)
         THEN
            /*Pregunta*/
            ppregun := 1;
         ELSIF v_mismoaseg = 3 OR (v_mismoaseg = 5 AND issuplem)
         THEN
            /*No, nunca*/
            ppregun := 0;
         ELSIF v_mismoaseg = 6
         THEN
            /**/
            IF (issuplem IS NULL OR (issuplem IS NOT NULL AND NOT issuplem)
               )
            THEN
               IF NOT (issimul AND poliza.det_poliza.cobjase = 5)
               THEN
                  IF toma (toma.LAST).sperson = psperson
                  THEN
                     toma (toma.LAST).isaseg := 1;

                     IF pac_iax_simulaciones.isparammismo_aseg = FALSE
                     THEN
                        vpasexec := 40;
                        vriesgos :=
                           pac_iobj_prod.f_partpolriesgos (poliza.det_poliza,
                                                           mensajes
                                                          );

                        IF vriesgos IS NOT NULL
                        THEN
                           IF vriesgos.COUNT > 0
                           THEN
                              FOR vrie IN vriesgos.FIRST .. vriesgos.LAST
                              LOOP
                                 IF vriesgos.EXISTS (vrie)
                                 THEN
                                    aseg :=
                                       pac_iobj_prod.f_partriesasegurado
                                                             (vriesgos (vrie),
                                                              mensajes
                                                             );

                                    IF aseg IS NOT NULL
                                    THEN
                                       IF aseg.COUNT > 0
                                       THEN
                                          FOR vaseg IN
                                             aseg.FIRST .. aseg.LAST
                                          LOOP
                                             IF aseg.EXISTS (vaseg)
                                             THEN
                                                IF aseg (vaseg).sperson =
                                                                     psperson
                                                THEN
                                                   vexisteaseg := 1;
                                                END IF;
                                             END IF;
                                          END LOOP;
                                       END IF;
                                    END IF;
                                 END IF;
                              END LOOP;
                           END IF;
                        END IF;

                        IF vexisteaseg = 0
                        THEN
                           nerr :=
                                 f_insertasegurado (psperson, NULL, mensajes);
                        END IF;

                        IF nerr <> 0
                        THEN
                           RAISE e_object_error;
                        END IF;
                     END IF;
                  END IF;
               END IF;
            END IF;

            /**/
            ppregun := 0;
         /**/
         END IF;
      END IF;

      /* 2 CABEZAS ACC 040308*/
      vpasexec := 17;
      poliza.det_poliza.tomadores := toma;

      /* Actualitzacio de l'idioma per defecte de la polissa*/
      /* en funcio de l'idioma per defecte del primer prenedor*/
      IF poliza.det_poliza.tomadores.COUNT = 1
      THEN
         /* Si l'idioma del prenedor es null, s'agafa el de l' empresa.#6.*/
         poliza.det_poliza.gestion.cidioma :=
            NVL
               (poliza.det_poliza.tomadores (poliza.det_poliza.tomadores.FIRST).cidioma,
                pac_parametros.f_parempresa_n (pac_md_common.f_get_cxtempresa,
                                               'IDIOMA_DEF'
                                              )
               );
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_inserttomadores;

   FUNCTION f_recalcfvencim (mensajes IN OUT t_iax_mensajes)
      RETURN ob_iax_gestion
   IS
      gest       ob_iax_gestion;
      nerr       NUMBER;
      vcdurmin   NUMBER;
      vparam     VARCHAR2 (1)   := NULL;
      vpasexec   NUMBER (8)     := 1;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_RecalcFVencim';
   BEGIN
      gest :=
            pac_iobj_prod.f_partpoldatosgestion (poliza.det_poliza, mensajes);
      vpasexec := 2;
      vcdurmin :=
         pac_mdpar_productos.f_get_cdurmin (poliza.det_poliza.sproduc,
                                            mensajes
                                           );
      vpasexec := 3;
      nerr := pac_md_produccion.f_set_calc_vencim_nduraci (gest, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN gest;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_recalcfvencim;

   /*************************************************************************
   Inserta un nuevo asegurado al objeto poliza
   param in sperson   : codigo de persona a insertar
   param out mensajes : mensajes de error
   return             : 0 todo ha sido correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_insertasegurado (
      sperson        IN       NUMBER,
      pfecretroact   IN       DATE,
      mensajes       OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      dtpoliza                 ob_iax_detpoliza;
      ries                     t_iax_riesgos;
      aseg                     t_iax_asegurados;
      rper                     t_iax_personas;
      nrie                     NUMBER;
      naseg                    NUMBER;
      vpasexec                 NUMBER (8)               := 1;
      vparam                   VARCHAR2 (100)        := 'sperson=' || sperson;
      vobject                  VARCHAR2 (200)
                                    := 'PAC_IAX_PRODUCCION.F_InsertAsegurado';
      insertarriesg            BOOLEAN                  := TRUE;
      v_mens                   t_iax_mensajes;
      num_err                  NUMBER;
      /*ACC 1312008*/
      vefectsuple              DATE                     := NULL;
      nerrfefec                NUMBER;
      /* Bug 12674.NMM.15/01/2010.i.*/
      w_err                    PLS_INTEGER;
      w_clausu_benef_defecte   productos.sclaben%TYPE;
      v_countasetot            NUMBER;
      v_countase               NUMBER                   := 0;

      /* Bug 12674.NMM.15/01/2010.f.*/
      /*ACC 1312008*/
      FUNCTION f_countasegs
         RETURN NUMBER
      IS
         riesall   t_iax_riesgos
              := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);
         asegall   t_iax_asegurados;
         naseg     NUMBER           := 0;
      BEGIN
         IF riesall IS NOT NULL
         THEN
            IF riesall.COUNT > 0
            THEN
               FOR vrie IN riesall.FIRST .. riesall.LAST
               LOOP
                  IF riesall.EXISTS (vrie)
                  THEN
                     asegall :=
                        pac_iobj_prod.f_partriesasegurado (riesall (vrie),
                                                           mensajes
                                                          );

                     IF asegall IS NOT NULL
                     THEN
                        IF asegall.COUNT > 0
                        THEN
                           IF mensajes IS NULL
                           THEN
                              FOR vaseg IN asegall.FIRST .. asegall.LAST
                              LOOP
                                 IF asegall.EXISTS (vaseg)
                                 THEN
                                    naseg := naseg + 1;
                                 END IF;
                              END LOOP;
                           END IF;
                        END IF;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;

         RETURN naseg;
      EXCEPTION
         WHEN OTHERS
         THEN
            RETURN 0;
      END f_countasegs;
/*---------------------------------------------------------------------------*/
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      ELSE
         dtpoliza := poliza.det_poliza;
      END IF;

      vpasexec := 2;

      IF dtpoliza.riesgos IS NULL
      THEN
         ries := t_iax_riesgos ();
      ELSE
         ries := dtpoliza.riesgos;
      END IF;

      vpasexec := 3;

      IF pac_iaxpar_productos.f_get_parproducto ('2_CABEZAS',
                                                 poliza.det_poliza.sproduc
                                                ) = 1
      THEN
         /* 2 CABEZAS ACC040308*/
         IF ries IS NOT NULL
         THEN
            IF ries.COUNT > 0
            THEN
               IF ries (ries.LAST).riesgoase IS NOT NULL
               THEN
                  naseg := ries (ries.LAST).riesgoase.COUNT;

                  IF naseg >= 2
                  THEN
                     aseg := ries (ries.LAST).riesgoase;

                     FOR v_countasetot IN aseg.FIRST .. aseg.LAST
                     LOOP
                        IF aseg (v_countasetot).ffecfin IS NULL
                        THEN
                           v_countase := v_countase + 1;
                        END IF;
                     END LOOP;

                     IF v_countase >= 2
                     THEN
                        pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                              1,
                                                              9000825
                                                             );
                        RAISE e_object_error;
                     END IF;
                  END IF;
               END IF;
            END IF;
         END IF;
      END IF;

      IF f_existtomaseg (sperson, mensajes) = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000826);
         RETURN 1;
      END IF;

      vpasexec := 4;

      IF comprovanumtomaseg (sperson, mensajes) = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                             (mensajes,
                              1,
                              343234,
                                 sperson
                              || ' '
                              || f_axis_literales
                                                (9001136,
                                                 pac_md_common.f_get_cxtidioma
                                                )
                             );
         vpasexec := 5;
         RAISE e_object_error;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      END IF;

      /*ACC 1312008 si es suplement ha de controlar data efecte*/
      IF issuplem
      THEN
         nerrfefec :=
            pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                   vnmovimi,
                                                   vefectsuple,
                                                   mensajes
                                                  );

         IF (nerrfefec <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000827);
            RAISE e_object_error;
         END IF;
      END IF;

      /*ACC 1312008*/
      vpasexec := 7;

      /*   IF poliza.det_poliza.csubpro = 2 THEN*/
      IF ries IS NULL
      THEN
         ries := t_iax_riesgos ();
      END IF;

      IF     poliza.det_poliza.csubpro = 2
         AND (    poliza.det_poliza.cobjase NOT IN (2, 3, 4, 5)
              /* DRA:25/07/2013:Inici: Se mira que aunque sea pesonal, si tiene el par¿metro no cree m¿s riesgos*/
              AND NVL
                     (pac_iaxpar_productos.f_get_parproducto
                                                    ('ASEG_NO_RIESGO',
                                                     poliza.det_poliza.sproduc
                                                    ),
                      0
                     ) = 0
             )
      THEN
         /* svj 23/04/2009: Esto deberia ser = 1, ahora lo ponemos asi para que funcione autos*/
         nrie := ries.COUNT + 1;
         ries.EXTEND;
         ries (ries.LAST) := ob_iax_riesgos ();
         ries (ries.LAST).nriesgo := nrie;
         ries (ries.LAST).fefecto := NVL (vefectsuple, vfefecto);
         /*ACC 13122008 controlar data suple*/
         ries (ries.LAST).nmovima := vnmovimi;
      /* ACC 17122008 ha de marcar nomes el risc ho fa al final ries(ries.last).P_Set_needTarifar(1); -- t.7817*/
      END IF;

      vpasexec := 8;

      IF ries.COUNT = 0
      THEN
         nrie := ries.COUNT + 1;
         ries.EXTEND;
         ries (ries.LAST) := ob_iax_riesgos ();
         ries (ries.LAST).nriesgo := nrie;
         ries (ries.LAST).fefecto := NVL (vefectsuple, vfefecto);
         /*ACC 13122008 controlar data suple*/
         ries (ries.LAST).nmovima := vnmovimi;
      /* ACC 17122008 ha de marcar nomes el risc ho fa al final  ries(ries.last).P_Set_needTarifar(1); -- t.7817*/
      ELSE
         nrie := ries (ries.LAST).nriesgo;
      END IF;

      vpasexec := 9;

      IF ries (ries.LAST).riesgoase IS NULL
      THEN
         aseg := t_iax_asegurados ();
      ELSE
         aseg := ries (ries.LAST).riesgoase;
      END IF;

      vpasexec := 10;

      IF poliza.det_poliza.csubpro = 2
      THEN
         naseg := NVL (nrie, aseg.COUNT + 1);
      /*svj -- Si es multiriesgo tenemos que calcular el numero de riesgo.*/
      ELSE
         naseg := aseg.COUNT + 1;
      END IF;

      /* BUG20741:DRA:20/02/2012:Inici*/
      IF NVL
            (pac_iaxpar_productos.f_get_parproducto ('ASEG_NO_RIESGO',
                                                     poliza.det_poliza.sproduc
                                                    ),
             0
            ) = 1
      THEN
         naseg := 1;
      END IF;

      /* BUG20741:DRA:20/02/2012:Fi*/
      aseg.EXTEND;
      aseg (aseg.LAST) := ob_iax_asegurados ();
      aseg (aseg.LAST).norden := naseg;
      aseg (aseg.LAST).nriesgo := nrie;
      aseg (aseg.LAST).ffecini := NVL (vefectsuple, vfefecto);
      /*ACC 13122008 controlar data suple*/
      aseg (aseg.LAST).sperson := sperson;
      aseg (aseg.LAST).fecretroact := pfecretroact;
      aseg (aseg.LAST).cparen := NULL;
      vpasexec := 11;
      num_err :=
         pac_md_persona.f_get_persona_agente (sperson,
                                              poliza.det_poliza.cagente,
                                              vpmode,
                                              aseg (aseg.LAST),
                                              mensajes
                                             );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 11;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 12;

      IF ries (ries.LAST).riespersonal IS NULL
      THEN
         rper := t_iax_personas ();
      ELSE
         rper := ries (ries.LAST).riespersonal;
      END IF;
      -- INI -- IAXIS-5420 -- 28/11/2019. Se adiciona la confici¿n con RIESGO_EN_ASEG_1
      IF (   pac_iaxpar_productos.f_get_parproducto ('2_CABEZAS',
                                                     poliza.det_poliza.sproduc
                                                    ) = 1
          OR pac_iaxpar_productos.f_get_parproducto ('MISMO_ASEG',
                                                     poliza.det_poliza.sproduc
                                                    ) IN (1, 6)
          OR
       NVL(pac_mdpar_productos.f_get_parproducto('RIESGO_EN_ASEG_1', 
                                                  pac_iax_produccion.poliza.det_poliza.sproduc), 0) = 1
         )
      THEN
         IF rper.COUNT = 1
         THEN
            insertarriesg := FALSE;
         END IF;
      END IF;
      -- FIN -- IAXIS-5420 -- 28/11/2019

      /* INI RLLF 07102014 BUG-32978 Control de la data de naixement.*/
      IF (pac_iaxpar_productos.f_get_parproducto ('2_CABEZAS',
                                                  poliza.det_poliza.sproduc
                                                 ) = 1
         )
      THEN
         /* Para un dos cabezas no habr¿ m¿s de un asegurado.*/
         IF (    aseg (aseg.FIRST).sperson <> aseg (aseg.LAST).sperson
             AND aseg (aseg.FIRST).fnacimi > aseg (aseg.LAST).fnacimi
            )
         THEN
            /*ries(ries.LAST).riesgoase().sperson := null; --aseg(aseg.LAST).sperson;*/
            /*  ries(ries.LAST).riespersonal :=1;*/
            IF (    pac_md_validaciones.f_controledad
                                           (aseg (aseg.FIRST).fnacimi,
                                            poliza.det_poliza.gestion.fefecto,
                                            poliza.det_poliza.sproduc,
                                            NULL,
                                            mensajes
                                           ) = 0
                AND pac_md_validaciones.f_controledad
                                           (aseg (aseg.LAST).fnacimi,
                                            poliza.det_poliza.gestion.fefecto,
                                            poliza.det_poliza.sproduc,
                                            NULL,
                                            mensajes
                                           ) = 0
               )
            THEN
               rper.DELETE;
               insertarriesg := TRUE;
            END IF;
         END IF;
      END IF;

      /* FIN RLLF 07102014 BUG-32978 Control de la data de naixement.*/
      vpasexec := 13;

      IF insertarriesg
      THEN
         rper.EXTEND;
         rper (rper.LAST) := ob_iax_personas ();
         rper (rper.LAST).sperson := sperson;
         vpasexec := 14;
         num_err :=
            pac_md_persona.f_get_persona_agente (sperson,
                                                 poliza.det_poliza.cagente,
                                                 vpmode,
                                                 rper (rper.LAST),
                                                 mensajes
                                                );

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 14;
               RAISE e_object_error;
            END IF;
         END IF;

         -- INI -- IAXIS-5420 -- 28/11/2019
         IF NVL(pac_mdpar_productos.f_get_parproducto('RIESGO_EN_ASEG_1', pac_iax_produccion.poliza.det_poliza.sproduc), 0) = 1 THEN
           IF (aseg(aseg.first).sperson <> aseg(aseg.last).sperson) then
				  rper.delete;
           ELSE
             ries(ries.last).riespersonal := rper;
           END IF;
         ELSE
           ries(ries.last).riespersonal := rper;
         END IF;
         -- FIN -- IAXIS-5420 -- 28/11/2019
      END IF;

      vpasexec := 15;
      ries (ries.LAST).riesgoase := aseg;
      /* LPS Unificacion de descripc. riesgo (14/06/2008)*/
      ries (ries.LAST).p_descriesgo (poliza.det_poliza.cobjase,
                                     poliza.det_poliza.sseguro
                                    );
      /* Fin LPS (14/06/2008)*/
      /* ACC 17122008 ha de marcar nomes el risc*/
      ries (ries.LAST).p_set_needtarificar (1);
      /* Bug 12583 - 11/03/2010- XPL -  CEM103 - Recuperacio dades interficie de pr‚stecs*/
      ries (ries.LAST).prestamo := NULL;
      dtpoliza.riesgos := ries;
      poliza.det_poliza := dtpoliza;
      vpasexec := 16;
      /* Bug 12674.NMM.15/01/2010.i.Recuperem la clausula beneficiari x defecte producte*/
      w_err :=
         pac_iaxpar_productos.f_get_claubenefi_def (poliza.det_poliza.sproduc,
                                                    w_clausu_benef_defecte,
                                                    mensajes
                                                   );

      IF w_clausu_benef_defecte IS NOT NULL
      THEN
         w_err :=
            f_grababeneficiarios (nrie,
                                  2,
                                  w_clausu_benef_defecte,
                                  NULL,
                                  mensajes
                                 );
      END IF;

      /* Bug 12674.NMM.15/01/2010.f.*/
      vpasexec := 17;

      /* Comprovem que l'assegurat no tingui ja una polissa pendent...*/
      IF pac_iax_validaciones.f_validaasegurados (mensajes) = 1
      THEN
         /* BUG18893:DRA:30/06/2011:Inici*/
         IF     insertarriesg
            AND NVL
                   (pac_iaxpar_productos.f_get_parproducto
                                                    ('ASEG_NO_RIESGO',
                                                     poliza.det_poliza.sproduc
                                                    ),
                    0
                   ) = 0
         THEN
            w_err := f_eliminariesgo (nrie, v_mens);
         ELSE
            w_err := f_eliminaasegurado (sperson, v_mens);
         END IF;

         /* BUG18893:DRA:30/06/2011:Fi*/
         IF w_err = 1
         THEN
            pac_iobj_mensajes.p_mergemensaje (mensajes, v_mens);
         END IF;

         RAISE e_object_error;
      END IF;

      vpasexec := 18;

      IF poliza.det_poliza.tomadores IS NOT NULL
      THEN
         /*JH En simulaciones no se informa*/
         p_findistomador (poliza.det_poliza.tomadores, sperson);
      END IF;

      vpasexec := 19;

      /*JRh 07/2008 lo ponemos aqui para que nos recalcule la fecha de vencimiento*/
      /* INI RLLF 13032014 Recalcula fecha vencimiento.*/
      IF NVL
            (pac_iaxpar_productos.f_get_parproducto ('VALFECHAVENCIM',
                                                     poliza.det_poliza.sproduc
                                                    ),
             0
            ) <> 1
      THEN
         poliza.det_poliza.gestion := f_recalcfvencim (mensajes);
      END IF;

      /* FIN RLLF 13032014 Recalcula fecha vencimiento.*/
      vpasexec := 20;
      /*JRh 07/2008 lo ponemos aqui para que nos recalcule la fecha de vencimiento*/
      /* ACC 17122008 no ha de marcar tota la polissa sino nomes el risc*/
      /*if not poliza.det_poliza.csubpro=2 then
      -- indicar se s'ha de tarificar nomes val per primes
      poliza.det_poliza.P_Set_NeedTarificar(1);
      end if;*/
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_insertasegurado;

   /*************************************************************************
   Lee los datos de la poliza del tomador
   param out mensajes : mensajes de error
   return             : objeto tomadores
   *************************************************************************/
   FUNCTION f_leetomadores (mensajes OUT t_iax_mensajes)
      RETURN t_iax_tomadores
   IS
      toma       t_iax_tomadores;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_LeeTomadores';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      toma := pac_iobj_prod.f_partpoltomadores (poliza.det_poliza, mensajes);
      vpasexec := 3;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN toma;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leetomadores;

   /*************************************************************************
   Lee los datos de la poliza del ultimo tomador
   param out mensajes : mensajes de error
   return             : objeto tomadores
   *************************************************************************/
   FUNCTION f_leeulttomadores (mensajes OUT t_iax_mensajes)
      RETURN ob_iax_tomadores
   IS
      toma       t_iax_tomadores;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_LeeUltTomadores';
      vtom       ob_iax_tomadores;
      num_err    NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      toma := pac_iobj_prod.f_partpoltomadores (poliza.det_poliza, mensajes);
      vpasexec := 3;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      IF toma IS NULL
      THEN
         RETURN NULL;
      END IF;

      IF toma.COUNT = 0
      THEN
         RETURN NULL;
      END IF;

      /*// TEMPORAL TROBAR MILLOR OPCIO --//ACC 05052008*/
      vpasexec := 5;
      num_err :=
         pac_md_persona.f_get_persona_agente (toma (toma.LAST).sperson,
                                              poliza.det_poliza.cagente,
                                              vpmode,
                                              toma (toma.LAST),
                                              mensajes
                                             );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN toma (toma.LAST);
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leeulttomadores;

   /*************************************************************************
   Elimina el tomador del objeto tomadores
   param in sperson   : codigo de personas
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_eliminatomador (sperson IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      toma       t_iax_tomadores;
      ndel       NUMBER          := 0;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_EliminaTomador';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      toma := pac_iobj_prod.f_partpoltomadores (poliza.det_poliza, mensajes);

      IF toma IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000784);
         vpasexec := 3;
         RAISE e_object_error;
      ELSE
         IF toma.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000784);
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      FOR vtom IN toma.FIRST .. toma.LAST
      LOOP
         IF toma.EXISTS (vtom)
         THEN
            IF toma (vtom).sperson = sperson
            THEN
               toma.DELETE (vtom);
               poliza.det_poliza.tomadores := toma;
               RETURN 0;
            END IF;
         END IF;
      END LOOP;

      vpasexec := 7;
      pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000828);
      RETURN 1;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_eliminatomador;

   /*************************************************************************
   Graba los datos del tomador al objeto tomadores
   param in sperson   : codigo de personas
   param in cdomici   : codigo de domicilio
   param in isAseg    : 0 no es asegurado
   1 es asegurado
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   -- Bug 23075 - FPG - 30/07/2012 - LCOL_T010-Figura del pagador
   -- Incluir cexistepagador
   *************************************************************************/
   FUNCTION f_grabartomadores (
      sperson          IN       NUMBER,
      cdomici          IN       NUMBER,
      isaseg           IN       NUMBER,
      mensajes         OUT      t_iax_mensajes,
      cexistepagador   IN       NUMBER DEFAULT NULL,
      cagrupa          IN       NUMBER DEFAULT NULL
   )                                                --IAXIS-2085 03/04/2019 AP
      RETURN NUMBER
   IS
      toma        t_iax_tomadores;
      nerr        NUMBER;
      msj         t_iax_mensajes;
      /* ERRORS DESTIMATS AL ELIMINAR UN ASEGURAT*/
      vcdomici    NUMBER;
      visaseg     NUMBER          := isaseg;
      vpasexec    NUMBER (8)      := 1;
      vparam      VARCHAR2 (100)
                           := 'sperson=' || sperson || ' cdomici=' || cdomici;
      vobject     VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_GrabarTomadores';
      vcagente    NUMBER;
      v_ppregun   NUMBER;
   BEGIN
      isneedtom := TRUE;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      toma := pac_iobj_prod.f_partpoltomadores (poliza.det_poliza, mensajes);
      vpasexec := 3;

      IF toma IS NULL
      THEN
         vpasexec := 4;
         nerr := f_inserttomadores (sperson, mensajes, v_ppregun);
         vpasexec := 5;

         IF nerr = 1
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000829);
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 7;
            RAISE e_object_error;
         END IF;
      END IF;

      /* bug 21583/109050 - 12/03/2012 - AMC*/
      /*      IF pac_iaxpar_productos.f_get_parproducto('2_CABEZAS', poliza.det_poliza.sproduc) = 1 THEN   -- 2 CABEZAS ACC040308*/
      /*         IF toma(toma.FIRST).sperson = sperson THEN*/
      /*            IF visaseg = 0 THEN*/
      /*               pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 9000830);*/
      /*               visaseg := 1;*/
      /*            END IF;*/
      /*         ELSE*/
      /*            IF visaseg = 1 THEN*/
      /*               pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 9000831);*/
      /*               visaseg := 0;*/
      /*            END IF;*/
      /*         END IF;*/
      /*      END IF;*/
      /* Fi bug 21583/109050 - 12/03/2012 - AMC*/
      /* 2 CABEZAS ACC040308*/
      vpasexec := 8;

      IF visaseg = 1
      THEN
         vpasexec := 9;

         /*XPL#19421#4012011*/
         IF (issuplem IS NULL OR (issuplem IS NOT NULL AND NOT issuplem))
         THEN
            IF comprovanumtomaseg (sperson, mensajes) = 1
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje
                             (mensajes,
                              1,
                              343234,
                                 sperson
                              || ' '
                              || f_axis_literales
                                                (9001136,
                                                 pac_md_common.f_get_cxtidioma
                                                )
                             );
               vpasexec := 10;
               RAISE e_object_error;
            END IF;

            IF mensajes IS NOT NULL
            THEN
               IF mensajes.COUNT > 0
               THEN
                  vpasexec := 11;
                  RAISE e_object_error;
               END IF;
            END IF;
         END IF;
      END IF;

      vpasexec := 12;

      FOR vtom IN toma.FIRST .. toma.LAST
      LOOP
         vpasexec := 13;

         IF toma.EXISTS (vtom)
         THEN
            vpasexec := 14;

            IF toma (vtom).sperson = sperson
            THEN
               vpasexec := 15;

               /*XPL#19421#4012011*/
               IF (issuplem IS NULL
                   OR (issuplem IS NOT NULL AND NOT issuplem)
                  )
               THEN
                  toma (vtom).isaseg := visaseg;

                  /* indica que es asegurat 1 o 0 no*/
                  /* Bug 23075 - FPG - 27/07/2012 - LCOL_T010-Figura del pagador - inicio*/
                  /* Si se desmarca el check cexistepagador eliminamos el objeto de gestor de cobro*/
                  IF toma (vtom).cexistepagador = 1 AND cexistepagador = 0
                  THEN
                     poliza.det_poliza.gestorcobro := t_iax_gescobros ();
                     poliza.det_poliza.gestion.cbancar := NULL;
                     nerr :=
                        pac_md_grabardatos.f_inicializa (vpmode,
                                                         vsolicit,
                                                         vnmovimi,
                                                         mensajes
                                                        );

                     IF nerr = 1
                     THEN
                        vpasexec := 1;
                        RAISE e_object_error;
                     END IF;

                     nerr :=
                        pac_md_grabardatos.f_grabardatospoliza
                                                           (poliza.det_poliza,
                                                            mensajes
                                                           );

                     IF nerr = 1
                     THEN
                        vpasexec := 2;
                        RAISE e_object_error;
                     END IF;

                     COMMIT;
                     nerr :=
                        pac_md_grabardatos.f_grabargescobro
                                               (poliza.det_poliza.gestorcobro,
                                                mensajes
                                               );

                     /*COMMIT;*/
                     IF nerr <> 0
                     THEN
                        pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                              1,
                                                              9903391
                                                             );
                        vpasexec := 46;
                        RAISE e_object_error;
                     END IF;
                  END IF;

                  toma (vtom).cexistepagador := cexistepagador;
                  toma (vtom).cagrupa := cagrupa;   --IAXIS-2085 03/04/2019 AP
               /* Bug 23075 - FPG - 30/07/2012*/
               /* Bug 23075 - FPG - 27/07/2012 - LCOL_T010-Figura del pagador - inicio*/
               END IF;

               vpasexec := 16;
               vcdomici := NVL (cdomici, 0);

               IF vcdomici > -12
               THEN
                  /* cas especial pq no pasi si estic fent un canvi de prenedor*/
                  vpasexec := 17;

                  IF vcdomici > 0
                  THEN
                     vpasexec := 18;

                     IF toma (vtom).direcciones IS NULL
                     THEN
                        toma (vtom).direcciones := t_iax_direcciones ();
                     END IF;

                     vpasexec := 19;

                     IF toma (vtom).direcciones.COUNT = 0
                     THEN
                        toma (vtom).direcciones.EXTEND;
                        toma (vtom).direcciones (toma (vtom).direcciones.LAST) :=
                                                        ob_iax_direcciones
                                                                          ();
                     END IF;

                     vpasexec := 20;
                     toma (vtom).direcciones (toma (vtom).direcciones.LAST).cdomici :=
                                                                       cdomici;
                     /* BUG 7624 - 20/04/2009 - SBG - S'afegeix param. p_tmode*/
                     /* a funcio pac_md_listvalores.p_ompledadesdireccions*/
                     pac_md_listvalores.p_ompledadesdireccions
                         (sperson,
                          cdomici,
                          vpmode,
                          toma (vtom).direcciones (toma (vtom).direcciones.LAST
                                                  ),
                          msj
                         );

                     /* FINAL BUG 7624 - 20/04/2009 - SBG*/
                     IF msj IS NOT NULL
                     THEN
                        IF msj.COUNT > 0
                        THEN
                           vpasexec := 21;
                           pac_iobj_mensajes.p_mergemensaje (mensajes, msj);
                           pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                                 1,
                                                                 9000832
                                                                );
                           vpasexec := 23;
                           RAISE e_object_error;
                        END IF;
                     END IF;
                  END IF;

                  vpasexec := 24;

                  /*XPL#19421#4012011*/
                  IF (   issuplem IS NULL
                      OR (issuplem IS NOT NULL AND NOT issuplem)
                     )
                  THEN
                     IF visaseg = 1
                     THEN
                        /* Tomador asegurado*/
                        vpasexec := 25;

                        IF f_existtomaseg (sperson, mensajes) = 0
                        THEN
                           /* HA DE COMPROVAR QUE NO EXISTEIXE PREVIAMENT*/
                           vpasexec := 26;
                           nerr :=
                                  f_insertasegurado (sperson, NULL, mensajes);
                           vpasexec := 27;

                           IF nerr > 0
                           THEN
                              vpasexec := 28;
                              RAISE e_object_error;
                           END IF;
                        END IF;

                        /*Ini bug.: 0015908 - 22/09/2010 - ICV*/
                        /*Le cargamos la direccion al asegurado si es el mismo*/
                        vpasexec := 281;

                        IF poliza.det_poliza.riesgos IS NOT NULL
                        THEN
                           vpasexec := 282;

                           IF poliza.det_poliza.riesgos.COUNT > 0
                           THEN
                              vpasexec := 283;

                              FOR vrie IN
                                 poliza.det_poliza.riesgos.FIRST .. poliza.det_poliza.riesgos.LAST
                              LOOP
                                 vpasexec := 284;

                                 IF poliza.det_poliza.riesgos.EXISTS (vrie)
                                 THEN
                                    vpasexec := 285;

                                    IF    poliza.det_poliza.cobjase = 1
                                       OR poliza.det_poliza.riesgos (vrie).riesgoase.COUNT >
                                                                             0
                                    THEN
                                       vpasexec := 286;

                                       FOR vase IN
                                          poliza.det_poliza.riesgos (vrie).riesgoase.FIRST .. poliza.det_poliza.riesgos
                                                                                                (vrie
                                                                                                ).riesgoase.LAST
                                       LOOP
                                          vpasexec := 287;

                                          IF poliza.det_poliza.riesgos (vrie).riesgoase.EXISTS
                                                                        (vase)
                                          THEN
                                             vpasexec := 288;

                                             IF poliza.det_poliza.riesgos
                                                                        (vrie).riesgoase
                                                                        (vase).sperson =
                                                          toma (vtom).sperson
                                             THEN
                                                vpasexec := 289;
                                                poliza.det_poliza.riesgos
                                                                        (vrie).riesgoase
                                                                        (vase).direcciones :=
                                                      toma (vtom).direcciones;
                                                /* BUG27305:JRB:30/08/2013:Se necesita actualizar el objeto asegurado con los valores de las est cuando modificas una persona*/
                                                nerr :=
                                                   pac_md_persona.f_get_persona_agente
                                                      (sperson,
                                                       poliza.det_poliza.cagente,
                                                       vpmode,
                                                       poliza.det_poliza.riesgos
                                                                         (vrie).riesgoase
                                                                         (vase),
                                                       mensajes
                                                      );
                                             END IF;
                                          END IF;
                                       END LOOP;
                                    END IF;
                                 END IF;
                              END LOOP;
                           END IF;
                        END IF;
                     /*Fin Bug.: 0015908*/
                     ELSE
                        vpasexec := 29;

                        IF f_existtomaseg (sperson, mensajes) = 1
                        THEN
                           vpasexec := 30;
                           nerr := f_eliminaasegurado (sperson, msj);
                        END IF;
                     END IF;
                  END IF;
               END IF;

               vpasexec := 31;
               toma (vtom).cagrupa := cagrupa;      --IAXIS-2085 03/04/2019 AP
               poliza.det_poliza.tomadores := toma;
               /*JRB pasar persona para agente*/
               nerr :=
                  pac_md_produccion.f_busca_agente_poliza (sperson,
                                                           vcagente,
                                                           mensajes
                                                          );

               IF nerr > 0
               THEN
                  vpasexec := 32;
                  RAISE e_object_error;
               END IF;

               IF vcagente IS NOT NULL
               THEN
                  poliza.det_poliza.cagente := vcagente;
               END IF;

               RETURN 0;
            END IF;
         END IF;
      END LOOP;

      vpasexec := 32;
      pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000828);
      RETURN 1;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabartomadores;

   /*************************************************************************
   Cambia el codigo de persona de un tomador o de un asegurado
   param in spersonAct   : codigo de persona a sustituir
   param in spersonPos   : codigo de persona que sustituye
   param in tipo         : tipo de persona a cambiar T tomador A asegurado
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_cambiarpersonatomase (
      spersonact   IN       NUMBER,
      spersonpos   IN       NUMBER,
      tipo         IN       VARCHAR2,
      mensajes     OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      toma               t_iax_tomadores;
      aseg               t_iax_asegurados;
      ries               t_iax_riesgos;
      rie                ob_iax_riesgos;
      rip                t_iax_personas;
      msj                t_iax_mensajes;
      /* ERRORS DESTIMATS AL ELIMINAR UN ASEGURAT*/
      nerr               NUMBER;
      vpasexec           NUMBER (8)       := 1;
      vparam             VARCHAR2 (100)
               := 'spersonAct=' || spersonact || ' spersonPos=' || spersonpos;
      vobject            VARCHAR2 (200)
                               := 'PAC_IAX_PRODUCCION.F_CambiarPersonaTomAse';
      v_aseg_no_riesgo   NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;

      IF tipo = 'T'
      THEN
         toma :=
               pac_iobj_prod.f_partpoltomadores (poliza.det_poliza, mensajes);
         vpasexec := 3;

         IF toma IS NULL
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001022);
            vpasexec := 4;
            RAISE e_object_error;
         ELSE
            IF toma.COUNT = 0
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001022);
               vpasexec := 5;
               RAISE e_object_error;
            END IF;
         END IF;

         vpasexec := 6;

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 7;
               RAISE e_object_error;
            END IF;
         END IF;

         IF f_existtom (spersonpos, mensajes) = 1
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000824);
            RETURN 1;
         END IF;

         vpasexec := 8;

         FOR vtom IN toma.FIRST .. toma.LAST
         LOOP
            vpasexec := 9;

            IF toma.EXISTS (vtom)
            THEN
               vpasexec := 10;

               IF toma (vtom).sperson = spersonact
               THEN
                  vpasexec := 11;
                  toma (vtom).sperson := spersonpos;
                  toma (vtom).direcciones := t_iax_direcciones ();
                  vpasexec := 12;
                  nerr :=
                     pac_md_persona.f_get_persona_agente
                                                  (spersonpos,
                                                   poliza.det_poliza.cagente,
                                                   vpmode,
                                                   toma (vtom),
                                                   mensajes
                                                  );

                  IF mensajes IS NOT NULL
                  THEN
                     IF mensajes.COUNT > 0
                     THEN
                        vpasexec := 4;
                        RAISE e_object_error;
                     END IF;
                  END IF;

                  vpasexec := 13;

                  /*XPL#19421#4012011*/
                  IF (   issuplem IS NULL
                      OR (issuplem IS NOT NULL AND NOT issuplem)
                     )
                  THEN
                     IF f_existtomaseg (spersonact, mensajes) = 1
                     THEN
                        vpasexec := 14;
                        vpasexec := f_eliminaasegurado (spersonact, msj);
                     END IF;
                  END IF;
               END IF;
            END IF;
         END LOOP;

         vpasexec := 15;
         poliza.det_poliza.tomadores := toma;

         /* Actualitzacio de l'idioma per defecte de la polissa*/
         /* en funcio de l'idioma per defecte del primer prenedor*/
         IF poliza.det_poliza.tomadores.COUNT = 1
         THEN
            poliza.det_poliza.gestion.cidioma :=
               poliza.det_poliza.tomadores (poliza.det_poliza.tomadores.FIRST).cidioma;
         END IF;
      ELSIF tipo = 'A'
      THEN
         vpasexec := 16;
         ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

         IF ries IS NULL
         THEN
            vpasexec := 17;
            RAISE e_object_error;
         ELSE
            IF ries.COUNT = 0
            THEN
               vpasexec := 18;
               RAISE e_object_error;
            END IF;
         END IF;

         vpasexec := 19;

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 20;
               RAISE e_object_error;
            END IF;
         END IF;

         IF f_existtomaseg (spersonpos, mensajes) = 1
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000826);
            RETURN 1;
         END IF;

         vpasexec := 21;

         FOR vrie IN ries.FIRST .. ries.LAST
         LOOP
            vpasexec := 22;

            IF ries.EXISTS (vrie)
            THEN
               vpasexec := 23;
               aseg :=
                    pac_iobj_prod.f_partriesasegurado (ries (vrie), mensajes);
               /* BUG19933:DRA:2/1/2012:Inici: si es un producte on l'assegurat no es el risc, no validar si es NULL*/
               v_aseg_no_riesgo :=
                  NVL
                     (pac_iaxpar_productos.f_get_parproducto
                                                    ('ASEG_NO_RIESGO',
                                                     poliza.det_poliza.sproduc
                                                    ),
                      0
                     );
               vpasexec := 240;

               IF (   v_aseg_no_riesgo = 0
                   OR (    v_aseg_no_riesgo = 1
                       AND aseg IS NOT NULL
                       AND aseg.COUNT > 0
                      )
                  )
               THEN
                  IF aseg IS NULL
                  THEN
                     vpasexec := 24;
                     RAISE e_object_error;
                  ELSE
                     IF aseg.COUNT = 0
                     THEN
                        vpasexec := 25;
                        RAISE e_object_error;
                     END IF;
                  END IF;

                  IF mensajes IS NOT NULL
                  THEN
                     IF mensajes.COUNT > 0
                     THEN
                        vpasexec := 26;
                        RAISE e_object_error;
                     END IF;
                  END IF;

                  vpasexec := 27;

                  FOR vaseg IN aseg.FIRST .. aseg.LAST
                  LOOP
                     vpasexec := 28;

                     IF aseg.EXISTS (vaseg)
                     THEN
                        vpasexec := 29;

                        IF aseg (vaseg).sperson = spersonact
                        THEN
                           vpasexec := 30;
                           aseg (vaseg).sperson := spersonpos;
                           aseg (vaseg).cparen := NULL;
                           aseg (vaseg).direcciones := t_iax_direcciones ();
                           vpasexec := 31;
                           nerr :=
                              pac_md_persona.f_get_persona_agente
                                                  (spersonpos,
                                                   poliza.det_poliza.cagente,
                                                   vpmode,
                                                   aseg (vaseg),
                                                   mensajes
                                                  );

                           IF mensajes IS NOT NULL
                           THEN
                              IF mensajes.COUNT > 0
                              THEN
                                 vpasexec := 32;
                                 RAISE e_object_error;
                              END IF;
                           END IF;

                           ries (vrie).riesgoase := aseg;
                           vpasexec := 33;

                           IF f_existtom (spersonact, mensajes) = 1
                           THEN
                              vpasexec := 34;
                              nerr :=
                                 f_grabartomadores (spersonact,
                                                    -12,
                                                    0,
                                                    mensajes
                                                   );
                           END IF;

                           /*BUG 7535 ACC 170209*/
                           ries (vrie).p_set_needtarificar (1);
                           /*BUG 7535 ACC 170209*/
                           EXIT;
                        END IF;
                     END IF;
                  END LOOP;
               END IF;

               /* BUG19933:DRA:2/1/2012:Fi*/
               vpasexec := 35;

               /* BUG17255:DRA:22/0/2011:Inici*/
               IF poliza.det_poliza.cobjase = 1
               THEN
                  rip :=
                     pac_iobj_prod.f_partriespersonal (ries (vrie), mensajes);

                  IF rip IS NULL
                  THEN
                     vpasexec := 36;
                     RAISE e_object_error;
                  ELSE
                     IF rip.COUNT = 0
                     THEN
                        vpasexec := 37;
                        RAISE e_object_error;
                     END IF;
                  END IF;

                  IF mensajes IS NOT NULL
                  THEN
                     IF mensajes.COUNT > 0
                     THEN
                        vpasexec := 38;
                        RAISE e_object_error;
                     END IF;
                  END IF;

                  vpasexec := 39;

                  FOR vrip IN rip.FIRST .. rip.LAST
                  LOOP
                     vpasexec := 40;

                     IF rip.EXISTS (vrip)
                     THEN
                        vpasexec := 41;

                        IF rip (vrip).sperson = spersonact
                        THEN
                           vpasexec := 42;
                           rip (vrip).sperson := spersonpos;
                           rip (vrip).direcciones := t_iax_direcciones ();
                           vpasexec := 43;
                           nerr :=
                              pac_md_persona.f_get_persona_agente
                                                  (spersonpos,
                                                   poliza.det_poliza.cagente,
                                                   vpmode,
                                                   rip (vrip),
                                                   mensajes
                                                  );

                           IF mensajes IS NOT NULL
                           THEN
                              IF mensajes.COUNT > 0
                              THEN
                                 vpasexec := 44;
                                 RAISE e_object_error;
                              END IF;
                           END IF;

                           vpasexec := 45;
                           ries (vrie).riespersonal := rip;
                           EXIT;
                        END IF;
                     END IF;
                  END LOOP;
               END IF;

               /* BUG17255:DRA:22/0/2011:Fi*/
               /*// estableix la descripcio del risc*/
               /* LPS Unificacion de descripc. riesgo (14/06/2008)*/
               ries (vrie).p_descriesgo (poliza.det_poliza.cobjase,
                                         poliza.det_poliza.sseguro
                                        );
            /* Fin LPS (14/06/2008)*/
            END IF;
         END LOOP;

         /*JRh 07/2008 lo ponemos aqui para que nos recalcule la fecha de vencimiento*/
         poliza.det_poliza.gestion := f_recalcfvencim (mensajes);
         vpasexec := 49;
         /*JRh 07/2008 lo ponemos aqui para que nos recalcule la fecha de vencimiento*/
         vpasexec := 46;
         poliza.det_poliza.riesgos := ries;
         vpasexec := 47;
      /* indicar se s'ha de tarificar nomes val per primes*/
      /*-bug 7535 ACC 170209 poliza.det_poliza.p_set_needtarificar(1);*/
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_cambiarpersonatomase;

   /*************************************************************************
   Devuelve el objeto tomador segun su sperson
   param in sperson   : codigo de persona
   param out mensajes : mensajes de error
   return             : objeto tomador
   *************************************************************************/
   FUNCTION f_get_tomador (sperson IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN ob_iax_tomadores
   IS
      tom         ob_iax_tomadores;
      toma        t_iax_tomadores;
      num_err     NUMBER;
      vpasexec    NUMBER (8)       := 1;
      vparam      VARCHAR2 (100)   := 'sperson=' || sperson;
      vobject     VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_Get_Tomador';
      v_cdomici   NUMBER;
   /* BUG8328:DRA:13-02-2009*/
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      toma := pac_iobj_prod.f_partpoltomadores (poliza.det_poliza, mensajes);

      IF toma IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001022);
         vpasexec := 3;
         RAISE e_object_error;
      ELSE
         IF toma.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001022);
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      FOR vtom IN toma.FIRST .. toma.LAST
      LOOP
         vpasexec := 7;

         IF toma.EXISTS (vtom)
         THEN
            vpasexec := 8;

            IF toma (vtom).sperson = sperson
            THEN
               vpasexec := 9;
               /*// TEMPORAL TROBAR MILLOR OPCIO --//ACC 05052008*/
               num_err :=
                  pac_md_persona.f_get_persona_agente
                                                  (toma (vtom).sperson,
                                                   poliza.det_poliza.cagente,
                                                   vpmode,
                                                   toma (vtom),
                                                   mensajes
                                                  );

               IF mensajes IS NOT NULL
               THEN
                  IF mensajes.COUNT > 0
                  THEN
                     vpasexec := 6;
                     RAISE e_object_error;
                  END IF;
               END IF;

               /* BUG8238:DRA:13-02-2009.Inici*/
               vpasexec := 11;
               num_err :=
                  pac_seguros.f_get_cdomici_tom (poliza.det_poliza.sseguro,
                                                 toma (vtom).sperson,
                                                 vpmode,
                                                 v_cdomici
                                                );

               IF num_err <> 0
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, num_err);
                  RAISE e_object_error;
               END IF;

               /* Si v_cdomici es NULL, es que estamos en contratacion*/
               IF v_cdomici IS NOT NULL
               THEN
                  vpasexec := 12;
                  toma (vtom).direcciones.EXTEND;
                  num_err :=
                     pac_md_persona.f_get_direccion
                        (toma (vtom).sperson,
                         v_cdomici,
                         toma (vtom).direcciones (toma (vtom).direcciones.LAST),
                         mensajes,
                         vpmode
                        );

                  IF num_err <> 0
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                           1,
                                                           num_err
                                                          );
                     RAISE e_object_error;
                  END IF;
               END IF;

               /* BUG 9318 - 10/03/2009 - SBG - Actualitzem la part dels prenedors de l'objecte*/
               /* de tipus ob_iax_detpoliza.*/
               vpasexec := 13;
               num_err :=
                  pac_iobj_prod.f_set_parttomadores (poliza.det_poliza,
                                                     toma,
                                                     mensajes
                                                    );

               IF num_err <> 0
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, num_err);
                  RAISE e_object_error;
               END IF;

               /* BUG8238:DRA:13-02-2009.Fi*/
               RETURN toma (vtom);
            END IF;
         END IF;
      END LOOP;

      vpasexec := 10;
      pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000828);
      RETURN NULL;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_tomador;

   /*************************************************************************
   Devuelve el objeto asegurado segun su sperson
   param in sperson   : codigo de persona
   param out mensajes : mensajes de error
   return             : objeto tomador
   *************************************************************************/
   FUNCTION f_get_asegurado (sperson IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN ob_iax_asegurados
   IS
      aseg       t_iax_asegurados;
      ries       t_iax_riesgos;
      rie        ob_iax_riesgos;
      num_err    NUMBER;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (100)   := 'sperson=' || sperson;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_Get_Asegurado';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

      IF ries IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001040);
         vpasexec := 3;
         RAISE e_object_error;
      ELSE
         IF ries.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001040);
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      FOR vrie IN ries.FIRST .. ries.LAST
      LOOP
         vpasexec := 7;

         IF ries.EXISTS (vrie)
         THEN
            /*ACC 29122008 controlar no mostrar assegurat baixa*/
            IF ries (vrie).fanulac IS NULL AND ries (vrie).nmovimb IS NULL
            THEN
               vpasexec := 8;
               aseg :=
                    pac_iobj_prod.f_partriesasegurado (ries (vrie), mensajes);

               IF mensajes IS NOT NULL
               THEN
                  IF mensajes.COUNT > 0
                  THEN
                     vpasexec := 9;
                     RAISE e_object_error;
                  END IF;
               END IF;

               vpasexec := 10;

               IF aseg IS NULL
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001041);
                  vpasexec := 11;
                  RAISE e_object_error;
               ELSE
                  IF aseg.COUNT = 0
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                           1,
                                                           9001041
                                                          );
                     vpasexec := 12;
                     RAISE e_object_error;
                  END IF;
               END IF;

               vpasexec := 13;

               FOR vaseg IN aseg.FIRST .. aseg.LAST
               LOOP
                  vpasexec := 14;

                  IF aseg.EXISTS (vaseg)
                  THEN
                     vpasexec := 15;

                     IF aseg (vaseg).sperson = sperson
                     THEN
                        vpasexec := 16;

                        /*ACC 16122008 controlar no mostrar assegurat baixa*/
                        IF aseg (vaseg).ffecfin IS NOT NULL
                        THEN
                           pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                                 1,
                                                                 9001042
                                                                );
                           RETURN NULL;
                        END IF;

                        /*ACC 16122008*/
                        vpasexec := 17;
                        /*// TEMPORAL TROBAR MILLOR OPCIO --//ACC 05052008*/
                        num_err :=
                           pac_md_persona.f_get_persona_agente
                                                   (aseg (vaseg).sperson,
                                                    poliza.det_poliza.cagente,
                                                    vpmode,
                                                    aseg (vaseg),
                                                    mensajes
                                                   );

                        IF mensajes IS NOT NULL
                        THEN
                           IF mensajes.COUNT > 0
                           THEN
                              vpasexec := 18;
                              RAISE e_object_error;
                           END IF;
                        END IF;

                        /* INI RLLF 20032014 No pasa correctamente el n¿mero de riesgo por lo que no se hace la copia del objeto asegurados*/
                        /*num_err := pac_iobj_prod.f_set_partriesasegurado(poliza.det_poliza,*/
                        /*                                                 aseg(vaseg).norden,*/
                        /* BUG20741:DRA:21/02/2012*/
                        /*                                                 aseg(vaseg), mensajes);*/
                        num_err :=
                           pac_iobj_prod.f_set_partriesasegurado
                                                           (poliza.det_poliza,
                                                            vrie,
                                                            /* BUG20741:DRA:21/02/2012*/
                                                            aseg (vaseg),
                                                            mensajes
                                                           );

                        /* FIN RLLF 20032014 No pasa correctamente el n¿mero de riesgo por lo que no se hace la copia del objeto asegurados*/
                        IF num_err <> 0
                        THEN
                           pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                                 1,
                                                                 num_err
                                                                );
                           RETURN NULL;
                        END IF;

                        RETURN aseg (vaseg);
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      END LOOP;

      vpasexec := 19;
      pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001043);
      RETURN NULL;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_asegurado;

   /*************************************************************************
   Devuelve el objeto gestor cobro segun su sperson
   param in sperson   : codigo de persona
   param out mensajes : mensajes de error
   return             : objeto gestor cobro
   *************************************************************************/
   /* BUG 0021592 - 08/03/2012 - JMF*/
   FUNCTION f_get_gestorcobro (sperson IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN ob_iax_gescobros
   IS
      gesc        t_iax_gescobros;
      num_err     NUMBER;
      vpasexec    NUMBER (8)      := 1;
      vparam      VARCHAR2 (100)  := 'sperson=' || sperson;
      vobject     VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_Get_gestorcobro';
      v_cdomici   NUMBER;
   /* BUG8328:DRA:13-02-2009*/
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      gesc := pac_iobj_prod.f_partpolgescobro (poliza.det_poliza, mensajes);

      IF gesc IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903392);
         vpasexec := 3;
         RAISE e_object_error;
      ELSE
         IF gesc.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903392);
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      FOR vgesc IN gesc.FIRST .. gesc.LAST
      LOOP
         vpasexec := 7;

         IF gesc.EXISTS (vgesc)
         THEN
            vpasexec := 8;

            IF gesc (vgesc).sperson = sperson
            THEN
               vpasexec := 9;
               /*// TEMPORAL TROBAR MILLOR OPCIO --//ACC 05052008*/
               num_err :=
                  pac_md_persona.f_get_persona_agente
                                                  (gesc (vgesc).sperson,
                                                   poliza.det_poliza.cagente,
                                                   vpmode,
                                                   gesc (vgesc),
                                                   mensajes
                                                  );

               IF mensajes IS NOT NULL
               THEN
                  IF mensajes.COUNT > 0
                  THEN
                     vpasexec := 6;
                     RAISE e_object_error;
                  END IF;
               END IF;

               /* BUG8238:DRA:13-02-2009.Inici*/
               vpasexec := 11;
               num_err :=
                  pac_seguros.f_get_cdomici_tom (poliza.det_poliza.sseguro,
                                                 gesc (vgesc).sperson,
                                                 vpmode,
                                                 v_cdomici
                                                );

               IF num_err <> 0
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, num_err);
                  RAISE e_object_error;
               END IF;

               /* Si v_cdomici es NULL, es que estamos en contratacion*/
               IF v_cdomici IS NOT NULL
               THEN
                  vpasexec := 12;
                  gesc (vgesc).direcciones.EXTEND;
                  num_err :=
                     pac_md_persona.f_get_direccion
                        (gesc (vgesc).sperson,
                         v_cdomici,
                         gesc (vgesc).direcciones
                                                 (gesc (vgesc).direcciones.LAST
                                                 ),
                         mensajes,
                         vpmode
                        );

                  IF num_err <> 0
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                           1,
                                                           num_err
                                                          );
                     RAISE e_object_error;
                  END IF;
               END IF;

               /* BUG 9318 - 10/03/2009 - SBG - Actualitzem la part dels prenedors de l'objecte*/
               /* de tipus ob_iax_detpoliza.*/
               vpasexec := 13;
               num_err :=
                  pac_iobj_prod.f_set_partgestorcobro (poliza.det_poliza,
                                                       gesc,
                                                       mensajes
                                                      );

               IF num_err <> 0
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, num_err);
                  RAISE e_object_error;
               END IF;

               /* BUG8238:DRA:13-02-2009.Fi*/
               RETURN gesc (vgesc);
            END IF;
         END IF;
      END LOOP;

      vpasexec := 10;
      pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903392);
      RETURN NULL;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_gestorcobro;

   /*************************************************************************
   Recuperar informacion de los asegurados
   param in  pnriesgo : numero riesgo
   param in  psproduc : codi producte
   param out mensajes : mensajes de error
   return             : objeto asegurados
   *************************************************************************/
   FUNCTION f_leeasegurados (
      pnriesgo   IN       NUMBER,
      /*BUG9727-19052009-XVM*/
      psproduc   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_asegurados
   IS
      aseg            t_iax_asegurados;
      asega           t_iax_asegurados;
      ries            t_iax_riesgos;
      rie             ob_iax_riesgos;
      vpasexec        NUMBER (8)       := 1;
      vparam          VARCHAR2 (1)     := NULL;
      vobject         VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_LeeAsegurados';
      v_pcparam       VARCHAR2 (20)    := 'VISIBLE_ASEG_X_RISC';
      v_paramproduc   NUMBER (1);
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

      IF ries IS NULL
      THEN
         IF isnewsol = FALSE
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001040);
            vpasexec := 3;
            RAISE e_object_error;
         ELSE
            RETURN NULL;
         END IF;
      ELSE
         IF ries.COUNT = 0
         THEN
            IF isnewsol = FALSE
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001040);
               vpasexec := 4;
               RAISE e_object_error;
            ELSE
               RETURN NULL;
            END IF;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;
      asega := t_iax_asegurados ();
      vpasexec := 7;

      IF pnriesgo IS NOT NULL
      THEN
         /*BUG9727-19052009-XVM*/
         v_paramproduc :=
             pac_md_param.f_get_parproducto_n (psproduc, v_pcparam, mensajes);
      END IF;

      FOR vrie IN ries.FIRST .. ries.LAST
      LOOP
         vpasexec := 8;

         IF ries.EXISTS (vrie)
         THEN
            /*ACC 29122008 controlar no mostrar assegurat baixa*/
            IF ries (vrie).fanulac IS NULL AND ries (vrie).nmovimb IS NULL
            THEN
               /*BUG9727-19052009-XVM*/
               IF (   (v_paramproduc = 1 AND ries (vrie).nriesgo = pnriesgo)
                   OR NVL (v_paramproduc, 0) = 0
                  )
               THEN
                  vpasexec := 9;
                  rie := ries (vrie);
                  vpasexec := 10;
                  aseg := pac_iobj_prod.f_partriesasegurado (rie, mensajes);

                  IF mensajes IS NOT NULL
                  THEN
                     IF mensajes.COUNT > 0
                     THEN
                        vpasexec := 11;
                        RAISE e_object_error;
                     END IF;
                  END IF;

                  vpasexec := 12;

                  IF aseg IS NOT NULL
                  THEN
                     vpasexec := 12;

                     IF aseg.COUNT > 0
                     THEN
                        vpasexec := 13;

                        FOR vaseg IN aseg.FIRST .. aseg.LAST
                        LOOP
                           vpasexec := 14;

                           IF aseg.EXISTS (vaseg)
                           THEN
                              /*ACC 16122008 controlar no mostrar assegurat baixa*/
                              IF aseg (vaseg).ffecfin IS NULL
                              THEN
                                 vpasexec := 15;
                                 aseg (vaseg).nriesgo := ries (vrie).nriesgo;
                                 asega.EXTEND;
                                 asega (asega.LAST) := aseg (vaseg);
                              END IF;
                           /*ACC 16122008*/
                           END IF;
                        END LOOP;
                     END IF;
                  END IF;
               END IF;
            END IF;
         /*ACC 29122008*/
         END IF;
      END LOOP;

      RETURN asega;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leeasegurados;

   /*************************************************************************
   Recuperar informacion del ultimo asegurado
   param out mensajes : mensajes de error
   param in  pnriesgo : numero riesgo
   return             : objeto asegurados
   *************************************************************************/
   FUNCTION f_leeultasegurado (
      mensajes   OUT      t_iax_mensajes,
      pnriesgo   IN       NUMBER DEFAULT 1
   )
      RETURN ob_iax_asegurados
   IS
      aseg       t_iax_asegurados;
      rie        ob_iax_riesgos;
      aux        NUMBER;
      num_err    NUMBER;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_LeeUltAsegurado';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      /* vigilar amb el 1 fitxe a riscos per asegurats acc*/
      /*// ACC he canviat el 1 per un parametre d'entrada 25022008*/
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001040);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      aseg := pac_iobj_prod.f_partriesasegurado (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      IF aseg IS NULL
      THEN
         RETURN NULL;
      END IF;

      IF aseg.COUNT = 0
      THEN
         RETURN NULL;
      END IF;

      /*// TEMPORAL TROBAR MILLOR OPCIO --//ACC 05052008*/
      num_err :=
         pac_md_persona.f_get_persona_agente (aseg (aseg.LAST).sperson,
                                              poliza.det_poliza.cagente,
                                              vpmode,
                                              aseg (aseg.LAST),
                                              mensajes
                                             );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 17;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN aseg (aseg.LAST);
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leeultasegurado;

   /*************************************************************************
   Elimina el tomador del objeto tomadores
   param in sperson   : codigo de personas
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_eliminaasegurado (sperson IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      aseg               t_iax_asegurados;
      rip                t_iax_personas;
      ries               t_iax_riesgos;
      rie                ob_iax_riesgos;
      ndel               NUMBER           := 0;
      /* per saber si sha trobat el asegurat*/
      nerr               NUMBER;
      msj                t_iax_mensajes;
      msjt               t_iax_mensajes;
      vpasexec           NUMBER (8)       := 1;
      vparam             VARCHAR2 (100)   := 'sperson=' || sperson;
      vobject            VARCHAR2 (200)
                                   := 'PAC_IAX_PRODUCCION.F_EliminaAsegurado';
      /* ACC 13122008*/
      vfanulac           DATE;
      nerrfanul          NUMBER;
      nerranulr          NUMBER;
      nsuple             NUMBER (1)       := 0;
      /* per saber que ha canviat un assegurat;*/
      v_aseg_no_riesgo   NUMBER;
      v_doscabezas       NUMBER;

      /* ACC 13122008*/
      /*ACC 29122008*/
      FUNCTION islastactiveaseg
         RETURN BOOLEAN
      IS
         ncont   NUMBER := ries.COUNT;
      BEGIN
         FOR vrie IN ries.FIRST .. ries.LAST
         LOOP
            IF ries.EXISTS (vrie)
            THEN
               IF    ries (vrie).fanulac IS NOT NULL
                  OR ries (vrie).nmovimb IS NOT NULL
               THEN
                  ncont := ncont - 1;
               END IF;
            END IF;
         END LOOP;

         IF ncont <= 1
         THEN
            RETURN TRUE;
         END IF;

         RETURN FALSE;
      END islastactiveaseg;

      /*ACC 29122008*/
      /* BUG20741:DRA:20/02/2012:Inici*/
      FUNCTION islastactiveaseg_noriesgo
         RETURN BOOLEAN
      IS
         ncont      NUMBER           := 0;
         t_asegur   t_iax_asegurados;
      BEGIN
         ncont := 0;

         FOR vrie_cont IN ries.FIRST .. ries.LAST
         LOOP
            IF ries.EXISTS (vrie_cont)
            THEN
               IF     ries (vrie_cont).fanulac IS NULL
                  AND ries (vrie_cont).nmovimb IS NULL
               THEN
                  t_asegur :=
                     pac_iobj_prod.f_partriesasegurado (ries (vrie_cont),
                                                        mensajes
                                                       );

                  IF t_asegur IS NOT NULL
                  THEN
                     IF t_asegur.COUNT <> 0
                     THEN
                        FOR aseg_cont IN t_asegur.FIRST .. t_asegur.LAST
                        LOOP
                           IF t_asegur.EXISTS (aseg_cont)
                           THEN
                              /*IF t_asegur(aseg_cont).ffecfin IS NOT NULL THEN*/
                              IF     t_asegur (aseg_cont).sperson = sperson
                                 AND t_asegur (aseg_cont).ffecfin IS NOT NULL
                              THEN
                                 ncont := ncont + 1;
                              END IF;
                           END IF;
                        END LOOP;
                     END IF;
                  END IF;
               END IF;
            END IF;
         END LOOP;

         IF ncont = 1
         THEN
            RETURN TRUE;
         END IF;

         RETURN FALSE;
      END islastactiveaseg_noriesgo;

      /* BUG20741:DRA:20/02/2012:Fi*/
      /*2 CABEZAS*/
      FUNCTION islastactiveaseg_doscabezas
         RETURN BOOLEAN
      IS
         ncont      NUMBER           := 0;
         t_asegur   t_iax_asegurados;
      BEGIN
         ncont := 0;

         FOR vrie_cont IN ries.FIRST .. ries.LAST
         LOOP
            IF ries.EXISTS (vrie_cont)
            THEN
               IF     ries (vrie_cont).fanulac IS NULL
                  AND ries (vrie_cont).nmovimb IS NULL
               THEN
                  t_asegur :=
                     pac_iobj_prod.f_partriesasegurado (ries (vrie_cont),
                                                        mensajes
                                                       );

                  IF t_asegur IS NOT NULL
                  THEN
                     IF t_asegur.COUNT <> 0
                     THEN
                        FOR aseg_cont IN t_asegur.FIRST .. t_asegur.LAST
                        LOOP
                           IF t_asegur.EXISTS (aseg_cont)
                           THEN
                              IF t_asegur (aseg_cont).ffecfin IS NULL
                              THEN
                                 ncont := ncont + 1;
                              END IF;
                           END IF;
                        END LOOP;
                     END IF;
                  END IF;
               END IF;
            END IF;
         END LOOP;

         IF ncont = 1
         THEN
            RETURN TRUE;
         END IF;

         RETURN FALSE;
      END islastactiveaseg_doscabezas;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

      IF ries IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001040);
         vpasexec := 3;
         RAISE e_object_error;
      ELSE
         IF ries.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001040);
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 5;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      END IF;

      /* BUG20741:DRA:20/02/2012:Inici*/
      v_aseg_no_riesgo :=
         NVL
            (pac_iaxpar_productos.f_get_parproducto ('ASEG_NO_RIESGO',
                                                     poliza.det_poliza.sproduc
                                                    ),
             0
            );
      v_doscabezas :=
         NVL
            (pac_iaxpar_productos.f_get_parproducto ('2_CABEZAS',
                                                     poliza.det_poliza.sproduc
                                                    ),
             0
            );

      /* BUG20741:DRA:20/02/2012:Fi*/
      /*ACC 29122008*/
      IF issuplem
      THEN
         /* Mantis 8936.*/
         IF v_doscabezas = 1
         THEN
            IF islastactiveaseg_doscabezas
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 104367);
               RETURN 1;
            END IF;
         ELSE
            IF islastactiveaseg AND v_aseg_no_riesgo = 0
            THEN
               /* BUG20741:DRA:20/02/2012*/
               /* no es pot donar de baixa l'ultim assegurat*/
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 104367);
               RETURN 1;
            END IF;
         END IF;
      END IF;

      /* BUG20741:DRA:20/02/2012:Inici*/
      IF v_aseg_no_riesgo = 1
      THEN
         IF islastactiveaseg_noriesgo
         THEN
            /* no es pot donar de baixa l'ultim assegurat*/
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 104367);
            RETURN 1;
         END IF;
      END IF;

      /* BUG20741:DRA:20/02/2012:Fi*/
      /*ACC 29122008*/
      vpasexec := 7;

      FOR vrie IN ries.FIRST .. ries.LAST
      LOOP
         vpasexec := 8;

         IF ries.EXISTS (vrie)
         THEN
            /*ACC 29122008 controlar no mostrar assegurat baixa*/
            IF ries (vrie).fanulac IS NULL AND ries (vrie).nmovimb IS NULL
            THEN
               vpasexec := 9;
               aseg :=
                    pac_iobj_prod.f_partriesasegurado (ries (vrie), mensajes);
               vpasexec := 10;

               IF aseg IS NULL
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001041);
                  vpasexec := 11;
                  RAISE e_object_error;
               ELSE
                  IF aseg.COUNT = 0
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                           1,
                                                           9001041
                                                          );
                     vpasexec := 12;
                     RAISE e_object_error;
                  END IF;
               END IF;

               IF mensajes IS NOT NULL
               THEN
                  IF mensajes.COUNT > 0
                  THEN
                     vpasexec := 13;
                     RAISE e_object_error;
                  END IF;
               END IF;

               vpasexec := 14;

               FOR vaseg IN aseg.FIRST .. aseg.LAST
               LOOP
                  vpasexec := 15;

                  IF aseg.EXISTS (vaseg)
                  THEN
                     vpasexec := 16;

                     /*CMP : 14/05/2014*/
                     IF     aseg (vaseg).sperson = sperson
                        AND aseg (vaseg).ffecfin IS NULL
                     THEN
                        vpasexec := 17;

                        /*ACC 13122008*/
                        IF issuplem
                        THEN
                           nerrfanul :=
                              pac_md_suplementos.f_get_fefecto_supl
                                                                   (vsolicit,
                                                                    vnmovimi,
                                                                    vfanulac,
                                                                    mensajes
                                                                   );

                           IF (nerrfanul <> 0)
                           THEN
                              pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                                    1,
                                                                    9001083
                                                                   );
                              RAISE e_object_error;
                           END IF;

                           vpasexec := 18;

                           IF v_aseg_no_riesgo = 0 AND v_doscabezas = 0
                           THEN
                              /* BUG20741:DRA:20/02/2012  --CMP:14/05/2014*/
                              nerranulr :=
                                 pac_iax_suplementos.f_anular_riesgo
                                                         (vsolicit,
                                                          ries (vrie).nriesgo,
                                                          vfanulac,
                                                          vnmovimi,
                                                          vsseguro,
                                                          mensajes
                                                         );

                              IF (nerranulr <> 0)
                              THEN
                                 pac_iobj_mensajes.crea_nuevo_mensaje
                                                                   (mensajes,
                                                                    1,
                                                                    9001084
                                                                   );
                                 RAISE e_object_error;
                              END IF;
                           END IF;

                           /* BUG18907:DRA:30/06/2011:Inici*/
                           IF pac_iax_produccion.issuplem
                           THEN
                              nerr :=
                                 pac_md_obtenerdatos.f_inicializa ('EST',
                                                                   vsolicit,
                                                                   vnmovimi,
                                                                   mensajes
                                                                  );

                              IF nerr <> 0
                              THEN
                                 RAISE e_object_error;
                              END IF;
                           END IF;

                           /* BUG18907:DRA:30/06/2011:Fi*/
                           /* BUG11047:DRA:04/09/2009:Inici*/
                           ries (vrie) :=
                              pac_md_obtenerdatos.f_leeriesgo
                                                          (ries (vrie).nriesgo,
                                                           mensajes
                                                          );

                           IF mensajes IS NOT NULL
                           THEN
                              IF mensajes.COUNT > 0
                              THEN
                                 RAISE e_object_error;
                              END IF;
                           END IF;

                           nerranulr :=
                              pac_iobj_prod.f_set_partriesgo
                                                          (poliza.det_poliza,
                                                           ries (vrie).nriesgo,
                                                           ries (vrie),
                                                           mensajes
                                                          );

                           IF (nerranulr <> 0)
                           THEN
                              RAISE e_object_error;
                           END IF;

                           /* BUG11047:DRA:04/09/2009:Fi*/
                           /*ACC 15122008*/
                           aseg (vaseg).ffecfin := vfanulac;
                           /* ries(vrie).nmovimb := vnmovimi;  -- BUG11047:DRA:04/09/2009: No hace falta ya*/
                           /* ries(vrie).fanulac := vfanulac;  -- BUG10519:DRA:07/09/2009: Es recupera a la PAC_MD_OBTENERDATOS*/
                           nsuple := 1;
                        /*ACC 15122008*/
                        ELSE
                           /*ACC 15122008 - codi existen a fer quan no sigui suplement*/
                           aseg.DELETE (vaseg);
                           ndel := 1;
                        END IF;

                        /*ACC 13122008*/
                        ries (vrie).riesgoase := aseg;
                        vpasexec := 19;

                        /* INI RLLF 31102014 Cambio para poner en el riesgo el asegurado que he quedado al eliminar el otro.*/
                        IF (    ries (vrie).riesgoase.COUNT > 0
                            AND v_doscabezas = 1
                           )
                        THEN
			  -- INI -IAXIS-5220 - 02/03/2020
			  IF ries (vrie).riespersonal IS NOT NULL THEN
                           ries (vrie).riespersonal
                                                (ries (vrie).riespersonal.LAST
                                                ).sperson :=
                              ries (vrie).riesgoase (ries (vrie).riesgoase.LAST
                                                    ).sperson;
                          END IF;
                          -- FIN -IAXIS-5220 - 02/03/2020
                        END IF;

                        /* FIN RLLF 31102014 Cambio para poner en el riesgo el asegurado que he quedado al eliminar el otro*/
                        /*ACC 13122008 afegeixo comprovacio de mode suplement*/
                        /* i que ademes tingui informat el parproductos*/
                        /* ANULRISCTOM igual a 1 llavors s'ha de recuperar*/
                        /* de base de dades els valors per els prenadors*/
                        /* si no compleix la condicio com abans*/
                        IF     issuplem
                           AND NVL
                                  (pac_iaxpar_productos.f_get_parproducto
                                                    ('ANULRIESCTOM',
                                                     poliza.det_poliza.sproduc
                                                    ),
                                   0
                                  ) = 1
                        THEN
                           nerr :=
                              pac_md_obtenerdatos.f_inicializa (vpmode,
                                                                vsolicit,
                                                                vnmovimi,
                                                                mensajes
                                                               );
                           poliza.det_poliza.tomadores :=
                                 pac_md_obtenerdatos.f_leetomadores (mensajes);
                        ELSE
                           /*ACC 13122008 codi existen*/
                           IF f_existtom (sperson, mensajes) = 1
                           THEN
                              vpasexec := 20;
                              nerr := f_grabartomadores (sperson, -12, 0,
                                                         msj);

                              IF msj IS NOT NULL
                              THEN
                                 IF msj.COUNT > 0
                                 THEN
                                    pac_iobj_mensajes.p_mergemensaje
                                                                   (mensajes,
                                                                    msj
                                                                   );
                                 END IF;
                              END IF;
                           END IF;
                        END IF;

                        /*ACC 13122008 fi modificacio afegir condicio*/
                        EXIT;
                     END IF;
                  END IF;
               END LOOP;

               vpasexec := 21;

               /* BUG20741:DRA:20/02/2012:Inici*/
               IF v_aseg_no_riesgo = 0 AND v_doscabezas = 0
               THEN
                  /*CMP:14/05/2014*/
                  rip :=
                     pac_iobj_prod.f_partriespersonal (ries (vrie), mensajes);

                  IF rip IS NULL
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                           1,
                                                           9001085
                                                          );
                     vpasexec := 22;
                     RAISE e_object_error;
                  ELSE
                     IF rip.COUNT = 0
                     THEN
                        pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                              1,
                                                              9001085
                                                             );
                        vpasexec := 23;
                        RAISE e_object_error;
                     END IF;
                  END IF;

                  IF mensajes IS NOT NULL
                  THEN
                     IF mensajes.COUNT > 0
                     THEN
                        vpasexec := 24;
                        RAISE e_object_error;
                     END IF;
                  END IF;

                  vpasexec := 25;

                  FOR vrip IN rip.FIRST .. rip.LAST
                  LOOP
                     vpasexec := 26;

                     IF rip.EXISTS (vrip)
                     THEN
                        vpasexec := 27;

                        IF rip (vrip).sperson = sperson
                        THEN
                           vpasexec := 28;

                           /*ACC 15122008*/
                           IF issuplem
                           THEN
                              nsuple := 1;
                           ELSE
                              /*ACC 15122008 codi existen*/
                              rip.DELETE (vrip);
                              ries (vrie).riespersonal := rip;
                              ndel := 1;
                           END IF;

                           /*ACC 15122008*/
                           EXIT;
                        END IF;
                     END IF;
                  END LOOP;
               END IF;

               /* BUG20741:DRA:20/02/2012:Fi*/
               vpasexec := 29;

               /* Per quan es crea un risc per asegurat n risc n asegurats*/
               IF     poliza.det_poliza.csubpro = 2
                  AND ndel = 1
                  AND nsuple = 0
                  AND v_aseg_no_riesgo = 0
                  /* BUG20741:DRA:20/02/2012*/
                  AND v_doscabezas = 0
               THEN
                  vpasexec := 30;
                  /* BUG11288:DRA:07/06/2010:Inici*/
                  nerr :=
                     pk_nueva_produccion.f_borrar_riesgo (vsolicit,
                                                          ries (vrie).nriesgo,
                                                          'EST'
                                                         );

                  IF nerr <> 0
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, nerr);
                     RAISE e_object_error;
                  END IF;

                  vpasexec := 31;
                  /* BUG11288:DRA:07/06/2010:Fi*/
                  ries.DELETE (vrie);
               END IF;

               vpasexec := 32;

               IF ndel = 1 OR nsuple = 1
               THEN
                  EXIT;
               END IF;
            END IF;
         /*ACC 29122008*/
         END IF;
      END LOOP;

      vpasexec := 35;

      /*// S'ha de recorrer tots els riscos per modificar el numero de risc corresponent*/
      IF ndel = 1
      THEN
         p_renumriesgo (ries, mensajes);
      END IF;

      vpasexec := 36;
      poliza.det_poliza.riesgos := ries;

      /*ACC 15122008*/
      IF nsuple = 1
      THEN
         ndel := 1;
      END IF;

      vpasexec := 37;

      IF ndel = 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001086);
         RETURN 1;
      END IF;

      vpasexec := 38;
      /* indicar se s'ha de tarificar nomes val per primes*/
      poliza.det_poliza.p_set_needtarificar (1);
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_eliminaasegurado;

   /*************************************************************************
   Graba la informacion del asegurado
   param in sperson   : codigo de personas
   param in cvincle   : codigo de vinculo
   param IN pcparen   : cod. de parentesco asegurado. mnustes 34583/206992
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabaasegurados (
      sperson        IN       NUMBER,
      cvincle        IN       NUMBER,
      pfecretroact   IN       DATE,
      pcdomici       IN       NUMBER,
      pcparen        IN       asegurados.cparen%TYPE,
      mensajes       OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      aseg       t_iax_asegurados;
      ries       t_iax_riesgos;
      rie        ob_iax_riesgos;
      msj        t_iax_mensajes;
      vcdomici   NUMBER;
      nerr       NUMBER           := 0;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (100)   := 'sperson=' || sperson;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_GrabaAsegurados';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

      IF ries IS NULL
      THEN
         /* Bug 26419/143480 - APD - 23/05/2013 - se cambia el mensaje*/
         /*pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 9001040);*/
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001043);
         /* fin Bug 26419/143480 - APD - 23/05/2013*/
         vpasexec := 3;
         RAISE e_object_error;
      ELSE
         IF ries.COUNT = 0
         THEN
            /* Bug 26419/143480 - APD - 23/05/2013 - se cambia el mensaje*/
            /*pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 9001040);*/
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001043);
            /* fin Bug 26419/143480 - APD - 23/05/2013*/
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      FOR vrie IN ries.FIRST .. ries.LAST
      LOOP
         vpasexec := 7;

         IF ries.EXISTS (vrie)
         THEN
            /*ACC 29122008 controlar no mostrar assegurat baixa*/
            IF ries (vrie).fanulac IS NULL AND ries (vrie).nmovimb IS NULL
            THEN
               vpasexec := 8;
               aseg :=
                    pac_iobj_prod.f_partriesasegurado (ries (vrie), mensajes);
               vpasexec := 9;

               IF aseg IS NULL
               THEN
                  vpasexec := 10;
                  nerr := f_insertasegurado (sperson, NULL, mensajes);
                  vpasexec := 11;

                  IF nerr = 1
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                           1,
                                                           9001087
                                                          );
                     vpasexec := 12;
                     RAISE e_object_error;
                  END IF;
               END IF;

               IF mensajes IS NOT NULL
               THEN
                  IF mensajes.COUNT > 0
                  THEN
                     vpasexec := 13;
                     RAISE e_object_error;
                  END IF;
               END IF;

               vpasexec := 14;

               /* Bug 0026588 - dlF - 02-IV-2013 - AGM998-Problema al editar solicitud de Sobreprecio.*/
               IF aseg IS NOT NULL AND aseg.COUNT > 0
               THEN
                  FOR vaseg IN aseg.FIRST .. aseg.LAST
                  LOOP
                     vpasexec := 15;

                     IF aseg.EXISTS (vaseg)
                     THEN
                        vpasexec := 16;

                        IF aseg (vaseg).sperson = sperson
                        THEN
                           vpasexec := 17;
                           aseg (vaseg).ctvinculo :=
                                        NVL (cvincle, aseg (vaseg).ctvinculo);
                           aseg (vaseg).fecretroact := pfecretroact;
                           aseg (vaseg).cparen := pcparen;
                           vpasexec := 18;

                           IF    cvincle IS NOT NULL
                              OR aseg (vaseg).ctvinculo IS NOT NULL
                           THEN
                              aseg (vaseg).ttvinculo :=
                                 pac_iax_listvalores.f_getdescvincle
                                                 (NVL (cvincle,
                                                       aseg (vaseg).ctvinculo
                                                      ),
                                                  mensajes
                                                 );
                           END IF;

                           /* BUG 26923 - 03/10/20013 - SHA - Guardem camp CDOMICI*/
                           vcdomici := NVL (pcdomici, 0);

                           IF vcdomici > -12
                           THEN
                              vpasexec := 19;

                              IF vcdomici > 0
                              THEN
                                 vpasexec := 20;

                                 IF aseg (vaseg).direcciones IS NULL
                                 THEN
                                    aseg (vaseg).direcciones :=
                                                         t_iax_direcciones
                                                                          ();
                                 END IF;

                                 vpasexec := 21;

                                 IF aseg (vaseg).direcciones.COUNT = 0
                                 THEN
                                    aseg (vaseg).direcciones.EXTEND;
                                    aseg (vaseg).direcciones
                                                (aseg (vaseg).direcciones.LAST
                                                ) := ob_iax_direcciones ();
                                 END IF;

                                 vpasexec := 22;
                                 aseg (vaseg).direcciones
                                                 (aseg (vaseg).direcciones.LAST
                                                 ).cdomici := pcdomici;
                                 pac_md_listvalores.p_ompledadesdireccions
                                    (sperson,
                                     pcdomici,
                                     vpmode,
                                     aseg (vaseg).direcciones
                                                 (aseg (vaseg).direcciones.LAST
                                                 ),
                                     msj
                                    );

                                 IF msj IS NOT NULL
                                 THEN
                                    IF msj.COUNT > 0
                                    THEN
                                       vpasexec := 23;
                                       pac_iobj_mensajes.p_mergemensaje
                                                                   (mensajes,
                                                                    msj
                                                                   );
                                       pac_iobj_mensajes.crea_nuevo_mensaje
                                                                    (mensajes,
                                                                     1,
                                                                     9000832
                                                                    );
                                       vpasexec := 24;
                                       RAISE e_object_error;
                                    END IF;
                                 END IF;
                              END IF;
                           END IF;

                           vpasexec := 25;
                           ries (vrie).riesgoase := aseg;
                        /* BUG 26923 - 03/10/20013 - SHA*/
                        END IF;
                     END IF;
                  END LOOP;
               /* BUG 26923 - 03/10/20013 - SHA*/
               END IF;
            /* fin Bug 0026588 - dlF - 02-IV-2013*/
            END IF;
         /*ACC 29122008*/
         END IF;
      END LOOP;

      vpasexec := 26;
      poliza.det_poliza.riesgos := ries;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabaasegurados;

   /*************************************************************************
   Lee datos gestion
   param out mensajes : mensajes de error
   return             : objeto datos gestion
   *************************************************************************/
   FUNCTION f_leedatosgestion (mensajes OUT t_iax_mensajes)
      RETURN ob_iax_gestion
   IS
      gest            ob_iax_gestion;
      nerr            NUMBER;
      vpasexec        NUMBER (8)                         := 1;
      vparam          VARCHAR2 (100)                     := NULL;
      vobject         VARCHAR2 (200)
                                    := 'PAC_IAX_PRODUCCION.F_LeeDatosGestion';
      /* Ini Bug 22839 - MDS - 05/11/2012*/
      v_ctipcob       prodherencia_colect.ctipcob%TYPE;
      valor_ctipcob   seguros.ctipcob%TYPE;
      /* Fin Bug 22839 - MDS - 05/11/2012*/
      /* Bug 25033 - 13/12/2012*/
      v_recfra        NUMBER;
      v_crecfra       NUMBER;
   /* Fin bug 25033*/
   BEGIN
      vpasexec := 100;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 110;
      gest :=
             pac_iobj_prod.f_partpoldatosgestion (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 120;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 130;
      /*JRh 07/2008 lo ponemos aqui para que nos calcule la fecha de vencimiento cuando sea necesario*/
      nerr := pac_md_produccion.f_set_calc_vencim_nduraci (gest, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 140;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 150;
      /* Bug 12136 - 24/03/2010 - JRH - 0012136: CEM - RVI - Verificacion productos RVI*/
      nerr := pac_md_produccion.f_set_pctrev (gest, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 160;
            RAISE e_object_error;
         END IF;
      END IF;

      /* Fi Bug 12136 - 24/03/2010 - JRH*/
      vpasexec := 170;

      /* Ini Bug 22839 - MDS - 05/10/2012*/
      /* heredar el CTIPCOB de la p??a con certificado 0*/
      IF     pac_mdpar_productos.f_get_parproducto ('ADMITE_CERTIFICADOS',
                                                    poliza.det_poliza.sproduc
                                                   ) = 1
         AND NOT pac_iax_produccion.isaltacol
      THEN
         nerr :=
            pac_productos.f_get_herencia_col (poliza.det_poliza.sproduc,
                                              15,
                                              v_ctipcob
                                             );

         IF NVL (v_ctipcob, 0) IN (1, 2) AND nerr = 0
         THEN
            /* Bug 24655 - RSC - 12/11/2012 - LCOL_T010-LCOL - Revision incidencias qtracker (II)*/
            IF     pac_mdobj_prod.f_get_needtarificarpol (poliza.det_poliza) =
                                                                            0
               AND gest.ctipcob IS NULL
            THEN
               /* Fin Bug 24655*/
               BEGIN
                  SELECT ctipcob
                    INTO valor_ctipcob
                    FROM seguros
                   WHERE npoliza = poliza.det_poliza.npoliza AND ncertif = 0;

                  gest.ctipcob := valor_ctipcob;
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;
            END IF;
         END IF;
      END IF;

      /* Bug 25033 - 13/12/2012*/
      IF     pac_mdpar_productos.f_get_parproducto ('ADMITE_CERTIFICADOS',
                                                    poliza.det_poliza.sproduc
                                                   ) = 1
         AND NOT pac_iax_produccion.isaltacol
      THEN
         nerr :=
            pac_productos.f_get_herencia_col (poliza.det_poliza.sproduc,
                                              3,
                                              v_recfra
                                             );

         IF NVL (v_recfra, 0) = 1 AND nerr = 0
         THEN
            BEGIN
               SELECT crecfra
                 INTO v_crecfra
                 FROM seguros
                WHERE npoliza = poliza.det_poliza.npoliza AND ncertif = 0;

               gest.crecfra := v_crecfra;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
         END IF;
      END IF;

      /* Fin Bug 25033*/
      /* Fin Bug 22839 - MDS - 05/10/2012*/

      -- INI IAXIS-4205 CJMR 15/08/2019
      vpasexec := 18;

      BEGIN
         SELECT cactivi
         INTO gest.cactivi
         FROM seguros
         WHERE npoliza = poliza.det_poliza.npoliza;
      EXCEPTION
         WHEN OTHERS THEN
          BEGIN
             SELECT cactivi
             INTO gest.cactivi
             FROM estseguros
             WHERE npoliza = poliza.det_poliza.npoliza;
          EXCEPTION
             WHEN OTHERS THEN
                NULL;
          END;
      END;
      -- FIN IAXIS-4205 CJMR 15/08/2019

      RETURN gest;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            nerr
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            nerr
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            nerr,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leedatosgestion;

   /*************************************************************************
   Grabar datos gestion
   param in pfefecto  : fecha efecto
   param in pcduraci  : codigo duracion
   param in pnduraci  : duracion
   param in pfvencim  : fecha vencimiento
   param in pcforpag  : forma de pago
   param in pctipcob  : codigo tipo de cobro
   param in pctipcom  : codigo tipo comision
   param in pcdtocom  : codigo descuento comercial
   param in pcidioma  : codigo idioma
   param out mensajes : mensajes de error
   param in pcbancar default null  : cuenta bancaria
   param in pcsubage default null  : codigo subagente
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabardatosgestion (
      pfefecto         IN       DATE,
      pcduraci         IN       NUMBER,
      pnduraci         IN       NUMBER,
      pfvencim         IN       DATE,
      pcforpag         IN       NUMBER,
      pctipcob         IN       NUMBER,
      /* SBG 04/2008*/
      ppolissa_ini     IN       VARCHAR2,
      pctipcom         IN       NUMBER,
      pdtocom          IN       NUMBER,
      pcidioma         IN       NUMBER,
      pcpolcia         IN       VARCHAR2,
      /* BUG 14585 - PFA - Anadir campo poliza compania*/
      mensajes         OUT      t_iax_mensajes,
      pcbancar         IN       VARCHAR2 DEFAULT NULL,
      pncuotar         IN       NUMBER DEFAULT NULL,
      /* BUG 0020761 - 03/01/2012 - JMF*/
      pcsubage         IN       NUMBER DEFAULT NULL,
      /*JRH 03/2008 A¿ado datos de producto financieros*/
      pndurper                  NUMBER DEFAULT NULL,
      ppcapfall                 NUMBER DEFAULT NULL,
      ppdoscab                  NUMBER DEFAULT NULL,
      pcforpagren               NUMBER DEFAULT NULL,
      /* Mantis 7919.#6.12/2008*/
      pndurcob         IN       NUMBER,
      pcrecfra         IN       NUMBER,
      /* Mantis 8613.acc*/
      pcagente         IN       NUMBER,
      /* Bug 14285 - 26/04/2010 - JRH - 0014285: CEM303 - Informar fecha de primer pago de renta en la contratacion e interes*/
      pinttec          IN       NUMBER DEFAULT NULL,
      pfppren          IN       DATE DEFAULT NULL,
      /* Fi Bug 14285 - 26/04/2010 - JRH*/
      /* Bug 16106 - 01/10/2010 - JRH - Poner cfprest*/
      pcfprest         IN       NUMBER DEFAULT NULL,
      /*JRH Forma de prestacion*/
      /* Fi Bug 16106 - 01/10/2010 - JRH*/
      /*BUG 18802 ETM--INI*/
      pnrenova         IN       NUMBER DEFAULT NULL,
      pccobban         IN       NUMBER DEFAULT NULL,
      /*Bug 19287 - 05/09/2011 - ICV*/
      pccompani        IN       NUMBER DEFAULT NULL,
      /*Bug 19287 - 05/09/2011 - LCF*/
      pcpromotor       IN       NUMBER DEFAULT NULL,
      /*Bug 19372/91763 - 12/09/2011 - AMC*/
      pctiprea         IN       NUMBER DEFAULT NULL,
      /*Bug 18981/96013 - 03/11/2011 - JRB*/
      pcreafac         IN       NUMBER DEFAULT NULL,
      /*Bug 18981/96013 - 03/11/2011 - JRB*/
      pcreatip         IN       NUMBER DEFAULT NULL,
      /*Bug 18981/96013 - 03/11/2011 - JRB*/
      pcmoneda         IN       NUMBER,
      /*FIN BUG 18802 ETM*/
      /* BUG 21924 - 16/04/2012 - ETM*/
      pctipretr        IN       NUMBER DEFAULT NULL,
      pcindrevfran     IN       NUMBER DEFAULT NULL,
      pprecarg         IN       NUMBER DEFAULT NULL,
      ppdtotec         IN       NUMBER DEFAULT NULL,
      ppreccom         IN       NUMBER DEFAULT NULL,
      /*fin BUG 21924 - 16/04/2012 - ETM*/
      pcdomper         IN       NUMBER DEFAULT NULL,
      /* BUG 21924 - MDS - 18/06/2012*/
      pfrenova         IN       DATE DEFAULT NULL,
      /* BUG 0023117 - FAL - 26/07/2012*/
      /* BUG 24685 2013-02-06 AEG*/
      pctipasignum              NUMBER DEFAULT NULL,
      pnpolizamanual            NUMBER DEFAULT NULL,
      pnpreimpreso              NUMBER DEFAULT NULL,
      /* fin BUG 24685 2013-02-06 AEG*/
      pnedamar                  NUMBER DEFAULT NULL,
      /* Bug 25584 MMS 20130410*/
      /* BUG 27500*/
      pnumfolio        IN       NUMBER DEFAULT NULL,
      pfmandato        IN       DATE DEFAULT NULL,
      psucursal        IN       VARCHAR2 DEFAULT NULL,
      phaymandatprev   IN       NUMBER DEFAULT NULL,
      pffinvig         IN       DATE DEFAULT NULL,
      -- Bug 32676 - 20141016 - MMS -- Agregammos ffinvin
      pfefeplazo       IN       DATE DEFAULT NULL,
      -- BUG 41143/229973 - 17/03/2016 - JAEG
      pfvencplazo      IN       DATE
            DEFAULT NULL               -- BUG 41143/229973 - 17/03/2016 - JAEG
   )
      RETURN NUMBER
   IS
      gest                    ob_iax_gestion;
      toma                    t_iax_tomadores;
      riscos                  t_iax_riesgos;
      gsc                     t_iax_garansegcom;
      sperson                 NUMBER                             := 0;
      nerr                    NUMBER;
      vpasexec                NUMBER (8)                         := 1;
      v_frevisio              DATE;
      /*BUG 8613 - 160309 - ACC - Suplement Canvi d'agent*/
      nerrfefec               NUMBER;
      vnivel                  NUMBER;
      vefectsuple             DATE                               := NULL;
      /*FI BUG 8613 - 160309 - ACC - Suplement Canvi d'agent*/
      vparam                  VARCHAR2 (700)
         :=    'pfefecto='
            || pfefecto
            || ' pcduraci='
            || pcduraci
            || ' pnduraci='
            || pnduraci
            || ' pfvencim='
            || pfvencim
            || ' pcforpag='
            || pcforpag
            || ' pctipcob='
            || pctipcob
            || ' pctipcom='
            || pctipcom
            || ' pdtocom='
            || pdtocom
            || ' pcidioma='
            || pcidioma
            || ' pcbancar='
            || pcbancar
            || ' pcsubage='
            || pcsubage
            || ' pndurper='
            || pndurper
            || ' ppcapfall='
            || ppcapfall
            || ' ppdoscab='
            || ppdoscab
            || ' pcforpagren='
            || pcforpagren
            || ' ppolissa_ini='
            || ppolissa_ini
            || ' pndurcob='
            || pndurcob
            || ' pcrecfra='
            || pcrecfra
            || ' pcagente='
            || pcagente
            || ' pinttec='
            || pinttec
            || ' pfppren='
            || TO_CHAR (pfppren, 'DD/MM/YYYY')
            || ' cfprest='
            || pcfprest
            || ' pnrenova='
            || pnrenova
            || ' pccobban= '
            || pccobban
            || ' pcpromotor:'
            || pcpromotor
            || ' pctiprea='
            || pctiprea
            || ' pcreafac='
            || pcreafac
            || ' pcmoneda='
            || pcmoneda
            || ' pctipretr= '
            || pctipretr
            || ' pcindrevfran= '
            || pcindrevfran
            || ' pprecarg= '
            || pprecarg
            || ' ppdtotec= '
            || ppdtotec
            || ' ppreccom= '
            || ppreccom
            || ' pcdomper= '
            || pcdomper
            || 'pnedamar= '
            || pnedamar
            /* BUG 21924 - MDS - 18/06/2012*/
            || ' pnumfolio= '
            || pnumfolio
            || ' pfmandato= '
            || pfmandato
            || ' psucursal= '
            || psucursal
            || 'phaymandatprev'
            || phaymandatprev
            /* BUG 27500 MANDATOS RSA*/
            || ' pffinvig= '
            || pffinvig                               -- Bug 32676 add FFINVIG
            || ' pfefeplazo= '
            || pfefeplazo              -- BUG 41143/229973 - 17/03/2016 - JAEG
            || ' pfvencplazo= '
            || pfvencplazo;            -- BUG 41143/229973 - 17/03/2016 - JAEG
      vobject                 VARCHAR2 (200)
                                  := 'PAC_IAX_PRODUCCION.F_GrabarDatosGestion';
      vindex                  NUMBER;
      /* Ini Bug 21907 - MDS - 02/05/2012*/
      pris                    t_iax_primas;
      ries                    t_iax_riesgos;
      v_pdtocom_ant           FLOAT;
      v_precarg_ant           FLOAT;
      v_pdtotec_ant           FLOAT;
      v_preccom_ant           FLOAT;
      v_triesgo               ob_iax_riesgos;
      cobjase                 NUMBER;
      /* Fin Bug 21907 - MDS - 02/05/2012*/
      /* BUG 0022839 - FAL - 24/07/2012*/
      v_recfra                prodherencia_colect.recfra%TYPE;
      v_crecfra               seguros.crecfra%TYPE;
      /* FI BUG 0022839*/
      /* Bug 23075 - FPG - 27/07/2012 - LCOL_T010-Figura del pagador - inicio*/
      t_gesc                  t_iax_gescobros;
      gesc                    ob_iax_gescobros;
      /* Bug 23075 - FPG - 27/07/2012 - LCOL_T010-Figura del pagador - final*/
      /* Bug 0023183 - DCG - 14/08/2012 - LCOL_T020-COA-Circuit d'alta de propostes amb coasseguran*/
      vcoa                    ob_iax_coacuadro;
      vcoacedido              t_iax_coacedido;
      npos                    NUMBER;
      vpct                    NUMBER;
      /* Ini Bug 22839 - MDS - 30/10/2012*/
      v_ccobban               prodherencia_colect.ccobban%TYPE;
      valor_ccobban           seguros.ccobban%TYPE;
      /* Fin Bug 22839 - MDS - 30/10/2012*/
      /* Bug 22839 - RSC - 22/11/2012*/
      v_sseguro               NUMBER;
      v_tomadores             t_iax_tomadores;
      v_cbancar               NUMBER;
      /* Fin Bug 22839*/
      /* Fin Bug 0023183*/
      v_ctipcom               NUMBER;
      /*Bug 27539 --ECP -- 02/07/2013*/
      v_cpregun_4788          preguntas.cpregun%TYPE             := 4788;
      v_crespue_4788          respuestas.crespue%TYPE;
      v_crespue_4788_est      respuestas.crespue%TYPE;
      /*Fin Bug 27539 --ECP -- 02/07/2013*/
      /* 125. MMM - 14/08/2013 - 0027896: LCOL_T020-Qtracker 8867 COASEGURADORAS NO ESTN LLEGANDO A JDE - Inicio*/
      vtotal                  NUMBER;
      /* 125. MMM - 14/08/2013 - 0027896: LCOL_T020-Qtracker 8867 COASEGURADORAS NO ESTN LLEGANDO A JDE - Fin*/
      /* MANDATOS RSA*/
      vcmandato               mandatos.cmandato%TYPE             := NULL;
      num_err                 NUMBER;
      /*JRH SI el producto es de convenios y estamos en movimiento de cambio de versi¿n o nueva producci¿n hay que tratar el convenio.*/
      vidvers                 cnv_conv_emp_seg.idversion%TYPE;
      vfechavers              DATE;
      vobversion              ob_iax_convempvers;
      gars                    t_iax_garantias;
      vexist                  NUMBER;
      v_existe_comis_nocero   BOOLEAN;
      v_extcontractual        NUMBER                             := NULL;
      -- BUG 724 - JLTS- 15/01/2018
      v_cobliga               NUMBER                             := NULL;
      -- BUG 724 - JLTS- 15/01/2018
      v_ctiprea               NUMBER                             := NULL;

      -- QT-2016-VCG-12/04/2018

      /* BUG 0039240 - FAL - 16/12/2015*/
      FUNCTION f_es_movconvenios
         RETURN BOOLEAN
      IS
         vesconv   BOOLEAN := FALSE;
      BEGIN
         IF     NVL (f_parproductos_v (poliza.det_poliza.sproduc,
                                       'ADMITE_CERTIFICADOS'
                                      ),
                     0
                    ) = 1
            AND pac_seguros.f_get_escertifcero (NULL,
                                                poliza.det_poliza.sseguro
                                               ) = 1
         THEN
            /*JRH No es necesario poner convenio en el 0*/
            RETURN vesconv;
         END IF;

         IF pac_convenios_emp.f_es_productoconvenios
                                                    (poliza.det_poliza.sproduc) =
                                                                             1
         THEN
            IF poliza.det_poliza.nmovimi = 1
            THEN
               vesconv := TRUE;
            ELSE
               IF pac_iax_suplementos.lstmotmov IS NOT NULL
               THEN
                  IF pac_iax_suplementos.lstmotmov.COUNT > 0
                  THEN
                     FOR j IN
                        pac_iax_suplementos.lstmotmov.FIRST .. pac_iax_suplementos.lstmotmov.LAST
                     LOOP
                        IF pac_iax_suplementos.lstmotmov.EXISTS (j)
                        THEN
                           IF pac_iax_suplementos.lstmotmov (j).cmotmov = 962
                           THEN
                              vesconv := TRUE;
                           END IF;
                        END IF;
                     END LOOP;
                  END IF;
               END IF;
            END IF;
         END IF;

         RETURN vesconv;
      END;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      gest :=
             pac_iobj_prod.f_partpoldatosgestion (poliza.det_poliza, mensajes);

      IF gest IS NULL
      THEN
         gest := ob_iax_gestion ();
      END IF;

      vpasexec := 3;
      toma := pac_iobj_prod.f_partpoltomadores (poliza.det_poliza, mensajes);

      IF toma IS NOT NULL
      THEN
         IF toma.COUNT > 0
         THEN
            vpasexec := 4;
            sperson := toma (toma.FIRST).sperson;

            /* Bug 23075 - FPG - 27/07/2012 - LCOL_T010-Figura del pagador - inicio*/
            IF NVL (toma (toma.FIRST).cexistepagador, 0) = 1
            THEN
               t_gesc := poliza.det_poliza.gestorcobro;

               IF t_gesc IS NULL
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903392);
                  vpasexec := 41;
                  RAISE e_object_error;
               ELSE
                  IF t_gesc.COUNT = 0
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                           1,
                                                           9903392
                                                          );
                     vpasexec := 42;
                     RAISE e_object_error;
                  END IF;
               END IF;

               IF mensajes IS NOT NULL
               THEN
                  IF mensajes.COUNT > 0
                  THEN
                     vpasexec := 43;
                     RAISE e_object_error;
                  END IF;
               END IF;

               vpasexec := 44;
               gesc := t_gesc (t_gesc.FIRST);

               IF gesc IS NULL
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903392);
                  vpasexec := 45;
                  RAISE e_object_error;
               END IF;

               sperson := gesc.sperson;
            ELSE
               /*JRH*/
               /*poliza.det_poliza.gestorcobro := t_iax_gescobros();*/
               NULL;
            END IF;

            /* Bug 22839 - RSC - 22/11/2012*/
            /* heredar el CBANCAR de la p??a con certificado 0*/
            IF     pac_mdpar_productos.f_get_parproducto
                                                       ('ADMITE_CERTIFICADOS',
                                                        vproducto
                                                       ) = 1
               AND NOT isaltacol
            THEN
               nerr :=
                  pac_productos.f_get_herencia_col (vproducto, 16, v_cbancar);

               IF NVL (v_cbancar, 0) = 1 AND nerr = 0
               THEN
                  /* Obtenemos el sseguro del certificado 0*/
                  nerr :=
                     pac_seguros.f_get_sseguro (poliza.det_poliza.npoliza,
                                                0,
                                                'POL',
                                                v_sseguro
                                               );
                  /* Obtenemos le tomador del certificado 0*/
                  v_tomadores :=
                     pac_iax_anulaciones.f_get_tomadores (v_sseguro, mensajes);

                  IF mensajes IS NOT NULL
                  THEN
                     IF mensajes.COUNT > 0
                     THEN
                        vpasexec := 46;
                        RAISE e_object_error;
                     END IF;
                  END IF;

                  sperson := v_tomadores (1).sperson;
               END IF;
            END IF;
         /* Bug 22839*/
         END IF;
      END IF;

      /*Bug 27539 --ECP -- 02/07/2013*/
      IF poliza.det_poliza.preguntas IS NOT NULL
      THEN
         IF poliza.det_poliza.preguntas.COUNT > 0
         THEN
            FOR i IN
               poliza.det_poliza.preguntas.FIRST .. poliza.det_poliza.preguntas.LAST
            LOOP
               IF v_cpregun_4788 = poliza.det_poliza.preguntas (i).cpregun
               THEN
                  v_crespue_4788 := poliza.det_poliza.preguntas (i).crespue;
               END IF;
            END LOOP;
         END IF;
      END IF;

      BEGIN
         SELECT crespue
           INTO v_crespue_4788_est
           FROM estpregunpolseg
          WHERE sseguro = poliza.det_poliza.sseguro
            AND cpregun = v_cpregun_4788;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_crespue_4788_est := NULL;
      END;

      /*Fin Bug 27539 --ECP -- 02/07/2013*/
      /*Bug 10194 - XPL -- 16/09/2009 - APR - A¿adir el campo Recargo Fraccionamiento en la pantalla de Simulacion*/
      IF    gest.cforpag <> pcforpag
         OR gest.crecfra <> pcrecfra
         OR gest.fefecto <> pfefecto
         OR gest.cduraci <> pcduraci
         OR gest.duracion <> NVL (pnduraci, 0)
         OR gest.fvencim <> pfvencim
         OR gest.ndurcob <> pndurcob
         /* BUG 21924 - 16/04/2012 - ETM*/
         OR NVL (gest.dtocom, 0) <> NVL (pdtocom, 0)
         OR gest.ctipretr <> pctipretr
         OR gest.cindrevfran <> pcindrevfran
         OR NVL (gest.precarg, 0) <> NVL (pprecarg, 0)
         OR NVL (gest.pdtotec, 0) <> NVL (ppdtotec, 0)
         OR NVL (gest.preccom, 0) <> NVL (ppreccom, 0)
         /*fin BUG 21924 - 16/04/2012 - ETM*/
         OR gest.frenova <> pfrenova
         /* BUG 0023117 - FAL - 26/07/2012*/
         /*Bug 27539 --ECP -- 02/07/2013*/
         OR v_crespue_4788 <> NVL (v_crespue_4788_est, v_crespue_4788)
      /*Fin Bug 27539 --ECP -- 02/07/2013*/
      THEN
         poliza.det_poliza.p_set_needtarificar (1);
      END IF;

      /*FI Bug 10194 - XPL -- 16/09/2009 - APR - A¿adir el campo Recargo Fraccionamiento en la pantalla de Simulacion*/
      vpasexec := 5;
      gest.fefecto := pfefecto;
      gest.cduraci := pcduraci;
      gest.duracion := pnduraci;
      gest.fvencim := pfvencim;
      gest.cforpag := pcforpag;
      gest.ctipcob := pctipcob;
      gest.ctipcom := pctipcom;
      /* BUG 21924 - 16/04/2012 - ETM*/
      v_pdtocom_ant := NVL (gest.dtocom, 0);
      v_precarg_ant := NVL (gest.precarg, 0);
      v_pdtotec_ant := NVL (gest.pdtotec, 0);
      v_preccom_ant := NVL (gest.preccom, 0);
      gest.dtocom := pdtocom;
      gest.ctipretr := pctipretr;
      gest.cindrevfran := pcindrevfran;
      gest.precarg := pprecarg;
      gest.pdtotec := ppdtotec;
      gest.preccom := ppreccom;
      /* fin BUG 21924 - 16/04/2012 - ETM*/
      gest.cdomper := pcdomper;
      /* BUG 21924 - MDS - 18/06/2012*/
      gest.frenova := pfrenova;
      /* BUG 0023117 - FAL - 26/07/2012*/
      gest.nedamar := pnedamar;                      -- Bug 25584 MMS 20130410
      gest.fefeplazo := pfefeplazo;    -- BUG 41143/229973 - 17/03/2016 - JAEG
      gest.fvencplazo := pfvencplazo;  -- BUG 41143/229973 - 17/03/2016 - JAEG

-- Ini IAXIS-12899 -- ECP -- 19/03/2020
      vfefeplazo := gest.fefeplazo;
      vfvencplazo := gest.fvencplazo;
-- Fin IAXIS-12899 -- ECP -- 19/03/2020
       --
         
      IF NVL
            (pac_iaxpar_productos.f_get_parproducto ('VIGENCIA_AMPARO',
                                                     poliza.det_poliza.sproduc
                                                    ),
             0
            ) = 0
      THEN
         --
         gest.fefeplazo := NULL;
         gest.fvencplazo := NULL;
      --
      END IF;
 
/*---------------------------------------------------------------------*/
/* BUG 24685 2013-02-06 AEG*/
/* pctipasignum : 0 automatico, 1 manual.*/
      IF NVL (pctipasignum, 0) = 1 AND pnpolizamanual IS NULL
      THEN
         /* error (Se Debe informar el n¿mero de p¿liza. Para preimpresos no Automaticos)*/
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9904931);
         RAISE e_object_error;
      END IF;

      IF NVL (pctipasignum, 0) = 0 AND pnpolizamanual IS NOT NULL
      THEN
         /* error (no debe informar el n¿mero de p¿liza)*/
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9904932);
         RAISE e_object_error;
      END IF;

      gest.ctipoasignum := NVL (pctipasignum, 0);
      /* BUG 27505 2013-08-02 SHA*/
      gest.npolizamanual := pnpolizamanual;
      gest.npreimpreso := pnpreimpreso;
      /* fin BUG 27505 2013-08-02 SHA*/
      /* fin BUG 24685 2013-02-06 AEG*/
      /* Ini Bug 21907 - MDS - 02/05/2012*/
      /* ACTUALIZAR porcentajes en el seguro*/
      /* obtener las primas de la p¿liza : poliza.det_poliza.primas*/
      vpasexec := 51;
      pris := pac_iobj_prod.f_partpolprimas (poliza.det_poliza, mensajes);

      IF pris IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903648);
         vpasexec := 52;
         RAISE e_object_error;
      /* Bug 21907 - RSC - 25/05/2012*/
      ELSE
         IF pris.COUNT = 0
         THEN
            poliza.det_poliza.primas :=
                pac_md_obtenerdatos.f_leeprimas (poliza.det_poliza, mensajes);

            IF mensajes IS NOT NULL
            THEN
               IF mensajes.COUNT > 0
               THEN
                  vpasexec := 19;
                  RAISE e_object_error;
               END IF;
            END IF;

            pris :=
                   pac_iobj_prod.f_partpolprimas (poliza.det_poliza, mensajes);
         /*pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 9903648);
         vpasexec := 53;
         RAISE e_object_error;*/
         END IF;
      /* Fin Bug 21907*/
      END IF;

      /* recorrido de las primas del seguro (tener en cuenta que es una lista de 1 solo elemento)*/
      /* guardando previamente los valores anteriores de los porcentajes*/
      /* y actualizar en el seguro*/
      IF pris.COUNT <> 0
      THEN
         FOR vpri IN pris.FIRST .. pris.LAST
         LOOP
            vpasexec := 54;

            IF pris.EXISTS (vpri)
            THEN
               /* actualizar los valores de los porcentajes*/
               vpasexec := 55;
               pris (vpri).pdtocom := NVL (pdtocom, 0);
               pris (vpri).precarg := NVL (pprecarg, 0);
               pris (vpri).pdtotec := NVL (ppdtotec, 0);
               pris (vpri).preccom := NVL (ppreccom, 0);
            END IF;

            nerr :=
               pac_iobj_prod.f_set_partprima (poliza.det_poliza,
                                              pris (vpri),
                                              mensajes
                                             );

            IF (nerr <> 0)
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903649);
               vpasexec := 56;
               RAISE e_object_error;
            END IF;
         END LOOP;

         /* PROPAGAR a sus riesgos (y autom¿ticamente a sus garant¿as)*/
         /* obtener los riesgos de la p¿liza : poliza.det_poliza.riesgos*/
         vpasexec := 57;
         ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

         /* recorrido de los riesgos del seguro*/
         IF ries IS NOT NULL
         THEN
            IF ries.COUNT > 0
            THEN
               FOR vrie IN ries.FIRST .. ries.LAST
               LOOP
                  vpasexec := 58;

                  IF ries.EXISTS (vrie)
                  THEN
                     IF     NVL
                               (pac_iaxpar_productos.f_get_parproducto
                                                       ('ADMITE_CERTIFICADOS',
                                                        vproducto
                                                       ),
                                0
                               ) = 1
                        AND isaltacol
                        AND NVL
                               (pac_iaxpar_productos.f_get_parproducto
                                                      ('ALTACERO_DESCRIPCION',
                                                       vproducto
                                                      ),
                                0
                               ) = 1
                        AND pdtocom IS NULL
                     THEN
                        NULL;
                     /* De moment en aquesta situaci?? tractem descomptes i recarregs desde el certificat 0.*/
                     /* Si algun dia hem de revisar aquesta funcionalitat haurem de mirar aqui.*/
                     /* Es posible que el que es va fer de descomptes i recarregs no funcioni per productes innominats*/
                     /* o risc descripcci?? que el codi d'abaix causa un error en tractar el grabarriesgodescripccion ja*/
                     /* que a la pantalla axisctr004 encara no hem introdu?riscos.*/
                     /* 113. 0026578: LCOL_A005-Error en alta de propuesta producto autos en entorno LCOL-Fase3 al en p?lizas domiciliadas - Inicio*/
                     ELSIF poliza.det_poliza.cobjase IN (3, 4, 5)
                     THEN
                        /*> 3.DESCRIPCI¿N/4.INNOMINADOS/5.VEH¿CULOS(AUTOS)*/
                        NULL;
                     /* Para los productos de autos como en el caso anterior no tratamos descuentos, ni recargos.*/
                     /* 113. 0026578: LCOL_A005-Error en alta de propuesta producto autos en entorno LCOL-Fase3 al en p?lizas domiciliadas - Fin*/
                     ELSE
                        /* Bug 24657 - DCT - 29/11/2102 los descuentos y recargos se pierden al pasar por segunda vez por la pantalla de gesti??continuar)*/
                        nerr :=
                           pac_iax_produccion.f_get_dtorec_riesgo
                                                  (vpmode,
                                                   vsolicit,
                                                   ries (vrie).nriesgo,
                                                   ries (vrie).primas.pdtocom,
                                                   ries (vrie).primas.precarg,
                                                   ries (vrie).primas.pdtotec,
                                                   ries (vrie).primas.preccom,
                                                   mensajes
                                                  );
                        nerr :=
                           pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                                           ries (vrie).nriesgo,
                                                           ries (vrie),
                                                           mensajes
                                                          );

                        IF (nerr <> 0)
                        THEN
                           pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                                 1,
                                                                 9001099
                                                                );
                           vpasexec := 6;
                           RAISE e_object_error;
                        END IF;

                        /* Fin bug 24657 DCT*/
                        /**/
                        /* propagar directamente la diferencia : pdtocom - v_pdtocom_ant*/
                        /* PDTCOM*/
                        IF issimul
                        THEN
                           IF NVL (pdtocom, 0) <> v_pdtocom_ant
                           THEN
                              nerr :=
                                 f_set_pdtocom_riesgogaran
                                                  (poliza.det_poliza.sseguro,
                                                   ries (vrie).nriesgo,
                                                   NVL (pdtocom, 0),
                                                   (  NVL (pdtocom, 0)
                                                    - v_pdtocom_ant
                                                   ),
                                                   mensajes
                                                  );
                           END IF;
                        ELSE
                           nerr :=
                              f_set_pdtocom_riesgogaran
                                                  (poliza.det_poliza.sseguro,
                                                   ries (vrie).nriesgo,
                                                   NVL (pdtocom, 0),
                                                   (  NVL (pdtocom, 0)
                                                    - v_pdtocom_ant
                                                   ),
                                                   mensajes
                                                  );
                        END IF;

                        /**/
                        /* propagar directamente la diferencia : pprecarg - v_precarg_ant*/
                        /* PRECARG*/
                        IF issimul
                        THEN
                           IF NVL (pprecarg, 0) <> v_precarg_ant
                           THEN
                              nerr :=
                                 f_set_precarg_riesgogaran
                                                  (poliza.det_poliza.sseguro,
                                                   ries (vrie).nriesgo,
                                                   NVL (pprecarg, 0),
                                                   (  NVL (pprecarg, 0)
                                                    - v_precarg_ant
                                                   ),
                                                   mensajes
                                                  );
                           END IF;
                        ELSE
                           nerr :=
                              f_set_precarg_riesgogaran
                                                  (poliza.det_poliza.sseguro,
                                                   ries (vrie).nriesgo,
                                                   NVL (pprecarg, 0),
                                                   (  NVL (pprecarg, 0)
                                                    - v_precarg_ant
                                                   ),
                                                   mensajes
                                                  );
                        END IF;

                        /**/
                        /* propagar directamente la diferencia : ppdtotec - v_pdtotec_ant*/
                        /* PDTOTEC*/
                        IF issimul
                        THEN
                           IF NVL (ppdtotec, 0) <> v_pdtotec_ant
                           THEN
                              nerr :=
                                 f_set_pdtotec_riesgogaran
                                                  (poliza.det_poliza.sseguro,
                                                   ries (vrie).nriesgo,
                                                   NVL (ppdtotec, 0),
                                                   (  NVL (ppdtotec, 0)
                                                    - v_pdtotec_ant
                                                   ),
                                                   mensajes
                                                  );
                           END IF;
                        ELSE
                           nerr :=
                              f_set_pdtotec_riesgogaran
                                                  (poliza.det_poliza.sseguro,
                                                   ries (vrie).nriesgo,
                                                   NVL (ppdtotec, 0),
                                                   (  NVL (ppdtotec, 0)
                                                    - v_pdtotec_ant
                                                   ),
                                                   mensajes
                                                  );
                        END IF;

                        /**/
                        /* propagar directamente la diferencia : ppreccom - v_preccom_ant*/
                        /* PRECCOM*/
                        IF issimul
                        THEN
                           IF NVL (ppreccom, 0) <> v_preccom_ant
                           THEN
                              nerr :=
                                 f_set_preccom_riesgogaran
                                                  (poliza.det_poliza.sseguro,
                                                   ries (vrie).nriesgo,
                                                   NVL (ppreccom, 0),
                                                   (  NVL (ppreccom, 0)
                                                    - v_preccom_ant
                                                   ),
                                                   mensajes
                                                  );
                           END IF;
                        ELSE
                           nerr :=
                              f_set_preccom_riesgogaran
                                                  (poliza.det_poliza.sseguro,
                                                   ries (vrie).nriesgo,
                                                   NVL (ppreccom, 0),
                                                   (  NVL (ppreccom, 0)
                                                    - v_preccom_ant
                                                   ),
                                                   mensajes
                                                  );
                        END IF;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;

         /* ACTUALIZAR CRGGARDIF = 1*/
         /* en el caso de que alg¿n riesgo de la p¿liza tenga alg¿n descuento o recargo diferente al de la propia p¿liza*/
         /* obtener nuevamente los riesgos de la p¿liza : poliza.det_poliza.riesgos*/
         vpasexec := 59;
         ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

         /* recorrido de los riesgos del seguro*/
         IF ries IS NOT NULL
         THEN
            IF ries.COUNT > 0
            THEN
               FOR vrie IN ries.FIRST .. ries.LAST
               LOOP
                  vpasexec := 60;

                  IF ries.EXISTS (vrie)
                  THEN
                     /* PDTCOM*/
                     IF pdtocom <> ries (vrie).primas.pdtocom
                     THEN
                        gest.crggardif := 1;
                     END IF;

                     /* PRECARG*/
                     IF pprecarg <> ries (vrie).primas.precarg
                     THEN
                        gest.crggardif := 1;
                     END IF;

                     /* PDTOTEC*/
                     IF ppdtotec <> ries (vrie).primas.pdtotec
                     THEN
                        gest.crggardif := 1;
                     END IF;

                     /* PRECCOM*/
                     IF ppreccom <> ries (vrie).primas.preccom
                     THEN
                        gest.crggardif := 1;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      END IF;

      /*BUG: 27539/149363 - INICIO - DCT - 19/007/2013*/
      poliza.det_poliza.ccompani := pccompani;

/*BUG: 27539/149363 - FIN - DCT - 19/007/2013*/
/* Fin Bug 21907 - MDS - 02/05/2012*/
/*---------------------------------------------------------------------*/
      IF     pac_mdpar_productos.f_get_parproducto
                                 ('ADMITE_CERTIFICADOS',
                                  pac_iax_produccion.poliza.det_poliza.sproduc
                                 ) = 1
         AND NOT pac_iax_produccion.isaltacol
         AND NOT pac_iax_produccion.issuplem
      THEN
         nerr :=
            pac_productos.f_get_herencia_col
                               (pac_iax_produccion.poliza.det_poliza.sproduc,
                                13,
                                v_ctipcom
                               );

         IF NVL (v_ctipcom, 0) = 1 AND nerr = 0 AND pctipcom IN (90, 92)
         THEN
            poliza.det_poliza.gstcomision :=
                 pac_iax_produccion.f_leegestioncomision (pctipcom, mensajes);
         /* BUG 0025214 - FAL - 24/12/2012*/
         END IF;
      END IF;

      /*19682: LCOL_T001: Adaptacion Comisiones especiales por poliza*/
      IF pctipcom IS NOT NULL AND pctipcom IN (90, 92)
      THEN
         /* BUG 0025214 - FAL - 24/12/2012*/
         IF     poliza.det_poliza.gstcomision IS NOT NULL
            AND poliza.det_poliza.gstcomision.COUNT > 0
         THEN
            v_existe_comis_nocero := FALSE;

            /* BUG 0039240 - FAL - 16/12/2015*/
            FOR vvindex IN
               poliza.det_poliza.gstcomision.FIRST .. poliza.det_poliza.gstcomision.LAST
            LOOP
               IF poliza.det_poliza.gstcomision.EXISTS (vvindex)
               THEN
                  IF poliza.det_poliza.gstcomision (vvindex).pcomisi IS NULL
                  /* OR poliza.det_poliza.gstcomision (vvindex).pcomisi = 0     -- BUG 0039240 - FAL - 16/12/2015 - Se permiten % = 0 siempre que exista alguna modalidad con % <> 0*/
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                           1,
                                                           9902533
                                                          );
                     RAISE e_object_error;
                  ELSIF poliza.det_poliza.gstcomision (vvindex).pcomisi <> 0
                  THEN
                     /* BUG 0039240 - FAL - 16/12/2015*/
                     v_existe_comis_nocero := TRUE;
                  END IF;
               END IF;
            END LOOP;

            IF NOT v_existe_comis_nocero
            THEN
               /* BUG 0039240 - FAL - 16/12/2015*/
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9902533);
               RAISE e_object_error;
            END IF;
         ELSE
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9902533);
            RAISE e_object_error;
         END IF;
      ELSE
         /* Si es diferent  a Comision especial seguro borrem l'objecte*/
         poliza.det_poliza.gstcomision := t_iax_gstcomision ();

         /* Bug 30642/169851 - 21/03/2014 - AMC*/
         DELETE      estcomisionsegu
               WHERE sseguro = pac_iax_produccion.poliza.det_poliza.sseguro
                 AND nmovimi = pac_iax_produccion.poliza.det_poliza.nmovimi;
      END IF;

      /* bfp bug 21947 ini*/
      IF pctipcom IS NOT NULL AND pctipcom <> 91
      THEN
         riscos :=
                 pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

         IF riscos.COUNT <> 0
         THEN
            /* BUG32705/182978 - DCT - 17/09/2014*/
            FOR v_riscos IN riscos.FIRST .. riscos.LAST
            LOOP
               IF riscos.EXISTS (v_riscos)
               THEN
                  IF riscos (v_riscos).att_garansegcom IS NOT NULL
                  THEN
                     riscos (v_riscos).att_garansegcom := NULL;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      /* bfp bug 21947 fi*/
      IF pccobban IS NOT NULL
      THEN
         gest.ccobban := pccobban;
      END IF;

      /* COLMENA MDS - 29/01/2014; asegurar que el cobrador bancario est¿ correctamente informado,*/
      /* ya que para los suplementos de pago de domiciliaci¿n a efectivo debe de estar vac¿o*/
      IF pccobban IS NULL
      THEN
         gest.ccobban := NULL;
      END IF;

      /**/
      vpasexec := 6;

      /* BUG 9282 - 02/03/2009 - SBG - Si arriba l'idioma a NULL, per defecte agafem el de*/
      /* l'empresa.*/
      IF pcidioma IS NULL
      THEN
         gest.cidioma :=
            pac_parametros.f_parempresa_n (pac_md_common.f_get_cxtempresa,
                                           'IDIOMA_DEF'
                                          );
      ELSE
         gest.cidioma := pcidioma;
      END IF;

      gest.polissa_ini := ppolissa_ini;
      vpasexec := 7;

      IF NVL (pcbancar, ' ') <> ' '
      THEN
         gest.ctipban :=
                pac_iax_listvalores.f_gettipban (sperson, pcbancar, mensajes);
         gest.cbancar := pcbancar;
         /* BUG 0020761 - 03/01/2012 - JMF*/
         gest.ncuotar := pncuotar;
      ELSE
         gest.ctipban := NULL;
         gest.cbancar := NULL;
         /* BUG 0020761 - 03/01/2012 - JMF*/
         gest.ncuotar := NULL;
      END IF;

      /* RSA MANDATOS*/
      IF NVL (pac_parametros.f_parempresa_n (pac_md_common.f_get_cxtempresa,
                                             'INS_MANDATO'
                                            ),
              0
             ) = 1
      THEN
         gest.numfolio := pnumfolio;
         gest.fmandato := pfmandato;
         gest.sucursal := psucursal;
         gest.haymandatprev := phaymandatprev;
         gest.ffinvig := pffinvig;

         IF NVL (pcbancar, ' ') <> ' '
         THEN
            num_err :=
                    pac_mandatos.f_get_mandato (sperson, pcbancar, vcmandato);

            IF (num_err <> 0)
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9906615);
               RAISE e_object_error;
            END IF;

            gest.cmandato := vcmandato;
         ELSE
            gest.cmandato := NULL;
         END IF;

         /*Para el caso de que no haya un mandato previo se comprueba que no introduzcan un numfolio repetido.*/
         IF NVL (phaymandatprev, 0) = 0
         THEN
            num_err := pac_mandatos.f_existe_folio (pnumfolio);

            IF (num_err <> 0)
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9906791);
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      gest.csubage := pcsubage;
      vpasexec := 8;

      /*JRH 03/2008 A¿ado datos de producto financieros*/
      IF    gest.ndurper <> pndurper
         OR gest.pcapfall <> ppcapfall
         OR gest.pdoscab <> ppdoscab
         OR gest.cforpagren <> pcforpagren
         /* Bug 14285 - 26/04/2010 - JRH - 0014285: CEM303 - Informar fecha de primer pago de renta en la contratacion e interes*/
         OR gest.inttec <> pinttec
         OR gest.fppren <> pfppren
         OR gest.cfprest <> pcfprest
      /* Fi Bug 14285 - 26/04/2010 - JRH*/
      THEN
         poliza.det_poliza.p_set_needtarificar (1);
      END IF;

      gest.ndurper := pndurper;
      gest.pcapfall := ppcapfall;
      gest.pdoscab := ppdoscab;
      gest.cforpagren := pcforpagren;
      /* Bug 14285 - 26/04/2010 - JRH - 0014285: CEM303 - Informar fecha de primer pago de renta en la contratacion e interes*/
      gest.inttec := pinttec;
      gest.fppren := pfppren;
      /* Fi Bug 14285 - 26/04/2010 - JRH*/
      /* Bug 16106 - 01/10/2010 - JRH - Poner cfprest*/
      gest.cfprest := pcfprest;
      /* Fi Bug 16106 - 01/10/2010 - JRH*/
      vpasexec := 9;
      gest.cmonpol := pcmoneda;

      IF gest.cmonpol IS NOT NULL
      THEN
         gest.tmonpol :=
            pac_md_listvalores.f_get_tmoneda (gest.cmonpol,
                                              gest.cmonpolint,
                                              mensajes
                                             );
      END IF;

      /* BUG19077:DRA:28/07/2011:Inici*/
      IF NOT issuplem
      THEN
         /*JRH 03/2008 Calculo de la fecha de revision. Ya la informamos.*/
         nerr :=
            pac_md_produccion.f_get_frevisio (poliza.det_poliza.sproduc,
                                              pnduraci,
                                              pndurper,
                                              pfefecto,
                                              gest.frevisio,
                                              mensajes
                                             );

         IF nerr <> 0
         THEN
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 10;

      IF pccobban IS NULL
      THEN
         /*es busca per tipus 1- Agent i tot seguit sino ha trobat registres per nivell 2- Banc*/
         nerr :=
            pac_md_adm.f_nivel_cobbancario (poliza.det_poliza.sproduc,
                                            1,
                                            vnivel,
                                            mensajes
                                           );

         IF vnivel = 0 AND nerr = 0
         THEN
            nerr :=
               pac_md_adm.f_nivel_cobbancario (poliza.det_poliza.sproduc,
                                               2,
                                               vnivel,
                                               mensajes
                                              );
         END IF;

         IF     (   NOT issuplem
                 OR (issuplem AND (vnivel = 1 OR gest.ccobban IS NULL))
                )
            AND NVL (gest.cbancar, ' ') <> ' '
         THEN
            nerr :=
               pac_md_produccion.f_get_cobban (poliza.det_poliza,
                                               gest,
                                               mensajes
                                              );
         END IF;
      END IF;

      /* Ini Bug 22839 - MDS - 30/10/2012*/
      /* heredar el CCOBBAN de la p??a con certificado 0*/
      IF     pac_mdpar_productos.f_get_parproducto ('ADMITE_CERTIFICADOS',
                                                    poliza.det_poliza.sproduc
                                                   ) = 1
         AND NOT pac_iax_produccion.isaltacol
      THEN
         nerr :=
            pac_productos.f_get_herencia_col (poliza.det_poliza.sproduc,
                                              17,
                                              v_ccobban
                                             );

         IF NVL (v_ccobban, 0) = 1 AND nerr = 0
         THEN
            BEGIN
               SELECT ccobban
                 INTO valor_ccobban
                 FROM seguros
                WHERE npoliza = poliza.det_poliza.npoliza AND ncertif = 0;

               gest.ccobban := valor_ccobban;
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
         END IF;
      END IF;

      /* Fin Bug 22839 - MDS - 30/10/2012*/
      vpasexec := 11;
      poliza.det_poliza.gestion := gest;
      vpasexec := 12;
      nerr := pac_md_produccion.f_set_calc_vencim_nduraci (gest, mensajes);
      vfefecto := gest.fefecto;
      vfvencim := gest.fvencim;
      /* Mantis 7919.#6.i. 12/2008*/
      gest.ndurcob := pndurcob;

      /* BUG 0022839 - FAL - 24/07/2012*/
      /* gest.crecfra := pcrecfra;*/
      IF     pac_mdpar_productos.f_get_parproducto ('ADMITE_CERTIFICADOS',
                                                    poliza.det_poliza.sproduc
                                                   ) = 1
         AND NOT pac_iax_produccion.isaltacol
      THEN
         nerr :=
            pac_productos.f_get_herencia_col (poliza.det_poliza.sproduc,
                                              3,
                                              v_recfra
                                             );

         IF NVL (v_recfra, 0) = 1 AND nerr = 0
         THEN
            BEGIN
               SELECT crecfra
                 INTO v_crecfra
                 FROM seguros
                WHERE npoliza = poliza.det_poliza.npoliza AND ncertif = 0;

               gest.crecfra := v_crecfra;
            EXCEPTION
               WHEN OTHERS
               THEN
                  gest.crecfra := pcrecfra;
            END;
         ELSE
            gest.crecfra := pcrecfra;
         END IF;
      ELSE
         gest.crecfra := pcrecfra;
      END IF;

      /* FI BUG 0022839*/
      poliza.det_poliza.gestion := gest;
      /*BUG 8613 - 160309 - ACC - Suplement Canvi d'agent*/
      vpasexec := 13;
-- Ini IAXIS-11905 -- ECP -- 20/02/2020
      IF pac_iax_produccion.issuplem
      THEN
         nerrfefec :=
            pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                   vnmovimi,
                                                   vefectsuple,
                                                   mensajes
                                                  );

         IF (nerrfefec <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001662);
            RAISE e_object_error;
         END IF;

         vpasexec := 14;

         IF pac_iax_validaciones.f_validacanviagent
                                                   (poliza.det_poliza.cagente,
                                                    pcagente,
                                                    vefectsuple,
                                                    mensajes
                                                   ) = 0
         THEN
            poliza.det_poliza.cagente := pcagente;
            vagente := pcagente;
            pac_md_common.p_set_cxtagenteprod (pcagente);
         ELSE
            RETURN 1;
         END IF;
      END IF;
      IF pac_iax_validaciones.f_validacanviagent
                                                   (poliza.det_poliza.cagente,
                                                    pcagente,
                                                    vefectsuple,
                                                    mensajes
                                                   ) = 0
         THEN
          vpasexec := 141;

         
            poliza.det_poliza.cagente := pcagente;
            vagente := pcagente;
             vpasexec := 142;

           
            pac_md_common.p_set_cxtagenteprod (pcagente);
            
            
         ELSE
            RETURN 1;
         END IF;
-- Fin IAXIS-11905 -- ECP -- 20/02/2020
      /**/
      /*FI BUG 8613 - 160309 - ACC - Suplement Canvi d'agent*/
      /**/
      poliza.det_poliza.cpolcia := pcpolcia;
      /* BUG 14585 - PFA - Anadir campo poliza compania*/
      vpasexec := 15;

      /* BUG9107:DRA:19-02-2009*/
      IF NOT issuplem AND NOT ismodifprop
      THEN
         IF pac_md_produccion.f_calcula_nrenova (poliza.det_poliza.sproduc,
                                                 NVL (pfefecto, f_sysdate),
                                                 poliza.det_poliza,
                                                 mensajes
                                                ) <> 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000458);
            RAISE e_object_error;
         END IF;

         /*BUG 18802--ETM--INI*/
         IF pnrenova IS NOT NULL AND (pnrenova <> poliza.det_poliza.nrenova)
         THEN
            poliza.det_poliza.nrenova := pnrenova;
         END IF;

         /*FIN BUG 18802--ETM*/
         /* BUG 25583/0136619 - FAL - 30/01/2012*/
         IF pfrenova IS NOT NULL
         THEN
            poliza.det_poliza.nrenova := TO_CHAR (pfrenova, 'mmdd');
         END IF;
      /* FI BUG 25583/0136619*/
      END IF;

      /*Bug 19372/91763 - 12/09/2011 - AMC*/
      poliza.det_poliza.cpromotor := pcpromotor;

       /*Bug 18981/96013 - 03/11/2011 - JRB*/
       /*Ini-QT2016-VCG-12/04/2018 */
      -- poliza.det_poliza.ctiprea := pctiprea;
      BEGIN
         SELECT ctiprea
           INTO v_ctiprea
           FROM seguros
          WHERE npoliza = poliza.det_poliza.npoliza AND ncertif = 0;

         poliza.det_poliza.ctiprea := v_ctiprea;
      EXCEPTION
         WHEN OTHERS
         THEN
            poliza.det_poliza.ctiprea := pctiprea;
      END;

      /*Fin-QT2016-VCG-12/04/2018 */
      poliza.det_poliza.creafac := pcreafac;
      poliza.det_poliza.creatip := pcreatip;
      /* Bug 0023183 - DCG - 14/08/2012 - LCOL_T020-COA-Circuit d'alta de propostes amb coasseguran*/
      vpct := 0;
      vcoa := pac_iobj_prod.f_partcoacuadro (poliza.det_poliza, mensajes);

      /*> obtener e cuadro*/
      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;
      vcoacedido := vcoa.coacedido;

      /*lalista*/
      IF vcoacedido IS NULL
      THEN
         vcoacedido := t_iax_coacedido ();
      END IF;

      npos := -1;

      /* Bug 23183/127195 - 07/11/2012 - AMC*/
      IF poliza.det_poliza.ctipcoa = 1
      THEN
         /*Buixa*/
         IF vcoacedido IS NOT NULL
         THEN
            IF vcoacedido.COUNT > 0
            THEN
               FOR vgst IN vcoacedido.FIRST .. vcoacedido.LAST
               LOOP
                  vpct := NVL (vcoacedido (vgst).pcescoa, 0) + vpct;
               END LOOP;

               vpct := vpct + vcoa.ploccoa;

               /*         END IF;*/
               IF vpct <> 100
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 180233);
                  RAISE e_object_error;
               /* 125. MMM - 14/08/2013 - 0027896: LCOL_T020-Qtracker 8867 COASEGURADORAS NO ESTN LLEGANDO A JDE - Inicio*/
               ELSE
                  vtotal := 100 - vcoa.ploccoa;

                  FOR vgst IN vcoacedido.FIRST .. vcoacedido.LAST
                  LOOP
                     IF vpct = 0
                     THEN
                        vcoacedido (vgst).pcesion := 0;
                     ELSE
                        vcoacedido (vgst).pcesion :=
                                   (vcoacedido (vgst).pcescoa * 100
                                   ) / vtotal;
                     END IF;
                  END LOOP;
               /* 125. MMM - 14/08/2013 - 0027896: LCOL_T020-Qtracker 8867 COASEGURADORAS NO ESTN LLEGANDO A JDE - Fin*/
               END IF;

               /* END IF;*/
               /* 126. KBR - 19/08/2013 - Se reubica el c¿digo para que solo se asigne si hay un cuadro*/
               /* 125. MMM - 14/08/2013 - 0027896: LCOL_T020-Qtracker 8867 COASEGURADORAS NO ESTN LLEGANDO A JDE - Inicio*/
               vcoa.coacedido := vcoacedido;
               poliza.det_poliza.coacuadro := vcoa;
            /* 125. MMM - 14/08/2013 - 0027896: LCOL_T020-Qtracker 8867 COASEGURADORAS NO ESTN LLEGANDO A JDE - Fin*/
            /* 126. KBR*/
            ELSIF vcoacedido.COUNT = 0
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9904464);
               RAISE e_object_error;
            END IF;
         ELSE
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9904464);
            RAISE e_object_error;
         END IF;
      END IF;

      /* Fi Bug 23183/127195 - 07/11/2012 - AMC*/
      /*CONVENIOS*/
      IF f_es_movconvenios
      THEN
         IF (    NVL (f_parproductos_v (poliza.det_poliza.sproduc,
                                        'ADMITE_CERTIFICADOS'
                                       ),
                      0
                     ) = 1
             AND pac_seguros.f_get_escertifcero (NULL,
                                                 poliza.det_poliza.sseguro
                                                ) <> 1
             AND pac_seguros.f_es_col_admin (poliza.det_poliza.sseguro) = 1
            )
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9907522);
            RAISE e_object_error;
         END IF;

         vpasexec := 40;

         IF (   NVL (f_parproductos_v (poliza.det_poliza.sproduc,
                                       'ADMITE_CERTIFICADOS'
                                      ),
                     0
                    ) = 0
             OR (    NVL (f_parproductos_v (poliza.det_poliza.sproduc,
                                            'ADMITE_CERTIFICADOS'
                                           ),
                          0
                         ) = 1
                 AND pac_seguros.f_get_escertifcero (NULL,
                                                     poliza.det_poliza.sseguro
                                                    ) <> 1
                 AND NOT pac_iax_produccion.isaltacol
                /* BUG 0034505 - FAL - 08/06/2015*/
                /* AND pac_seguros.f_es_col_admin(poliza.det_poliza.sseguro) = 0*/
                )
            )
         THEN
            IF poliza.det_poliza.convempvers.idversion IS NULL
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9907518);
               RAISE e_object_error;
            END IF;

            vpasexec := 41;
            nerr :=
               pac_md_convenios_emp.f_get_versactivaconv
                                        (poliza.det_poliza.convempvers.idconv,
                                         vidvers,
                                         vfechavers
                                        );

            IF nerr <> 0 OR vidvers IS NULL
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9907513);
               RAISE e_object_error;
            END IF;

            vpasexec := 42;

            IF vidvers <> poliza.det_poliza.convempvers.idversion
            THEN
               /*SI la versi¿n cambia la actualizamos para estos casos de movimientos*/
               vpasexec := 43;
               vobversion :=
                  pac_md_convenios_emp.f_get_versioncon
                                                  (poliza.det_poliza.sseguro,
                                                   vidvers,
                                                   vpmode
                                                  );

               IF vobversion.idversion IS NULL
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9907513);
                  RAISE e_object_error;
               END IF;

               vpasexec := 44;
               /*               nerr := pac_iax_convenios_emp.f_get_grabarconvempvers(vobversion, mensajes);*/
               /*               IF nerr <> 0 THEN*/
               /*                  pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 9907513);*/
               /*                  RAISE e_object_error;*/
               /*               END IF;*/
               pac_iax_produccion.poliza.det_poliza.convempvers := vobversion;
               /*Cambiamos versi¿n*/
               riscos :=
                  pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

               IF riscos IS NOT NULL
               THEN
                  FOR v_riscos IN riscos.FIRST .. riscos.LAST
                  LOOP
                     IF riscos.EXISTS (v_riscos)
                     THEN
                        gars :=
                           pac_iobj_prod.f_partriesgarantias
                                                           (riscos (v_riscos),
                                                            mensajes
                                                           );

                        IF gars IS NOT NULL
                        THEN
                           FOR v_gars IN gars.FIRST .. gars.LAST
                           LOOP
                              IF gars.EXISTS (v_gars)
                              THEN
                                 SELECT COUNT (*)
                                   INTO vexist
                                   FROM cnv_conv_emp_vers_gar
                                  WHERE idversion = vobversion.idversion
                                    AND cgarant = gars (v_gars).cgarant;

                                 IF vexist = 0
                                 THEN
                                    /*Si no existe la garant¿a en la versi¿n la eliminamos*/
                                    nerr :=
                                       pac_md_produccion.f_borrar_garantia
                                          (pac_iax_produccion.poliza.det_poliza.sseguro,
                                           riscos (v_riscos).nriesgo,
                                           pac_iax_produccion.poliza.det_poliza.nmovimi,
                                           gars (v_gars).cgarant,
                                           mensajes
                                          );

                                    IF nerr <> 0
                                    THEN
                                       pac_iobj_mensajes.crea_nuevo_mensaje
                                                                   (mensajes,
                                                                    1,
                                                                    9901941
                                                                   );
                                       RAISE e_object_error;
                                    END IF;

                                    /*                                    UPDATE estgaranseg*/
                                    /*                                       SET cobliga = 0*/
                                    /*                                     WHERE sseguro =*/
                                    /*                                                   pac_iax_produccion.poliza.det_poliza.sseguro*/
                                    /*                                       AND nriesgo = riscos(v_riscos).nriesgo*/
                                    /*                                       AND nmovimi =*/
                                    /*                                                   pac_iax_produccion.poliza.det_poliza.nmovimi*/
                                    /*                                       AND cgarant = gars(v_gars).cgarant;*/
                                    /* gars(v_gars) := ob_iax_garantias();*/
                                    gars.DELETE (v_gars);
                                 ELSE
                                    /*ob_iax_garantias*/
                                    gars (v_gars).primas := ob_iax_primas ();
                                 END IF;
                              END IF;
                           END LOOP;
                        END IF;

                        nerr :=
                           pac_iobj_prod.f_set_partriesgarantias
                                                    (poliza.det_poliza,
                                                     riscos (v_riscos).nriesgo,
                                                     gars,
                                                     mensajes
                                                    );

                        IF nerr <> 0
                        THEN
                           pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                                 1,
                                                                 9901941
                                                                );
                           RAISE e_object_error;
                        END IF;
                     /*riscos(v_riscos).garantias := gars;*/
                     END IF;
                  END LOOP;
               END IF;

               /*               IF poliza.det_poliza.riesgos IS NOT NULL   --dejamos preparado para la pantalla de garant¿ias*/
               /*                  AND poliza.det_poliza.riesgos.COUNT > 0 THEN*/
               /*                  FOR v_indice_riesgos IN*/
               /*                     poliza.det_poliza.riesgos.FIRST .. poliza.det_poliza.riesgos.LAST LOOP*/
               /*                     IF poliza.det_poliza.riesgos.EXISTS(v_indice_riesgos) THEN   --ACC corregit 29122008*/
               /**/
               /**/
               /*                        gars := pac_iobj_prod.f_partriesgarantias(rie, mensajes);*/
               /**/
               /*                        poliza.det_poliza.riesgos(v_indice_riesgos).garantias :=*/
               /*                                                                             t_iax_garantias*/
               /*                                                                                            ();*/
               /*                        IF poliza.det_poliza.cobjase IN(5) THEN   --autos*/
               /*                           poliza.det_poliza.riesgos(v_indice_riesgos).riesautos :=*/
               /*                                                                            t_iax_autriesgos*/
               /*                                                                                            ();*/
               /*                        END IF;*/
               /*                        pac_md_produccion.p_limpiar_tablas*/
               /*                                          (pac_iax_produccion.poliza.det_poliza.sseguro,*/
               /*                                           poliza.det_poliza.riesgos(v_indice_riesgos).nriesgo,*/
               /*                                           pac_iax_produccion.poliza.det_poliza.nmovimi,*/
               /*                                           pac_iax_produccion.poliza.det_poliza.cobjase,*/
               /*                                           pac_iax_produccion.vpmode, mensajes);*/
               /*                     END IF;*/
               /*                  END LOOP;*/
               /*               END IF;*/
               /*JRH Avisamos al usuario*/
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 2, 9907541);
               vpasexec := 45;
            END IF;
         END IF;
      END IF;

      /*CONVENIOS*/
      /* Fin Bug 0023183*/
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabardatosgestion;

   /*************************************************************************
   Establece la actividad de la poliza
   param in pcactivi  : codigo de actividad
   param out mensajes : mensajes de error
   return             : 0 todo ha sido correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_set_actividad (pcactivi IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      gest       ob_iax_gestion;
      nerr       NUMBER;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (100) := 'pcactivi = ' || pcactivi;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Set_Actividad';
      vcactivi   NUMBER;
      v_pcactivi NUMBER;    -- IAXIS-4205 CJMR 15/08/2019
   BEGIN

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vcactivi := poliza.det_poliza.gestion.cactivi;

      vpasexec := 2;

      IF pcactivi IS NOT NULL THEN
        vcactivi := pcactivi;
      END IF;

      /* Bug 10665 - 02/11/2009 - AMC*/
      --poliza.det_poliza.gestion.cactivi := NVL(pcactivi, 0);
      -- Ini IAXIS-4457 -- ECP -- 05/07/2019
          BEGIN
             UPDATE estseguros
                SET cactivi = NVL (vcactivi, 0)
              WHERE sseguro = pac_iax_produccion.poliza.det_poliza.sseguro;
          END;

       -- Fin IAXIS-4457 -- ECP -- 05/07/2019
      /* Fi Bug 10665 - 02/11/2009 - AMC*/
      /*BUG 9916 02/07/2009: ETM*/
      poliza.det_poliza.gestion.cactivi := NVL (vcactivi, 0);
      /*Bug.: 15313 - ICV - 19/07/2010*/
      pac_iaxpar_productos.p_set_prodactiviti (NVL (vcactivi, 0));
      vpasexec := 3;
      gest := pac_iobj_prod.f_partpoldatosgestion (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      IF gest IS NULL
      THEN
         vpasexec := 5;
         RAISE e_object_error;
      END IF;

      gest.cactivi := NVL (vcactivi, 0);
      nerr :=
         pac_iobj_prod.f_set_partpoldatosgestion (poliza.det_poliza,
                                                  gest,
                                                  mensajes
                                                 );

      IF nerr > 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001088);
         RETURN 1;
      END IF;

      IF vcactivi <> pcactivi
      THEN
         /*Netejem tot el que no sigui de l'activitat corresponent*/
         IF     poliza.det_poliza.riesgos IS NOT NULL
            AND poliza.det_poliza.riesgos.COUNT > 0
         THEN
            FOR v_indice_riesgos IN
               poliza.det_poliza.riesgos.FIRST .. poliza.det_poliza.riesgos.LAST
            LOOP
               IF poliza.det_poliza.riesgos.EXISTS (v_indice_riesgos)
               THEN
                  /*ACC corregit 29122008*/
                  poliza.det_poliza.riesgos (v_indice_riesgos).garantias :=
                                                           t_iax_garantias
                                                                          ();

                  IF poliza.det_poliza.cobjase IN (5)
                  THEN
                     /*autos*/
                     poliza.det_poliza.riesgos (v_indice_riesgos).riesautos :=
                                                          t_iax_autriesgos
                                                                          ();
                  END IF;

                  pac_md_produccion.p_limpiar_tablas
                         (pac_iax_produccion.poliza.det_poliza.sseguro,
                          poliza.det_poliza.riesgos (v_indice_riesgos).nriesgo,
                          pac_iax_produccion.poliza.det_poliza.nmovimi,
                          pac_iax_produccion.poliza.det_poliza.cobjase,
                          pac_iax_produccion.vpmode,
                          mensajes
                         );
               END IF;
            END LOOP;
         END IF;
      END IF;

      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         ROLLBACK;
         RETURN NULL;
   END f_set_actividad;

   -- INI CONF-1243 QT_724 - JLTS - 23/01/2018 - Se agrega nueva funcion f_get_finiefe
   /*************************************************************************
   Recupera la fecha de efecto de la poliza (garant¿a)
   param out mensajes : mensajes de error
   return             : codigo de actividad
   *************************************************************************/
   FUNCTION f_get_finiefe (mensajes OUT t_iax_mensajes)
      RETURN DATE
   IS
      gest        ob_iax_gestion;
      vpasexec    NUMBER (8)     := 1;
      vparam      VARCHAR2 (1)   := NULL;
      vobject     VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_get_fefecto';
      v_finiefe   DATE           := TO_DATE (NULL);
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      v_finiefe :=
         pac_md_produccion.f_get_finiefe (poliza.det_poliza.sseguro, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN v_finiefe;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_finiefe;

   -- FIN CONF-1243 QT_724

   /*************************************************************************
   Recupera la actividad de la poliza
   param out mensajes : mensajes de error
   return             : codigo de actividad
   *************************************************************************/
   FUNCTION f_get_actividad (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      gest       ob_iax_gestion;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_Actividad';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      gest :=
             pac_iobj_prod.f_partpoldatosgestion (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      IF gest IS NULL
      THEN
         vpasexec := 4;
         RETURN 0;
      /* RAISE e_object_error;*/
      END IF;

      RETURN NVL (gest.cactivi, 0);
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_actividad;

   /*************************************************************************
   Recupera el producto de la poliza
   param out mensajes : mensajes de error
   return             : codigo del producto
   *************************************************************************/
   FUNCTION f_get_producto (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_Producto';
   BEGIN
      IF poliza IS NULL OR poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 3;
      RETURN poliza.det_poliza.sproduc;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_producto;

   /*************************************************************************
   Retorna el idioma por defecto de la poliza
   param out mensajes : mensajes de error
   return             : number -> idioma por defecto de la poliza
   *************************************************************************/
   FUNCTION f_get_idiomadef (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      vnumerr        NUMBER;
      vpasexec       NUMBER (8)      := 1;
      vparam         VARCHAR2 (100)  := NULL;
      vobject        VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_Get_IdiomaDef';
      vt_tomadores   t_iax_tomadores;
   BEGIN
      /*Recuperacio del detall de la polissa*/
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 3;
      /*Recuperacio dels prenedors de la polissa*/
      vt_tomadores :=
                pac_iobj_prod.f_partpoltomadores (poliza.det_poliza, mensajes);

      IF vt_tomadores IS NULL
      THEN
         RAISE e_object_error;
      END IF;

      vpasexec := 5;

      IF vt_tomadores.COUNT = 0
      THEN
         RAISE e_object_error;
      END IF;

      /*Retorn de l'idioma del primer prenedor de la polissa*/
      RETURN vt_tomadores (1).cidioma;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_idiomadef;

   /*************************************************************************
   Lee los datos de la poliza (preguntas)
   param out mensajes : mensajes de error
   return             : objeto preguntas
   *************************************************************************/
   FUNCTION f_leepreguntaspoliza (mensajes OUT t_iax_mensajes)
      RETURN t_iax_preguntas
   IS
      preg       t_iax_preguntas;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_LeePreguntasPoliza';
      v_nerr     NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /* Bug 9109 - 12/02/2009 - RSC - APR: Preguntas semiautomaticas*/
      vpasexec := 2;
      preg := pac_iobj_prod.f_partpolpreguntas (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;
      /* Se inicializan las preguntas existentes desde producto*/
      v_nerr := pac_md_produccion.p_set_pregunprod (vnmovimi, preg, mensajes);

      IF v_nerr = 0
      THEN
         vpasexec := 5;
         poliza.det_poliza.preguntas := preg;
         /* Asignamos las preguntas a la poliza*/
         v_nerr :=
            pac_md_produccion.f_grabar_semiautomatpol (vnmovimi,
                                                       vfefecto,
                                                       poliza,
                                                       mensajes
                                                      );

         IF v_nerr <> 0
         THEN
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      ELSIF v_nerr = 1
      THEN
         vpasexec := 7;
         RAISE e_object_error;
      END IF;

      /*- Fin Bug 9109*/
      vpasexec := 8;
      preg := pac_iobj_prod.f_partpolpreguntas (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN preg;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leepreguntaspoliza;

   /*************************************************************************
   Grabar preguntas poliza
   param in cpregun  : Codigo de la pregunta
   param in crespue  : codigo de la respuesta
   param in trespue   : texto de la respuesta
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabapreguntaspoliza (
      cpregun    IN       NUMBER,
      crespue    IN       FLOAT,
      trespue    IN       VARCHAR2,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      preg          t_iax_preguntas;
      npos          NUMBER;
      nerr          NUMBER;
      v_diferente   BOOLEAN         := FALSE;
      /* t.7817*/
      vpasexec      NUMBER (8)      := 1;
      vparam        VARCHAR2 (500)
         :=    'cpregun='
            || cpregun
            || ' crespue='
            || crespue
            || ' trespue='
            || trespue;
      vobject       VARCHAR2 (200)
                                := 'PAC_IAX_PRODUCCION.F_GrabaPreguntasPoliza';
      v_ctarpol     NUMBER (1);

      /* t.7817*/
      /* comproba que el codigo de pregunta no exista*/
      /* devuelve la posicion del indice o bien -1 sino existe*/
      FUNCTION existpreg (cpregun IN NUMBER)
         RETURN NUMBER
      IS
      BEGIN
         IF preg IS NULL
         THEN
            RETURN -1;
         END IF;

         IF preg.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vprg IN preg.FIRST .. preg.LAST
         LOOP
            IF preg.EXISTS (vprg)
            THEN
               IF preg (vprg).cpregun = cpregun
               THEN
                  RETURN vprg;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existpreg;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 3;
      preg := pac_iobj_prod.f_partpolpreguntas (poliza.det_poliza, mensajes);

      IF preg IS NULL
      THEN
         preg := t_iax_preguntas ();
      END IF;

      vpasexec := 5;
      npos := existpreg (cpregun);
      vpasexec := 7;

      IF npos = -1
      THEN
         preg.EXTEND;
         preg (preg.LAST) := ob_iax_preguntas ();
         preg (preg.LAST).cpregun := cpregun;
         preg (preg.LAST).crespue := crespue;
         preg (preg.LAST).trespue := trespue;
         preg (preg.LAST).nmovimi := vnmovimi;
         /*BUG 24657-XVM-30/11/2012*/
         preg (preg.LAST).nmovima := vnmovimi;
         v_diferente := TRUE;
      /* t.7817*/
      ELSIF npos > -1
      THEN
         /* ini t.7817*/
         IF    NVL (preg (npos).crespue, '-111111') !=
                                                     NVL (crespue, '-111111')
            OR NVL (preg (npos).trespue, '@') != NVL (trespue, '@')
         THEN
            v_diferente := TRUE;
         END IF;

         /* fin t.7817*/
         preg (npos).crespue := crespue;
         preg (npos).trespue := trespue;
      END IF;

      /* ini Bug 0025753 - 21/01/2013 - JMF*/
      DECLARE
         v_codpreg   preguntas.cpregun%TYPE;
         t_tipreto   t_iax_retorno;
         t_tipcorr   t_iax_corretaje;
      BEGIN
         v_codpreg := f_parinstalacion_n ('PREG_RETORNO');

         IF cpregun = v_codpreg AND crespue = 0
         THEN
            /* Si han informado la pregunta del retorno a NO, aseguramos de borrar la informacion*/
            t_tipreto := poliza.det_poliza.retorno;

            IF t_tipreto IS NOT NULL
            THEN
               IF t_tipreto.COUNT > 0
               THEN
                  FOR f1 IN t_tipreto.FIRST .. t_tipreto.LAST
                  LOOP
                     IF t_tipreto.EXISTS (f1)
                     THEN
                        t_tipreto.DELETE (f1);
                     END IF;
                  END LOOP;
               END IF;
            END IF;

            DELETE      estrtn_convenio
                  WHERE sseguro = vsolicit;

            poliza.det_poliza.retorno := t_tipreto;
         END IF;

         v_codpreg := f_parinstalacion_n ('PREG_COCORRETAJE');

         IF cpregun = v_codpreg AND crespue = 0
         THEN
            /* Si han informado la pregunta del co-corretaje a NO, aseguramos de borrar la informacion*/
            t_tipcorr := poliza.det_poliza.corretaje;

            IF t_tipcorr IS NOT NULL
            THEN
               IF t_tipcorr.COUNT > 0
               THEN
                  FOR f2 IN t_tipcorr.FIRST .. t_tipcorr.LAST
                  LOOP
                     IF t_tipcorr.EXISTS (f2)
                     THEN
                        t_tipcorr.DELETE (f2);
                     END IF;
                  END LOOP;
               END IF;
            END IF;

            /* Bug 28132/152950 - 18/09/2013 - AMC*/
            IF issuplem
            THEN
               DELETE      estage_corretaje
                     WHERE sseguro = vsolicit AND islider = 0;

               UPDATE estage_corretaje
                  SET ppartici = 100
                WHERE sseguro = vsolicit AND islider = 1;
            ELSE
               DELETE      estage_corretaje
                     WHERE sseguro = vsolicit;
            END IF;

            /* Fi Bug 28132/152950 - 18/09/2013 - AMC*/
            poliza.det_poliza.corretaje := t_tipcorr;
         END IF;
      END;

      /* fin Bug 0025753 - 21/01/2013 - JMF*/
      vpasexec := 9;
      poliza.det_poliza.preguntas := preg;

      /* t.7817*/
      IF v_diferente
      THEN
         vpasexec := 11;
         nerr :=
            pac_mdpar_productos.f_pregneedtarif (poliza.det_poliza.cramo,
                                                 poliza.det_poliza.cmodali,
                                                 poliza.det_poliza.ctipseg,
                                                 poliza.det_poliza.ccolect,
                                                 cpregun,
                                                 v_ctarpol,
                                                 mensajes
                                                );

         IF nerr != 0
         THEN
            RAISE e_object_error;
         ELSE
            vpasexec := 13;

            /* Bug 17341 - RSC - 02/02/2011 - APR703 - Suplemento de preguntas - FlexiLife*/
            IF     NVL (f_parproductos_v (poliza.det_poliza.sproduc,
                                          'DETALLE_GARANT'
                                         ),
                        0
                       ) IN (1, 2)
               AND issuplem
            THEN
               IF v_ctarpol = 1 AND poliza.det_poliza.riesgos IS NOT NULL
               THEN
                  /* BUG 9282 - 02/03/2009 - SBG - Si no hi ha cap risc no cal continuar*/
                  IF poliza.det_poliza.riesgos.COUNT = 0
                  THEN
                     RETURN 0;
                  END IF;

                  FOR v_indice_riesgos IN
                     poliza.det_poliza.riesgos.FIRST .. poliza.det_poliza.riesgos.LAST
                  LOOP
                     IF poliza.det_poliza.riesgos.EXISTS (v_indice_riesgos)
                     THEN
                        /*ACC corregit 29122008*/
                        poliza.det_poliza.riesgos (v_indice_riesgos).p_set_needtarifar
                                                                          (0);
                     END IF;
                  END LOOP;
               END IF;
            ELSE
               /* Fin bug 17341*/
               IF v_ctarpol = 1 AND poliza.det_poliza.riesgos IS NOT NULL
               THEN
                  /* BUG 9282 - 02/03/2009 - SBG - Si no hi ha cap risc no cal continuar*/
                  IF poliza.det_poliza.riesgos.COUNT = 0
                  THEN
                     RETURN 0;
                  END IF;

                  FOR v_indice_riesgos IN
                     poliza.det_poliza.riesgos.FIRST .. poliza.det_poliza.riesgos.LAST
                  LOOP
                     IF poliza.det_poliza.riesgos.EXISTS (v_indice_riesgos)
                     THEN
                        /*ACC corregit 29122008*/
                        poliza.det_poliza.riesgos (v_indice_riesgos).p_set_needtarifar
                                                                          (1);
                     END IF;
                  END LOOP;
               END IF;
            /* Bug 17341 - RSC - 02/02/2011 - APR703 - Suplemento de preguntas - FlexiLife*/
            END IF;
         /* Fin bug 17341*/
         END IF;
      END IF;

      /* fin t.7817*/
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabapreguntaspoliza;

   /*************************************************************************
   Recupera las cuentas corrientes del primer tomador
   param out mensajes : mensajes de error
   return             : ref cursor
   *************************************************************************/
   FUNCTION f_get_tomadorccc (psperson OUT NUMBER, mensajes OUT t_iax_mensajes)
      RETURN sys_refcursor
   IS
      toma        t_iax_tomadores;
      tom         ob_iax_tomadores;
      cur         sys_refcursor;
      vpasexec    NUMBER (8)                         := 1;
      vparam      VARCHAR2 (1)                       := NULL;
      vobject     VARCHAR2 (200)     := 'PAC_IAX_PRODUCCION.F_Get_TomadorCCC';
      /* Bug 23075 - FPG - 27/07/2012 - LCOL_T010-Figura del pagador - inicio*/
      t_gesc      t_iax_gescobros;
      gesc        ob_iax_gescobros;
      /* Bug 23075 - FPG - 27/07/2012 - LCOL_T010-Figura del pagador - final*/
      /* Ini Bug 22839 - MDS - 30/10/2012*/
      v_sproduc   NUMBER                         := poliza.det_poliza.sproduc;
      v_npoliza   NUMBER                         := poliza.det_poliza.npoliza;
      v_cbancar   prodherencia_colect.cbancar%TYPE;
      num_err     NUMBER;
      v_mandato   VARCHAR2 (1)                       := NULL;
      /* Fin Bug 22839 - MDS - 30/10/2012*/
      --Inicio Bug 42129/235928 - 17/5/2016 - AMC
      vcrespue    NUMBER;
      vsseguro    NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      toma := pac_iobj_prod.f_partpoltomadores (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF toma IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001089);
         vpasexec := 5;
         RAISE e_object_error;
      ELSE
         IF toma.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001089);
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 7;
      tom := toma (toma.FIRST);

      IF tom IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001089);
         vpasexec := 8;
         RAISE e_object_error;
      END IF;

      /*RSA MANDATOS*/
      IF NVL (pac_parametros.f_parempresa_n (pac_md_common.f_get_cxtempresa,
                                             'INS_MANDATO'
                                            ),
              0
             ) = 1
      THEN
         v_mandato := 'S';
      END IF;

      /* Bug 23075 - FPG - 27/07/2012 - LCOL_T010-Figura del pagador*/
      /* Si existe pagador obtendremos las cuentas bancarias del pagador en vez del tomador*/
      /*      cur := pac_md_produccion.f_get_tomadorccc(tom.sperson, mensajes,*/
      /*                                                poliza.det_poliza.sseguro);*/
      /*      psperson := tom.sperson;*/
      IF tom.cexistepagador = 1
      THEN
         t_gesc :=
                pac_iobj_prod.f_partpolgescobro (poliza.det_poliza, mensajes);

         IF t_gesc IS NULL
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903392);
            vpasexec := 9;
            RAISE e_object_error;
         ELSE
            IF t_gesc.COUNT = 0
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903392);
               vpasexec := 10;
               RAISE e_object_error;
            END IF;
         END IF;

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 11;
               RAISE e_object_error;
            END IF;
         END IF;

         vpasexec := 12;
         gesc := t_gesc (t_gesc.FIRST);

         IF gesc IS NULL
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903392);
            vpasexec := 13;
            RAISE e_object_error;
         END IF;

         cur :=
            pac_md_produccion.f_get_pagadorccc (gesc.sperson,
                                                mensajes,
                                                poliza.det_poliza.sseguro,
                                                v_mandato
                                               );
         psperson := gesc.sperson;
      ELSE
         /* Ini Bug 22839 - MDS - 30/10/2012*/
         /* heredar el CBANCAR de la p??a con certificado 0*/
         IF     pac_mdpar_productos.f_get_parproducto ('ADMITE_CERTIFICADOS',
                                                       v_sproduc
                                                      ) = 1
            AND NOT isaltacol
         THEN
            num_err :=
                  pac_productos.f_get_herencia_col (v_sproduc, 16, v_cbancar);

            --Inicio Bug 42129/235928 - 17/5/2016 - AMC
            SELECT sseguro
              INTO vsseguro
              FROM seguros
             WHERE npoliza = v_npoliza AND ncertif = 0;

            num_err :=
               pac_preguntas.f_get_pregunpolseg (vsseguro,
                                                 4092,
                                                 'POL',
                                                 vcrespue
                                                );

            IF NVL (v_cbancar, 0) = 1 AND num_err = 0 AND NVL (vcrespue, 1) =
                                                                             1
            THEN
               /* hereda del certificado 0*/
               cur :=
                  pac_md_produccion.f_get_tomadorccc_certif0 (tom.sperson,
                                                              mensajes,
                                                              v_npoliza,
                                                              v_mandato
                                                             );
            ELSE
               /* igual que hasta ahora*/
               cur :=
                  pac_md_produccion.f_get_tomadorccc
                                                  (tom.sperson,
                                                   mensajes,
                                                   poliza.det_poliza.sseguro,
                                                   v_mandato
                                                  );
            END IF;
         --Fin Bug 42129/235928 - 17/5/2016 - AMC
         ELSE
            /* Fin Bug 22839 - MDS - 30/10/2012*/
            cur :=
               pac_md_produccion.f_get_tomadorccc (tom.sperson,
                                                   mensajes,
                                                   poliza.det_poliza.sseguro,
                                                   v_mandato
                                                  );
         END IF;

         psperson := tom.sperson;
      END IF;

      /* Fin Bug 23075*/
      RETURN cur;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
   END f_get_tomadorccc;

   /*************************************************************************
   Recupera los riesgos de la poliza para gestionarlos
   param out mensajes : mensajes de error
   return             : objeto gestion riesgos
   *************************************************************************/
   FUNCTION f_get_gestriesgos (mensajes OUT t_iax_mensajes)
      RETURN t_iax_gestriesgos
   IS
      ries       t_iax_riesgos;
      gries      t_iax_gestriesgos := t_iax_gestriesgos ();
      gars       t_iax_garantias;
      vcobjase   NUMBER            := poliza.det_poliza.cobjase;
      pri        ob_iax_primas;
      vpasexec   NUMBER (8)        := 1;
      vparam     VARCHAR2 (1)      := NULL;
      vobject    VARCHAR2 (200)    := 'PAC_IAX_PRODUCCION.F_Get_GestRiesgos';
      nerr       NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      IF ries IS NULL
      THEN
         IF isnewsol = FALSE
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000441);
            vpasexec := 4;
            RAISE e_object_error;
         ELSE
            RETURN NULL;
         END IF;
      ELSE
         IF ries.COUNT = 0
         THEN
            IF isnewsol = FALSE
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000441);
               vpasexec := 5;
               RAISE e_object_error;
            ELSE
               RETURN NULL;
            END IF;
         END IF;
      END IF;

      vpasexec := 6;

      FOR vrie IN ries.FIRST .. ries.LAST
      LOOP
         vpasexec := 7;

         IF ries.EXISTS (vrie)
         THEN
            vpasexec := 8;

            /*ACC 16122008 controlar no mostrar assegurat baixa*/
            IF ries (vrie).fanulac IS NULL AND ries (vrie).nmovimb IS NULL
            THEN
               gars :=
                    pac_iobj_prod.f_partriesgarantias (ries (vrie), mensajes);
               /********* ACC
               s'ha de recuperar totes les garantias existents desde productes
               **************/
               vpasexec := 81;
               /* BUG8947:DRA:14/07/2009:Inici*/
               nerr := 0;

               /* nerr := pac_md_produccion.p_set_garanprod(gars, vnmovimi, mensajes);*/
               /* BUG8947:DRA:14/07/2009:Fi*/
               IF nerr = 0
               THEN
                  vpasexec := 82;
                  /* nerr:= PAC_IOBJ_PROD.F_Set_Partriesgarantias(poliza.det_poliza,ries(vrie).nriesgo,gars,mensajes);*/
                  ries (vrie).garantias := gars;
               ELSIF nerr = 1
               THEN
                  vpasexec := 83;
                  RAISE e_object_error;
               END IF;

               IF vcobjase = 1
               THEN
                  /* personal*/
                  vpasexec := 9;

                  IF ries (vrie).riespersonal IS NOT NULL
                  THEN
                     vpasexec := 10;

                     IF ries (vrie).riespersonal.COUNT > 0
                     THEN
                        vpasexec := 11;

                        FOR vrper IN
                           ries (vrie).riespersonal.FIRST .. ries (vrie).riespersonal.LAST
                        LOOP
                           vpasexec := 11;

                           IF ries (vrie).riespersonal.EXISTS (vrper)
                           THEN
                              vpasexec := 12;
                              gries.EXTEND;
                              gries (gries.LAST) := ob_iax_gestriesgos ();
                              gries (gries.LAST).nriesgo :=
                                                          ries (vrie).nriesgo;
                              vpasexec := 13;
                              /*// ACC 26022008 gries(gries.last).triesgo := F_NOMBRE(ries(vrie).riespersonal(vrper).sperson,2);*/
                              /* LPS (18/06/2008) Modificacion para unificar la obtencion de la descrip. del risgo.*/
                              ries (vrie).get_descriesgo
                                                  (poliza.det_poliza.cobjase,
                                                   vsolicit,
                                                   gries (gries.LAST).triesgo,
                                                   vpmode
                                                  );
                              /* Fin LPS (18/06/2008)*/
                              vpasexec := 14;
                              pri :=
                                 ries (vrie).f_get_primas (vsolicit,
                                                           vnmovimi,
                                                           vpmode
                                                          );

                              IF pri IS NOT NULL
                              THEN
                                 vpasexec := 15;
                                 /*sbg   gries(gries.last).primatotal := pri.primaseguro;*/
                                 /*gries(gries.last).primatotal := pri.IPRITOT;*/
                                 gries (gries.LAST).primatotal := pri.itotalr;
                                 gries (gries.LAST).itotanu := pri.itotanu;
                              /*Bug.: 18638*/
                              END IF;
                           END IF;
                        END LOOP;
                     END IF;
                  END IF;
               ELSIF vcobjase = 2
               THEN
                  /*domicilio*/
                  vpasexec := 16;

                  IF ries (vrie).riesdireccion IS NOT NULL
                  THEN
                     vpasexec := 17;
                     gries.EXTEND;
                     gries (gries.LAST) := ob_iax_gestriesgos ();
                     gries (gries.LAST).nriesgo := ries (vrie).nriesgo;
                     /*gries (gries.LAST).triesgo := ries (vrie).tnatrie;*/
                     ries (vrie).get_descriesgo (poliza.det_poliza.cobjase,
                                                 vsolicit,
                                                 gries (gries.LAST).triesgo,
                                                 vpmode
                                                );
                     vpasexec := 21;
                     /*ries(vrie).riesdireccion*/
                     /* Fin LPS (18/06/2008)*/
                     vpasexec := 22;
                     pri :=
                         ries (vrie).f_get_primas (vsolicit, vnmovimi, vpmode);

                     IF pri IS NOT NULL
                     THEN
                        vpasexec := 23;
                        /*sbg gries(gries.last).primatotal := pri.primaseguro;*/
                        /*gries (gries.LAST).primatotal := pri.ipritot;*/
                        gries (gries.LAST).primatotal := pri.itotalr;
                        gries (gries.LAST).itotanu := pri.itotanu;
                     /*Bug.: 18638*/
                     END IF;
                  END IF;
               ELSIF vcobjase = 3 OR vcobjase = 4
               THEN
                  /*descripcion*/
                  vpasexec := 24;
                  gries.EXTEND;
                  gries (gries.LAST) := ob_iax_gestriesgos ();
                  gries (gries.LAST).nriesgo := ries (vrie).nriesgo;
                  /*gries (gries.LAST).triesgo := ries (vrie).tnatrie;*/
                  ries (vrie).get_descriesgo (poliza.det_poliza.cobjase,
                                              vsolicit,
                                              gries (gries.LAST).triesgo,
                                              vpmode
                                             );
                  vpasexec := 25;
                  pri := ries (vrie).f_get_primas (vsolicit, vnmovimi, vpmode);

                  IF pri IS NOT NULL
                  THEN
                     vpasexec := 26;
                     /*sbg gries(gries.last).primatotal := pri.primaseguro;*/
                     /*gries (gries.LAST).primatotal := pri.ipritot;*/
                     gries (gries.LAST).primatotal := pri.itotalr;
                     gries (gries.LAST).itotanu := pri.itotanu;
                  /*Bug.: 18638*/
                  END IF;
               ELSIF vcobjase = 5
               THEN
                  /*automovil*/
                  vpasexec := 27;

                  IF ries (vrie).riesautos IS NOT NULL
                  THEN
                     vpasexec := 28;

                     IF ries (vrie).riesautos.COUNT > 0
                     THEN
                        vpasexec := 29;

                        FOR vraut IN
                           ries (vrie).riesautos.FIRST .. ries (vrie).riesautos.LAST
                        LOOP
                           vpasexec := 30;

                           IF ries (vrie).riesautos.EXISTS (vraut)
                           THEN
                              vpasexec := 31;
                              gries.EXTEND;
                              gries (gries.LAST) := ob_iax_gestriesgos ();
                              gries (gries.LAST).nriesgo :=
                                                          ries (vrie).nriesgo;
                              vpasexec := 32;
                              ries (vrie).get_descriesgo
                                                  (poliza.det_poliza.cobjase,
                                                   vsolicit,
                                                   gries (gries.LAST).triesgo,
                                                   vpmode
                                                  );
                              /* LPS (18/06/2008) Modificacion para unificar la obtencion de la descrip. del risgo.*/
                              /*Bug 9247 - APD -- 17/03/2009 - el orden de los parametros al llamar a get_descripcion no era correcto*/
                              ries (vrie).riesautos (vraut).get_descripcion
                                                   (vsolicit,
                                                    gries (gries.LAST).nriesgo,
                                                    gries (gries.LAST).triesgo,
                                                    vpmode
                                                   );
                              /*Bug 9247 - APD -- 17/03/2009 - Fin*/
                              /* Fin LPS (18/06/2008)*/
                              vpasexec := 33;
                              pri :=
                                 ries (vrie).f_get_primas (vsolicit,
                                                           vnmovimi,
                                                           vpmode
                                                          );

                              IF pri IS NOT NULL
                              THEN
                                 vpasexec := 34;
                                 /*sbg gries(gries.last).primatotal := pri.primaseguro;*/
                                 /*gries(gries.last).primatotal := pri.IPRITOT;*/
                                 gries (gries.LAST).primatotal := pri.itotalr;
                                 gries (gries.LAST).itotanu := pri.itotanu;
                              /*Bug.: 18638*/
                              END IF;
                           END IF;
                        END LOOP;
                     END IF;
                  ELSE
                     vpasexec := 30;
                     gries.EXTEND;
                     vpasexec := 31;
                     gries (gries.LAST) := ob_iax_gestriesgos ();
                     gries (gries.LAST).nriesgo := 1;
                     vpasexec := 32;
                  END IF;
               END IF;

               vpasexec :=
                  pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                                  ries (vrie).nriesgo,
                                                  ries (vrie),
                                                  mensajes
                                                 );
            END IF;
         END IF;
      END LOOP;

      RETURN gries;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_gestriesgos;

   /*************************************************************************
   Recupera el riesgo indicado
   param in nriesgo   : numero de riesgo
   param out mensajes : mensajes de error
   return             : objeto riesgo
   *************************************************************************/
   FUNCTION f_get_riesgo (nriesgo IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN ob_iax_riesgos
   IS
      rie        ob_iax_riesgos;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (100) := 'nriesgo:' || nriesgo;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_Riesgo';
      vnriesgo   NUMBER         := nriesgo;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;

      IF NVL (vnriesgo, -99) = -99
      THEN
         vnriesgo := 1;
      END IF;

      vpasexec := 3;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, vnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001090);
         vpasexec := 4;
         RAISE e_object_error;
      END IF;

      /*ACC 16122008 controlar no mostrar risc baixa*/
      IF rie.fanulac IS NOT NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001091);
         RETURN NULL;
      END IF;

      /*ACC 16122008*/
      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      /* ini BUG 0027305 - 30/09/2013 - JMF*/
      BEGIN
         IF pac_parametros.f_parempresa_n (pac_md_common.f_get_cxtempresa,
                                           'OCULPORCEN_REPLEG'
                                          ) = 1
         THEN
            IF rie.beneficiario IS NOT NULL
            THEN
               IF rie.beneficiario.benefesp IS NOT NULL
               THEN
                  IF rie.beneficiario.benefesp.benef_riesgo IS NOT NULL
                  THEN
                     IF rie.beneficiario.benefesp.benef_riesgo.COUNT > 0
                     THEN
                        FOR i IN
                           rie.beneficiario.benefesp.benef_riesgo.FIRST .. rie.beneficiario.benefesp.benef_riesgo.LAST
                        LOOP
                           IF rie.beneficiario.benefesp.benef_riesgo.EXISTS
                                                                          (i)
                           THEN
                              IF rie.beneficiario.benefesp.benef_riesgo (i).ctipben =
                                                                            3
                              THEN
                                 /* Si es representante legal, no mostrar el porcentaje.*/
                                 rie.beneficiario.benefesp.benef_riesgo (i).pparticip :=
                                                                         NULL;
                              END IF;
                           END IF;
                        END LOOP;
                     END IF;
                  END IF;
               END IF;
            END IF;
         END IF;
      END;

      /* fin BUG 0027305 - 30/09/2013 - JMF*/
      RETURN rie;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_riesgo;

   /*************************************************************************
   Recupera la prima de un riesgo
   param in nriesgo   : numero de riesgo
   param out mensajes : mensajes de error
   return             : objeto gestion riesgos
   *************************************************************************/
   FUNCTION f_get_gestriesgo (nriesgo IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      rie        ob_iax_riesgos;
      pri        ob_iax_primas;
      pseg       NUMBER         := 0;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_GestRiesgo';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000441);
         vpasexec := 5;
         RAISE e_object_error;
      END IF;

      /*ACC 16122008 controlar no mostrar risc baixa*/
      IF rie.fanulac IS NOT NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001091);
         RETURN NULL;
      END IF;

      /*ACC 16122008*/
      vpasexec := 6;
      pri := rie.f_get_primas (vsolicit, vnmovimi, vpmode);
      vpasexec :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         nriesgo,
                                         rie,
                                         mensajes
                                        );

      IF pri IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001092);
      END IF;

      vpasexec := 7;
      /*sbg pseg:= pri.primaseguro;*/
      pseg := pri.ipritot;
      RETURN pseg;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN pseg;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN pseg;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN pseg;
   END f_get_gestriesgo;

   /*************************************************************************
   Recupera la descripcion de un riesgo
   param in pnriesgo   : numero de riesgo
   param out mensajes  : mensajes de error
   return              : descripcion riesgo
   *************************************************************************/
   FUNCTION f_get_descriesgo (pnriesgo IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN VARCHAR2
   IS
      rie        ob_iax_riesgos;
      RESULT     VARCHAR2 (1000);
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_DescRiesgo';
   BEGIN
      rie := f_get_riesgo (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      /* LPS (18/06/2008) Modificacion para unificar la obtencion de la descrip. del risgo.*/
      rie.get_descriesgo (poliza.det_poliza.cobjase, vsolicit, RESULT, vpmode);
      /* Fin LPS (18/06/2008)*/
      RETURN RESULT;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_descriesgo;

   /*************************************************************************
   Elimina un riesgo
   param in pnriesgo   : numero de riesgo
   param out mensajes  : mensajes de error
   return              : 0 todo ha sido correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_eliminariesgo (pnriesgo IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      ries          t_iax_riesgos;
      rie           ob_iax_riesgos;
      aseg          t_iax_asegurados;
      vpasexec      NUMBER (8)       := 1;
      vparam        VARCHAR2 (100)   := 'pnriesgo=' || pnriesgo;
      vobject       VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_EliminaRiesgo';
      ndel          NUMBER           := 0;
      vnumerr       NUMBER;
      vencontrado   BOOLEAN;
      nerrfanul     NUMBER;
      vfanulac      DATE;
      v_numpol      NUMBER;
      nerr          NUMBER;
      nerranulr     NUMBER;

      FUNCTION islastactiveriesgo
         RETURN BOOLEAN
      IS
         ncont   NUMBER := ries.COUNT;
      BEGIN
         FOR vrie IN ries.FIRST .. ries.LAST
         LOOP
            IF ries.EXISTS (vrie)
            THEN
               IF    ries (vrie).fanulac IS NOT NULL
                  OR ries (vrie).nmovimb IS NOT NULL
               THEN
                  ncont := ncont - 1;
               END IF;
            END IF;
         END LOOP;

         IF ncont <= 1
         THEN
            RETURN TRUE;
         END IF;

         RETURN FALSE;
      END islastactiveriesgo;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF ries IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000441);
         vpasexec := 5;
         RAISE e_object_error;
      ELSE
         IF ries.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000441);
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 7;
      /*FOR vrie IN ries.first..ries.last LOOP
      vpasexec:=8;
      IF ries.exists(vrie) THEN
      vpasexec:=9;
      IF ries(vrie).nriesgo=pnriesgo THEN
      vpasexec:=10;
      ries.delete(vrie);
      poliza.det_poliza.riesgos:=ries;
      RETURN 0;
      END IF;
      END IF;
      END LOOP;*/
      vpasexec := 7;

      IF NOT issuplem
      THEN
         /* BUG 23860/130231 - FAL - 30/11/2012*/
         FOR vrie IN ries.FIRST .. ries.LAST
         LOOP
            vpasexec := 8;

            IF ries.EXISTS (vrie)
            THEN
               vpasexec := 9;

               IF ries (vrie).nriesgo = pnriesgo
               THEN
                  vpasexec := 10;
                  /* BUG20234:DRA:22/11/2011:Inici*/
                  vencontrado := TRUE;

                  /* Inicializamos*/
                  IF NVL
                        (pac_iaxpar_productos.f_get_parproducto
                                                    ('ASEG_NO_RIESGO',
                                                     poliza.det_poliza.sproduc
                                                    ),
                         0
                        ) = 1
                  THEN
                     /* Si entra aqui, antes de eliminar el riesgo, deberemos trasladar el asegurado ligado a el al siguiente riesgo*/
                     aseg :=
                        pac_iobj_prod.f_partriesasegurado (ries (vrie),
                                                           mensajes
                                                          );

                     IF aseg IS NOT NULL
                     THEN
                        IF aseg.COUNT > 0
                        THEN
                           vencontrado := FALSE;

                           /* Marcamos que tiene asegurado y podria ser el unico riesgo*/
                           FOR vrie_as IN ries.FIRST .. ries.LAST
                           LOOP
                              IF ries.EXISTS (vrie_as)
                              THEN
                                 IF ries (vrie_as).nriesgo <> pnriesgo
                                 THEN
                                    ries (vrie_as).riesgoase := aseg;
                                    vencontrado := TRUE;
                                    /* Hemos encontrado otro riesgo, no es el ultimo*/
                                    EXIT;
                                 END IF;
                              END IF;
                           END LOOP;
                        END IF;
                     END IF;
                  END IF;

                  IF NOT vencontrado
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                           1,
                                                           104367
                                                          );
                     RETURN 1;
                  END IF;

                  /* BUG20234:DRA:22/11/2011:Fi*/
                  ries.DELETE (vrie);
                  ndel := 1;
               END IF;
            END IF;
         END LOOP;

         IF ndel = 1
         THEN
            p_renumriesgo (ries, mensajes);
            poliza.det_poliza.riesgos := ries;
            RETURN 0;
         END IF;

         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         RETURN 1;
      /* BUG 23860/130231 - FAL - 30/11/2012 -*/
      ELSE
         /* baja de riesgo innominado para suplementos*/
         IF islastactiveriesgo
         THEN
            /*ini bug 29582#c165999  JDS 11/02/2014*/
            IF     NVL (f_parproductos_v (poliza.det_poliza.sproduc,
                                          'ADMITE_CERTIFICADOS'
                                         ),
                        0
                       ) = 1
               AND poliza.det_poliza.ncertif = 0
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9906491);
            ELSE
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 104367);
            END IF;

            /*fin bug 29582#c165999  JDS 11/02/2014*/
            RETURN 1;
         END IF;

         FOR vrie IN ries.FIRST .. ries.LAST
         LOOP
            IF ries.EXISTS (vrie)
            THEN
               IF ries (vrie).nriesgo = pnriesgo
               THEN
                  nerrfanul :=
                     pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                            vnmovimi,
                                                            vfanulac,
                                                            mensajes
                                                           );

                  IF (nerrfanul <> 0)
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                           1,
                                                           9001083
                                                          );
                     RAISE e_object_error;
                  END IF;

                  vnumerr :=
                     pac_iax_suplementos.f_anular_riesgo (vsolicit,
                                                          ries (vrie).nriesgo,
                                                          vfanulac,
                                                          vnmovimi,
                                                          1,
                                                          mensajes
                                                         );

                  IF (nerranulr <> 0)
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                           1,
                                                           9001084
                                                          );
                     RAISE e_object_error;
                  END IF;

                  SELECT ssegpol
                    INTO vssegpol
                    FROM estseguros
                   WHERE sseguro = vsolicit;

                  /* BUG 0022095 - FAL - 24/04/2013*/
                  IF pac_iax_suplementos.lstmotmov (1).cmotmov IS NOT NULL
                  THEN
                     /* vnumerr := pk_suplementos.f_permite_este_suplemento(vssegpol, vfanulac, 898);*/
                     vnumerr :=
                        pk_suplementos.f_permite_este_suplemento
                                    (vssegpol,
                                     vfanulac,
                                     pac_iax_suplementos.lstmotmov (1).cmotmov
                                    );

                     /* FI BUG 0022095*/
                     IF (vnumerr <> 0)
                     THEN
                        pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                              1,
                                                              9904564
                                                             );
                        RAISE e_object_error;
                     END IF;
                  END IF;

                  /* BUG 0022095 - FAL - 24/04/2013*/
                  nerr :=
                     pac_md_obtenerdatos.f_inicializa ('EST',
                                                       vsolicit,
                                                       vnmovimi,
                                                       mensajes
                                                      );

                  IF nerr <> 0
                  THEN
                     RAISE e_object_error;
                  END IF;

                  ries (vrie) :=
                     pac_md_obtenerdatos.f_leeriesgo (ries (vrie).nriesgo,
                                                      mensajes
                                                     );

                  IF mensajes IS NOT NULL
                  THEN
                     IF mensajes.COUNT > 0
                     THEN
                        RAISE e_object_error;
                     END IF;
                  END IF;

                  nerranulr :=
                     pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                                     ries (vrie).nriesgo,
                                                     ries (vrie),
                                                     mensajes
                                                    );

                  IF (nerranulr <> 0)
                  THEN
                     RAISE e_object_error;
                  END IF;
               END IF;
            END IF;
         END LOOP;

         RETURN 0;
      END IF;
   /* FI 23860/130231*/
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_eliminariesgo;

   /*************************************************************************
   Recupera los beneficiarios de la poliza
   param in nriesgo   : numero de riesgo
   param out mensajes : mensajes de error
   return             : objeto gestion riesgos
   *************************************************************************/
   FUNCTION f_get_claubeneficiario (
      nriesgo    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN ob_iax_beneficiarios
   IS
      ries       ob_iax_riesgos;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200)
                               := 'PAC_IAX_PRODUCCION.F_Get_ClauBeneficiario';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      ries :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF ries IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001093);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      RETURN ries.beneficiario;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_claubeneficiario;

   /*************************************************************************
   Grabar beneficiarios
   param in nriesgo  : numero de riesgo
   param in tipo     : 1 clausula especial  2 clausula beneficiario
   param in sclaben  : codigo de la clausula
   param in tclaben  : texto clausula especial
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grababeneficiarios (
      nriesgo    IN       NUMBER,
      tipo       IN       NUMBER,
      sclaben    IN       NUMBER,
      tclaesp    IN       VARCHAR2,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      bene          ob_iax_beneficiarios;
      rie           ob_iax_riesgos;
      nerr          NUMBER;
      vpasexec      NUMBER (8)           := 1;
      vparam        VARCHAR2 (1)         := NULL;
      vobject       VARCHAR2 (200)
                                 := 'PAC_IAX_PRODUCCION.F_GrabaBeneficiarios';
      /*ACC 1312008*/
      vefectsuple   DATE                 := NULL;
      nerrfefec     NUMBER;
      v_tipo        NUMBER;
      v_valida      NUMBER               := 0;
   /*ACC 1312008*/
   BEGIN
      v_tipo := tipo;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001093);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      bene := pac_iobj_prod.f_partriesbeneficiarios (rie, mensajes);
      vpasexec := 5;

      IF bene IS NULL
      THEN
         bene := ob_iax_beneficiarios ();
      END IF;

      /*Bug.: 19152 - 26/10/2011 - ICV*/
      /*Bug.: 19152 - 26/10/2011 - ICV*/
      IF bene.benefesp IS NOT NULL
      THEN
         IF bene.benefesp.benef_riesgo IS NOT NULL
         THEN
            IF bene.benefesp.benef_riesgo.COUNT <> 0
            THEN
               v_valida := 1;
            END IF;
         END IF;

         IF bene.benefesp.benefesp_gar IS NOT NULL
         THEN
            IF bene.benefesp.benefesp_gar.COUNT <> 0
            THEN
               v_valida := 1;
            END IF;
         END IF;

         IF NVL (v_valida, 0) = 1
         THEN
            nerr :=
               pac_iax_validaciones.f_validar_beneident (bene.benefesp,
                                                         mensajes
                                                        );

            IF nerr <> 0
            THEN
               RAISE e_object_error;
            END IF;

            v_tipo := 3;
         END IF;
      END IF;

      vpasexec := 6;
      bene.ctipo := v_tipo;
      bene.sclaben := NULL;
      bene.tclaesp := NULL;

      IF v_tipo = 2
      THEN
         bene.sclaben := sclaben;
      ELSIF v_tipo = 1
      THEN
         bene.tclaesp := tclaesp;
      END IF;

      IF v_tipo <> 3
      THEN
         /*ACC 1312008 si es suplement ha de controlar data efcte*/
         IF issuplem
         THEN
            nerrfefec :=
               pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                      vnmovimi,
                                                      vefectsuple,
                                                      mensajes
                                                     );

            IF (nerrfefec <> 0)
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001094);
               RAISE e_object_error;
            END IF;
         END IF;

         /*ACC 1312008*/
         bene.nordcla := 1;                                              --/*/
         bene.finiclau := NVL (vefectsuple, poliza.det_poliza.gestion.fefecto);
         /*ACC 1312008 si es suplement ha de controlar data efcte --/// ACC*/
         bene.ffinclau := NULL;
         vpasexec := 7;
      END IF;

      nerr :=
         pac_iobj_prod.f_set_partriesbeneficiarios (poliza.det_poliza,
                                                    nriesgo,
                                                    bene,
                                                    mensajes
                                                   );

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001095);
         vpasexec := 8;
         RAISE e_object_error;
      END IF;

      RETURN nerr;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grababeneficiarios;

   /*************************************************************************
   Recuperar informacion de las preguntas
   param in nriesgo  : numero de riesgo
   param out mensajes : mensajes de error
   return             : objeto preguntas
   *************************************************************************/
   FUNCTION f_leepreguntasriesgo (
      pnriesgo   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_preguntas
   IS
      preg       t_iax_preguntas;
      rie        ob_iax_riesgos;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_LeePreguntasRiesgo';
      /* Bug 9109 - 12/02/2008 - RSC - APR: Preguntas semiautomaticas*/
      v_nerr     NUMBER;
      /* Fin Bug 9109*/
      vplan      NUMBER;
   /*Bug 27505/148735 - 19/07/2013 - AMC*/
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      /*Bug 27505/148735 - 19/07/2013 - AMC*/
      IF pac_iax_produccion.iscambioplan
      THEN
         /* Bug AMA-287 - 27/06/2016 - AMC */
         IF rie.preguntas IS NOT NULL
         THEN
            IF rie.preguntas.COUNT > 0
            THEN
               FOR i IN rie.preguntas.FIRST .. rie.preguntas.LAST
               LOOP
                  v_nerr :=
                     pac_md_preguntas.f_es_plan (rie.preguntas (i).cpregun,
                                                 poliza.det_poliza.sproduc,
                                                 vplan,
                                                 mensajes
                                                );

                  IF vplan = 1
                  THEN
                     rie.preguntas (i) := NULL;
                  END IF;
               END LOOP;
            END IF;
         END IF;

         /* Fin Bug AMA-287 - 27/06/2016 - AMC */
         pac_iax_produccion.iscambioplan := FALSE;
      END IF;

      /*Fi Bug 27505/148735 - 19/07/2013 - AMC*/
      /* Bug 9109 - 12/02/2008 - RSC - APR: Preguntas semiautomaticas*/
      vpasexec := 4;
      /* Se inicializan las preguntas existentes desde producto*/
      v_nerr :=
         pac_md_produccion.p_set_pregunriesgos (vnmovimi,
                                                rie.preguntas,
                                                mensajes
                                               );

      IF v_nerr = 0
      THEN
         vpasexec := 5;
         v_nerr :=
            pac_md_produccion.f_grabar_semiautomatriesgo (vnmovimi,
                                                          vfefecto,
                                                          poliza,
                                                          rie.preguntas,
                                                          mensajes,
                                                          pnriesgo,
                                                          NULL
                                                         );

         IF v_nerr <> 0
         THEN
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      ELSIF v_nerr = 1
      THEN
         vpasexec := 7;
         RAISE e_object_error;
      END IF;

      /* Fin Bug 9109*/
      vpasexec := 8;
      v_nerr :=
         pac_md_produccion.f_grabar_automatriesgo (vnmovimi,
                                                   vfefecto,
                                                   poliza,
                                                   rie.preguntas,
                                                   mensajes,
                                                   pnriesgo,
                                                   NULL
                                                  );

      IF v_nerr <> 0
      THEN
         vpasexec := 9;
         RAISE e_object_error;
      END IF;

      vpasexec := 10;
      v_nerr :=
         pac_md_produccion.f_grabar_modalidadriesgo (vnmovimi,
                                                     vfefecto,
                                                     poliza,
                                                     rie.preguntas,
                                                     mensajes,
                                                     pnriesgo,
                                                     NULL
                                                    );

      IF v_nerr <> 0
      THEN
         vpasexec := 11;
         RAISE e_object_error;
      END IF;

      /* Fin Bug 9109*/
      vpasexec := 13;
      preg := pac_iobj_prod.f_partriespreguntas (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 13;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN preg;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leepreguntasriesgo;

   /*************************************************************************
   Grabar informacion de las preguntas
   param in nriesgo  : numero de riesgo
   param in cpregun  : Codigo de la pregunta
   param in crespue  : codigo de la respuesta
   param in trespue   : texto de la respuesta
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabarpreguntasriesgo (
      nriesgo    IN       NUMBER,
      cpregun    IN       NUMBER,
      crespue    IN       FLOAT,
      trespue    IN       VARCHAR2,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      preg       t_iax_preguntas := t_iax_preguntas ();
      rie        ob_iax_riesgos;
      vcrespue   FLOAT           := crespue;
      vtrespue   VARCHAR2 (2000) := trespue;
      npos       NUMBER;
      nerr       NUMBER;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)
                              := 'PAC_IAX_PRODUCCION.F_GrabarPreguntasRiesgo';

      /* comproba que el codigo de pregunta no exista*/
      /* devuelve la posicion del indice o bien -1 sino existe*/
      FUNCTION existpreg (cpregun IN NUMBER)
         RETURN NUMBER
      IS
      BEGIN
         IF preg IS NULL
         THEN
            RETURN -1;
         END IF;

         IF preg.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vprg IN preg.FIRST .. preg.LAST
         LOOP
            IF preg.EXISTS (vprg)
            THEN
               IF preg (vprg).cpregun = cpregun
               THEN
                  RETURN vprg;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existpreg;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      preg := pac_iobj_prod.f_partriespreguntas (rie, mensajes);

      IF preg IS NULL
      THEN
         preg := t_iax_preguntas ();
      END IF;

      vpasexec := 5;
      npos := existpreg (cpregun);
      vpasexec := 6;

      IF npos = -1
      THEN
         vpasexec := 7;
         preg.EXTEND;
         preg (preg.LAST) := ob_iax_preguntas ();
         preg (preg.LAST).cpregun := cpregun;
         preg (preg.LAST).crespue := crespue;
         preg (preg.LAST).nmovimi := vnmovimi;
         /*BUG 24657-XVM-30/11/2012*/
         preg (preg.LAST).nmovima := vnmovimi;
         preg (preg.LAST).trespue := trespue;
      ELSIF npos > -1
      THEN
         vpasexec := 8;
         preg (npos).crespue := crespue;
         preg (npos).trespue := trespue;
      END IF;

      vpasexec := 9;
      nerr :=
         pac_iobj_prod.f_set_partriespreguntas (poliza.det_poliza,
                                                nriesgo,
                                                preg,
                                                mensajes
                                               );

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001096);
         vpasexec := 10;
         RAISE e_object_error;
      END IF;

      --INI IAXIS-4779 CJMR 18/07/2019
      /*IF poliza.det_poliza.sproduc = 80044 AND cpregun = 2876 AND crespue IN (6,7,10, 11, 12, 14, 15) THEN

         nerr := pac_iax_produccion.f_grabargarantias(nriesgo, 7057, 1, 0, 1, 0, 0, mensajes);

         IF nerr > 0 THEN
            vpasexec := 11;
            RAISE e_object_error;
         END IF;

         nerr := f_grabapreguntasgarantia(nriesgo, 7050, 8001, 0.60, '', mensajes);
         nerr := f_grabapreguntasgarantia(nriesgo, 7057, 4822, 0, '', mensajes);

         IF nerr > 0 THEN
            vpasexec := 12;
            RAISE e_object_error;
         END IF;

         IF crespue IN (6, 14, 15) THEN
            nerr := f_grabapreguntasgarantia(nriesgo, 7057, 4822, 1200000, '', mensajes);
            IF nerr > 0 THEN
                vpasexec := 13;
                RAISE e_object_error;
            END IF;
         ELSIF crespue IN (12) THEN
            nerr := f_grabapreguntasgarantia(nriesgo, 7057, 4822, 700000, '', mensajes);
            IF nerr > 0 THEN
                vpasexec := 14;
                RAISE e_object_error;
            END IF;
         ELSIF crespue IN (11) THEN
            nerr := f_grabapreguntasgarantia(nriesgo, 7050, 8001, 0.10, '', mensajes);
            IF nerr > 0 THEN
                vpasexec := 15;
                RAISE e_object_error;
            END IF;
         END IF;


      END IF;*/
      --FIN IAXIS-4779 CJMR 18/07/2019

      RETURN nerr;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabarpreguntasriesgo;

   /*************************************************************************
   Recuperar informacion de las garantias
   param in nriesgo  : numero de riesgo
   param out mensajes : mensajes de error
   return             : objeto garantias
   *************************************************************************/
   FUNCTION f_leegarantias (
      pnriesgo    IN       NUMBER,
      pcpartida   IN       NUMBER,
      mensajes    OUT      t_iax_mensajes
   )
      RETURN t_iax_garantias
   IS
      gars             t_iax_garantias;
      gar              ob_iax_garantias;
      rie              ob_iax_riesgos;
      nerr             NUMBER;
      vpasexec         NUMBER (8)               := 1;
      vparam           VARCHAR2 (1)             := NULL;
      vobject          VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_LeeGarantias';
      /*ACC 1312008*/
      vefectsuple      DATE                     := NULL;
      nerrfefec        NUMBER;
      garsret          t_iax_garantias          := t_iax_garantias ();
      /*ACC 1312008*/
      /* Bug 22839 - RSC - 25/07/2012 - LCOL - Funcionalidad Certificado 0*/
      vplan            NUMBER;
      vconta           NUMBER;
      pregpar          t_iaxpar_preguntas;
      v_crespue        NUMBER;
      v_trespue        VARCHAR2 (2000);
      v_resp           NUMBER;
      vtprefor         VARCHAR2 (100);
      v_cplan          NUMBER;
      v_cambio         BOOLEAN;
      v_cvalpar        NUMBER;
      v_cont_est_gar   NUMBER;
      v_cont_gar       NUMBER;
      v_nmovimi_real   movseguro.nmovimi%TYPE;
      vcont            NUMBER;
      /* Fin Bug 22839*/
      vcplan           NUMBER;
      /* bug 31686/179131 - 14/07/2014 - AMC*/
      vctipcap         NUMBER;
      /* bug 31686/179131 - 14/07/2014 - AMC*/
      vicapmax         NUMBER;
      --Ini IAXIS-12899 -- ECP-- 19/03/2020
      vnmeses          NUMBER;
      --Fin IAXIS-12899 -- ECP-- 19/03/2020
      /* bug 31686/179131 - 14/07/2014 - AMC*/
      FUNCTION existpreg (cpregun IN NUMBER, pvgar IN NUMBER)
         RETURN NUMBER
      IS
         preg   t_iax_preguntas;
      BEGIN
         preg :=
             poliza.det_poliza.riesgos (pnriesgo).garantias (pvgar).preguntas;

         IF preg IS NULL
         THEN
            RETURN -1;
         END IF;

         IF preg.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vprg IN preg.FIRST .. preg.LAST
         LOOP
            IF preg.EXISTS (vprg)
            THEN
               IF preg (vprg).cpregun = cpregun
               THEN
                  IF preg (vprg).crespue IS NOT NULL
                  THEN
                     RETURN vprg;
                  END IF;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existpreg;
   BEGIN
      IF pcpartida = 1
      THEN
         SELECT COUNT (1)
           INTO vcont
           FROM pargaranpro
          WHERE sproduc = poliza.det_poliza.sproduc AND cpargar = 'PARTIDA';

         IF vcont = 0
         THEN
            RETURN NULL;
         END IF;
      END IF;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 1000;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 1010;
         RAISE e_object_error;
      END IF;

      vpasexec := 1020;
      gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 1030;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 1040;

      IF gars IS NOT NULL
      THEN
         vpasexec := 1050;

         IF gars.COUNT > 0
         THEN
            vpasexec := 1060;

            FOR vgar IN gars.FIRST .. gars.LAST
            LOOP
               vpasexec := 1070;

               IF gars.EXISTS (vgar)
               THEN
                  vpasexec := 1080;
                  gars (vgar).p_calc_primas (vsolicit,
                                             vnmovimi,
                                             vpmode,
                                             pnriesgo
                                            );
               END IF;
            END LOOP;

            vpasexec := 1090;
            nerr :=
               pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                      pnriesgo,
                                                      gars,
                                                      mensajes
                                                     );
         END IF;
      END IF;

      /********* ACC
      s'ha de recuperar totes les garantias existents desde productes
      **************/
      vpasexec := 1100;
      /* Bug 26662 - APD - 16/04/2013 - se a¿ade el parametro pnriesgo a la funcion*/
      nerr :=
         pac_md_produccion.p_set_garanprod (gars, vnmovimi, mensajes,
                                            pnriesgo);

      /* fin Bug 26662 - APD - 16/04/2013*/
      IF nerr = 0
      THEN
         vpasexec := 1110;
         nerr :=
            pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                   pnriesgo,
                                                   gars,
                                                   mensajes
                                                  );
      ELSIF nerr = 1
      THEN
         vpasexec := 1120;
         RAISE e_object_error;
      END IF;

      /*16122008  s'ha de controlar data efecte per suplement*/
      IF issuplem
      THEN
         nerrfefec :=
            pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                   vnmovimi,
                                                   vefectsuple,
                                                   mensajes
                                                  );
  
         IF (nerrfefec <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001097);
            RAISE e_object_error;
         END IF;

         IF gars IS NOT NULL
         THEN
            vpasexec := 1130;

            IF gars.COUNT > 0
            THEN
               vpasexec := 1140;

               FOR vgar IN gars.FIRST .. gars.LAST
               LOOP
                  vpasexec := 1150;

                  IF gars.EXISTS (vgar)
                  THEN
                     vpasexec := 1160;
                     gars (vgar).finiefe :=
                         NVL (poliza.det_poliza.gestion.fefecto,vefectsuple);
                        
                  END IF;

                  /* Bug 22839 - RSC - 20/11/2012 - LCOL_T010-LCOL - Funcionalidad Certificado 0*/
                  IF isaltacol
                  THEN
                     gars (vgar).ctarman := 0;
                  END IF;
               /* Fin bug 22839*/
               END LOOP;

               vpasexec := 1170;
               nerr :=
                  pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                         pnriesgo,
                                                         gars,
                                                         mensajes
                                                        );
            END IF;
         END IF;
      END IF;

      /* JTS - 03/11/2010 - BUG16106*/
      IF     NVL (f_parproductos_v (poliza.det_poliza.sproduc,
                                    'ADMITE_CERTIFICADOS'
                                   ),
                  0
                 ) = 1
         AND pac_seguros.f_get_escertifcero (poliza.det_poliza.npoliza) > 0
      THEN
         /* Bug 27876/0158962 - 18/11/2013*/
         /* Se mira si el certficado ya existe (pq se ha guardado la poliza)*/
         SELECT COUNT (1)
           INTO vconta
           FROM seguros
          WHERE sseguro = poliza.det_poliza.ssegpol;

         /* Si no existe (estamos realmente en nueva produccion), se deben heredar las garantias del certificado 0*/
         IF vconta = 0 OR pac_iax_produccion.issuplem
         THEN
            /* fin Bug 27876/0158962 - 18/11/2013*/
            /* Bug 27923 - INICIO - DCT - 06/09/2013 - LCOL_F3BTEC-MTF3B - LCOL_TEC23 - Definici?n de condiciones en Certificado*/
            v_cvalpar :=
               NVL
                  (pac_parametros.f_parproducto_n (poliza.det_poliza.sproduc,
                                                   'HEREDA_GARANTIAS'
                                                  ),
                   0
                  );

            /* Bug 27923 - FIN - DCT - 06/09/2013 - LCOL_F3BTEC-MTF3B - LCOL_TEC23 - Definici?n de condiciones en Certificado*/
            IF gars IS NOT NULL
            THEN
               vpasexec := 1180;

               IF gars.COUNT > 0
               THEN
                  vpasexec := 1190;

                  FOR vgar IN gars.FIRST .. gars.LAST
                  LOOP
                     vpasexec := 1200;

                     IF gars.EXISTS (vgar)
                     THEN
                        vpasexec := 1210;
                        gars (vgar).reglasseg :=
                           pac_iobj_prod.f_getreglas_cert0
                                                  (poliza.det_poliza.sseguro,
                                                   pnriesgo,
                                                   gars (vgar).cgarant,
                                                   poliza.det_poliza.npoliza,
                                                   mensajes
                                                  );

                        /* Bug 16106 - RSC - 10/11/2010*/
                        IF     NVL
                                  (f_parproductos_v
                                                   (poliza.det_poliza.sproduc,
                                                    'ADMITE_CERTIFICADOS'
                                                   ),
                                   0
                                  ) = 1
                           AND NOT pac_iax_produccion.isaltacol
                        THEN
                           /* Bug 29582/0164524 - APD - 03/02/2014*/
                           /*AND NOT pac_iax_produccion.issuplem THEN*/
                           v_cont_est_gar := 0;
                           v_cont_gar := 0;

                           IF pac_iax_produccion.issuplem
                           THEN
                              vpasexec := 12101;
                              v_cont_est_gar :=
                                 pac_md_suplementos.f_get_existe_garantia
                                                  (poliza.det_poliza.sseguro,
                                                   pnriesgo,
                                                   gars (vgar).cgarant,
                                                   vnmovimi,
                                                   'EST',
                                                   mensajes
                                                  );
                              vpasexec := 12102;

                              SELECT DISTINCT nmovimi
                                         INTO v_nmovimi_real
                                         FROM garanseg
                                        WHERE sseguro =
                                                     poliza.det_poliza.ssegpol
                                          AND ffinefe IS NULL;

                              vpasexec := 12103;
                              v_cont_gar :=
                                 pac_md_suplementos.f_get_existe_garantia
                                                   (poliza.det_poliza.ssegpol,
                                                    pnriesgo,
                                                    gars (vgar).cgarant,
                                                    v_nmovimi_real,
                                                    'POL',
                                                    mensajes
                                                   );
                           END IF;

                           /*cuando sea alta o suplemento a¿adiendo una nueva garantia*/
                           IF    NOT pac_iax_produccion.issuplem
                              OR (    pac_iax_produccion.issuplem
                                  AND (v_cont_est_gar = 1 AND v_cont_gar = 0
                                      )
                                 )
                           THEN
                              /* fin Bug 29582/0164524 - APD - 03/02/2014*/
                              /* Bug 27923 - INICIO - DCT - 21/10/2013 - LCOL_F3BTEC-MTF3B - LCOL_TEC23 - Definici?n de condiciones en Certificado*/
                              /* Bug 16768 - RSC - 26/11/2010 - APR - Implementacion y parametrizacion del producto GROUPLIFE (II)*/
                              /* Bug 22839 - RSC - 25/07/2012 - LCOL - Funcionalidad Certificado 0*/
                              /* Bug 27923 - INICIO - DCT - 06/09/2013 - LCOL_F3BTEC-MTF3B - LCOL_TEC23 - Definici?n de condiciones en Certificado*/
                              IF v_cvalpar IN (2, 3, 4, 5)
                              THEN
                                 /* Bug 27923 - FIN - DCT - 06/09/2013 - LCOL_F3BTEC-MTF3B - LCOL_TEC23 - Definici?n de condiciones en Certificado*/
                                 IF     pac_iax_produccion.poliza.det_poliza.preguntas IS NOT NULL
                                    AND pac_iax_produccion.poliza.det_poliza.preguntas.COUNT >
                                                                             0
                                 THEN
                                    FOR i IN
                                       pac_iax_produccion.poliza.det_poliza.preguntas.FIRST .. pac_iax_produccion.poliza.det_poliza.preguntas.LAST
                                    LOOP
                                       IF pac_iax_produccion.poliza.det_poliza.preguntas
                                                                          (i).cpregun =
                                                                         4089
                                       THEN
                                          vplan :=
                                             pac_iax_produccion.poliza.det_poliza.preguntas
                                                                          (i).crespue;
                                          nerr :=
                                             pac_preguntas.f_get_pregunpolseg
                                                                   (vsolicit,
                                                                    4089,
                                                                    'EST',
                                                                    v_cplan
                                                                   );

                                          IF nerr = 120135
                                          THEN
                                             v_cplan := vplan;
                                          END IF;

                                          IF v_cplan <> vplan
                                          THEN
                                             v_cambio := TRUE;
                                             pac_iax_produccion.iscambioplan :=
                                                                         TRUE;
                                          /* Bug 27505/148735 - 19/07/2013 - AMC*/
                                          END IF;
                                       END IF;
                                    END LOOP;
                                 END IF;

                                 /* Bug 27923 - INICIO - DCT - 06/09/2013 - LCOL_F3BTEC-MTF3B - LCOL_TEC23 - Definici?n de condiciones en Certificado*/
                                 IF v_cvalpar IN (2, 3)
                                 THEN
                                    vconta :=
                                       pac_md_produccion.f_get_cobliga_cero
                                          (pac_iax_produccion.poliza.det_poliza.npoliza,
                                           vplan,
                                           gars (vgar).cgarant,
                                           mensajes
                                          );
                                 /* Bug 27923 - INICIO - DCT - 21/10/2013 - LCOL_F3BTEC-MTF3B - LCOL_TEC23 - Definici?n de condiciones en Certificado*/
                                 ELSIF v_cvalpar IN (4, 5)
                                 THEN
                                    /* Bug 27923 - FIN - DCT - 21/10/2013 - LCOL_F3BTEC-MTF3B - LCOL_TEC23 - Definici?n de condiciones en Certificado*/
                                    vconta :=
                                       pac_md_produccion.f_get_obligaopcional_cero
                                          (pac_iax_produccion.poliza.det_poliza.npoliza,
                                           vplan,
                                           gars (vgar).cgarant,
                                           mensajes
                                          );
                                 END IF;

                                 /* Bug 27923 - FIN - DCT - 06/09/2013 - LCOL_F3BTEC-MTF3B - LCOL_TEC23 - Definici?n de condiciones en Certificado*/
                                 IF v_cambio
                                 THEN
                                    gars (vgar).cobliga := 0;
                                    gars (vgar).cseleccion := NULL;
                                 /* BUG 22839/0120955 - FAL - 05/09/2012*/
                                 END IF;

                                 /*BUG0027923 - INICIO - DCT - 21/10/2013  -LCOL_F3BTEC-MTF3B - LCOL_TEC23 - Definici?n de condiciones en Certificado 0*/
                                 IF vconta >= 0
                                 THEN
                                    /*BUG0027923 - FIN - DCT - 21/10/2013  -LCOL_F3BTEC-MTF3B - LCOL_TEC23 - Definici?n de condiciones en Certificado 0*/
                                    /* BUG 22839/0120955 - FAL - 05/09/2012*/
                                    /* gars(vgar).cobliga := 1;*/
                                    /* Bug 27923 - INICIO - DCT - 21/10/2013 - LCOL_F3BTEC-MTF3B - LCOL_TEC23 - Definici?n de condiciones en Certificado*/
                                    IF v_cvalpar IN (4, 5)
                                    THEN
                                       IF gars (vgar).ctipgar IN (4, 6)
                                       THEN
                                          IF gars (vgar).cseleccion IS NULL
                                          THEN
                                             gars (vgar).cobliga := 1;
                                             gars (vgar).cseleccion := 1;
                                          END IF;
                                       ELSE
                                          IF    NVL
                                                   (pac_parametros.f_pargaranpro_n
                                                       (poliza.det_poliza.sproduc,
                                                        poliza.det_poliza.gestion.cactivi,
                                                        gars (vgar).cgarant,
                                                        'EXCEPCION_HEREDAGAR'
                                                       ),
                                                    0
                                                   ) = 1
                                             OR vconta = 0
                                          THEN
                                             /* Bug 27923 - FIN - DCT - 21/10/2013 - LCOL_F3BTEC-MTF3B - LCOL_TEC23 - Definici?n de condiciones en Certificado*/
                                             IF gars (vgar).cseleccion IS NULL
                                             THEN
                                                gars (vgar).cobliga := 1;
                                                gars (vgar).cseleccion := 1;
                                             END IF;
                                          ELSE
                                             gars (vgar).cobliga := 1;

                                             /* Con esto forzamos a que tenga los amparos marcados como obligatorios*/
                                             /* del cero siempre. Se puede desmarcar pero al volver a pasar por aqui*/
                                             /* te lo vuelve a marcar.*/
                                             /* Bug 32705/188147 - 26/09/2014 -AMC*/
                                             IF gars (vgar).ctipgar = 0
                                             THEN
                                                gars (vgar).cobliga := 0;
                                             END IF;
                                          END IF;
                                       END IF;
                                    ELSE
                                       IF gars (vgar).cseleccion IS NULL
                                       THEN
                                          gars (vgar).cobliga := 1;
                                          gars (vgar).cseleccion := 1;
                                       END IF;
                                    END IF;

                                    /* bug 31686/179131 - 14/07/2014 - AMC*/
                                    IF gars (vgar).cobliga = 1
                                    THEN
                                       vcplan :=
                                          pac_planbenef.f_get_planbenef
                                             ('EST',
                                              pac_iax_produccion.poliza.det_poliza.sseguro,
                                              pnriesgo,
                                              vnmovimi
                                             );

                                       SELECT ctipcap, icapmax
                                         INTO vctipcap, vicapmax
                                         FROM garanpro
                                        WHERE cmodali =
                                                 pac_iax_produccion.poliza.det_poliza.cmodali
                                          AND ccolect =
                                                 pac_iax_produccion.poliza.det_poliza.ccolect
                                          AND cramo =
                                                 pac_iax_produccion.poliza.det_poliza.cramo
                                          AND ctipseg =
                                                 pac_iax_produccion.poliza.det_poliza.ctipseg
                                          AND cgarant = gars (vgar).cgarant
                                          AND cactivi =
                                                 pac_iax_produccion.poliza.det_poliza.gestion.cactivi;

                                       IF vctipcap = 1
                                       THEN
                                          gars (vgar).icapital := vicapmax;
                                       ELSIF vctipcap = 2
                                       THEN
                                          IF gars (vgar).icapital IS NULL
                                          THEN
                                             gars (vgar).icapital :=
                                                pac_parametros.f_pargaranpro_n
                                                   (pac_iax_produccion.poliza.det_poliza.sproduc,
                                                    pac_iax_produccion.poliza.det_poliza.gestion.cactivi,
                                                    gars (vgar).cgarant,
                                                    'VALORDEFCAPITALGARAN'
                                                   );
                                          END IF;
                                       ELSIF vctipcap = 7
                                       THEN
                                          IF vcplan IS NOT NULL
                                          THEN
                                             gars (vgar).icapital :=
                                                pac_planbenef.f_capital_planbenef
                                                   (pac_iax_produccion.poliza.det_poliza.cempres,
                                                    vcplan,
                                                    2,
                                                    gars (vgar).cgarant
                                                   );
                                          END IF;

                                          IF gars (vgar).icapital IS NULL
                                          THEN
                                             BEGIN
                                                SELECT icapital
                                                  INTO gars (vgar).icapital
                                                  FROM garanprocap
                                                 WHERE cramo =
                                                          pac_iax_produccion.poliza.det_poliza.cramo
                                                   AND cmodali =
                                                          pac_iax_produccion.poliza.det_poliza.cmodali
                                                   AND ctipseg =
                                                          pac_iax_produccion.poliza.det_poliza.ctipseg
                                                   AND ccolect =
                                                          pac_iax_produccion.poliza.det_poliza.ccolect
                                                   AND cgarant =
                                                           gars (vgar).cgarant
                                                   AND cdefecto = 1;
                                             EXCEPTION
                                                WHEN NO_DATA_FOUND
                                                THEN
                                                   BEGIN
                                                      SELECT icapital
                                                        INTO gars (vgar).icapital
                                                        FROM garanprocap g
                                                       WHERE cramo =
                                                                pac_iax_produccion.poliza.det_poliza.cramo
                                                         AND cmodali =
                                                                pac_iax_produccion.poliza.det_poliza.cmodali
                                                         AND ctipseg =
                                                                pac_iax_produccion.poliza.det_poliza.ctipseg
                                                         AND ccolect =
                                                                pac_iax_produccion.poliza.det_poliza.ccolect
                                                         AND cgarant =
                                                                gars (vgar).cgarant
                                                         AND norden =
                                                                (SELECT MIN
                                                                           (g2.norden
                                                                           )
                                                                   FROM garanprocap g2
                                                                  WHERE g.cramo =
                                                                           g2.cramo
                                                                    AND g.cmodali =
                                                                           g2.cmodali
                                                                    AND g.ctipseg =
                                                                           g2.ctipseg
                                                                    AND g.ccolect =
                                                                           g2.ccolect
                                                                    AND g.cgarant =
                                                                           g2.cgarant);
                                                   EXCEPTION
                                                      WHEN OTHERS
                                                      THEN
                                                         gars (vgar).icapital :=
                                                                            0;
                                                   END;
                                                WHEN OTHERS
                                                THEN
                                                   gars (vgar).icapital := 0;
                                             END;
                                          END IF;
                                       END IF;
                                    END IF;

                                    /* Fi bug 31686/179131 - 14/07/2014 - AMC*/
                                    /* FI BUG 22839/0120955*/
                                    /*BUG0027923 - INICIO - DCT - 21/10/2013  -LCOL_F3BTEC-MTF3B - LCOL_TEC23 - Definici?n de condiciones en Certificado 0*/
                                    IF (   (v_cvalpar IN (4, 5) AND vconta = 0
                                           )
                                        OR vconta > 0
                                       )
                                    THEN
                                       /*BUG0027923 - FIN - DCT - 21/10/2013  -LCOL_F3BTEC-MTF3B - LCOL_TEC23 - Definici?n de condiciones en Certificado 0*/
                                       IF pac_parametros.f_parproducto_n
                                                  (poliza.det_poliza.sproduc,
                                                   'GRABAR_PREGGARAN_DEF'
                                                  ) IN (1, 2)
                                       THEN
                                          nerr :=
                                             pac_iax_produccion.f_grabarobjetodb
                                                                    (mensajes);
                                          /* BUG 0024655/0129261 - FAL - 23/11/2012 -- Bajar a BD pq sino al evaluar pregs semiauto no encuentra info en las EST*/
                                          vpasexec := 1300;
                                          pregpar :=
                                             pac_iaxpar_productos.f_get_preggarant
                                                         (gars (vgar).cgarant,
                                                          mensajes
                                                         );

                                          IF mensajes IS NOT NULL
                                          THEN
                                             IF mensajes.COUNT > 0
                                             THEN
                                                RAISE e_object_error;
                                             END IF;
                                          END IF;

                                          IF pregpar IS NOT NULL
                                          THEN
                                             IF pregpar.COUNT > 0
                                             THEN
                                                FOR i IN
                                                   pregpar.FIRST .. pregpar.LAST
                                                LOOP
                                                   IF pregpar.EXISTS (i)
                                                   THEN
                                                      v_crespue := NULL;
                                                      v_trespue := NULL;
                                                      v_resp := NULL;

                                                      /* Si es una pregunta manual*/
                                                      IF pregpar (i).cpretip =
                                                                            1
                                                      THEN
                                                         vpasexec := 1320;

                                                         /* Dependiendo del tipo de respuesta*/
                                                         IF pregpar (i).crestip IN
                                                                      (1, 2)
                                                         THEN
                                                            v_crespue :=
                                                               pregpar (i).cresdef;
                                                            v_trespue := NULL;
                                                         ELSE
                                                            v_crespue := NULL;
                                                            v_trespue :=
                                                               pregpar (i).cresdef;
                                                         END IF;
                                                      ELSIF (   pregpar (i).cpretip =
                                                                             3
                                                             OR (    pregpar
                                                                           (i).cpretip =
                                                                             2
                                                                 AND pregpar
                                                                           (i).esccero =
                                                                             1
                                                                )
                                                            )
                                                      THEN
                                                         vtprefor :=
                                                            pac_mdpar_productos.f_get_tpreforsemi
                                                               (poliza.det_poliza.sproduc,
                                                                pregpar (i).cpregun,
                                                                'G',
                                                                mensajes,
                                                                gars (vgar).cgarant
                                                               );
                                                         vpasexec := 1330;

                                                         /* Bug 29582/0164524 - APD - 03/02/2014*/
                                                         IF pac_iax_produccion.issuplem
                                                         THEN
                                                            vpasexec := 1430;
                                                            v_cont_est_gar :=
                                                               pac_md_suplementos.f_get_existe_garantia
                                                                  (poliza.det_poliza.sseguro,
                                                                   pnriesgo,
                                                                   gars (vgar).cgarant,
                                                                   vnmovimi,
                                                                   'EST',
                                                                   mensajes
                                                                  );
                                                            vpasexec := 1431;

                                                            SELECT DISTINCT nmovimi
                                                                       INTO v_nmovimi_real
                                                                       FROM garanseg
                                                                      WHERE sseguro =
                                                                               poliza.det_poliza.ssegpol
                                                                        AND ffinefe IS NULL;

                                                            vpasexec := 1432;
                                                            v_cont_gar :=
                                                               pac_md_suplementos.f_get_existe_garantia
                                                                  (poliza.det_poliza.ssegpol,
                                                                   pnriesgo,
                                                                   gars (vgar).cgarant,
                                                                   v_nmovimi_real,
                                                                   'POL',
                                                                   mensajes
                                                                  );
                                                         END IF;

                                                         vpasexec := 1433;

                                                         /*Se a¿ade en la condici¿n que se toque la garantia y que no sea una eliminaci¿n de garantia,*/
                                                         /*S¿lo se calcularan las garantias cuando sea un alta o se trate de un suplemento que a¿ada una garantia*/
                                                         IF     pac_iax_produccion.issuplem
                                                            AND (   (    v_cont_est_gar =
                                                                             1
                                                                     AND v_cont_gar =
                                                                             1
                                                                    )
                                                                 OR (    v_cont_est_gar =
                                                                             0
                                                                     AND v_cont_gar =
                                                                             1
                                                                    )
                                                                )
                                                         THEN
                                                            NULL;
                                                         /* fin Bug 29582/0164524 - APD - 03/02/2014*/
                                                         ELSE
                                                            vpasexec := 1340;
                                                            /* Bug 16768 - RSC - 26/11/2010 - APR - Implementacion y parametrizacion del producto GROUPLIFE (II)*/
                                                            /* (a¿adimos gar(npos).cgarant a la funcion; antes se le pasaba un 0 !!)*/
                                                            nerr :=
                                                               pac_albsgt.f_tprefor
                                                                  (vtprefor,
                                                                   'EST',
                                                                   vsolicit,
                                                                   pnriesgo,
                                                                   gars (vgar).finiefe,
                                                                   vnmovimi,
                                                                   gars (vgar).cgarant,
                                                                   v_resp,
                                                                   1
                                                                  );
                                                         END IF;

                                                         vpasexec := 1350;

                                                         /* Dependiendo del tipo de respuesta*/
                                                         IF pregpar (i).crestip IN
                                                                       (1, 2)
                                                         THEN
                                                            v_crespue :=
                                                               NVL
                                                                  (v_resp,
                                                                   pregpar (i).cresdef
                                                                  );
                                                            v_trespue := NULL;
                                                         ELSE
                                                            v_crespue := NULL;
                                                            v_trespue :=
                                                                       v_resp;
                                                         END IF;
                                                      END IF;

                                                      IF    existpreg
                                                               (pregpar (i).cpregun,
                                                                vgar
                                                               ) = -1
                                                         OR v_cambio
                                                         /* Bug 27505/148735 - 19/07/2013 - AMC*/
                                                         OR iscambioplan
                                                      THEN
                                                         nerr :=
                                                            f_grabapreguntasgarantia
                                                               (pnriesgo,
                                                                gars (vgar).cgarant,
                                                                pregpar (i).cpregun,
                                                                v_crespue,
                                                                v_trespue,
                                                                mensajes
                                                               );
                                                         gars (vgar).preguntas :=
                                                            poliza.det_poliza.riesgos
                                                                     (pnriesgo).garantias
                                                                         (vgar).preguntas;
                                                      /**************** BUG24655:DRA:04/12/2012 *******************
                                                      nerr :=
                                                      pac_md_grabardatos.f_inicializa(vpmode,
                                                      vsolicit,
                                                      vnmovimi,
                                                      mensajes);
                                                      IF nerr = 1 THEN
                                                      RAISE e_object_error;
                                                      END IF;
                                                      nerr :=
                                                      pac_md_grabardatos.f_grabarpreguntasgarantia
                                                      (gars(vgar).preguntas,
                                                      pnriesgo,
                                                      gars(vgar).cgarant,
                                                      mensajes);
                                                      IF nerr > 0 THEN
                                                      RAISE e_object_error;
                                                      END IF;
                                                      **************** BUG24655:DRA:04/12/2012 *******************/
                                                      END IF;
                                                   END IF;
                                                END LOOP;
                                             END IF;
                                          END IF;
                                       END IF;
                                    END IF;
                                 /*IF ((v_cvalpar IN (4, 5) AND vconta = 0) OR vconta > 0) THEN*/
                                 END IF;
                              /*END IF;*/
                              END IF;
                           END IF;
                        /* Fin Bug 16768*/
                        /* Fin Bug 22839*/
                        ELSIF     NVL
                                     (f_parproductos_v
                                                   (poliza.det_poliza.sproduc,
                                                    'ADMITE_CERTIFICADOS'
                                                   ),
                                      0
                                     ) = 1
                              AND pac_iax_produccion.isaltacol
                        THEN
                           IF pac_parametros.f_parproducto_n
                                                  (poliza.det_poliza.sproduc,
                                                   'GRABAR_PREGGARAN_DEF'
                                                  ) IN (1, 2)
                           THEN
                              nerr :=
                                 pac_iax_produccion.f_grabarobjetodb
                                                                    (mensajes);
                              /* BUG 0024655/0129261 - FAL - 23/11/2012 -- Bajar a BD pq sino al evaluar pregs semiauto no encuentra info en las EST*/
                              vpasexec := 1400;
                              pregpar :=
                                 pac_iaxpar_productos.f_get_preggarant
                                                         (gars (vgar).cgarant,
                                                          mensajes
                                                         );

                              IF mensajes IS NOT NULL
                              THEN
                                 IF mensajes.COUNT > 0
                                 THEN
                                    RAISE e_object_error;
                                 END IF;
                              END IF;

                              IF pregpar IS NOT NULL
                              THEN
                                 IF pregpar.COUNT > 0
                                 THEN
                                    FOR i IN pregpar.FIRST .. pregpar.LAST
                                    LOOP
                                       IF pregpar.EXISTS (i)
                                       THEN
                                          v_crespue := NULL;
                                          v_trespue := NULL;
                                          v_resp := NULL;

                                          /* Si es una pregunta manual*/
                                          IF pregpar (i).cpretip = 1
                                          THEN
                                             vpasexec := 1420;

                                             /* Dependiendo del tipo de respuesta*/
                                             IF pregpar (i).crestip IN
                                                                      (1, 2)
                                             THEN
                                                v_crespue :=
                                                          pregpar (i).cresdef;
                                                v_trespue := NULL;
                                             ELSE
                                                v_crespue := NULL;
                                                v_trespue :=
                                                          pregpar (i).cresdef;
                                             END IF;
                                          ELSIF (   pregpar (i).cpretip = 3
                                                 OR (    pregpar (i).cpretip =
                                                                             2
                                                     AND pregpar (i).esccero =
                                                                             1
                                                    )
                                                )
                                          THEN
                                             vtprefor :=
                                                pac_mdpar_productos.f_get_tpreforsemi
                                                   (poliza.det_poliza.sproduc,
                                                    pregpar (i).cpregun,
                                                    'G',
                                                    mensajes,
                                                    gars (vgar).cgarant
                                                   );

                                             IF pac_iax_produccion.issuplem
                                             THEN
                                                vpasexec := 1430;
                                                v_cont_est_gar :=
                                                   pac_md_suplementos.f_get_existe_garantia
                                                      (poliza.det_poliza.sseguro,
                                                       pnriesgo,
                                                       gars (vgar).cgarant,
                                                       vnmovimi,
                                                       'EST',
                                                       mensajes
                                                      );
                                                vpasexec := 1431;

                                                SELECT DISTINCT nmovimi
                                                           INTO v_nmovimi_real
                                                           FROM garanseg
                                                          WHERE sseguro =
                                                                   poliza.det_poliza.ssegpol
                                                            AND ffinefe IS NULL;

                                                vpasexec := 1432;
                                                v_cont_gar :=
                                                   pac_md_suplementos.f_get_existe_garantia
                                                      (poliza.det_poliza.ssegpol,
                                                       pnriesgo,
                                                       gars (vgar).cgarant,
                                                       v_nmovimi_real,
                                                       'POL',
                                                       mensajes
                                                      );
                                             END IF;

                                             vpasexec := 1433;

                                             /*Se a¿ade en la condici¿n que se toque la garantia y que no sea una eliminaci¿n de garantia,*/
                                             /*S¿lo se calcularan las garantias cuando sea un alta o se trate de un suplemento que a¿ada una garantia*/
                                             IF     pac_iax_produccion.issuplem
                                                AND (   (    v_cont_est_gar =
                                                                             1
                                                         AND v_cont_gar = 1
                                                        )
                                                     OR (    v_cont_est_gar =
                                                                             0
                                                         AND v_cont_gar = 1
                                                        )
                                                    )
                                             THEN
                                                NULL;
                                             ELSE
                                                vpasexec := 1440;
                                                /* Bug 16768 - RSC - 26/11/2010 - APR - Implementacion y parametrizacion del producto GROUPLIFE (II)*/
                                                /* (a¿adimos gar(npos).cgarant a la funcion; antes se le pasaba un 0 !!)*/
                                                nerr :=
                                                   pac_albsgt.f_tprefor
                                                         (vtprefor,
                                                          'EST',
                                                          vsolicit,
                                                          pnriesgo,
                                                          gars (vgar).finiefe,
                                                          vnmovimi,
                                                          gars (vgar).cgarant,
                                                          v_resp,
                                                          1
                                                         );
                                             END IF;

                                             vpasexec := 1450;

                                             /* Dependiendo del tipo de respuesta*/
                                             IF pregpar (i).crestip IN (1, 2)
                                             THEN
                                                v_crespue :=
                                                   NVL (v_resp,
                                                        pregpar (i).cresdef
                                                       );
                                                v_trespue := NULL;
                                             ELSE
                                                v_crespue := NULL;
                                                v_trespue := v_resp;
                                             END IF;
                                          END IF;

                                          IF existpreg (pregpar (i).cpregun,
                                                        vgar
                                                       ) = -1
                                          THEN
                                             vpasexec := 1460;
                                             nerr :=
                                                f_grabapreguntasgarantia
                                                         (pnriesgo,
                                                          gars (vgar).cgarant,
                                                          pregpar (i).cpregun,
                                                          v_crespue,
                                                          v_trespue,
                                                          mensajes
                                                         );
                                             gars (vgar).preguntas :=
                                                poliza.det_poliza.riesgos
                                                                     (pnriesgo).garantias
                                                                         (vgar).preguntas;
                                             vpasexec := 1470;
                                          /**************** BUG24655:DRA:04/12/2012 *******************
                                          nerr :=
                                          pac_md_grabardatos.f_inicializa(vpmode, vsolicit,
                                          vnmovimi,
                                          mensajes);
                                          IF nerr = 1 THEN
                                          RAISE e_object_error;
                                          END IF;
                                          vpasexec := 1480;
                                          nerr :=
                                          pac_md_grabardatos.f_grabarpreguntasgarantia
                                          (gars(vgar).preguntas,
                                          pnriesgo,
                                          gars(vgar).cgarant,
                                          mensajes);
                                          IF nerr > 0 THEN
                                          RAISE e_object_error;
                                          END IF;
                                          **************** BUG24655:DRA:04/12/2012 *******************/
                                          END IF;
                                       END IF;
                                    END LOOP;
                                 END IF;
                              END IF;
                           END IF;
                        END IF;
                     /* Fin Bug 16106*/
                     END IF;
                  END LOOP;

                  vpasexec := 1490;
                  nerr :=
                     pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                            pnriesgo,
                                                            gars,
                                                            mensajes
                                                           );
               END IF;
            END IF;
         END IF;
      /* fin Bug 27876/0158962 - 18/11/2013*/
      /* ini BUG 0024655 - 30/11/2012 - JMF*/
      ELSIF     NVL (f_parproductos_v (poliza.det_poliza.sproduc,
                                       'ADMITE_CERTIFICADOS'
                                      ),
                     0
                    ) = 1
            AND pac_seguros.f_get_escertifcero (poliza.det_poliza.npoliza) = 0
      THEN
         IF gars IS NOT NULL
         THEN
            vpasexec := 1500;

            IF gars.COUNT > 0
            THEN
               vpasexec := 1510;

               FOR vgar IN gars.FIRST .. gars.LAST
               LOOP
                  vpasexec := 1520;

                  IF gars.EXISTS (vgar)
                  THEN
                     vpasexec := 1530;

                     IF gars (vgar).cobliga = 1
                     THEN
                        /* BUG 24655/0132226 - FAL - 10/12/2012*/
                        gars (vgar).reglasseg :=
                           pac_iobj_prod.f_getreglas_cert0
                                                  (poliza.det_poliza.sseguro,
                                                   pnriesgo,
                                                   gars (vgar).cgarant,
                                                   poliza.det_poliza.npoliza,
                                                   mensajes
                                                  );

                        IF pac_parametros.f_parproducto_n
                                                   (poliza.det_poliza.sproduc,
                                                    'GRABAR_PREGGARAN_DEF'
                                                   ) IN (1, 2)
                        THEN
                           nerr :=
                               pac_iax_produccion.f_grabarobjetodb (mensajes);
                           /* BUG 0024655/0129261 - FAL - 23/11/2012 -- Bajar a BD pq sino al evaluar pregs semiauto no encuentra info en las EST*/
                           vpasexec := 1540;
                           pregpar :=
                              pac_iaxpar_productos.f_get_preggarant
                                                         (gars (vgar).cgarant,
                                                          mensajes
                                                         );

                           IF mensajes IS NOT NULL
                           THEN
                              IF mensajes.COUNT > 0
                              THEN
                                 RAISE e_object_error;
                              END IF;
                           END IF;

                           IF pregpar IS NOT NULL
                           THEN
                              IF pregpar.COUNT > 0
                              THEN
                                 FOR i IN pregpar.FIRST .. pregpar.LAST
                                 LOOP
                                    IF pregpar.EXISTS (i)
                                    THEN
                                       v_crespue := NULL;
                                       v_trespue := NULL;
                                       v_resp := NULL;

                                       /* Si es una pregunta manual*/
                                       IF pregpar (i).cpretip = 1
                                       THEN
                                          vpasexec := 1550;

                                          /* Dependiendo del tipo de respuesta*/
                                          IF pregpar (i).crestip IN (1, 2)
                                          THEN
                                             v_crespue := pregpar (i).cresdef;
                                             v_trespue := NULL;
                                          ELSE
                                             v_crespue := NULL;
                                             v_trespue := pregpar (i).cresdef;
                                          END IF;
                                       ELSIF (   pregpar (i).cpretip = 3
                                              OR (    pregpar (i).cpretip = 2
                                                  AND pregpar (i).esccero = 1
                                                 )
                                             )
                                       THEN
                                          vtprefor :=
                                             pac_mdpar_productos.f_get_tpreforsemi
                                                  (poliza.det_poliza.sproduc,
                                                   pregpar (i).cpregun,
                                                   'G',
                                                   mensajes,
                                                   gars (vgar).cgarant
                                                  );
                                          vpasexec := 1560;

                                          IF pac_iax_produccion.issuplem
                                          THEN
                                             v_cont_est_gar :=
                                                pac_md_suplementos.f_get_existe_garantia
                                                   (poliza.det_poliza.sseguro,
                                                    pnriesgo,
                                                    gars (vgar).cgarant,
                                                    vnmovimi,
                                                    'EST',
                                                    mensajes
                                                   );
                                             vpasexec := 1561;

                                             SELECT DISTINCT nmovimi
                                                        INTO v_nmovimi_real
                                                        FROM garanseg
                                                       WHERE sseguro =
                                                                poliza.det_poliza.ssegpol
                                                         AND ffinefe IS NULL;

                                             vpasexec := 1562;
                                             v_cont_gar :=
                                                pac_md_suplementos.f_get_existe_garantia
                                                   (poliza.det_poliza.ssegpol,
                                                    pnriesgo,
                                                    gars (vgar).cgarant,
                                                    v_nmovimi_real,
                                                    'POL',
                                                    mensajes
                                                   );
                                             vpasexec := 1563;
                                          END IF;

                                          /*Se a¿ade en la condici¿n que se toque la garantia y que no sea una eliminaci¿n de garantia,*/
                                          /*S¿lo se calcularan las garantias cuando sea un alta o se trate de un suplemento que a¿ada una garantia*/
                                          IF     pac_iax_produccion.issuplem
                                             AND (   (    v_cont_est_gar = 1
                                                      AND v_cont_gar = 1
                                                     )
                                                  OR (    v_cont_est_gar = 0
                                                      AND v_cont_gar = 1
                                                     )
                                                 )
                                          THEN
                                             NULL;
                                          ELSE
                                             vpasexec := 1570;
                                             nerr :=
                                                pac_albsgt.f_tprefor
                                                         (vtprefor,
                                                          'EST',
                                                          vsolicit,
                                                          pnriesgo,
                                                          gars (vgar).finiefe,
                                                          vnmovimi,
                                                          gars (vgar).cgarant,
                                                          v_resp,
                                                          1
                                                         );
                                          END IF;

                                          vpasexec := 1580;

                                          /* Dependiendo del tipo de respuesta*/
                                          IF pregpar (i).crestip IN (1, 2)
                                          THEN
                                             v_crespue :=
                                                NVL (v_resp,
                                                     pregpar (i).cresdef
                                                    );
                                             v_trespue := NULL;
                                          ELSE
                                             v_crespue := NULL;
                                             v_trespue := v_resp;
                                          END IF;
                                       END IF;

                                       IF existpreg (pregpar (i).cpregun,
                                                     vgar) = -1
                                       THEN
                                          vpasexec := 1590;
                                          nerr :=
                                             f_grabapreguntasgarantia
                                                         (pnriesgo,
                                                          gars (vgar).cgarant,
                                                          pregpar (i).cpregun,
                                                          v_crespue,
                                                          v_trespue,
                                                          mensajes
                                                         );
                                          gars (vgar).preguntas :=
                                             poliza.det_poliza.riesgos
                                                                     (pnriesgo).garantias
                                                                         (vgar).preguntas;
                                          vpasexec := 1600;
                                       /**************** BUG24655:DRA:04/12/2012 *******************
                                       nerr := pac_md_grabardatos.f_inicializa(vpmode,
                                       vsolicit,
                                       vnmovimi,
                                       mensajes);
                                       IF nerr = 1 THEN
                                       RAISE e_object_error;
                                       END IF;
                                       vpasexec := 1610;
                                       nerr :=
                                       pac_md_grabardatos.f_grabarpreguntasgarantia
                                       (gars(vgar).preguntas,
                                       pnriesgo,
                                       gars(vgar).cgarant,
                                       mensajes);
                                       IF nerr > 0 THEN
                                       RAISE e_object_error;
                                       END IF;
                                       **************** BUG24655:DRA:04/12/2012 *******************/
                                       END IF;
                                    END IF;
                                 END LOOP;
                              END IF;
                           END IF;
                        END IF;
                     END IF;
                  /* BUG 24655/0132226 - FAL - 10/12/2012*/
                  END IF;
               END LOOP;

               vpasexec := 1620;
               nerr :=
                  pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                         pnriesgo,
                                                         gars,
                                                         mensajes
                                                        );
            END IF;
         END IF;
      /* fin BUG 0024655 - 30/11/2012 - JMF*/
      ELSIF NVL (f_parproductos_v (poliza.det_poliza.sproduc,
                                   'ADMITE_CERTIFICADOS'
                                  ),
                 0
                ) = 0
      THEN
         /* Bug 34866/209866*/
         IF gars IS NOT NULL
         THEN
            vpasexec := 1630;

            IF gars.COUNT > 0
            THEN
               vpasexec := 1640;

               FOR vgar IN gars.FIRST .. gars.LAST
               LOOP
                  vpasexec := 1650;

                  IF gars.EXISTS (vgar)
                  THEN
                     vpasexec := 1660;

                     IF gars (vgar).cobliga = 1
                     THEN
                        /* BUG 24655/0132226 - FAL - 10/12/2012*/
                        gars (vgar).reglasseg :=
                           pac_iobj_prod.f_getreglas_cert0
                                                  (poliza.det_poliza.sseguro,
                                                   pnriesgo,
                                                   gars (vgar).cgarant,
                                                   poliza.det_poliza.npoliza,
                                                   mensajes
                                                  );

                        IF pac_parametros.f_parproducto_n
                                                   (poliza.det_poliza.sproduc,
                                                    'GRABAR_PREGGARAN_DEF'
                                                   ) IN (1, 2)
                        THEN
                           nerr :=
                               pac_iax_produccion.f_grabarobjetodb (mensajes);
                           /* BUG 0024655/0129261 - FAL - 23/11/2012 -- Bajar a BD pq sino al evaluar pregs semiauto no encuentra info en las EST*/
                           vpasexec := 1670;
                           pregpar :=
                              pac_iaxpar_productos.f_get_preggarant
                                                         (gars (vgar).cgarant,
                                                          mensajes
                                                         );

                           IF mensajes IS NOT NULL
                           THEN
                              IF mensajes.COUNT > 0
                              THEN
                                 RAISE e_object_error;
                              END IF;
                           END IF;

                           IF pregpar IS NOT NULL
                           THEN
                              IF pregpar.COUNT > 0
                              THEN
                                 FOR i IN pregpar.FIRST .. pregpar.LAST
                                 LOOP
                                    IF pregpar.EXISTS (i)
                                    THEN
                                       v_crespue := NULL;
                                       v_trespue := NULL;
                                       v_resp := NULL;

                                       /* Si es una pregunta manual*/
                                       IF pregpar (i).cpretip = 1
                                       THEN
                                          vpasexec := 1680;

                                          /* Dependiendo del tipo de respuesta*/
                                          IF pregpar (i).crestip IN (1, 2)
                                          THEN
                                             v_crespue := pregpar (i).cresdef;
                                             v_trespue := NULL;
                                          ELSE
                                             v_crespue := NULL;
                                             v_trespue := pregpar (i).cresdef;
                                          END IF;
                                       ELSIF (   pregpar (i).cpretip = 3
                                              OR (    pregpar (i).cpretip = 2
                                                  AND pregpar (i).esccero = 1
                                                 )
                                             )
                                       THEN
                                          vtprefor :=
                                             pac_mdpar_productos.f_get_tpreforsemi
                                                  (poliza.det_poliza.sproduc,
                                                   pregpar (i).cpregun,
                                                   'G',
                                                   mensajes,
                                                   gars (vgar).cgarant
                                                  );
                                          vpasexec := 1690;

                                          IF pac_iax_produccion.issuplem
                                          THEN
                                             v_cont_est_gar :=
                                                pac_md_suplementos.f_get_existe_garantia
                                                   (poliza.det_poliza.sseguro,
                                                    pnriesgo,
                                                    gars (vgar).cgarant,
                                                    vnmovimi,
                                                    'EST',
                                                    mensajes
                                                   );
                                             vpasexec := 1700;

                                             SELECT DISTINCT nmovimi
                                                        INTO v_nmovimi_real
                                                        FROM garanseg
                                                       WHERE sseguro =
                                                                poliza.det_poliza.ssegpol
                                                         AND ffinefe IS NULL;

                                             vpasexec := 1710;
                                             v_cont_gar :=
                                                pac_md_suplementos.f_get_existe_garantia
                                                   (poliza.det_poliza.ssegpol,
                                                    pnriesgo,
                                                    gars (vgar).cgarant,
                                                    v_nmovimi_real,
                                                    'POL',
                                                    mensajes
                                                   );
                                             vpasexec := 1720;
                                          END IF;

                                          /*Se a¿ade en la condici¿n que se toque la garantia y que no sea una eliminaci¿n de garantia,*/
                                          /*S¿lo se calcularan las garantias cuando sea un alta o se trate de un suplemento que a¿ada una garantia*/
                                          IF     pac_iax_produccion.issuplem
                                             AND (   (    v_cont_est_gar = 1
                                                      AND v_cont_gar = 1
                                                     )
                                                  OR (    v_cont_est_gar = 0
                                                      AND v_cont_gar = 1
                                                     )
                                                 )
                                          THEN
                                             NULL;
                                          ELSE
                                             vpasexec := 1730;
                                             nerr :=
                                                pac_albsgt.f_tprefor
                                                         (vtprefor,
                                                          'EST',
                                                          vsolicit,
                                                          pnriesgo,
                                                          gars (vgar).finiefe,
                                                          vnmovimi,
                                                          gars (vgar).cgarant,
                                                          v_resp,
                                                          1
                                                         );
                                          END IF;

                                          vpasexec := 1740;

                                          /* Dependiendo del tipo de respuesta*/
                                          IF pregpar (i).crestip IN (1, 2)
                                          THEN
                                             v_crespue :=
                                                NVL (v_resp,
                                                     pregpar (i).cresdef
                                                    );
                                             v_trespue := NULL;
                                          ELSE
                                             v_crespue := NULL;
                                             v_trespue := v_resp;
                                          END IF;
                                       END IF;

                                       IF existpreg (pregpar (i).cpregun,
                                                     vgar) = -1
                                       THEN
                                          vpasexec := 1750;
                                          nerr :=
                                             f_grabapreguntasgarantia
                                                         (pnriesgo,
                                                          gars (vgar).cgarant,
                                                          pregpar (i).cpregun,
                                                          v_crespue,
                                                          v_trespue,
                                                          mensajes
                                                         );
                                          gars (vgar).preguntas :=
                                             poliza.det_poliza.riesgos
                                                                     (pnriesgo).garantias
                                                                         (vgar).preguntas;
                                          vpasexec := 1760;
                                       END IF;
                                    END IF;
                                 END LOOP;
                              END IF;
                           END IF;
                        END IF;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      END IF;

      vpasexec := 1770;

      /*fi BUG16106*/
      /*A GM003 - Modificacion pantalla garantias (axisctr007).*/
      FOR vgar IN gars.FIRST .. gars.LAST
      LOOP
         IF gars.EXISTS (vgar)
         THEN
            IF gars (vgar).cpartida = NVL (pcpartida, 0)
            THEN
               garsret.EXTEND;
               garsret (garsret.LAST) := ob_iax_garantias ();
               garsret (garsret.LAST) := gars (vgar);
            END IF;
         END IF;
         
  --Ini IAXIS-12899 -- ECP-- 19/03/2020
     IF gars(vgar).excontractual = 0
       THEN
          --
          gars(vgar).finivig := NVL(gars(vgar).finivig,vfefecto);
          gars(vgar).ffinvig := NVL(gars(vgar).ffinvig, vfvencim);
          --
       ELSIF gars(vgar).excontractual = 1
       THEN
          --
          vnmeses :=
                              NVL
                                 (pac_iaxpar_productos.f_get_pargarantia
                                                   ('TIEMPO_POSTCONTR_LEY',
                                                    poliza.det_poliza.sproduc,
                                                    gars (vgar).cgarant,
                                                    poliza.det_poliza.gestion.cactivi
                                                   ),
                                  0
                                 );
          gars(vgar).finivig := NVL(gars(vgar).finivig,vfefecto);
          gars(vgar).ffinvig := NVL(gars(vgar).ffinvig, ADD_MONTHS (vfvencplazo,
                                               vnmeses
                                              ));
          --
       ELSE
          --
         
    
          gars(vgar).finivig := NVL(gars(vgar).finivig,vfvencplazo);
          gars(vgar).ffinvig := NVL(gars(vgar).ffinvig,vfvencim);
          --
         
    
       END IF;  
         
      END LOOP;
--Fin IAXIS-12899 -- ECP-- 19/03/2020
      /*16122008*/
      IF NVL (pcpartida, 0) = 0
      THEN
         RETURN gars;
      ELSE
         RETURN garsret;
      END IF;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leegarantias;

   /*************************************************************************
   Grabar informacion de las garantias
   param in nriesgo   : numero de riesgo
   param in cgarant   : codigo garantia
   param in selgar    : 1 indica que se ha seleccionado garantia
   0 indica que se ha deseleccionado la garantia
   param in icapital  : importe de capital
   param in crevali   : tipo de revalorizacion
   param in prevali   : porcentaje de revalorizacion
   param in irevali   : importe de revalorizacion
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabargarantias (
      nriesgo    IN       NUMBER,
      cgarant    IN       NUMBER,
      selgar     IN       NUMBER,
      icapital   IN       NUMBER,
      crevali    IN       NUMBER,
      prevali    IN       NUMBER,
      irevali    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes,
      ipritar    IN       NUMBER DEFAULT NULL
   /* Bug 11735 - RSC - 15/01/2010 - APR - suplemento de modificacion de capital /prima*/
   )
      RETURN NUMBER
   IS
      gar              t_iax_garantias;
      tgr              ob_iax_garantias;
      rie              ob_iax_riesgos;
      npos             NUMBER;
      nerr             NUMBER;
      vmensaje         VARCHAR2 (1000);
      tgarant          VARCHAR2 (1000);
      desmsj           VARCHAR2 (1000);
      vpasexec         NUMBER (8)              := 1;
      vparam           VARCHAR2 (1)            := NULL;
      vobject          VARCHAR2 (200)
                                    := 'PAC_IAX_PRODUCCION.F_GrabarGarantias';
      /*ACC 13122008*/
      nerrfefec        NUMBER;
      vefectsuple      DATE                    := NULL;
      /*ACC 13122008*/
      v_irevali        NUMBER (13, 2);
      v_prevali        NUMBER (5, 2);
      /* BUG9496:DRA:18/05/2009:Inici*/
      preg             t_iax_preguntas;
      pregpar          t_iaxpar_preguntas;
      v_entra          BOOLEAN;
      v_crespue        NUMBER;
      v_trespue        VARCHAR2 (2000);
      vtprefor         VARCHAR2 (100);
      v_resp           NUMBER;
      /* BUG9496:DRA:18/05/2009:Fi*/
      /* Bug 11735 - RSC - 10/05/2010 - APR - suplemento de modificacion de capital /prima*/
      garis            sys_refcursor;
      v_garardep       garanpro.cgarant%TYPE;
      /* Fin Bug 11735*/
      v_cont_est_gar   NUMBER;
      v_cont_gar       NUMBER;
      v_nmovimi_real   NUMBER;
      preguntasgar     t_iax_preguntas;
      vcrevali         NUMBER;
      vnmeses          NUMBER;   -- IAXIS-5222 CJMR 04/09/2019

      /*Bug 40573 18/02/2016 KJSC Variable que traera el crecvali de la garantia que pasa.*/
      /* Bug 31686/180436 - 29/08/2014 - AMC*/
      /* comproba que el codigo de garantia no exista*/
      /* devuelve la posicion del indice o bien -1 sino existe*/
      FUNCTION existgar (cgarant IN NUMBER)
         RETURN NUMBER
      IS
      BEGIN
         IF gar IS NULL
         THEN
            RETURN -1;
         END IF;

         IF gar.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vgar IN gar.FIRST .. gar.LAST
         LOOP
            IF gar.EXISTS (vgar)
            THEN
               IF gar (vgar).cgarant = cgarant
               THEN
                  RETURN vgar;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existgar;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      gar := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF gar IS NULL
      THEN
         gar := t_iax_garantias ();
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      /*BUG9413:DRA:11-03-2009*/
      IF NVL (crevali, 0) = 1
      THEN
         v_prevali := NULL;
         v_irevali := prevali;
      ELSE
         v_prevali := prevali;
         v_irevali := NULL;
      END IF;

      vpasexec := 6;
      /* elimina una garantia previament seleccionada*/
      npos := existgar (cgarant);

      /* inserta una nova garantia*/
      IF npos = -1
      THEN
         vpasexec := 7;
         gar.EXTEND;
         npos := gar.LAST;
         gar (npos) := ob_iax_garantias ();

         /*ACC 1312008 si es suplement ha de controlar data efcte*/
         IF issuplem
         THEN
            nerrfefec :=
               pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                      vnmovimi,
                                                      vefectsuple,
                                                      mensajes
                                                     );
                                                    

            IF (nerrfefec <> 0)
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001097);
               RAISE e_object_error;
            END IF;
         END IF;

         /*ACC 1312008*/
         gar (npos).cgarant := cgarant;
         gar (npos).crevali := NVL (crevali, 0);
         gar (npos).prevali := v_prevali;
         gar (npos).irevali := v_irevali;
         gar (npos).finiefe :=
                          NVL (poliza.det_poliza.gestion.fefecto, vefectsuple);
                          
         /*ACC 1312008 si es suplement ha de controlar data efcte*/
         gar (npos).nmovimi := vnmovimi;
         gar (npos).nmovima := vnmovimi;
      END IF;

      --
      -- INI BUG 41143/229973 - 17/03/2016 - JAEG
      gar (npos).excontractual :=
         NVL
            (pac_iaxpar_productos.f_get_pargarantia
                                            ('EXCONTRACTUAL',
                                             poliza.det_poliza.sproduc,
                                             gar (npos).cgarant,
                                             poliza.det_poliza.gestion.cactivi
                                            ),
             0
            );
              
      --
      IF gar (npos).excontractual = 0
      THEN
         --
         gar (npos).finivig := NVL (gar (npos).finivig, poliza.det_poliza.gestion.fefecto);
         gar (npos).ffinvig := NVL (gar (npos).ffinvig, poliza.det_poliza.gestion.fvencim);
      --
      ELSIF gar (npos).excontractual = 1
      THEN
         -- INI IAXIS-5222 CJMR 04/09/2019
         vnmeses := NVL(pac_iaxpar_productos.f_get_pargarantia ('TIEMPO_POSTCONTR_LEY', poliza.det_poliza.sproduc, gar (npos).cgarant, poliza.det_poliza.gestion.cactivi), 0);
         gar (npos).finivig := NVL (gar (npos).finivig, poliza.det_poliza.gestion.fefecto);
         gar (npos).ffinvig := NVL (gar (npos).ffinvig, ADD_MONTHS(poliza.det_poliza.gestion.fvencplazo, vnmeses));
         -- INI IAXIS-5222 CJMR 04/09/2019
      ELSE
         --
         gar (npos).finivig := NVL (gar (npos).finivig, poliza.det_poliza.gestion.fvencplazo);
         gar (npos).ffinvig := NVL (gar (npos).ffinvig, poliza.det_poliza.gestion.fvencim);
      --
      END IF;

      --
      IF NVL
            (pac_iaxpar_productos.f_get_parproducto ('VIGENCIA_AMPARO',
                                                     poliza.det_poliza.sproduc
                                                    ),
             0
            ) = 0
      THEN
         --
         gar (npos).finivig := NULL;
         gar (npos).ffinvig := NULL;
      --
      END IF;

      --
      gar (npos).ccobprima := NVL (gar (npos).ccobprima, 1);

      --
      IF selgar != 1
      THEN
         gar (npos).ccobprima := 0;
      ELSIF NVL (gar (npos).nmovimi, 1) = 1
      THEN
         gar (npos).ccobprima := 1;
      END IF;

      -- FIN BUG 41143/229973 - 17/03/2016 - JAEG
      --
      vpasexec := 8;
      gar (npos).cobliga := selgar;
      gar (npos).cgarant := cgarant;
      /* BUG 26100 - FAL - 16/04/2013*/
      gar (npos).cmoncap :=
         pac_seguros.f_get_cmoncap (poliza.det_poliza.sproduc,
                                    gar (npos).cgarant,
                                    rie.cactivi
                                   );

      /*
      BEGIN
      SELECT g.cmoncap
      INTO gar(npos).cmoncap
      FROM garanpro g
      WHERE g.cgarant = gar(npos).cgarant
      AND g.sproduc = poliza.det_poliza.sproduc
      AND g.cactivi = NVL(rie.cactivi, 0);
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
      gar(npos).cmoncap := NULL;
      END;
      */
      /* FI BUG 26100 - FAL - 16/04/2013*/
      IF gar (npos).cmoncap IS NOT NULL
      THEN
         gar (npos).tmoncap :=
            pac_md_listvalores.f_get_tmoneda (gar (npos).cmoncap,
                                              gar (npos).cmoncapint,
                                              mensajes
                                             );
      END IF;

      IF selgar = 1
      THEN
         gar (npos).icapital := icapital;

         /* Bug 11735 - RSC - 15/01/2010 - APR - suplemento de modificacion de capital /prima*/
         /* Bug 11735 - RSC - 22/03/2010 - APR - suplemento de modificacion de capital /prima (a¿adimos isbajagar)*/
         IF    pac_iax_produccion.isaltagar
            OR pac_iax_produccion.imodifgar
            OR pac_iax_produccion.isbajagar
         THEN
            IF ipritar IS NOT NULL
            THEN
               gar (npos).primas.iprianu := ipritar;
               gar (npos).primas.ipritar := ipritar;
            END IF;
         END IF;

         /* Fin Bug 11735*/
         vcrevali := gar (npos).crevali;

         /*Bug 40573 18/02/2016 KJSC Variable que traera el crecvali de la garantia que pasa.*/
         /* BUG9413:DRA:10-03-2009: Se revaloriza siempre, si la gar. revaloriza*/
         /* BUG9906:DRA:29/04/2009: Inici*/
         IF pac_iaxpar_productos.f_permitirrevalgar (cgarant,
                                                     NVL (vcrevali, 0),
                                                     v_prevali,
                                                     v_irevali
                                                    ) = 1
         THEN
            pac_iaxpar_productos.p_revalgar (cgarant,
                                             NVL (vcrevali, 0),
                                             v_prevali,
                                             v_irevali,
                                             gar (npos).crevali,
                                             gar (npos).prevali,
                                             gar (npos).irevali,
                                             mensajes
                                            );
         ELSE
            gar (npos).crevali := 0;
            gar (npos).prevali := NULL;
            gar (npos).irevali := NULL;
         END IF;

         /* Bug 0019578 - FAL - 26/09/2011 - Recuperar si derechos de registro nivel garantia*/
         pac_iaxpar_productos.p_derreggar (cgarant,
                                           gar (npos).cderreg,
                                           mensajes
                                          );

         /* Fi Bug 0019578 - FAL - 26/09/2011*/
         /* BUG9906:DRA:29/04/2009: Fi*/
         IF isaltacol
         THEN
            /* Bug 22839 - RSC - 20/11/2012 - LCOL_T010-LCOL - Funcionalidad Certificado 0*/
            /*gar(npos).ctarman := 1;*/
            gar (npos).ctarman := 0;
         /* Fin bug 22839*/
         END IF;
      ELSE
         gar (npos).icapital := NULL;

         /* Bug 11735 - RSC - 15/01/2010 - APR - suplemento de modificacion de capital /prima*/
         /* Bug 11735 - RSC - 22/02/2010 - APR - suplemento de modificacion de capital /prima (a¿adimos isbajagar)*/
         IF    pac_iax_produccion.isaltagar
            OR pac_iax_produccion.imodifgar
            OR pac_iax_produccion.isbajagar
         THEN
            IF ipritar IS NOT NULL
            THEN
               gar (npos).primas.iprianu := NULL;
               gar (npos).primas.ipritar := NULL;
            END IF;
         END IF;

         /* Fin Bug 11735*/
         gar (npos).icaptot := NULL;
         gar (npos).cfranq := NULL;
         /* BUG9413:DRA:10-03-2009*/
         gar (npos).crevali := 0;
         gar (npos).prevali := NULL;
         gar (npos).irevali := NULL;

         /* Bug 9513 - APD - 10/07/2009 - CEM - Validacion de prima minima*/
         IF gar (npos).primas IS NULL
         THEN
            gar (npos).primas := ob_iax_primas ();
         END IF;

         gar (npos).primas.iprianu := NULL;
         gar (npos).primas.ipritar := NULL;
         gar (npos).primas.itarifa := NULL;
         gar (npos).primas.ipritot := NULL;

         /* Bug 9513 - APD - 10/07/2009 - Fin CEM - Validacion de prima minima*/
         /*JRH 03/2008*/
         IF gar (npos).ctipo = 11
         THEN
            /*Si deselecionamos la renta irregular*/
            rie.rentirreg := NULL;
         /*Eliminamos los datos de renta irregular para el riesgo*/
         END IF;

         /*JRH 03/2008*/
         /* BUG9496:DRA:18/05/2009:Inici*/
         preguntasgar := gar (npos).preguntas;
         /* Bug 31686/180436 - 29/08/2014 - AMC*/
         gar (npos).preguntas := NULL;

         /* BUG9496:DRA:18/05/2009:Fi*/
         IF isaltacol
         THEN
            gar (npos).ctarman := 0;
         END IF;
      END IF;

      /* Bug 10336 - 20/09/2009- JRH - CRE - Simular producto de rentas a partir del importe de renta y no de la prima*/
      IF gar (npos).ctipo IN (8, 9)
      THEN
         /*JRH Para que no se queje de que es nulo el PK_NUEVAPRODUCCION*/
         IF gar (npos).icapital IS NULL
         THEN
            gar (npos).icapital := 0;
         END IF;
      END IF;

      /* fi Bug 10336 - 20/09/2009- JRH*/
      vpasexec := 9;

      /* Bug 11735 - RSC - 10/05/2010 - APR - suplemento de modificacion de capital /prima*/
      IF pac_iax_produccion.isbajagar
      THEN
         IF selgar = 0
         THEN
            /* Desmarcar garantias implicar desmarcar dependientes*/
            garis :=
               pac_iax_listvalores.f_get_garanprodep
                                    (vproducto,
                                     pac_seguros.ff_get_actividad (vsolicit,
                                                                   1,
                                                                   'EST'
                                                                  ),
                                     gar (npos).cgarant,
                                     mensajes
                                    );

            FETCH garis
             INTO v_garardep;

            WHILE garis%FOUND
            LOOP
               IF gar IS NOT NULL
               THEN
                  IF gar.COUNT > 0
                  THEN
                     FOR vgar IN gar.FIRST .. gar.LAST
                     LOOP
                        IF gar.EXISTS (vgar)
                        THEN
                           IF gar (vgar).cgarant = v_garardep
                           THEN
                              gar (vgar).cobliga := 0;
                              gar (vgar).icapital := NULL;
                              gar (vgar).primas.iprianu := NULL;
                              gar (vgar).primas.ipritar := NULL;
                              gar (vgar).icaptot := NULL;
                              gar (vgar).cfranq := NULL;
                              gar (vgar).crevali := 0;
                              gar (vgar).prevali := NULL;
                              gar (vgar).irevali := NULL;

                              IF gar (vgar).primas IS NULL
                              THEN
                                 gar (vgar).primas := ob_iax_primas ();
                              END IF;

                              gar (vgar).primas.iprianu := NULL;
                              gar (vgar).primas.ipritar := NULL;
                              gar (vgar).primas.itarifa := NULL;
                              gar (vgar).primas.ipritot := NULL;
                              gar (vgar).preguntas := NULL;
                           END IF;
                        END IF;
                     END LOOP;
                  END IF;
               END IF;

               FETCH garis
                INTO v_garardep;
            END LOOP;

            CLOSE garis;
         END IF;
      END IF;

      /* Bug 11735*/
      /*(JAS) Cada cop que es grava una garantia, baixem tot l'objecte persistent a BD, perqu¿ sino*/
      /*perdiem informacio de revaloritzacions que no estaven baixades a BD, i que despres es*/
      /*matxacaven al refrescar l'objecte persistent amb la informacio de BD POST-VALIDACIONS.*/
      IF gar IS NOT NULL
      THEN
         IF gar.COUNT > 0
         THEN
            FOR vgar IN gar.FIRST .. gar.LAST
            LOOP
               IF gar.EXISTS (vgar)
               THEN
                  nerr := f_grabarobjetodbgar (gar (vgar), nriesgo, mensajes);

                  IF nerr > 0
                  THEN
                     vpasexec := 10;
                     RAISE e_object_error;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      /* Graba objecte garantias necesari per poder validar la garantia*/
      /*        nerr:=F_GRABAROBJETODBGar(gar(npos),nriesgo,mensajes);*/
      /*        IF nerr>0 THEN*/
      /*            vpasexec:=10;*/
      /*            RAISE e_object_error;*/
      /*        END IF;*/
      COMMIT;
      nerr :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                nriesgo,
                                                gar,
                                                mensajes
                                               );
      vpasexec := 11;

      IF nerr > 0
      THEN
         RAISE e_object_error;
      END IF;

      IF gar (npos).icapital IS NULL
      THEN
         vpasexec := 12;
         nerr :=
            pac_iax_validaciones.f_validacion_cobliga (selgar,
                                                       nriesgo,
                                                       gar (npos).cgarant,
                                                       mensajes
                                                      );
         vpasexec := 13;
      ELSE
         /* Valida la garantia*/
         vpasexec := 14;

         /*(JAS) Per suspension no validem el capital*/
         IF NOT (    selgar = 1
                 AND NVL (poliza.det_poliza.gestion.cforpag, -1) = 0
                 AND NVL (gar (npos).icapital, 0) = 0
                )
         THEN
            nerr :=
               pac_iax_validaciones.f_validacion_capital (selgar,
                                                          nriesgo,
                                                          gar (npos).cgarant,
                                                          mensajes
                                                         );
         END IF;

         vpasexec := 15;

         /* Bug 25911 - APD - 26/04/2013 - se sustituye nerr > 0 por nerr = 0*/
         /* ya que sino llamaria nunca a pac_iax_validaciones.f_validacion_cobliga*/
         IF nerr = 0
         THEN
            /* fin Bug 25911 - APD - 26/04/2013*/
            vpasexec := 16;
            nerr :=
               pac_iax_validaciones.f_validacion_cobliga (selgar,
                                                          nriesgo,
                                                          gar (npos).cgarant,
                                                          mensajes
                                                         );
            vpasexec := 17;
         END IF;
      END IF;

      vpasexec := 18;

      /* BUG9496:DRA:18/05/2009:Inici*/
      /* Si hay algun error en la validacion debemos cancelar la seleccion*/
      IF nerr > 0
      THEN
         /*Bug.: 18350 - ICV - 12/05/2011*/
         IF selgar = 0
         THEN
            /*No dejamos deseleccionar*/
            gar (npos).cobliga := 1;
         /*gar(npos).icapital := 0;*/
         ELSE
            /* Bug 25739/0148190 - APD - 04/07/2013*/
            /*IF gar(npos).ctipgar NOT IN(2, 4, 6, 8) THEN*/
            IF gar (npos).ctipgar NOT IN (2)
            THEN
               gar (npos).cobliga := 0;
            END IF;

            /* fin Bug 25739/0148190 - APD - 04/07/2013*/
            gar (npos).icapital := NULL;
         END IF;

         /* Bug 11735 - RSC - 15/01/2010 - APR - suplemento de modificacion de capital /prima*/
         /* Bug 11735 - RSC - 22/02/2010 - APR - suplemento de modificacion de capital /prima (a¿adimos isbajagar)*/
         IF    pac_iax_produccion.isaltagar
            OR pac_iax_produccion.imodifgar
            OR pac_iax_produccion.isbajagar
         THEN
            IF ipritar IS NOT NULL
            THEN
               gar (npos).primas.iprianu := NULL;
               gar (npos).primas.ipritar := NULL;
            END IF;
         END IF;

         /* Fin Bug 11735*/
         gar (npos).icaptot := NULL;
         gar (npos).cfranq := NULL;
         /* BUG9413:DRA:10-03-2009*/
         gar (npos).crevali := 0;
         gar (npos).prevali := NULL;
         gar (npos).irevali := NULL;

         /*JRH 03/2008*/
         IF gar (npos).ctipo = 11
         THEN
            /*Si deselecionamos la renta irregular*/
            rie.rentirreg := NULL;
         /*Eliminamos los datos de renta irregular para el riesgo*/
         END IF;

         /*JRH 03/2008*/
         gar (npos).preguntas := preguntasgar;
         /* Bug 31686/180436 - 29/08/2014 - AMC*/
         nerr := f_grabarobjetodbgar (gar (npos), nriesgo, mensajes);

         IF nerr > 0
         THEN
            RAISE e_object_error;
         END IF;

         nerr :=
            pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                   nriesgo,
                                                   gar,
                                                   mensajes
                                                  );
         RAISE e_object_error;
      END IF;

      /* BUG9496:DRA:18/05/2009:Fi*/
      COMMIT;

      /*Recuperar la informacio de la garantia despres de la seva validacio*/
      IF gar IS NOT NULL
      THEN
         IF gar.COUNT > 0
         THEN
            FOR vgar IN gar.FIRST .. gar.LAST
            LOOP
               IF gar.EXISTS (vgar)
               THEN
                  gar (vgar).p_get_garaftertar (vsolicit,
                                                vnmovimi,
                                                vpmode,
                                                nriesgo
                                               );
               END IF;
            END LOOP;
         END IF;
      END IF;

      vpasexec := 19;
      nerr :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                nriesgo,
                                                gar,
                                                mensajes
                                               );

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001098);
         vpasexec := 20;
         RAISE e_object_error;
      END IF;

      vpasexec := 21;
      /* indicar se s'ha de tarificar nomes val per primes*/
      /*bug 7535 ACC 170209 poliza.det_poliza.p_set_needtarificar(1);*/
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      /* Bug 11735 - 14/01/2010 - RSC - APR - suplemento de modificacion de capital /prima*/
      IF     pac_parametros.f_parproducto_n (poliza.det_poliza.sproduc,
                                             'DETALLE_GARANT'
                                            ) IN (1, 2)
         AND (   pac_iax_produccion.isaltagar
              OR pac_iax_produccion.imodifgar
              OR pac_iax_produccion.isbajagar
             )
      THEN
         NULL;
      ELSE
         /* Fin Bug 11735*/
         rie.p_set_needtarificar (1);
         poliza.det_poliza.p_check_needtarificarpol;
      /* Bug 11735 - 14/01/2010 - RSC - APR - suplemento de modificacion de capital /prima*/
      END IF;

      /* Fin Bug 11735*/
      nerr :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         nriesgo,
                                         rie,
                                         mensajes
                                        );

      IF nerr <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001099);
         vpasexec := 22;
         RAISE e_object_error;
      END IF;

      /*-falta falta*/
      /*bug 7535 ACC 170209*/
      COMMIT;
      /* BUG9496:DRA:18/05/2009:Inici --  Informem preguntes per defecte de la garantia*/
      vpasexec := 23;

      IF selgar = 1
      THEN
         gar := pac_iobj_prod.f_partriesgarantias (rie, mensajes);
         npos := existgar (cgarant);
         preg := pac_iobj_prod.f_partgarpreguntas (gar (npos), mensajes);

         IF preg IS NOT NULL
         THEN
            gar (npos).preguntas := preg;
         END IF;

         v_entra := FALSE;

         IF gar (npos).preguntas IS NULL
         THEN
            v_entra := TRUE;
         ELSE
            IF preg.COUNT = 0
            THEN
               v_entra := TRUE;
            ELSE
               /*MIRAMOS SI HAY PREGUNTAS OBLIGATORIAS SIN RESPONDER Y MIRAMOS SI SE HAN DE RESPONDER,*/
               /*se responderan si son obligatorias y si tienen un solo registro*/
               IF poliza.det_poliza.cobjase = 5
               THEN
                  /*Lo dejamos activo solo para autos, se debe valorar si aplica a todos los productos*/
                  FOR i IN
                     gar (npos).preguntas.FIRST .. gar (npos).preguntas.LAST
                  LOOP
                     IF     gar (npos).preguntas (i).crespue IS NULL
                        AND gar (npos).preguntas (i).trespue IS NULL
                     THEN
                        pregpar :=
                           pac_iaxpar_productos.f_get_preggarant
                                                          (gar (npos).cgarant,
                                                           mensajes
                                                          );

                        IF pregpar IS NOT NULL
                        THEN
                           IF pregpar.COUNT > 0
                           THEN
                              FOR j IN pregpar.FIRST .. pregpar.LAST
                              LOOP
                                 IF     pregpar (j).cpregun =
                                             gar (npos).preguntas (i).cpregun
                                    AND pregpar (j).cpretip = 1
                                    AND pregpar (j).cpreobl = 1
                                 THEN
                                    IF     pregpar (j).respuestas IS NOT NULL
                                       AND pregpar (j).respuestas.COUNT = 1
                                    THEN
                                       v_entra := TRUE;
                                    END IF;
                                 END IF;
                              END LOOP;
                           END IF;
                        END IF;
                     END IF;
                  END LOOP;
               END IF;
            END IF;
         END IF;

         IF v_entra
         THEN
            vpasexec := 24;
            gar (npos).preguntas :=
               pac_iax_produccion.f_get_preggarant (nriesgo,
                                                    gar (npos).cgarant,
                                                    mensajes
                                                   );
            vpasexec := 25;
            nerr :=
               pac_iobj_prod.f_set_partgarpreguntas (poliza.det_poliza,
                                                     nriesgo,
                                                     gar (npos).cgarant,
                                                     gar (npos).preguntas,
                                                     mensajes
                                                    );

            IF nerr > 0
            THEN
               RAISE e_object_error;
            END IF;
         END IF;

         IF v_entra
         THEN
            /* Bug 11735 - RSC - 14/01/2010 - APR - suplemento de modificacion de capital /prima*/
            IF     pac_parametros.f_parproducto_n (poliza.det_poliza.sproduc,
                                                   'DETALLE_GARANT'
                                                  ) IN (1, 2)
               AND pac_iax_produccion.imodifgar
            THEN
               NULL;
            ELSE
               /* Fin Bug 11735*/
               IF pac_parametros.f_parproducto_n (poliza.det_poliza.sproduc,
                                                  'GRABAR_PREGGARAN_DEF'
                                                 ) IN (1, 2)
               THEN
                  vpasexec := 26;
                  pregpar :=
                     pac_iaxpar_productos.f_get_preggarant
                                                          (gar (npos).cgarant,
                                                           mensajes
                                                          );

                  IF mensajes IS NOT NULL
                  THEN
                     IF mensajes.COUNT > 0
                     THEN
                        RAISE e_object_error;
                     END IF;
                  END IF;

                  IF pregpar IS NOT NULL
                  THEN
                     IF pregpar.COUNT > 0
                     THEN
                        FOR i IN pregpar.FIRST .. pregpar.LAST
                        LOOP
                           IF pregpar.EXISTS (i)
                           THEN
                              v_crespue := NULL;
                              v_trespue := NULL;

                              /* Si es una pregunta manual*/
                              IF pregpar (i).cpretip = 1
                              THEN
                                 vpasexec := 27;

                                 /* Dependiendo del tipo de respuesta*/
                                 IF pregpar (i).crestip IN (1, 2)
                                 THEN
                                    v_crespue := pregpar (i).cresdef;
                                    v_trespue := NULL;
                                 ELSE
                                    v_crespue := NULL;
                                    v_trespue := pregpar (i).cresdef;
                                 END IF;
                              ELSIF (   pregpar (i).cpretip = 3
                                     OR (    pregpar (i).cpretip = 2
                                         AND pregpar (i).esccero = 1
                                        )
                                    )
                              THEN
                                 vtprefor :=
                                    pac_mdpar_productos.f_get_tpreforsemi
                                                  (poliza.det_poliza.sproduc,
                                                   pregpar (i).cpregun,
                                                   'G',
                                                   mensajes,
                                                   gar (npos).cgarant
                                                  );
                                 vpasexec := 28;

                                 IF pac_iax_produccion.issuplem
                                 THEN
                                    /* Bug 11735 - RSC - 19/01/2010 - APR - suplemento de modificacion de capital /prima*/
                                    IF     pac_parametros.f_parproducto_n
                                                  (poliza.det_poliza.sproduc,
                                                   'DETALLE_GARANT'
                                                  ) IN (1, 2)
                                       AND pac_iax_produccion.isaltagar
                                    THEN
                                       /*IF PAC_MD_PRODUCCION.f_valida_alta_garantia(poliza, mensajes) = 1 THEN*/
                                       vpasexec := 29;
                                       /* Bug 16768 - RSC - 26/11/2010 - APR - Implementacion y parametrizacion del producto GROUPLIFE (II)*/
                                       /* (a¿adimos gar(npos).cgarant a la funcion; antes se le pasaba un 0 !!)*/
                                       nerr :=
                                          pac_albsgt.f_tprefor
                                                          (vtprefor,
                                                           'EST',
                                                           vsolicit,
                                                           nriesgo,
                                                           gar (npos).finiefe,
                                                           vnmovimi,
                                                           gar (npos).cgarant,
                                                           v_resp,
                                                           1
                                                          );

                                       /* Fin Bug 16768*/
                                       /* Dependiendo del tipo de respuesta*/
                                       IF pregpar (i).crestip IN (1, 2)
                                       THEN
                                          v_crespue :=
                                             NVL (v_resp,
                                                  pregpar (i).cresdef);
                                          v_trespue := NULL;
                                       ELSE
                                          v_crespue := NULL;
                                          v_trespue := v_resp;
                                       END IF;
                                    ELSE
                                       /* Fin Bug 11735*/
                                       /*NULL;*/
                                       /* En modo suplemento nada que hacer*/
                                       IF     pregpar (i).cpretip = 3
                                          AND pregpar (i).esccero = 1
                                       THEN
                                          nerr :=
                                             pac_albsgt.f_tprefor
                                                          (vtprefor,
                                                           'EST',
                                                           vsolicit,
                                                           nriesgo,
                                                           gar (npos).finiefe,
                                                           vnmovimi,
                                                           gar (npos).cgarant,
                                                           v_resp,
                                                           1
                                                          );

                                          IF pregpar (i).crestip IN (1, 2)
                                          THEN
                                             v_crespue :=
                                                NVL (v_resp,
                                                     pregpar (i).cresdef
                                                    );
                                             v_trespue := NULL;
                                          ELSE
                                             v_crespue := NULL;
                                             v_trespue := v_resp;
                                          END IF;
                                       ELSIF     pregpar (i).cpretip = 3
                                             AND pregpar (i).esccero = 0
                                       THEN
                                          v_cont_est_gar :=
                                             pac_md_suplementos.f_get_existe_garantia
                                                  (poliza.det_poliza.sseguro,
                                                   nriesgo,
                                                   gar (npos).cgarant,
                                                   vnmovimi,
                                                   'EST',
                                                   mensajes
                                                  );

                                          SELECT DISTINCT nmovimi
                                                     INTO v_nmovimi_real
                                                     FROM garanseg
                                                    WHERE sseguro =
                                                             poliza.det_poliza.ssegpol
                                                      AND ffinefe IS NULL;

                                          v_cont_gar :=
                                             pac_md_suplementos.f_get_existe_garantia
                                                   (poliza.det_poliza.ssegpol,
                                                    nriesgo,
                                                    gar (npos).cgarant,
                                                    v_nmovimi_real,
                                                    'POL',
                                                    mensajes
                                                   );

                                          IF     selgar = 1
                                             AND v_cont_est_gar > 0
                                             AND v_cont_gar > 0
                                          THEN
                                             /* He desmarcado y vuelto a marcar*/
                                             nerr :=
                                                pac_albsgt.f_tprefor
                                                          (vtprefor,
                                                           'EST',
                                                           vsolicit,
                                                           nriesgo,
                                                           gar (npos).finiefe,
                                                           vnmovimi,
                                                           gar (npos).cgarant,
                                                           v_resp,
                                                           1
                                                          );

                                             IF pregpar (i).crestip IN (1, 2)
                                             THEN
                                                v_crespue :=
                                                   NVL (v_resp,
                                                        pregpar (i).cresdef
                                                       );
                                                v_trespue := NULL;
                                             ELSE
                                                v_crespue := NULL;
                                                v_trespue := v_resp;
                                             END IF;
                                          END IF;
                                       END IF;
                                    END IF;
                                 ELSE
                                    vpasexec := 29;
                                    /* Bug 16768 - RSC - 26/11/2010 - APR - Implementacion y parametrizacion del producto GROUPLIFE (II)*/
                                    /* (a¿adimos gar(npos).cgarant a la funcion; antes se le pasaba un 0 !!)*/
                                    nerr :=
                                       pac_albsgt.f_tprefor
                                                          (vtprefor,
                                                           'EST',
                                                           vsolicit,
                                                           nriesgo,
                                                           gar (npos).finiefe,
                                                           vnmovimi,
                                                           gar (npos).cgarant,
                                                           v_resp,
                                                           1
                                                          );

                                    /* Fin Bug 16768*/
                                    /* Dependiendo del tipo de respuesta*/
                                    IF pregpar (i).crestip IN (1, 2)
                                    THEN
                                       v_crespue :=
                                            NVL (v_resp, pregpar (i).cresdef);
                                       v_trespue := NULL;
                                    ELSE
                                       v_crespue := NULL;
                                       v_trespue := v_resp;
                                    END IF;
                                 END IF;

                                 vpasexec := 30;
                              END IF;

                              nerr :=
                                 f_grabapreguntasgarantia (nriesgo,
                                                           gar (npos).cgarant,
                                                           pregpar (i).cpregun,
                                                           v_crespue,
                                                           v_trespue,
                                                           mensajes
                                                          );

                              IF nerr > 0
                              THEN
                                 RAISE e_object_error;
                              END IF;
                           END IF;
                        END LOOP;
                     END IF;
                  END IF;
               END IF;
            END IF;
         END IF;

         gar := pac_iobj_prod.f_partriesgarantias (rie, mensajes);
         npos := existgar (cgarant);

         IF npos > 0
         THEN
            nerr :=
               pac_md_grabardatos.f_grabarpreguntasgarantia
                                                        (gar (npos).preguntas,
                                                         nriesgo,
                                                         gar (npos).cgarant,
                                                         mensajes
                                                        );

            IF nerr > 0
            THEN
               vpasexec := 10;
               RAISE e_object_error;
            END IF;
         END IF;
      ELSE
         gar (npos).preguntas := t_iax_preguntas ();
         nerr :=
            pac_md_grabardatos.f_grabarpreguntasgarantia
                                                        (gar (npos).preguntas,
                                                         nriesgo,
                                                         gar (npos).cgarant,
                                                         mensajes
                                                        );

         IF nerr > 0
         THEN
            vpasexec := 10;
            RAISE e_object_error;
         END IF;

         nerr :=
            pac_iobj_prod.f_set_partgarpreguntas (poliza.det_poliza,
                                                  nriesgo,
                                                  gar (npos).cgarant,
                                                  gar (npos).preguntas,
                                                  mensajes
                                                 );

         IF nerr > 0
         THEN
            RAISE e_object_error;
         END IF;
      END IF;

      COMMIT;
      /*Despues de comprobar si hemos podido marcar la garantia comprobamos si hemos de eliminar beneficiarios por garantia*/
      nerr :=
         pac_iax_produccion.f_comprobar_benidgar (poliza.det_poliza.sseguro,
                                                  nriesgo,
                                                  cgarant,
                                                  mensajes
                                                 );

      IF nerr > 0
      THEN
         vpasexec := 12;
         RAISE e_object_error;
      END IF;

      /* BUG9496:DRA:18/05/2009:Fi*/
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabargarantias;

   /*************************************************************************
   Recupera informacion del capital de la garantia
   param in nriesgo   : numero de riesgo
   param in cgarant   : codigo garantia
   return             : importe capital o nulo
   *************************************************************************/
   FUNCTION f_get_captitalgarantia (nriesgo IN NUMBER, cgarant IN NUMBER)
      RETURN NUMBER
   IS
      icapital   NUMBER;
      rie        ob_iax_riesgos;
      gar        ob_iax_garantias;
      mensajes   t_iax_mensajes;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)
                               := 'PAC_IAX_PRODUCCION.F_Get_CaptitalGarantia';
   BEGIN
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      vpasexec := 2;
      gar := pac_iobj_prod.f_partriesgarantia (rie, cgarant, mensajes);
      icapital := gar.icapital;
      RETURN icapital;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_captitalgarantia;

   /*************************************************************************
   Recupera la informacion de las primas a nivel de riesgo
   param in nriesgo   : numero de riesgo
   param out mensajes : mensajes de error
   return             : objeto primas
   *************************************************************************/
   FUNCTION f_get_primasgaranttot (
      nriesgo    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN ob_iax_primas
   IS
      rie         ob_iax_riesgos;
      pri         ob_iax_primas;
      vpasexec    NUMBER (8)     := 1;
      vparam      VARCHAR2 (1)   := NULL;
      vobject     VARCHAR2 (200)
                                := 'PAC_IAX_PRODUCCION.F_Get_PrimasGarantTot';
      v_pdtocom   NUMBER;
      v_precarg   NUMBER;
      v_pdtotec   NUMBER;
      v_preccom   NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      /* Bug 21907 - RSC - 04/06/2012*/
      v_pdtocom := rie.primas.pdtocom;
      v_precarg := rie.primas.precarg;
      v_pdtotec := rie.primas.pdtotec;
      v_preccom := rie.primas.preccom;
      /* Fin Bug 21907*/
      vpasexec := 4;
      pri := rie.f_get_primas (vsolicit, vnmovimi, vpmode);
      /* Bug 21907 - RSC - 04/06/2012*/
      rie.primas.pdtocom := v_pdtocom;
      rie.primas.precarg := v_precarg;
      rie.primas.pdtotec := v_pdtotec;
      rie.primas.preccom := v_preccom;
      /* Fin Bug 21907*/
      vpasexec := 5;
      vpasexec :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         rie.nriesgo,
                                         rie,
                                         mensajes
                                        );
      RETURN pri;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_primasgaranttot;

   /*************************************************************************
   Establece revalorizacion a todas las garantias seleccionadas
   param in nriesgo   : numero de riesgo
   param in crevali   : tipo de revalorizacion
   param in prevali   : porcentaje de revalorizacion
   param in irevali   : importe de revalorizacion
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_set_revalriesgo (
      nriesgo    IN       NUMBER,
      crevali    IN       NUMBER,
      prevali    IN       NUMBER,
      irevali    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      rie          ob_iax_riesgos;
      gars         t_iax_garantias;
      nerr         NUMBER;
      objgar       ob_iax_prodgarantias;
      crevaligar   NUMBER;
      vpasexec     NUMBER (8)           := 1;
      vparam       VARCHAR2 (1)         := NULL;
      vobject      VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_Set_RevalRiesgo';
      impprevali   NUMBER;
      impirevali   NUMBER;
      vpprevali    NUMBER;
      vpirevali    NUMBER;
      /* BUG9906:DRA:29/04/2009*/
      vtipgar      NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF gars IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001100);
         vpasexec := 5;
         RAISE e_object_error;
      ELSE
         IF gars.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001100);
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      END IF;

      impprevali := prevali;
      /* aqui viene siempre el importe*/
      impirevali := irevali;

      IF crevali = 1
      THEN
         impirevali := impprevali;
         impprevali := 0;
      END IF;

      vpasexec := 7;

      FOR vgar IN gars.FIRST .. gars.LAST
      LOOP
         vpasexec := 8;

         IF gars.EXISTS (vgar)
         THEN
            /*objgar:= PAC_IAX_MNTPROD.F_Get_DetailGaran(poliza.det_poliza.sproduc,poliza.det_poliza.cactivi,gars(vgar).cgarant,mensajes);*/
            /*IF mensajes is not null THEN*/
            /*       IF mensajes.count > 0 THEN*/
            /*          vpasexec := 15;*/
            /*          RAISE e_object_error;*/
            /*       END IF;*/
            /* END IF;*/
            /*crevaligar:=nvl(objgar.DATGESTION.CREVALI,0);*/
            vtipgar :=
               pac_iaxpar_productos.f_get_tipgar (gars (vgar).cgarant,
                                                  poliza.det_poliza.sproduc,
                                                  mensajes
                                                 );
            /* BUG9906:DRA:29/04/2009:Inici*/
            /* BUG 0038936 - MDS - 04/02/2016 - la actividad no debe de ser la 0 sin¿ la que tenga la p¿liza*/
            pac_mdpar_productos.p_revalgar (poliza.det_poliza.sproduc,
                                            poliza.det_poliza.gestion.cactivi,
                                            /*JRH IMP Cambiar*/
                                            gars (vgar).cgarant,
                                            crevali,
                                            impprevali,
                                            impirevali,
                                            crevaligar,
                                            vpprevali,
                                            vpirevali,
                                            mensajes
                                           );

            /* Se hace con el tipo reval de la cobertura en si IF gars(vgar).crevali<>0 and gars(vgar).ctipgar not in (8,9) THEN --JRH 06/2008 En estos casos no podemos cambiar la revalorizacion*/
            IF crevaligar <> 0 AND vtipgar NOT IN (8, 9)
            THEN
               /*JRH 06/2008 En estos casos no podemos cambiar la revalorizacion*/
               vpasexec := 9;
               gars (vgar).crevali := crevaligar;
               gars (vgar).prevali := vpprevali;
               gars (vgar).irevali := vpirevali;
            ELSE
               gars (vgar).crevali := 0;
               gars (vgar).prevali := NULL;
               gars (vgar).irevali := NULL;
            END IF;

            /* BUG9906:DRA:29/04/2009:Fi*/
            IF mensajes IS NOT NULL
            THEN
               IF mensajes.COUNT > 0
               THEN
                  vpasexec := 15;
                  RAISE e_object_error;
               END IF;
            END IF;
         END IF;
      END LOOP;

      vpasexec := 10;
      poliza.det_poliza.crevali := crevali;
      poliza.det_poliza.prevali := impprevali;
      poliza.det_poliza.irevali := impirevali;
      vpasexec := 11;
      nerr :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                nriesgo,
                                                gars,
                                                mensajes
                                               );

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001098);
         vpasexec := 12;
         RAISE e_object_error;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_revalriesgo;

   /*************************************************************************
   Recupera la revalorizacion de la garantias seleccionada
   param in nriesgo   : numero de riesgo
   param in cgarant   : codigo de garantia
   param out crevali  : tipo de revalorizacion
   param out prevali  : porcentaje de revalorizacion
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_get_revalvalor (
      nriesgo    IN       NUMBER,
      cgarant    IN       NUMBER,
      crevali    OUT      NUMBER,
      prevali    OUT      NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      rie        ob_iax_riesgos;
      gar        ob_iax_garantias;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_Get_RevalValor';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      gar := pac_iobj_prod.f_partriesgarantia (rie, cgarant, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      IF gar IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001101);
         vpasexec := 7;
         RAISE e_object_error;
      END IF;

      crevali := gar.crevali;
      prevali := gar.prevali;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_get_revalvalor;

   /*************************************************************************
   Recupera la forma de pagament
   param out mensajes : mensajes de error
   return             : forma de pagament o nulo si ha habido errores
   *************************************************************************/
   FUNCTION f_get_garforpag (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      vpasexec    NUMBER (8)                         := 1;
      vparam      VARCHAR2 (1)                       := NULL;
      vobject     VARCHAR2 (200)      := 'PAC_IAX_PRODUCCION.F_Get_GarForpag';
      /* Ini Bug 22839 - MDS - 05/11/2012*/
      nerr        NUMBER;
      v_cforpag   prodherencia_colect.cforpag%TYPE;
   /* Fin Bug 22839 - MDS - 05/11/2012*/
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /* Ini Bug 22839 - MDS - 05/10/2012*/
      /* heredar el CFORPAG de la p??a con certificado 0*/
      IF     pac_mdpar_productos.f_get_parproducto ('ADMITE_CERTIFICADOS',
                                                    poliza.det_poliza.sproduc
                                                   ) = 1
         AND NOT pac_iax_produccion.isaltacol
      THEN
         nerr :=
            pac_productos.f_get_herencia_col (poliza.det_poliza.sproduc,
                                              2,
                                              v_cforpag
                                             );

         IF NVL (v_cforpag, 0) = 2 AND nerr = 0
         THEN
            /* Bug 24655 - RSC - 12/11/2012 - LCOL_T010-LCOL - Revision incidencias qtracker (II)*/
            /* Nota: ctipcob se informa al recargar la pagina o dar siguiente sin embargo el cforpag viene informado*/
            /* de la inicializaobjetos con lo que nos complica el control para detemrinar si ya se ha heredado o no,*/
            IF     pac_mdobj_prod.f_get_needtarificarpol (poliza.det_poliza) =
                                                                            0
               AND poliza.det_poliza.gestion.ctipcob IS NULL
            THEN
               /* Fin Bug 24655*/
               poliza.det_poliza.gestion.cforpag :=
                  pac_md_produccion.f_get_cforpagcol
                                                  (poliza.det_poliza.npoliza,
                                                   mensajes
                                                  );
            END IF;
         END IF;
      END IF;

      /* Fin Bug 22839 - MDS - 05/10/2012*/
      RETURN poliza.det_poliza.gestion.cforpag;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_garforpag;

   /*************************************************************************
   Establece forma de pagament
   param in cforpag   : forma de pagament
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_set_garforpag (cforpag IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Set_GarForpag';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      poliza.det_poliza.gestion.cforpag := cforpag;
      vpasexec := 2;
      /* indicar se s'ha de tarificar nomes val per primes*/
      poliza.det_poliza.p_set_needtarificar (1);
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_garforpag;

   /*************************************************************************
   Graba la revalorizacion de la garantias seleccionada
   param in nriesgo   : numero de riesgo
   param in cgarant   : codigo de garantia
   param in crevali   : tipo de revalorizacion
   param in precarg   : sobreprima
   param in prevali   : porcentaje de revalorizacion
   param in pdtocom   : descuento comercial
   param in iextrap   : extraprima
   param in pdtotec   : Porcentaje descuento t¿cnico -- bug 21907
   param in preccom   : Porcentaje recargo comercial -- bug 21907
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabatiprevalval (
      nriesgo    IN       NUMBER,
      cgarant    IN       NUMBER,
      crevali    IN       NUMBER,
      prevali    IN       NUMBER,
      precarg    IN       NUMBER,
      pdtocom    IN       NUMBER,
      iextrap    IN       NUMBER,
      pdtotec    IN       NUMBER,
      /* bug 21907*/
      preccom    IN       NUMBER,
      /* bug 21907*/
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      rie        ob_iax_riesgos;
      gar        t_iax_garantias;
      nerr       NUMBER;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_GrabaTipRevalVal';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      gar := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      IF gar IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001101);
         vpasexec := 7;
         RAISE e_object_error;
      ELSE
         IF gar.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001101);
            vpasexec := 8;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 9;

      FOR vgar IN gar.FIRST .. gar.LAST
      LOOP
         vpasexec := 10;

         IF gar.EXISTS (vgar)
         THEN
            vpasexec := 11;

            IF gar (vgar).cgarant = cgarant
            THEN
               vpasexec := 12;
               gar (vgar).crevali := crevali;
               gar (vgar).prevali := prevali;

               IF gar (vgar).primas IS NULL
               THEN
                  gar (vgar).primas := ob_iax_primas ();
               END IF;

               gar (vgar).primas.iextrap := iextrap;
               gar (vgar).primas.precarg := precarg;
               gar (vgar).primas.pdtocom := pdtocom;
               /* Ini Bug 21907 - MDS - 23/04/2012*/
               gar (vgar).primas.pdtotec := pdtotec;
               gar (vgar).primas.preccom := preccom;
            /* Fin Bug 21907 - MDS - 23/04/2012*/
            END IF;
         END IF;
      END LOOP;

      vpasexec := 13;
      nerr :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                nriesgo,
                                                gar,
                                                mensajes
                                               );

      IF nerr <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001102);
         vpasexec := 14;
         RAISE e_object_error;
      END IF;

      /* BUG7701:DRA:27-02-2009:Para que se graben los cambios hechos en el detalle si no se tarifica*/
      vpasexec := 15;
      nerr :=
         pac_md_grabardatos.f_inicializa (vpmode, vsolicit, vnmovimi,
                                          mensajes);

      IF nerr = 1
      THEN
         vpasexec := 155;
         RAISE e_object_error;
      END IF;

      nerr := pac_md_grabardatos.f_grabargarantias (gar, nriesgo, mensajes);

      IF nerr <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001663);
         vpasexec := 16;
         RAISE e_object_error;
      END IF;

      vpasexec := 17;
      /* indicar se s'ha de tarificar nomes val per primes*/
      /*BUG 7535 ACC 170209 poliza.det_poliza.p_set_needtarificar(1);*/
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);
      rie.p_set_needtarificar (1);
      poliza.det_poliza.p_check_needtarificarpol;
      nerr :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         nriesgo,
                                         rie,
                                         mensajes
                                        );

      IF nerr <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001099);
         vpasexec := 18;
         RAISE e_object_error;
      END IF;

      /* falta falta*/
      /*BUG 7535 ACC 170209*/
      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabatiprevalval;

   /*************************************************************************
   --BUG 9007 - 10/02/2009 - JTS
   Validaciones post tarificacion
   (para ello se debe guardar toda la informacion a la base de datos)
   param in  P_sproduc  : Codigo de Producto
   param in  P_sseguro  : Codigo de Seguro
   param in  P_nriesgo  : Codigo de Riesgo
   param out p_mensajes : mensajes de error
   return               : 0 la validacion ha sido correcta
   1 la validacion no ha sido correcta
   *************************************************************************/
   FUNCTION f_validaposttarif (
      psproduc   IN       NUMBER,
      psseguro   IN       NUMBER,
      pnriesgo   IN       NUMBER,
      mensajes   IN OUT   t_iax_mensajes
   )
      RETURN NUMBER
   IS
      v_pasexec    NUMBER (8)       := 1;
      v_param      VARCHAR2 (50)
         :=    'psproduc='
            || psproduc
            || ' psseguro='
            || psseguro
            || ' pnriesgo='
            || pnriesgo;
      v_object     VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_ValidaPostTarif';
      v_nerror     NUMBER;
      /*prod      OB_IAXPAR_PRODUCTOS:=OB_IAXPAR_PRODUCTOS();*/
      det_poliza   ob_iax_detpoliza;
   BEGIN
      /* PASAMOS ESTAS LLAMADAS AL PAC_MD_VALIDACIONES.F_VALIDAPOSTTARIF
      -- BUG 9513 - 01/04/2009 - LPS - Validacion prima minima
      v_nerror := pac_md_validaciones.f_validacion_primamin(psproduc, psseguro, pnriesgo,
      mensajes);
      IF v_nerror <> 0 THEN
      v_pasexec := 2;
      RAISE e_object_error;
      END IF;
      -- FI BUG 9513 - 01/04/2009 - LPS - Validacion prima minima
      v_nerror := pac_md_validaciones.f_validacion_primaminfrac(psproduc, psseguro, pnriesgo,
      mensajes);   -- BUG 9513 - 01/04/2009 - LPS
      IF v_nerror <> 0 THEN
      v_pasexec := 3;
      RAISE e_object_error;
      END IF;
      -- BUG 9709 - 06/04/2009 - LPS - Validacion del limite del porcentaje de crecimiento geometrico
      det_poliza := pac_iobj_prod.f_getpoliza(mensajes);
      IF det_poliza.crevali = 2 THEN
      v_nerror := pac_md_validaciones.f_valida_limrevalgeom(psproduc, det_poliza.prevali,
      mensajes);
      IF v_nerror <> 0 THEN
      v_pasexec := 2;
      RAISE e_object_error;
      END IF;
      END IF;
      -- FI BUG 9709 - 06/04/2009 - LPS - Validacion del limite del porcentaje de crecimiento geometrico
      */
      --BUG 10231 - 27/05/2009 - ETM -Limite de aportaciones en productos fiscales --INI
      /*etm ini*/
      IF f_get_essuplemento = 1
      THEN
         v_nerror :=
            pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                   vnmovimi,
                                                   vfefecto,
                                                   mensajes
                                                  );

         IF v_nerror <> 0
         THEN
            v_pasexec := 4;
            RAISE e_object_error;
         END IF;
      ELSE
         vfefecto := poliza.det_poliza.gestion.fefecto;
      END IF;

      v_nerror :=
         pac_md_validaciones.f_validaposttarif (psproduc,
                                                psseguro,
                                                pnriesgo,
                                                vfefecto,
                                                mensajes
                                               );

      IF v_nerror <> 0
      THEN
         v_pasexec := 5;
         RAISE e_object_error;
      END IF;

      /*etm fin*/
      /*BUG 10231 - 27/05/2009 - ETM -Limite de aportaciones en productos fiscales --FIN*/
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            v_object,
                                            1000005,
                                            v_pasexec,
                                            v_param
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            v_object,
                                            1000006,
                                            v_pasexec,
                                            v_param
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            v_object,
                                            1000001,
                                            v_pasexec,
                                            v_param,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_validaposttarif;

   /*JRH 03/2008*/
   /*************************************************************************
   Acciones post tarificacion
   (para ello se debe guardar toda la informacion a la base de datos)
   param in nriesgo   : numero de riesgo
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_accionposttarif (
      vsolicit         NUMBER,
      nriesgo          NUMBER,
      vnmovimi         NUMBER,
      mensajes   OUT   t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_AccionPostTarif';
      nerror     NUMBER;
   BEGIN
      nerror :=
         pac_md_produccion.f_accionposttarif (vpmode,
                                              vsolicit,
                                              nriesgo,
                                              vnmovimi,
                                              mensajes
                                             );

      IF nerror <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 151929);
         vpasexec := 15;
         RAISE e_object_error;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_accionposttarif;

      /*************************************************************************
   Tarifica el riesgo indicado
   (para ello se debe guardar toda la informacion a la base de datos)
   param in nriesgo   : numero de riesgo
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_tarificar (nriesgo IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      vfefecto          DATE;
      nerror            NUMBER;
      toma              t_iax_tomadores;
      age               ob_iax_agentes;
      v_sproduc         NUMBER;
      v_ctipage         NUMBER;
      v_sperson         NUMBER;
      temp_param        VARCHAR2 (2000);
      rie               ob_iax_riesgos;
      vmensaje          VARCHAR2 (500);
      desmsj            VARCHAR2 (100);
      tgarant           VARCHAR2 (40);
      gar               t_iax_garantias;
      cactivi           NUMBER;
      nerr              NUMBER;
      vpasexec          NUMBER (8)          := 1;
      vparam            VARCHAR2 (1)        := NULL;
      vobject           VARCHAR2 (200)    := 'PAC_IAX_PRODUCCION.F_Tarificar';
      v_errorpostt      NUMBER (8);
      /* BUG24655:DRA:04/12/2012:inici*/
      gars              t_iax_garantias;
      pregpar           t_iaxpar_preguntas;
      v_crespue         NUMBER;
      v_trespue         VARCHAR2 (2000);
      v_resp            NUMBER;
      vtprefor          VARCHAR2 (100);
      o_bf_proactgrup   t_iax_bf_proactgrup;

      FUNCTION existpreg (cpregun IN NUMBER, pvgar IN NUMBER)
         RETURN NUMBER
      IS
         preg   t_iax_preguntas;
      BEGIN
         preg :=
              poliza.det_poliza.riesgos (nriesgo).garantias (pvgar).preguntas;

         IF preg IS NULL
         THEN
            RETURN -1;
         END IF;

         IF preg.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vprg IN preg.FIRST .. preg.LAST
         LOOP
            IF preg.EXISTS (vprg)
            THEN
               IF preg (vprg).cpregun = cpregun
               THEN
                  IF    preg (vprg).crespue IS NOT NULL
                     OR preg (vprg).trespue IS NOT NULL
                  --Bug 38936/233049 - 21/04/2016 - AMC
                  THEN
                     RETURN vprg;
                  END IF;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existpreg;
   /* BUG24655:DRA:04/12/2012:Fi*/
   BEGIN
      vpasexec := 1;
      cactivi := f_get_actividad (mensajes);
      vpasexec := 2;

      /* Bug 13832 - RSC - 10/06/2010 - APRS015 - suplemento de aportaciones unicas*/
      IF pac_iax_produccion.issuplem
      THEN
         vpasexec := 3;

         IF pac_md_produccion.f_bloqueo_grabarobjectodb
                                   (vsseguro,
                                    pac_iax_suplementos.lstmotmov (1).cmotmov,
                                    mensajes
                                   ) = 0
         THEN
            vpasexec := 4;
            /* toda la informacio s'ha de baixar a la base de dades*/
            nerror := f_grabarobjetodb (mensajes);
         END IF;
      ELSE
         /* Fin Bug 13832*/
         vpasexec := 41;
         /* toda la informacio s'ha de baixar a la base de dades*/
         nerror := f_grabarobjetodb (mensajes);
      /* Bug 13832 - RSC - 10/06/2010 - APRS015 - suplemento de aportaciones unicas*/
      END IF;

      /* Fin Bug 13832*/
      IF nerror <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000773);
         RAISE e_object_error;
      END IF;

      vpasexec := 42;

      /* BUG24655:DRA:04/12/2012:Inici*/
      IF pac_parametros.f_parproducto_n (vproducto, 'GRABAR_PREGGARAN_DEF') IN
                                                                       (1, 2)
      THEN
         vpasexec := 1000;
         rie :=
            pac_iobj_prod.f_partpolriesgo (poliza.det_poliza,
                                           nriesgo,
                                           mensajes
                                          );

         IF rie IS NULL
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
            vpasexec := 1010;
            RAISE e_object_error;
         END IF;

         vpasexec := 1020;
         gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 1030;
               RAISE e_object_error;
            END IF;
         END IF;

         vpasexec := 1040;

         IF gars IS NOT NULL
         THEN
            vpasexec := 1050;

            IF gars.COUNT > 0
            THEN
               vpasexec := 1060;

               FOR vgar IN gars.FIRST .. gars.LAST
               LOOP
                  vpasexec := 1070;

                  IF gars.EXISTS (vgar)
                  THEN
                     vpasexec := 1080;
                     pregpar :=
                        pac_iaxpar_productos.f_get_preggarant
                                                         (gars (vgar).cgarant,
                                                          mensajes
                                                         );

                     IF mensajes IS NOT NULL
                     THEN
                        IF mensajes.COUNT > 0
                        THEN
                           RAISE e_object_error;
                        END IF;
                     END IF;

                     vpasexec := 1090;

                     IF pregpar IS NOT NULL
                     THEN
                        IF pregpar.COUNT > 0
                        THEN
                           FOR i IN pregpar.FIRST .. pregpar.LAST
                           LOOP
                              v_crespue := NULL;
                              v_trespue := NULL;

                              IF pregpar.EXISTS (i)
                              THEN
                                 /* Si es una pregunta manual*/
                                 vpasexec := 1145;

                                 IF pregpar (i).cpretip = 1
                                 THEN
                                    vpasexec := 1146;

                                    /* Dependiendo del tipo de respuesta*/
                                    IF pregpar (i).crestip IN (1, 2)
                                    THEN
                                       v_crespue := pregpar (i).cresdef;
                                       v_trespue := NULL;
                                    ELSE
                                       v_crespue := NULL;
                                       v_trespue := pregpar (i).cresdef;
                                    END IF;
                                 ELSIF (   pregpar (i).cpretip = 3
                                        OR (    pregpar (i).cpretip = 2
                                            AND pregpar (i).esccero = 1
                                           )
                                       )
                                 THEN
                                    vpasexec := 1147;
                                    vtprefor :=
                                       pac_mdpar_productos.f_get_tpreforsemi
                                                         (vproducto,
                                                          pregpar (i).cpregun,
                                                          'G',
                                                          mensajes,
                                                          gars (vgar).cgarant
                                                         );
                                    vpasexec := 1148;

                                    IF pac_iax_produccion.issuplem
                                    THEN
                                       NULL;
                                    ELSE
                                       vpasexec := 1149;
                                       /* Bug 16768 - RSC - 26/11/2010 - APR - Implementacion y parametrizacion del producto GROUPLIFE (II)*/
                                       /* (a¿adimos gar(npos).cgarant a la funcion; antes se le pasaba un 0 !!)*/
                                       nerr :=
                                          pac_albsgt.f_tprefor
                                                         (vtprefor,
                                                          'EST',
                                                          vsolicit,
                                                          nriesgo,
                                                          gars (vgar).finiefe,
                                                          vnmovimi,
                                                          gars (vgar).cgarant,
                                                          v_resp,
                                                          1
                                                         );
                                    END IF;

                                    vpasexec := 1150;

                                    /* Dependiendo del tipo de respuesta*/
                                    IF pregpar (i).crestip IN (1, 2)
                                    THEN
                                       v_crespue :=
                                            NVL (v_resp, pregpar (i).cresdef);
                                       v_trespue := NULL;
                                    ELSE
                                       v_crespue := NULL;
                                       v_trespue := v_resp;
                                    END IF;
                                 END IF;

                                 IF existpreg (pregpar (i).cpregun, vgar) = -1
                                 THEN
                                    vpasexec := 1151;
                                    nerr :=
                                       f_grabapreguntasgarantia
                                                         (nriesgo,
                                                          gars (vgar).cgarant,
                                                          pregpar (i).cpregun,
                                                          v_crespue,
                                                          v_trespue,
                                                          mensajes
                                                         );
                                    vpasexec := 1152;
                                    gars (vgar).preguntas :=
                                       poliza.det_poliza.riesgos (nriesgo).garantias
                                                                         (vgar).preguntas;
                                 END IF;
                              END IF;
                           END LOOP;
                        END IF;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;

         vpasexec := 1153;
         nerror :=
            pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                   nriesgo,
                                                   gars,
                                                   mensajes
                                                  );

         IF nerror <> 0
         THEN
            /*RETURN nerror;*/
            RAISE e_object_error;
         END IF;
      END IF;

      /* BUG24655:DRA:04/12/2012:Fi*/
      vpasexec := 1155;
      nerror :=
         pac_iax_validaciones.f_validar_garantias_al_tarifar (vsolicit,
                                                              nriesgo,
                                                              vnmovimi,
                                                              vproducto,
                                                              cactivi,
                                                              mensajes
                                                             );

      IF nerror <> 0
      THEN
         /*RETURN nerror;*/
         RAISE e_object_error;
      END IF;

      vpasexec := 56;
      nerror :=
            pac_iax_validaciones.f_validadpreggarantriesgo (nriesgo, mensajes);

      /*F_VALIDADPREGGARANT(mensajes);*/
      IF nerror <> 0
      THEN
         /*RETURN nerror;*/
         RAISE e_object_error;
      END IF;

      vpasexec := 6;

      /*(JAS)22.10.2008 - 7892: Tarificacio dels suplements amb la data d'efecte del suplement.*/
      IF f_get_essuplemento = 1
      THEN
         nerror :=
            pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                   vnmovimi,
                                                   vfefecto,
                                                   mensajes
                                                  );

         IF nerror <> 0
         THEN
            RAISE e_object_error;
         END IF;
      ELSE
         vfefecto := poliza.det_poliza.gestion.fefecto;
      END IF;

      vpasexec := 9;

      /* APD - 15/10/2013 - 28041/155911*/
      /*
      --JTS - 28/10/2010 - 16106
      IF isaltacol THEN
      -- Bug 22843 - RSC - 12/09/2012
      IF NVL(pac_parametros.f_parproducto_n(poliza.det_poliza.sproduc, 'TARIFA_POLIZACERO'),
      0) = 0 THEN
      -- Fin Bug 22843
      poliza.det_poliza.p_set_needtarificar(0);
      nerror := 0;
      -- Bug 22843 - RSC - 12/09/2012
      ELSE
      nerror := pac_md_produccion.f_tarifar_riesgo_tot('EST', vsolicit, nriesgo,
      vnmovimi, vfefecto, mensajes);
      END IF;
      -- Fin Bug 22843
      ELSE
      nerror := pac_md_produccion.f_tarifar_riesgo_tot('EST', vsolicit, nriesgo, vnmovimi,
      vfefecto, mensajes);
      END IF;
      --JTS - 28/10/2010 - 16106 fi
      */
      -- IAXIS-3394 CJMR 22/01/2020
      /*IF NOT (    pac_iax_produccion.issuplem
              AND pac_iax_suplementos.lstmotmov (1).cmotmov = 918
             )
      THEN*/
         nerror :=
            pac_md_produccion.f_tarifar_riesgo_tot ('EST',
                                                    vsolicit,
                                                    nriesgo,
                                                    vnmovimi,
                                                    vfefecto,
                                                    mensajes
                                                   );
      --END IF; IAXIS-3394 CJMR 22/01/2020

      /* fin APD - 15/10/2013 - 28041/155911*/
      vpasexec := 11;

      IF nerror <> 0
      THEN
         ROLLBACK;
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, nerror);
         vpasexec := 13;
         RAISE e_object_error;
      ELSE
         /*JTS 02/2009 Si todo ha ido bien hacemos las validaciones post tarificacion.*/
         v_errorpostt :=
                   f_validaposttarif (vproducto, vsolicit, nriesgo, mensajes);
         vpasexec := 15;

         IF v_errorpostt = 0
         THEN
            /*JRH 03/2008 Si todo ha ido bien hacemos las acciones post tarificacion.*/
            nerror :=
                    f_accionposttarif (vsolicit, nriesgo, vnmovimi, mensajes);

            IF nerror <> 0
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, nerror);
               vpasexec := 17;
               RAISE e_object_error;
            END IF;
         ELSE
            ROLLBACK;
         END IF;

         /*JRH IMPortante Solucion provisional!!! Se tiene que cambiar de lugar esta select o cambiar el*/
         /*f_accionposttarif para las rentas.*/
         /*En el f_accionposttarif  se actualiza el fppren de seguros_ren y se debe actualizar el ob_iax_gestion*/
         /*con este valor para no perderlo al recargar las pantallas.*/
         BEGIN
            SELECT fppren
              INTO poliza.det_poliza.gestion.fppren
              FROM estseguros_ren
             WHERE sseguro = vsolicit;
         EXCEPTION
            WHEN NO_DATA_FOUND
            THEN
               NULL;
         END;

         /*JRH Cambiar de sitio la anterior select*/
         /*JRH 03/2008*/
         COMMIT;
      /*-// acc NO CAL QU SURTI EL OK PAC_IOBJ_MENSAJES.CreaNuevo_Mensaje(mensajes,2,151984);*/
      /*JAMF 01/2008 No basta con cambiar el tipo de mensaje 2-->0, lo eliminamos*/
      /*pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 0, 1000009);*/
      END IF;

      vpasexec := 19;
      /* BUG9263:DRA:11/05/2009:Inici*/
      /* recuperar les preguntes automatiques*/
      poliza.det_poliza.p_get_pregauto (vsolicit, vnmovimi, vpmode);
      /* BUG9263:DRA:11/05/2009:Fi*/
      /* indicar se s'ha de tarificar nomes val per primes*/
      /*poliza.det_poliza.p_set_needtarificar(0);   -- ja he tarificat i ho indico*/
      vpasexec := 21;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001090);
         vpasexec := 23;
         RAISE e_object_error;
      END IF;

      vpasexec := 24;
      rie.p_set_needtarifar (0);
      /* t.7817*/
      vpasexec := 25;
      rie.p_calc_primas (vsolicit, vnmovimi, vpmode);
      /* recupera les primes*/
      vpasexec := 26;
      rie.p_get_pregauto (vsolicit, vnmovimi, vpmode);
      /* per recuperar les preguntes automatiques*/
      /* ini Bug 0010908 - 17/12/2009 - JMF*/
      vpasexec := 50;
      rie.p_get_tablaspregauto (vsolicit, vnmovimi, vpmode);
      /* tablas auxiliares preguntas automaticas.*/
      /* fin Bug 0010908 - 17/12/2009 - JMF*/
      vpasexec := 27;
      rie.p_get_garaftertar (vsolicit, vnmovimi, vpmode);
      /* per recuperar les noves garantias despres de tarificar*/
      vpasexec := 28;
      rie.p_get_pregautoriegar (vsolicit, vnmovimi, vpmode);
      /* Preguntes automatiques*/
      rie.p_set_needtarifar (0);
      /* bug 7535 ACC 170209*/
      vpasexec := 29;
      nerror :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         nriesgo,
                                         rie,
                                         mensajes
                                        );
      vpasexec := 30;
      poliza.det_poliza.p_check_needtarificarpol;

      /* bug 7535 ACC 170209*/
      IF nerror <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001099);
         vpasexec := 31;
         RAISE e_object_error;
      END IF;

      /*BUG 9007 - 04/03/2009 - JTS*/
      IF v_errorpostt <> 0
      THEN
         vpasexec := 36;
         RAISE e_object_error;
      END IF;

      /* BUG 0026100 - FAL - 16/04/2013. Asignar la moneda a la garantia del objeto para cuando la garantia est¿ selecciona por defecto y tiene un capial fijo. Se le da directamente al tarifar*/
      gar := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      FOR vgar IN gar.FIRST .. gar.LAST
      LOOP
         IF gar.EXISTS (vgar)
         THEN
            gar (vgar).cmoncap :=
               pac_seguros.f_get_cmoncap (poliza.det_poliza.sproduc,
                                          gar (vgar).cgarant,
                                          rie.cactivi
                                         );

            IF gar (vgar).cmoncap IS NOT NULL
            THEN
               gar (vgar).tmoncap :=
                  pac_md_listvalores.f_get_tmoneda (gar (vgar).cmoncap,
                                                    gar (vgar).cmoncapint,
                                                    mensajes
                                                   );
            END IF;

            --
            -- ININ BUG 41143/229973 - 17/03/2016 - JAEG
            IF gar (vgar).ccobprima = 1
            THEN
               gar (vgar).ipridev := gar (vgar).primas.iprianu;
            ELSE
               gar (vgar).ipridev := 0;
            END IF;

            --
            IF     pac_iax_produccion.issuplem
               AND gar (vgar).cobliga = 1
               AND gar (vgar).ccobprima = 1
            THEN
               IF f_get_essuplemento = 1
               THEN
                  nerror :=
                     pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                            vnmovimi,
                                                            vfefecto,
                                                            mensajes
                                                           );

                  IF nerror <> 0
                  THEN
                     RAISE e_object_error;
                  END IF;
               ELSE
                  vfefecto := poliza.det_poliza.gestion.fefecto;
               END IF;

-- Inicio -- ECP -- IAXIS-4985  09/08/2019
     --INI 3398 SGM COASEGURO ACEPTADO
/*            BEGIN
                  SELECT 1
                    INTO v_coa_aceptado
                    FROM V_PRODUCTOS
                   WHERE cactivo = 1 and trotulo like '% CA' 
                     and sproduc = vproducto; 

            EXCEPTION
            WHEN NO_DATA_FOUND THEN
                 v_coa_aceptado:=0;
            END;*/
     --FIN 3398 SGM COASEGURO ACEPTADO

           -- IF poliza.det_poliza.CTIPCOA <> 8 THEN
      -- INI -IAXIS-3264 - 02/01/2020
      IF  issuplem AND
          pac_iax_suplementos.lstmotmov(1).cmotmov = 239 AND
          NVL (pac_parametros.f_parproducto_n (poliza.det_poliza.sproduc,'BAJA_AMP_DEV_TOT'),0) = 1 THEN
          IF gar(vgar).cobliga = 1 THEN
            gar(vgar).ipridev := 0;
          ELSE
            --
            IF pac_monedas.f_moneda_producto(poliza.det_poliza.sproduc) != f_parinstalacion_n('MONEDAINST') THEN
              /* p_sseguro     
                    p_nrecibo     
                    p_cgarant     
                    p_nmovimi     
                    p_screen_recib
                    p_cop_ext*/
              gar(vgar).ipridev := f_get_valores_baja_amp(vsseguro,gar(vgar).cgarant,vnmovimi,1,1);
            ELSE
              gar(vgar).ipridev := f_get_valores_baja_amp(vsseguro,gar(vgar).cgarant,vnmovimi,1,2);
            END IF;
          END IF;
        p_control_error('JLTS','PAC_IAX_PRODUCCION.F_TARIFAR','BAJA_AMP_DEV_TOT vsseguro='||vsseguro||' vnmovimi='||vnmovimi||' cgarant='||gar(vgar).cgarant||' ipridev='||gar(vgar).ipridev);
      ELSE
      -- FIN -IAXIS-3264 - 02/01/2020
              gar(vgar).ipridev := f_calcula_prima_dev(psseguro => vsseguro,
                                                        pcgarant => gar(vgar)
                                                                     .cgarant,
                                                        pfefecto => vfefecto,
                                                        pnriesgo => nriesgo,
                                                        pnmovimi => vnmovimi,
                                                        pxiprianu => gar(vgar)
                                                                      .primas.iprianu,
                                                        psproduc => vproducto,
                                                        perror => nerr);
      END IF; --IAXIS-3264 - 02/01/2020
            --END IF;
-- Fin  -- ECP -- IAXIS-4985  09/08/2019
               --
               IF nerr > 0
               THEN
                  RAISE e_object_error;
               END IF;
            --
            END IF;
         -- FIN BUG 41143/229973 - 17/03/2016 - JAEG
         --
         END IF;
      END LOOP;

      IF gar IS NOT NULL
      THEN
         IF gar.COUNT > 0
         THEN
            FOR vgar IN gar.FIRST .. gar.LAST
            LOOP
               IF gar.EXISTS (vgar)
               THEN
                  nerr := f_grabarobjetodbgar (gar (vgar), nriesgo, mensajes);

                  IF nerr > 0
                  THEN
                     vpasexec := 10;
                     RAISE e_object_error;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      /* Graba objecte garantias necesari per poder validar la garantia*/
      /*        nerr:=F_GRABAROBJETODBGar(gar(npos),nriesgo,mensajes);*/
      /*        IF nerr>0 THEN*/
      /*            vpasexec:=10;*/
      /*            RAISE e_object_error;*/
      /*        END IF;*/
      /* COMMIT;*/
      nerr :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                nriesgo,
                                                gar,
                                                mensajes
                                               );
      vpasexec := 11;

      IF nerr > 0
      THEN
         RAISE e_object_error;
      END IF;

      --Llamamos a esta funci¿n porque despu¿s de tarificar hay que refrescar el objeto poliza.det_poliza.riesgos.bonfranseg con los registros correctos
      o_bf_proactgrup :=
                       f_get_franquicias (nriesgo, NULL, NULL, NULL, mensajes);
      /* FI BUG 0026100 - FAL - 16/04/2013*/

      -- Inicio IAXIS-2016: Scoring 08/03/2019
       /*IF pac_parametros.f_parempresa_n(24, 'CALCULO_SCORING') = 1 THEN
        toma := poliza.det_poliza.tomadores;
        IF toma IS NOT NULL THEN
          IF toma.count > 0 THEN
            FOR vtom IN toma.first .. toma.last
           LOOP
             IF toma.exists(vtom) THEN

                v_sperson := toma(vtom).SPEREAL;
                v_sproduc := poliza.det_poliza.sproduc;
                   age := pac_md_redcomercial.f_get_agente(poliza.det_poliza.cagente, mensajes);
             v_ctipage := age.ctipage;

                temp_param := '- v_sperson: ' || v_sperson || ' - v_sproduc: ' || v_sproduc || ' - v_ctipage: ' || v_ctipage || '. ';

                   p_tab_error(f_sysdate, f_user, vobject, vpasexec, temp_param, SQLERRM);

                   nerror := pac_iax_esc_riesgo.f_calcula_modelo(v_sperson, v_sproduc, v_ctipage, mensajes);

                IF nerror <> 0 THEN
                  RAISE e_object_error;
                END IF;
             END IF;
           END LOOP;
          END IF;
        END IF;

       END IF;*/
      -- Fin IAXIS-2016: Scoring 08/03/2019
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_tarificar;

   /*************************************************************************
   Recupera las clausulas que el usuario a seleccionado o bien automaticas
   a nivel de producto
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_leeclausulasprod (mensajes OUT t_iax_mensajes)
      RETURN t_iax_clausulas
   IS
      clau       t_iax_clausulas;
      clab       t_iax_clausulas;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_LeeClausulasProd';
      vnumerr    NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      clau :=
         pac_iobj_prod.f_partpolclausulas (poliza.det_poliza, mensajes,
                                           vpmode);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF clau IS NULL
      THEN
         RETURN NULL;
      ELSE
         IF clau.COUNT = 0
         THEN
            RETURN NULL;
         END IF;
      END IF;

      vpasexec := 5;

      FOR vclau IN clau.FIRST .. clau.LAST
      LOOP
         vpasexec := 6;

         IF clau.EXISTS (vclau)
         THEN
            vpasexec := 7;

            IF clau (vclau).ctipo = 4
            THEN
               vpasexec := 8;

               IF clab IS NULL
               THEN
                  clab := t_iax_clausulas ();
               END IF;

               vpasexec := 9;
               clab.EXTEND;
               clab (clab.LAST) := clau (vclau);
            END IF;
         END IF;
      END LOOP;

      RETURN clab;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leeclausulasprod;

   /*************************************************************************
   Recupera las clausulas que el usuario a seleccionado o bien automaticas (multiples)
   a nivel de producto
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_leeclausulasprodmult (
      psclagen   IN       NUMBER DEFAULT NULL,
      pnordcla   IN       NUMBER DEFAULT NULL,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_clausulas
   IS
      clau       t_iax_clausulas;
      clab       t_iax_clausulas;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)
                               := 'PAC_IAX_PRODUCCION.F_LeeClausulasProdMult';
      vnumerr    NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      clau :=
         pac_iobj_prod.f_partpolclausulas (poliza.det_poliza, mensajes,
                                           vpmode);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF clau IS NULL
      THEN
         RETURN NULL;
      ELSE
         IF clau.COUNT = 0
         THEN
            RETURN NULL;
         END IF;
      END IF;

      vpasexec := 5;

      FOR vclau IN clau.FIRST .. clau.LAST
      LOOP
         vpasexec := 6;

         IF clau.EXISTS (vclau)
         THEN
            vpasexec := 7;

            IF     clau (vclau).ctipo = 8
               AND clau (vclau).sclagen = NVL (psclagen, clau (vclau).sclagen)
               AND clau (vclau).cidentity =
                                        NVL (pnordcla, clau (vclau).cidentity)
            THEN
               vpasexec := 8;

               IF clab IS NULL
               THEN
                  clab := t_iax_clausulas ();
               END IF;

               vpasexec := 9;
               clab.EXTEND;
               clab (clab.LAST) := clau (vclau);
            END IF;
         END IF;
      END LOOP;

      RETURN clab;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leeclausulasprodmult;

   /*************************************************************************
   Graba las clausulas de producto indicadas por el usuario
   param in  sclagen  : codigo clausula producto generica
   param in  selclau  : 1 indica que se ha seleccionado clausula
   0 indica que se ha deseleccionado la clausula
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabaclausulas (
      sclagen    IN       NUMBER,
      selclau    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      clau          t_iax_clausulas;
      npos          NUMBER;
      vpasexec      NUMBER (8)      := 1;
      vparam        VARCHAR2 (1)    := NULL;
      vobject       VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_GrabaClausulas';
      /*ACC 13122008*/
      nerrfefec     NUMBER;
      vefectsuple   DATE            := NULL;

      /*ACC 13122008*/
      /* BUG9107:DRA:18-02-2009: Buscamos el NORDCLA mayor*/
      FUNCTION max_nordcla
         RETURN NUMBER
      IS
         v_max   NUMBER := 0;
      BEGIN
         IF clau IS NULL
         THEN
            RETURN 0;
         END IF;

         IF clau.COUNT = 0
         THEN
            RETURN 0;
         END IF;

         FOR vclau IN clau.FIRST .. clau.LAST
         LOOP
            IF clau.EXISTS (vclau)
            THEN
               IF clau (vclau).cidentity > v_max
               THEN
                  v_max := clau (vclau).cidentity;
               END IF;
            END IF;
         END LOOP;

         RETURN v_max;
      END max_nordcla;

      /* comproba que el codigo de clausula no exista*/
      /* devuelve la posicion del indice o bien -1 sino existe*/
      FUNCTION existclau (sclapro IN NUMBER)
         RETURN NUMBER
      IS
      BEGIN
         IF clau IS NULL
         THEN
            RETURN -1;
         END IF;

         IF clau.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vclau IN clau.FIRST .. clau.LAST
         LOOP
            IF clau.EXISTS (vclau)
            THEN
               IF clau (vclau).sclagen = sclapro
               THEN
                  RETURN vclau;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existclau;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      clau :=
         pac_iobj_prod.f_partpolclausulas (poliza.det_poliza, mensajes,
                                           vpmode);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 1;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 3;

      IF clau IS NULL
      THEN
         clau := t_iax_clausulas ();
      END IF;

      vpasexec := 4;
      npos := existclau (sclagen);
      vpasexec := 5;

      IF selclau = 0
      THEN
         /* elimina una clausula previament seleccionada*/
         IF npos > -1
         THEN
            clau.DELETE (npos);
         /*RETURN 0;*/
         END IF;
      /*RETURN 0;*/
      ELSE
         vpasexec := 6;

         /* inserta una nova clausula*/
         IF npos = -1
         THEN
            clau.EXTEND;
            npos := clau.LAST;
            clau (npos) := ob_iax_clausulas ();
         END IF;

         vpasexec := 61;

         /* Bug 18362 - APD - 23/05/2011 - si el ctipo is not nulo se debe dejar el tipo*/
         /* de clausula que ya tenia*/
         IF clau (npos).ctipo IS NULL OR clau (npos).ctipo = 0
         THEN
            clau (npos).ctipo := 4;
         END IF;

         vpasexec := 62;
         /* fIN Bug 18362 - APD - 23/05/2011*/
         clau (npos).sclagen := sclagen;
         /*ACC 1312008 si es suplement ha de controlar data efcte*/
         vpasexec := 63;

         IF issuplem
         THEN
            nerrfefec :=
               pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                      vnmovimi,
                                                      vefectsuple,
                                                      mensajes
                                                     );

            IF (nerrfefec <> 0)
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001103);
               RAISE e_object_error;
            END IF;
         END IF;

         vpasexec := 64;
         /*ACC 1312008*/
         clau (npos).finiclau :=
                          NVL (vefectsuple, poliza.det_poliza.gestion.fefecto);
         /*ACC 1312008 si es suplement ha de controlar data efcte --/// ACC*/
         clau (npos).ffinclau := NULL;

         /*/// ACC*/
         /*clau(npos).cidentity := clau.count +1;*/
         /* Bug 18362 - APD - 02/06/2011 - si el ctipo es 2, 3 se debe guardar el cidentity*/
         /* ya que son un tipo de clausulas especiales*/
         IF clau (npos).ctipo IN (2, 3) AND clau (npos).cidentity = 0
         THEN
            clau (npos).cidentity := max_nordcla () + 1;
         /* clau.LAST;  -- BUG9107:DRA:18-02-2009*/
         END IF;

         /* Fin Bug 18362 - APD - 02/06/2011*/
         /* Bug 18362 - APD - 06/06/2011 - se debe validar que si la clausula tiene parametros*/
         /* estos no sean nulos*/
         vpasexec := 64;

         IF clau (npos).cparams IS NULL OR clau (npos).cparams > 0
         THEN
            IF clau (npos).cparams IS NULL
            THEN
               clau (npos).parametros :=
                  pac_mdpar_productos.f_get_clausulas (clau (npos).sclagen,
                                                       clau (npos).cparams,
                                                       mensajes
                                                      );
            END IF;

            vpasexec := 65;

            IF clau (npos).cparams > 0
            THEN
               FOR cur_param IN
                  clau (npos).parametros.FIRST .. clau (npos).parametros.LAST
               LOOP
                  IF clau (npos).parametros (cur_param).ttexto IS NULL
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                           1,
                                                           9902015
                                                          );
                     /*Es obligatorio informar la descripcion del parametro*/
                     RAISE e_object_error;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      /* Fin Bug 18362 - APD - 06/06/2011*/
      END IF;

      poliza.det_poliza.clausulas := clau;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabaclausulas;

   /*************************************************************************
   Graba las clausulas de producto indicadas por el usuario
   param in  sclagen  : codigo clausula producto generica
   param in  selclau  : 1 indica que se ha seleccionado clausula
   0 indica que se ha deseleccionado la clausula
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabaclausulasmult (
      sclagen    IN       NUMBER,
      selclau    IN       NUMBER,
      pnordcla   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      clau          t_iax_clausulas;
      npos          NUMBER;
      vpasexec      NUMBER (8)      := 1;
      vparam        VARCHAR2 (1)    := NULL;
      vobject       VARCHAR2 (200)
                                 := 'PAC_IAX_PRODUCCION.F_grabaclausulasmult';
      /*ACC 13122008*/
      nerrfefec     NUMBER;
      vefectsuple   DATE            := NULL;

      /*ACC 13122008*/
      /* BUG9107:DRA:18-02-2009: Buscamos el NORDCLA mayor*/
      FUNCTION max_nordcla
         RETURN NUMBER
      IS
         v_max   NUMBER := 0;
      BEGIN
         IF clau IS NULL
         THEN
            RETURN 0;
         END IF;

         IF clau.COUNT = 0
         THEN
            RETURN 0;
         END IF;

         FOR vclau IN clau.FIRST .. clau.LAST
         LOOP
            IF clau.EXISTS (vclau)
            THEN
               IF clau (vclau).cidentity > v_max
               THEN
                  v_max := clau (vclau).cidentity;
               END IF;
            END IF;
         END LOOP;

         RETURN v_max;
      END max_nordcla;

      /* comproba que el codigo de clausula no exista*/
      /* devuelve la posicion del indice o bien -1 sino existe*/
      FUNCTION existclau (sclapro IN NUMBER, pnordcla IN NUMBER)
         RETURN NUMBER
      IS
      BEGIN
         IF clau IS NULL
         THEN
            RETURN -1;
         END IF;

         IF clau.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vclau IN clau.FIRST .. clau.LAST
         LOOP
            IF clau.EXISTS (vclau)
            THEN
               IF clau (vclau).sclagen = sclapro
               THEN
                  IF clau (vclau).cidentity = pnordcla
                  THEN
                     RETURN vclau;
                  END IF;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existclau;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      clau :=
         pac_iobj_prod.f_partpolclausulas (poliza.det_poliza, mensajes,
                                           vpmode);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 1;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 3;

      IF clau IS NULL
      THEN
         clau := t_iax_clausulas ();
      END IF;

      vpasexec := 4;
      npos := existclau (sclagen, pnordcla);
      vpasexec := 5;

      IF selclau = 0
      THEN
         /* elimina una clausula previament seleccionada*/
         IF npos > -1
         THEN
            clau.DELETE (npos);
         /*RETURN 0;*/
         END IF;
      /*RETURN 0;*/
      ELSE
         vpasexec := 6;

         /* inserta una nova clausula*/
         IF npos = -1
         THEN
            clau.EXTEND;
            npos := clau.LAST;
            clau (npos) := ob_iax_clausulas ();
         END IF;

         /* Bug 18362 - APD - 23/05/2011 - si el ctipo is not nulo se debe dejar el tipo*/
         /* de clausula que ya tenia*/
         /* IF clau(npos).ctipo IS NULL
         OR clau(npos).ctipo = 0 THEN
         clau(npos).ctipo := 4;
         END IF;
         */
         clau (npos).ctipo := 8;
         /* fIN Bug 18362 - APD - 23/05/2011*/
         clau (npos).sclagen := sclagen;

         /* clau(npos).nordcla := pnordcla;*/
         /*ACC 1312008 si es suplement ha de controlar data efcte*/
         IF issuplem
         THEN
            nerrfefec :=
               pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                      vnmovimi,
                                                      vefectsuple,
                                                      mensajes
                                                     );

            IF (nerrfefec <> 0)
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001103);
               RAISE e_object_error;
            END IF;
         END IF;

         /*ACC 1312008*/
         clau (npos).finiclau :=
                          NVL (vefectsuple, poliza.det_poliza.gestion.fefecto);
         /*ACC 1312008 si es suplement ha de controlar data efcte --/// ACC*/
         clau (npos).ffinclau := NULL;
         /*/// ACC*/
         /*clau(npos).cidentity := clau.count +1;*/
         /* Bug 18362 - APD - 02/06/2011 - si el ctipo es 2, 3 se debe guardar el cidentity*/
         /* ya que son un tipo de clausulas especiales*/
         /*IF clau(npos).ctipo IN(2, 3)
         AND clau(npos).cidentity = 0 THEN*/
         clau (npos).cidentity := max_nordcla () + 1;

         /* clau.LAST;  -- BUG9107:DRA:18-02-2009*/
         /*END IF;*/
         /* Fin Bug 18362 - APD - 02/06/2011*/
         /* Bug 18362 - APD - 06/06/2011 - se debe validar que si la clausula tiene parametros*/
         /* estos no sean nulos*/
         IF clau (npos).cparams IS NULL OR clau (npos).cparams > 0
         THEN
            IF clau (npos).cparams IS NULL
            THEN
               clau (npos).parametros :=
                  pac_mdpar_productos.f_get_clausulas (clau (npos).sclagen,
                                                       clau (npos).cparams,
                                                       mensajes
                                                      );
            END IF;

            IF clau (npos).cparams > 0
            THEN
               FOR cur_param IN
                  clau (npos).parametros.FIRST .. clau (npos).parametros.LAST
               LOOP
                  IF clau (npos).parametros (cur_param).ttexto IS NULL
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                           1,
                                                           9902015
                                                          );
                     /*Es obligatorio informar la descripcion del parametro*/
                     RAISE e_object_error;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      /* Fin Bug 18362 - APD - 06/06/2011*/
      END IF;

      poliza.det_poliza.clausulas := clau;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabaclausulasmult;

   /*************************************************************************
   Recupera las clausulas especificas indicadas por el usuario
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_leeclausulasesp (
      pnriesgo   IN       NUMBER,
      /* Bug 27539/151777 - 02/09/2013 - AMC*/
      pmodo      IN       VARCHAR2,
      /* Bug 27305/0174597- 14/05/2014 - FAC*/
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_clausulas
   IS
      clau             t_iax_clausulas;
      clab             t_iax_clausulas;
      vpasexec         NUMBER (8)      := 1;
      vparam           VARCHAR2 (1)    := NULL;
      vobject          VARCHAR2 (200)
                                    := 'PAC_IAX_PRODUCCION.F_LeeClausulasEsp';
      v_clasula        NUMBER;
      verror           NUMBER;
      v_sseguro_cero   NUMBER;
      /*BUG 27924/151061 - RCL - 21/03/2014*/
      v_nmovimi_cero   NUMBER;

      /*BUG 27924/151061 - RCL - 21/03/2014*/
      /* Inicio BUG 0027305 - MMS - 20140114*/
      CURSOR cclauesp_cert0 (pnmovimi NUMBER)
      IS
         /*BUG 27924/151061 - RCL - 21/03/2014*/
         SELECT c.*
           FROM clausuesp c, seguros s
          WHERE s.npoliza = poliza.det_poliza.npoliza
            AND s.ncertif = 0
            AND c.sseguro = s.sseguro
            AND c.cclaesp = 2
            AND c.ffinclau IS NULL
            AND c.nmovimi = pnmovimi;

      FUNCTION existclau (ptclaesp IN VARCHAR2, vtipo IN NUMBER)
         RETURN NUMBER
      IS
         vclau   NUMBER;
      BEGIN
         IF clau IS NULL
         THEN
            RETURN -1;
         END IF;

         IF clau.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         /* Buscamos la clausula. Si la encontramos devolvemos el c¿digo*/
         FOR vclau IN clau.FIRST .. clau.LAST
         LOOP
            IF clau.EXISTS (vclau)
            THEN
               IF     clau (vclau).tclaesp = ptclaesp
                  AND clau (vclau).ctipo = vtipo
               THEN
                  RETURN vclau;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existclau;
   /* Fin BUG 0027305 - MMS - 20140114*/
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      /* Recuperamos los que haya en clau*/
      clau :=
         pac_iobj_prod.f_partpolclausulas (poliza.det_poliza, mensajes,
                                           vpmode);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 3;

      IF NVL (pmodo, 'EDICION') <> 'CONSULTA'
      THEN
         /* Bug 27305/0174597- 14/05/2014 - FAC*/
         /* Inicio BUG 27305 MMS 20140116*/
         IF NVL
               (pac_iaxpar_productos.f_get_parproducto ('ADMITE_CERTIFICADOS',
                                                        vproducto
                                                       ),
                0
               ) = 1
         THEN
            verror :=
                   pac_productos.f_get_herencia_col (vproducto, 4, v_clasula);

            IF NVL (v_clasula, 0) IN (2, 3)
                                           /* Bug27305 MMS 20140123*/
               AND verror = 0
            THEN
               vpasexec := 31;

               /* Inicio BUG 0027305 - MMS - 20140114*/
               /* Si es el padre no lo tiene en cuenta*/
               IF     (NVL
                          (pac_seguros.f_get_escertifcero
                                                    (poliza.det_poliza.npoliza),
                           0
                          ) = 1
                      )
                  AND (NVL
                          (pac_seguros.f_get_escertifcero
                                                    (NULL,
                                                     poliza.det_poliza.ssegpol
                                                    ),
                           0
                          ) = 0
                      )
               THEN
                  /*BUG 27924/151061 - RCL - 21/03/2014*/
                  SELECT sseguro
                    INTO v_sseguro_cero
                    FROM seguros
                   WHERE npoliza = poliza.det_poliza.npoliza AND ncertif = 0;

                  v_nmovimi_cero :=
                     pac_seguros.f_get_movimi_cero_fecha
                                            (v_sseguro_cero,
                                             poliza.det_poliza.gestion.fefecto
                                            );

                  FOR claucert0 IN cclauesp_cert0 (v_nmovimi_cero)
                  LOOP
                     IF existclau (claucert0.tclaesp, 1) = -1
                     THEN
                        verror :=
                           f_grabaclausulasesp (NULL,
                                                claucert0.tclaesp,
                                                mensajes
                                               );
                     END IF;
                  END LOOP;
               END IF;
            /* Fin BUG 0027305*/
            ELSE
               NULL;
            /*vagente := pcagente;*/
            END IF;
         /* Fin BUG 0027305*/
         ELSE
            NULL;
         /*vagente := pcagente;*/
         END IF;

         vpasexec := 32;
         /* Recuperamos los que haya en clau*/
         clau :=
            pac_iobj_prod.f_partpolclausulas (poliza.det_poliza,
                                              mensajes,
                                              vpmode
                                             );

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 33;
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      vpasexec := 4;

      /* Fin BUG 27305 MMS 20140116*/
      IF clau IS NULL
      THEN
         RETURN NULL;
      ELSE
         IF clau.COUNT = 0
         THEN
            RETURN NULL;
         END IF;
      END IF;

      vpasexec := 5;

      FOR vclau IN clau.FIRST .. clau.LAST
      LOOP
         vpasexec := 6;

         IF clau.EXISTS (vclau)
         THEN
            vpasexec := 7;

            IF    (clau (vclau).ctipo IN (1, 2, 3)
                                                  /* BUG9718:DRA:23/04/2009*/
                   AND vpmode = 'POL')
               /* BUG 18362 - APD - 01/06/2011 - se a¿aden las clausulas automaticas*/
               /* ctipo = 2.- especial pregunta, 3.- especial garantia*/
               OR (clau (vclau).ctipo IN (1, 2, 3)
                                                  /* Fin BUG 18362 - APD - 01/06/2011*/
                   AND vpmode = 'EST')
            THEN
               vpasexec := 8;

               IF clab IS NULL
               THEN
                  clab := t_iax_clausulas ();
               END IF;

               /* Bug 27539/151777 - 02/09/2013 - AMC*/
               IF pnriesgo IS NOT NULL
               THEN
                  IF clau (vclau).nriesgo = pnriesgo
                  THEN
                     clab.EXTEND;
                     clab (clab.LAST) := clau (vclau);
                  END IF;
               ELSE
                  IF clau (vclau).nriesgo = 0
                  THEN
                     clab.EXTEND;
                     clab (clab.LAST) := clau (vclau);
                  END IF;
               END IF;
            /* Fi Bug 27539/151777 - 02/09/2013 - AMC*/
            END IF;
         END IF;
      END LOOP;

      RETURN clab;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leeclausulasesp;

   /*************************************************************************
   Graba las clausulas especificas indicadas por el usuario
   param in  tclauesp : texto de la clausula especial
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   bug 24657/131225 - 04/12/2012 -AMC
   *************************************************************************/
   FUNCTION f_grabaclausulasesp (
      pcidentity   IN       NUMBER,
      /* bug 24657/131225 - 04/12/2012 -AMC*/
      tclauesp     IN       VARCHAR2,
      mensajes     OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      clau          t_iax_clausulas;
      npos          NUMBER;
      vpasexec      NUMBER (8)      := 1;
      vparam        VARCHAR2 (1)    := NULL;
      vobject       VARCHAR2 (200)
                                  := 'PAC_IAX_PRODUCCION.F_GrabaClausulasEsp';
      /*ACC 1312008*/
      vefectsuple   DATE            := NULL;
      nerrfefec     NUMBER;
      verror        NUMBER;
      vnordcla      NUMBER;
      v_clasula     NUMBER;

      /*ACC 1312008*/
      /* comproba que el codigo de clausula no exista*/
      /* devuelve la posicion del indice o bien -1 sino existe*/
      FUNCTION existclau (cidentity IN NUMBER)
         RETURN NUMBER
      IS
      BEGIN
         IF clau IS NULL
         THEN
            RETURN -1;
         END IF;

         IF clau.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vclau IN clau.FIRST .. clau.LAST
         LOOP
            IF clau.EXISTS (vclau)
            THEN
               IF clau (vclau).cidentity = cidentity
               THEN
                  RETURN vclau;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existclau;

      /* BUG9107:DRA:18-02-2009: Buscamos el NORDCLA mayor*/
      FUNCTION max_nordcla
         RETURN NUMBER
      IS
         v_max   NUMBER := 0;
      BEGIN
         IF clau IS NULL
         THEN
            RETURN 0;
         END IF;

         IF clau.COUNT = 0
         THEN
            RETURN 0;
         END IF;

         FOR vclau IN clau.FIRST .. clau.LAST
         LOOP
            IF clau.EXISTS (vclau)
            THEN
               IF clau (vclau).cidentity > v_max
               THEN
                  v_max := clau (vclau).cidentity;
               END IF;
            END IF;
         END LOOP;

         RETURN v_max;
      END max_nordcla;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      clau :=
         pac_iobj_prod.f_partpolclausulas (poliza.det_poliza, mensajes,
                                           vpmode);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      IF clau IS NULL
      THEN
         clau := t_iax_clausulas ();
      END IF;

      vpasexec := 4;

      /*ACC 1312008 si es suplement ha de controlar data efcte*/
      IF issuplem
      THEN
         nerrfefec :=
            pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                   vnmovimi,
                                                   vefectsuple,
                                                   mensajes
                                                  );

         IF (nerrfefec <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001103);
            RAISE e_object_error;
         END IF;
      END IF;

      npos := existclau (pcidentity);

      IF npos = -1
      THEN
         clau.EXTEND;
         npos := clau.LAST;
         clau (npos) := ob_iax_clausulas ();
      END IF;

      /*ACC 1312008*/
      /*clau.EXTEND;*/
      /*clau(clau.LAST) := ob_iax_clausulas();*/
      clau (npos).ctipo := 1;
      clau (npos).sclagen := NULL;
      /* BUG9718:DRA:23/04/2009*/
      clau (npos).tclaesp := tclauesp;

      IF pcidentity IS NULL
      THEN
         clau (npos).cidentity := max_nordcla () + 1;
      ELSE
         clau (npos).cidentity := pcidentity;
      END IF;

      /* clau.LAST;  -- BUG9107:DRA:18-02-2009*/
      clau (npos).finiclau :=
                          NVL (vefectsuple, poliza.det_poliza.gestion.fefecto);
      /*ACC 1312008 si es suplement ha de controlar data efcte--/// ACC*/
      clau (npos).ffinclau := NULL;
      /*/// ACC*/
      poliza.det_poliza.clausulas := clau;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabaclausulasesp;

   /*************************************************************************
   Elimina la clausula especifica indicada por el usuario
   param in  cidentity  : indentificativo clausula especial
   param out mensajes   : mensajes de error
   return               : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_eliminaclausulaesp (
      cidentity   IN       NUMBER,
      mensajes    OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      clau       t_iax_clausulas;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_EliminaClausulaEsp';
      verror     NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      clau :=
         pac_iobj_prod.f_partpolclausulas (poliza.det_poliza, mensajes,
                                           vpmode);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF clau IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001104);
         vpasexec := 5;
         RAISE e_object_error;
      ELSE
         IF clau.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001104);
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 7;

      FOR vclau IN clau.FIRST .. clau.LAST
      LOOP
         vpasexec := 8;

         IF clau.EXISTS (vclau)
         THEN
            vpasexec := 9;

            IF clau (vclau).ctipo = 1
            THEN
               vpasexec := 10;

               IF clau (vclau).cidentity = cidentity
               THEN
                  vpasexec := 11;
                  verror :=
                     pac_md_validaciones.f_valida_esclausulacertif0
                                                  (poliza.det_poliza.sseguro,
                                                   vpmode,
                                                   clau (vclau).cidentity,
                                                   clau (vclau).tclaesp,
                                                   mensajes
                                                  );

                  IF verror <> 0
                  THEN
                     RAISE e_object_error;
                  END IF;

                  vpasexec := 12;
                  clau.DELETE (vclau);
                  EXIT;
               END IF;
            END IF;
         END IF;
      END LOOP;

      poliza.det_poliza.clausulas := clau;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_eliminaclausulaesp;

   /*************************************************************************
   Recupera los motivos los que la poliza ha quedado retenida
   param out mensajes : mensajes de error
   return             : objeto motivos retencion
   *************************************************************************/
   FUNCTION f_get_mvtretencion (mensajes OUT t_iax_mensajes)
      RETURN t_iax_polmvtreten
   IS
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_EliminaClausulaEsp';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      RETURN f_get_motretenmov (vsolicit, NULL, mensajes);
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_mvtretencion;

   /*************************************************************************
   Recupera la documentacion necesaria para poder cumplimentar la poliza
   param out mensajes : mensajes de error
   return             : ref cursor
   *************************************************************************/
   FUNCTION f_get_documentacion (mensajes OUT t_iax_mensajes)
      RETURN sys_refcursor
   IS
      cur        sys_refcursor;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_Documentacion';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /* falta recuperar la documentacio*/
      /*    cur
      :=    PAC_IAX_LISTVALORES.F_OPENCURSOR('',mensajes);*/
      RETURN cur;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
   END f_get_documentacion;

   /*************************************************************************
   Recupera la primas por garantia
   param in  nriesgo  : numero riesgo
   param in  cgarant  : codigo de garantia
   param out mensajes : mensajes de error
   return             : ref cursor
   *************************************************************************/
   FUNCTION f_get_detailprimasgarant (
      nriesgo    IN       NUMBER,
      cgarant    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN ob_iax_primas
   IS
      rie        ob_iax_riesgos;
      gar        ob_iax_garantias;
      pri        ob_iax_primas;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)
                             := 'PAC_IAX_PRODUCCION.F_Get_DetailPrimasGarant';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001105);
         vpasexec := 5;
         RAISE e_object_error;
      END IF;

      vpasexec := 6;
      gar := pac_iobj_prod.f_partriesgarantia (rie, cgarant, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 7;
            RAISE e_object_error;
         END IF;
      END IF;

      IF gar IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001106);
         vpasexec := 8;
         RAISE e_object_error;
      END IF;

      vpasexec := 9;
      pri := gar.f_get_primas (vsolicit, vnmovimi, vpmode, nriesgo);
      vpasexec := 10;
      vpasexec :=
         pac_iobj_prod.f_set_partriesgarantia (poliza.det_poliza,
                                               nriesgo,
                                               gar,
                                               mensajes
                                              );

      IF pri IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001107);
         vpasexec := 6;
         RAISE e_object_error;
      END IF;

      RETURN pri;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_detailprimasgarant;

   /*************************************************************************
   Graba la informacion de la poliza como una propuesta dejandola retenida
   con el tipo 1 de retecion de la tabla de valores 708
   param out onpoliza  : poliza retenida
   param out osseguro  : sseguro de la poliza
   param out mensajes  : mensajes de error
   return              : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabarpropuesta (
      onpoliza   OUT      NUMBER,
      osseguro   OUT      NUMBER,
      mensajes   OUT      t_iax_mensajes,
      p_grabar   IN       NUMBER DEFAULT NULL
   )                                                                --CONF-172
      RETURN NUMBER
   IS
      vpasexec         NUMBER (8)             := 1;
      vparam           VARCHAR2 (500)
         := 'parametros - vsolicit: ' || vsolicit || ' - vnmovimi: '
            || vnmovimi;
      vobject          VARCHAR2 (200)
                                    := 'PAC_IAX_PRODUCCION.F_GrabarPropuesta';
      vnerror          NUMBER (8)             := 0;
      v_sproduc        NUMBER (6);
      /* BUG5673:DRA:12-02-2009*/
      v_nsolici        NUMBER (8);
      /* BUG5673:DRA:12-02-2009*/
      v_npoliza        NUMBER;
      /* BUG5673:DRA:12-02-2009, -- Bug 28462 - 08/10/2013 - HRE - Cambio de dimension NPOLIZA*/
      v_csituac        NUMBER (2);
      /* BUG5673:DRA:12-02-2009*/
      /* Bug 18351 - RSC - 21/09/2011 - LCOL003 - Documentacion requerida en contratacion y suplementos*/
      v_haypendiente   NUMBER;
      v_produce_req    NUMBER;
      v_retener        NUMBER                 := 0;
      vparampsu        NUMBER;
      /* Fin Bug 18351*/
      v_ncertif        seguros.ncertif%TYPE;
      /* BUG 24697 - JLTS - 09/07/2013 Se modifica NUMBER(6);*/
      v_numpol         VARCHAR2 (20);
      p_to             VARCHAR2 (500);
      p_to2            VARCHAR2 (500);
      p_from           VARCHAR2 (500);
      psubject         VARCHAR2 (500);
      ptexto           VARCHAR2 (500);
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vparampsu :=
             pac_parametros.f_parproducto_n (poliza.det_poliza.sproduc, 'PSU');

      IF NVL (vparampsu, 0) = 0                                    -- CONF-172
         AND p_grabar IS NULL                                      -- CONF-172
      THEN
         /* Bug 18351 - RSC - 21/09/2011 - LCOL003 - Documentacion requerida en contratacion y suplementos*/
         v_haypendiente :=
            pac_md_docrequerida.f_aviso_docreq_pendiente
                                          (poliza.det_poliza.sseguro,
                                           poliza.det_poliza.nmovimi,
                                           poliza.det_poliza.sproduc,
                                           poliza.det_poliza.gestion.cactivi,
                                           mensajes
                                          );
         v_produce_req :=
            NVL
               (pac_parametros.f_parempresa_n (pac_md_common.f_get_cxtempresa,
                                               'PRODUCE_REQUERIDA'
                                              ),
                0
               );

         IF     v_haypendiente <> 0
            AND v_produce_req <> 0                                 -- CONF-172
            AND p_grabar IS NULL                                   -- CONF-172
         THEN
            v_retener := 1;
         END IF;
      END IF;

      IF v_retener = 1
      THEN
         vpasexec := 2;
         poliza.det_poliza.creteni := 1;
         vnerror :=
            pac_md_docrequerida.f_retencion
                                          (vsolicit,
                                           poliza.det_poliza.nmovimi,
                                           poliza.det_poliza.gestion.fefecto,
                                           mensajes,
                                           20
                                          );

         IF vnerror > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;

         vpasexec := 4;
         vnerror := f_retenerpropuesta (onpoliza, osseguro, mensajes);

         IF vnerror > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      ELSE
         /* Fin bug 18351*/
         vpasexec := 2;
         /* S'ha de baixar tota la informacio a la base de dades (Guardem a les EST).*/
         vnerror := f_grabarobjetodb (mensajes);

         IF vnerror <> 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000773);
            vpasexec := 3;
            RAISE e_object_error;
         END IF;

         vpasexec := 4;
         /*Traspas de la proposta d'alta o suplement a les taules reals, deixant la polissa retinguda manulament.*/
         vnerror :=
            pac_md_produccion.f_traspasarpropuesta (vsolicit,
                                                    vnmovimi,
                                                    mensajes
                                                   );

         IF vnerror <> 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      BEGIN
         SELECT npoliza, sseguro, sproduc, csituac
           INTO onpoliza, osseguro, v_sproduc, v_csituac
           FROM seguros
          WHERE sseguro = poliza.det_poliza.ssegpol;
      EXCEPTION
         WHEN OTHERS
         THEN
            onpoliza := NULL;
            osseguro := NULL;
      END;

      vpasexec := 7;
      COMMIT;
      /* BUG5673:DRA:12-02-2009*/
      vnerror :=
         pac_seguros.f_get_nsolici_npoliza (osseguro,
                                            NULL,
                                            v_sproduc,
                                            v_csituac,
                                            v_nsolici,
                                            v_npoliza,
                                            v_ncertif
                                           );

      IF vnerror <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, vnerror);
         RAISE e_object_error;
      END IF;

      vpasexec := 8;

      IF mensajes IS NULL
      THEN
         IF NVL
               (pac_parametros.f_parempresa_n
                                           (pac_md_common.f_get_cxtempresa (),
                                            'MAIL_CAMBIOS_ESTADO'
                                           ),
                0
               ) = 1
         THEN
            IF NVL (pac_parametros.f_parproducto_n (v_sproduc,
                                                    'MAIL_SITUACION_POL'
                                                   ),
                    0
                   ) = 1
            THEN
               IF v_csituac = 4 AND poliza.det_poliza.creteni = 0
               THEN
                  vnerror :=
                     pac_correo.f_destinatario (pscorreo      => 316,
                                                psseguro      => osseguro,
                                                p_to          => p_to,
                                                p_to2         => p_to2,
                                                pcmotmov      => NULL
                                               );
                  vnerror :=
                     pac_correo.f_origen (pscorreo      => 316,
                                          p_from        => p_from,
                                          paviso        => NULL
                                         );
                  vnerror :=
                     pac_correo.f_asunto (pscorreo      => 316,
                                          pcidioma      => 8,
                                          psubject      => psubject,
                                          psseguro      => osseguro,
                                          pcmotmov      => NULL,
                                          ptasunto      => NULL
                                         );
                  vnerror :=
                     pac_correo.f_cuerpo (pscorreo      => 316,
                                          pcidioma      => 8,
                                          ptexto        => ptexto,
                                          psseguro      => osseguro,
                                          pnriesgo      => 1,
                                          pnsinies      => NULL,
                                          pcmotmov      => NULL,
                                          ptcuerpo      => NULL,
                                          pcramo        => 801
                                         );
                  vnerror :=
                     pac_md_informes.f_enviar_mail (piddoc            => NULL,
                                                    pmailgrc          => p_to,
                                                    prutafichero      => NULL,
                                                    pfichero          => NULL,
                                                    psubject          => psubject,
                                                    pcuerpo           => ptexto,
                                                    pmailcc           => NULL,
                                                    pmailcco          => NULL,
                                                    pdirectorio       => NULL,
                                                    pfrom             => p_from,
                                                    pdirectorio2      => NULL,
                                                    pfichero2         => NULL
                                                   );
               END IF;
            END IF;
         END IF;

         /* BUG16799 JBN 31-12-20010 SI ESTADO  <> NOTA INFORMATIVA*/
         IF v_csituac <> 14
         THEN
            /* BUG5673:DRA:12-02-2009*/
            IF v_npoliza IS NOT NULL
            THEN
               /* BUG22839:DRA:26/09/2012:Inici*/
               IF NVL (pac_parametros.f_parproducto_n (v_sproduc,
                                                       'ADMITE_CERTIFICADOS'
                                                      ),
                       0
                      ) = 1
               THEN
                  v_numpol := v_npoliza || ' - ' || v_ncertif;
               ELSE
                  v_numpol := v_npoliza;
               END IF;

               /* BUG22839:DRA:26/09/2012:Fi*/
               pac_iobj_mensajes.crea_nuevo_mensaje_var
                          (mensajes,
                           2,
                           1000010,
                           pac_iobj_mensajes.crea_variables_mensaje (v_numpol,
                                                                     1
                                                                    )
                          );
            ELSE
               pac_iobj_mensajes.crea_nuevo_mensaje_var
                        (mensajes,
                         2,
                         9000856,
                         pac_iobj_mensajes.crea_variables_mensaje (v_nsolici,
                                                                   1
                                                                  )
                        );
            END IF;
         ELSE
            IF v_npoliza IS NOT NULL
            THEN
               /* BUG22839:DRA:26/09/2012:Inici*/
               IF NVL (pac_parametros.f_parproducto_n (v_sproduc,
                                                       'ADMITE_CERTIFICADOS'
                                                      ),
                       0
                      ) = 1
               THEN
                  v_numpol := v_npoliza || ' - ' || v_ncertif;
               ELSE
                  v_numpol := v_npoliza;
               END IF;

               /* BUG22839:DRA:26/09/2012:Fi*/
               pac_iobj_mensajes.crea_nuevo_mensaje_var
                          (mensajes,
                           2,
                           9901774,
                           pac_iobj_mensajes.crea_variables_mensaje (v_numpol,
                                                                     1
                                                                    )
                          );
            ELSE
               pac_iobj_mensajes.crea_nuevo_mensaje_var
                        (mensajes,
                         2,
                         9901774,
                         pac_iobj_mensajes.crea_variables_mensaje (v_nsolici,
                                                                   1
                                                                  )
                        );
            END IF;
         END IF;

         /* Bug 20694 - RSC - 17/04/2012 - GIP701-ID11- PUNTO B: GESTION DE PEDIDOS DE COTIZACION DE LOS AGENTES*/
         v_produce_req :=
            NVL
               (pac_parametros.f_parempresa_n (pac_md_common.f_get_cxtempresa,
                                               'PRODUCE_REQUERIDA'
                                              ),
                0
               );

         IF v_produce_req <> 0
         THEN
            /* Bug 27532_0148367 - JLTS - 09/07/2013 - Se elimina la condici¿n IF v_csituac = 12 THEN   -- Proyectos Genericos (GIP)*/
            vnerror :=
               pac_md_docrequerida.f_subir_docsgedox (osseguro,
                                                      vnmovimi,
                                                      mensajes
                                                     );

            IF vnerror > 0
            THEN
               vpasexec := 14;
               RAISE e_object_error;
            END IF;
         END IF;
      /* Fin Bug 20694*/
      END IF;

      vpasexec := 9;
      issave := TRUE;
      RETURN vnerror;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabarpropuesta;

   /*************************************************************************
   Graba la informacion de la poliza como una propuesta dejandola retenida
   con el tipo 1 de retecion de la tabla de valores 708
   param out onpoliza  : poliza retenida
   param out osseguro  : sseguro de la poliza
   param out mensajes  : mensajes de error
   return              : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabarpropuesta_inspeccion (
      onpoliza   OUT      NUMBER,
      osseguro   OUT      NUMBER,
      mensajes   IN OUT   t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec         NUMBER (8)             := 1;
      vparam           VARCHAR2 (500)
         := 'parametros - vsolicit: ' || vsolicit || ' - vnmovimi: '
            || vnmovimi;
      vobject          VARCHAR2 (200)
                                    := 'PAC_IAX_PRODUCCION.F_GrabarPropuesta';
      vnerror          NUMBER (8)             := 0;
      v_sproduc        NUMBER (6);
      /* BUG5673:DRA:12-02-2009*/
      v_nsolici        NUMBER (8);
      /* BUG5673:DRA:12-02-2009*/
      v_npoliza        NUMBER;
      /* BUG5673:DRA:12-02-2009, -- Bug 28462 - 08/10/2013 - HRE - Cambio de dimension NPOLIZA*/
      v_csituac        NUMBER (2);
      /* BUG5673:DRA:12-02-2009*/
      /* Bug 18351 - RSC - 21/09/2011 - LCOL003 - Documentacion requerida en contratacion y suplementos*/
      v_haypendiente   NUMBER;
      v_produce_req    NUMBER;
      v_retener        NUMBER                 := 0;
      vparampsu        NUMBER;
      /* Fin Bug 18351*/
      v_ncertif        seguros.ncertif%TYPE;
      /* BUG 24697 - JLTS - 09/07/2013 Se modifica NUMBER(6);*/
      v_numpol         VARCHAR2 (20);
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /* Fin bug 18351*/
      vpasexec := 2;

      /* S'ha de baixar tota la informacio a la base de dades (Guardem a les EST).*/
      /* vnerror := f_grabarobjetodb(mensajes);*/
      IF vnerror <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000773);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      /*Traspas de la proposta d'alta o suplement a les taules reals, deixant la polissa retinguda manulament.*/
      vnerror :=
         pac_md_produccion.f_traspasarpropuesta (vsolicit, vnmovimi, mensajes);

      IF vnerror <> 0
      THEN
         vpasexec := 5;
         RAISE e_object_error;
      END IF;

      vpasexec := 6;

      BEGIN
         SELECT npoliza, sseguro, sproduc, csituac
           INTO onpoliza, osseguro, v_sproduc, v_csituac
           FROM seguros
          WHERE sseguro = poliza.det_poliza.ssegpol;
      EXCEPTION
         WHEN OTHERS
         THEN
            onpoliza := NULL;
            osseguro := NULL;
      END;

      vpasexec := 7;
      COMMIT;
      /* BUG5673:DRA:12-02-2009*/
      vnerror :=
         pac_seguros.f_get_nsolici_npoliza (osseguro,
                                            NULL,
                                            v_sproduc,
                                            v_csituac,
                                            v_nsolici,
                                            v_npoliza,
                                            v_ncertif
                                           );

      IF vnerror <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, vnerror);
         RAISE e_object_error;
      END IF;

      vpasexec := 8;

      IF mensajes IS NULL
      THEN
         /* BUG16799 JBN 31-12-20010 SI ESTADO  <> NOTA INFORMATIVA*/
         IF v_csituac <> 14
         THEN
            /* BUG5673:DRA:12-02-2009*/
            IF v_npoliza IS NOT NULL
            THEN
               /* BUG22839:DRA:26/09/2012:Inici*/
               IF NVL (pac_parametros.f_parproducto_n (v_sproduc,
                                                       'ADMITE_CERTIFICADOS'
                                                      ),
                       0
                      ) = 1
               THEN
                  v_numpol := v_npoliza || ' - ' || v_ncertif;
               ELSE
                  v_numpol := v_npoliza;
               END IF;

               /* BUG22839:DRA:26/09/2012:Fi*/
               pac_iobj_mensajes.crea_nuevo_mensaje_var
                          (mensajes,
                           1,
                           1000010,
                           pac_iobj_mensajes.crea_variables_mensaje (v_numpol,
                                                                     1
                                                                    )
                          );
            ELSE
               pac_iobj_mensajes.crea_nuevo_mensaje_var
                        (mensajes,
                         1,
                         9000856,
                         pac_iobj_mensajes.crea_variables_mensaje (v_nsolici,
                                                                   1
                                                                  )
                        );
            END IF;
         ELSE
            IF v_npoliza IS NOT NULL
            THEN
               /* BUG22839:DRA:26/09/2012:Inici*/
               IF NVL (pac_parametros.f_parproducto_n (v_sproduc,
                                                       'ADMITE_CERTIFICADOS'
                                                      ),
                       0
                      ) = 1
               THEN
                  v_numpol := v_npoliza || ' - ' || v_ncertif;
               ELSE
                  v_numpol := v_npoliza;
               END IF;

               /* BUG22839:DRA:26/09/2012:Fi*/
               pac_iobj_mensajes.crea_nuevo_mensaje_var
                          (mensajes,
                           1,
                           9901774,
                           pac_iobj_mensajes.crea_variables_mensaje (v_numpol,
                                                                     1
                                                                    )
                          );
            ELSE
               pac_iobj_mensajes.crea_nuevo_mensaje_var
                        (mensajes,
                         1,
                         9901774,
                         pac_iobj_mensajes.crea_variables_mensaje (v_nsolici,
                                                                   1
                                                                  )
                        );
            END IF;
         END IF;

         /* Bug 20694 - RSC - 17/04/2012 - GIP701-ID11- PUNTO B: GESTION DE PEDIDOS DE COTIZACION DE LOS AGENTES*/
         v_produce_req :=
            NVL
               (pac_parametros.f_parempresa_n (pac_md_common.f_get_cxtempresa,
                                               'PRODUCE_REQUERIDA'
                                              ),
                0
               );

         IF v_produce_req <> 0
         THEN
            IF v_csituac = 12
            THEN
               /* Proyectos Genericos (GIP)*/
               vnerror :=
                  pac_md_docrequerida.f_subir_docsgedox (osseguro,
                                                         vnmovimi,
                                                         mensajes
                                                        );

               IF vnerror > 0
               THEN
                  vpasexec := 14;
                  RAISE e_object_error;
               END IF;
            END IF;
         END IF;
      /* Fin Bug 20694*/
      END IF;

      vpasexec := 9;
      issave := TRUE;
      RETURN vnerror;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabarpropuesta_inspeccion;

   /*************************************************************************
   Se retiene una poliza por motivos de retencion pendientes de autorizacion
   param out onpoliza  : poliza retenida
   param out osseguro  : sseguro de la poliza
   param out mensajes  : mensajes de error
   return              : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_retenerpropuesta (
      onpoliza   OUT   NUMBER,
      osseguro   OUT   NUMBER,
      mensajes   OUT   t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec               NUMBER (8)                  := 1;
      vparam                 VARCHAR2 (500)
         := 'parametros - vsolicit: ' || vsolicit || ' - vnmovimi: '
            || vnmovimi;
      vobject                VARCHAR2 (200)
                                   := 'PAC_IAX_PRODUCCION.F_RetenerPropuesta';
      vnumerr                NUMBER (8);
      vterror                VARCHAR2 (500);
      vtmsg                  VARCHAR2 (500);
      vseguro                NUMBER;
      v_sproduc              NUMBER (6);
      /* BUG5673:DRA:12-02-2009*/
      v_nsolici              NUMBER (8);
      /* BUG5673:DRA:12-02-2009*/
      v_npoliza              NUMBER;
      /* BUG5673:DRA:12-02-2009, -- Bug 28462 - 08/10/2013 - HRE - Cambio de dimension NPOLIZA*/
      v_csituac              NUMBER (2);
      /* BUG5673:DRA:12-02-2009*/
      v_aut                  NUMBER;
      v_total                NUMBER;
      vparampsu              NUMBER;
      v_ncertif              seguros.ncertif%TYPE;
      /* BUG 24697 - JLTS - 09/07/2013 Se modifica NUMBER(6);*/
      vsorden                NUMBER;
      vcreteni               NUMBER;
      mensajesv              t_iax_mensajes;
      /**/
      apuntereturn           NUMBER;
      vidapunte_out          NUMBER;
      vcidioma               NUMBER          := pac_md_common.f_get_cxtidioma;
      error_envio_correo     EXCEPTION;
      error_generar_apunte   EXCEPTION;
      vcusuari               VARCHAR2 (50)               := f_user;
      vcgrupo                VARCHAR2 (50)               := '0';
      vtgrupo                VARCHAR2 (50);
      vcclagd                NUMBER                      := 1;
      vcperagd               NUMBER                      := 0;
      vmailreturn            NUMBER                      := 0;
      vscorreo               NUMBER;
      vtevento               VARCHAR (200);
      vasunto                VARCHAR2 (1000);
      vmail                  VARCHAR (1000);
      vfrom                  VARCHAR (200);
      vto                    VARCHAR (200);
      vto2                   VARCHAR (200);
      verror                 VARCHAR (100);
      vcuerpo                VARCHAR2 (1000);
      vnnumide               VARCHAR (200);
      vnombre                VARCHAR (500);
      vtable                 VARCHAR2 (4000)             := '';

      TYPE data_t IS TABLE OF NUMBER
         INDEX BY PLS_INTEGER;

      TYPE array_t IS TABLE OF data_t
         INDEX BY PLS_INTEGER;

      v_2d_grid              array_t;
      vtom1                  NUMBER;
      vcprofes1              NUMBER;
      vcretiene1             NUMBER                      := 0;
      vtom2                  NUMBER;
      vcprofes2              NUMBER;
      vcretiene2             NUMBER                      := 0;
      vnnumide1              per_personas.nnumide%TYPE;
      vnombre1               VARCHAR2 (400);
      vnnumide2              per_personas.nnumide%TYPE;
      vnombre2               VARCHAR2 (400);
      vase1                  NUMBER;
      vase2                  NUMBER;
      v_crespue_1988         NUMBER;
      v_crespue_1995         NUMBER;
      v_res                  NUMBER;
      p_to                   VARCHAR2 (500);
      p_to2                  VARCHAR2 (500);
      p_from                 VARCHAR2 (500);
      psubject               VARCHAR2 (500);
      ptexto                 VARCHAR2 (500);
   BEGIN
      IF vsolicit IS NULL OR vnmovimi IS NULL OR poliza.det_poliza IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 3;
      /* S'ha de baixar tota la informacio a la base de dades (Guardem a les EST).*/
      vnumerr := f_grabarobjetodb (mensajes);

      IF vnumerr <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000773);
         RAISE e_object_error;
      END IF;

      IF NVL
            (pac_mdpar_productos.f_get_parproducto ('GESTION_IR',
                                                    poliza.det_poliza.sproduc
                                                   ),
             0
            ) = 1
      THEN
         vnumerr :=
            pac_md_inspeccion.f_gest_retener_porinspeccion
                                                  ('EST',
                                                   poliza.det_poliza.sseguro,
                                                   poliza.det_poliza.nmovimi,
                                                   1,
                                                   NULL,
                                                   NULL,
                                                   vsorden,
                                                   vcreteni,
                                                   mensajes
                                                  );

         IF vnumerr <> 0
         THEN
            /*    pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 9000773);*/
            /*  RAISE e_object_error;*/
            ROLLBACK;
            vnumerr :=
               pac_iax_produccion.f_grabarpropuesta_inspeccion (onpoliza,
                                                                osseguro,
                                                                mensajesv
                                                               );
            pac_iobj_mensajes.p_mergemensaje (mensajes, mensajesv);
            /*si ha donat error la petici¿ d'inspecci¿ grabem la proposta i la deixem com a guardada.*/
            RETURN vnumerr;
         END IF;
      END IF;

      vpasexec := 5;
      /*Traspas de la proposta d'alta o suplement a les taules reals, deixant la polissa retinguda pendent d'autoritzacio.*/
      vnumerr :=
           pac_md_produccion.f_retenerpropuesta (vsolicit, vnmovimi, mensajes);

      IF vnumerr <> 0
      THEN
         RAISE e_object_error;
      END IF;

      vpasexec := 7;

      BEGIN
         SELECT npoliza, sseguro, sproduc, csituac
           INTO onpoliza, osseguro, v_sproduc, v_csituac
           FROM seguros
          WHERE sseguro = poliza.det_poliza.ssegpol;
      EXCEPTION
         WHEN OTHERS
         THEN
            onpoliza := NULL;
            osseguro := NULL;
      END;

      vpasexec := 8;
      /* BUG5673:DRA:12-02-2009*/
      vnumerr :=
         pac_seguros.f_get_nsolici_npoliza (osseguro,
                                            NULL,
                                            v_sproduc,
                                            v_csituac,
                                            v_nsolici,
                                            v_npoliza,
                                            v_ncertif
                                           );

      IF vnumerr <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, vnumerr);
         RAISE e_object_error;
      END IF;

      vpasexec := 9;

      /*bug 25221#c145564 JDS 04/06/2013*/
      IF v_npoliza IS NOT NULL
      THEN
         vtmsg :=
               pac_iobj_mensajes.f_get_descmensaje
                                               (101445,
                                                pac_md_common.f_get_cxtidioma
                                               )
            || '. '
            || pac_iobj_mensajes.f_get_descmensaje
                                                (800242,
                                                 pac_md_common.f_get_cxtidioma
                                                )
            || ': '
            || v_npoliza;
      ELSE
         vtmsg :=
               pac_iobj_mensajes.f_get_descmensaje
                                               (101445,
                                                pac_md_common.f_get_cxtidioma
                                               )
            || '. '
            || pac_iobj_mensajes.f_get_descmensaje
                                                (9000875,
                                                 pac_md_common.f_get_cxtidioma
                                                )
            || ': '
            || v_nsolici;
      END IF;

      IF NVL
            (pac_mdpar_productos.f_get_parproducto ('GESTION_IR',
                                                    poliza.det_poliza.sproduc
                                                   ),
             0
            ) = 1
      THEN
         vtmsg :=
               vtmsg
            || ', '
            || ff_desvalorfijo (66, pac_md_common.f_get_cxtidioma (),
                                vcreteni);
      END IF;

      pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 2, 0, vtmsg);

      /*Bug10550 - 17/09/2009 - DCT - Incorporar el BPM al flujo de trabajo del producto i-axis*/
      IF vnumerr = 0
      THEN
         vnumerr :=
            pac_md_bpm.f_lanzar_proceso (osseguro,
                                         vnmovimi,
                                         NULL,
                                         '*',
                                         'RETENIDA',
                                         mensajes
                                        );
      END IF;

      IF vnumerr <> 0
      THEN
         /*pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, vnumerr);*/
         /*RAISE e_object_error;*/
         NULL;
      /* continuo*/
      END IF;

      /**/
      /* Inicio BUG 36596/212742 YDA*/
      /**/

      /**TCS-jpaezr-SQL-54**/
      FOR reg_psu IN (SELECT /*+ USE_NL(C,S,P) */ d.ccontrol, 
                        d.tcontrol, 
                        p.psuage, 
                        p.tevento, 
                        s.cagente 
                  FROM psu_descontrol d, 
                        psu_controlpro p, 
                        seguros s, 
                        psucontrolseg c 
                  WHERE c.sseguro = osseguro 
                     AND c.nmovimi = vnmovimi 
                     AND c.nocurre = (SELECT MAX(b.nocurre) 
                                       FROM psucontrolseg b 
                                       WHERE b.sseguro = c.sseguro 
                                       AND b.nmovimi = c.nmovimi) 
                     AND (c.cautrec = 0 
                           OR c.cautrec = 1 
                        AND c.autmanual = 'M') 
                     AND c.ccontrol = d.ccontrol + 0 
                     AND d.cidioma = vcidioma 
                     AND c.isvisible = 1 
                     AND c.sseguro = s.sseguro + 0 
                     AND s.sproduc = p.sproduc + 0 
                     AND c.ccontrol = p.ccontrol + 0 
                     AND c.cnivelr + 0 <> 0)
      LOOP
         vpasexec := 71;
         vcretiene1 := 0;
         vcretiene2 := 0;

         IF reg_psu.psuage = 1
         THEN
            apuntereturn :=
               pac_agenda.f_set_apunte (NULL,
                                        NULL,
                                        3,
                                        NULL,
                                        1,
                                        0,
                                        NULL,
                                        NULL,
                                        f_axis_literales (9908406, vcidioma),
                                        reg_psu.tcontrol,
                                        0,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        NULL,
                                        vidapunte_out
                                       );

            IF apuntereturn <> 0
            THEN
               RAISE error_generar_apunte;
            END IF;

            vpasexec := 72;
            apuntereturn :=
               pac_agenda.f_set_agenda (vidapunte_out,
                                        NULL,
                                        vcusuari,
                                        vcgrupo,
                                        vtgrupo,
                                        vcclagd,
                                        osseguro,
                                        vcperagd,
                                        vcusuari,
                                        vcgrupo,
                                        vtgrupo
                                       );

            IF apuntereturn <> 0
            THEN
               RAISE error_generar_apunte;
            END IF;

            IF reg_psu.tevento IS NOT NULL
            THEN
               IF reg_psu.tevento IN ('LREMAILMLRO', 'ACTUARYLRE')
               THEN
                  FOR curactor IN (SELECT 'policyholder' AS tipo, sperson
                                     FROM tomadores
                                    WHERE sseguro = osseguro
                                   UNION
                                   SELECT 'personcovered' AS tipo, sperson
                                     FROM asegurados
                                    WHERE sseguro = osseguro
                                   UNION
                                   SELECT 'beneficiary' AS tipo, sperson
                                     FROM benespseg
                                    WHERE sseguro = osseguro)
                  LOOP
                     FOR curtiplis IN (SELECT ctiplis
                                         FROM lre_personas
                                        WHERE sperson = curactor.sperson
                                          AND ctiplis =
                                                 vtramo (-1,
                                                         8077,
                                                         reg_psu.ccontrol
                                                        )
                                          AND (   fexclus IS NULL
                                               OR TRUNC (fexclus) >
                                                             TRUNC (f_sysdate)
                                              ))
                     LOOP
                        IF (   NOT v_2d_grid.EXISTS (curactor.sperson)
                            OR (    v_2d_grid.EXISTS (curactor.sperson)
                                AND NOT v_2d_grid (curactor.sperson).EXISTS
                                                            (curtiplis.ctiplis)
                               )
                           )
                        THEN
                           v_2d_grid (curactor.sperson) (curtiplis.ctiplis) :=
                                                                           -1;

                           SELECT pac_isqlfor.f_dades_persona
                                                            (curactor.sperson,
                                                             1,
                                                             vcidioma,
                                                             'POL'
                                                            )
                             INTO vnnumide
                             FROM DUAL;

                           SELECT    pac_isqlfor.f_dades_persona
                                                            (curactor.sperson,
                                                             4,
                                                             vcidioma,
                                                             'POL'
                                                            )
                                  || ' '
                                  || pac_isqlfor.f_dades_persona
                                                            (curactor.sperson,
                                                             5,
                                                             vcidioma,
                                                             'POL'
                                                            )
                             INTO vnombre
                             FROM DUAL;

                           BEGIN
                              SELECT scorreo
                                INTO vscorreo
                                FROM cfg_notificacion
                               WHERE cempres = pac_md_common.f_get_cxtempresa
                                 AND cmodo = 'GENERAL'
                                 AND sproduc = 0
                                 AND tevento = reg_psu.tevento;

                              vpasexec := 74;
                              vmailreturn :=
                                 pac_correo.f_mail (vscorreo,
                                                    osseguro,
                                                    NULL,
                                                    vcidioma,
                                                    NULL,
                                                    vmail,
                                                    vasunto,
                                                    vfrom,
                                                    vto,
                                                    vto2,
                                                    verror,
                                                    NULL,
                                                    NULL,
                                                    NULL,
                                                    reg_psu.tcontrol,
                                                       curactor.tipo
                                                    || '|'
                                                    || vnnumide
                                                    || '|'
                                                    || vnombre
                                                   );

                              IF vmailreturn <> 0
                              THEN
                                 /*RAISE error_envio_correo;*/
                                 NULL;
                              /* Si falla el env¿o de correo no hacer nada de momento*/
                              END IF;
                           EXCEPTION
                              WHEN NO_DATA_FOUND
                              THEN
                                 p_tab_error (f_sysdate,
                                              f_user,
                                              vobject,
                                              vpasexec,
                                              vparam,
                                              f_axis_literales (9904235,
                                                                vcidioma
                                                               )
                                             );
                                 RAISE error_envio_correo;
                           END;
                        END IF;
                     END LOOP;
                  END LOOP;
               ELSE
                  IF reg_psu.ccontrol = 526031
                  THEN
                     vtable :=
                           CHR (10)
                        || CHR (10)
                        || f_axis_literales (9908774, 5)
                        || CHR (10)
                        || CHR (10);

                     FOR regs IN
                     /**TCS_jpaezr_SQL_60**/
                        (SELECT /*+ USE_HASH(G,S,GP) ORDERED */ gg.trotgar, 
                                    g.icapital, 
                                    pac_monedas.f_cmoneda_t(NVL(s.cmoneda, f_parinstalacion_n('MONEDAINST'))) moneda 
                              FROM garangen gg, 
                                    garanpro gp, 
                                    seguros s, 
                                    garanseg g 
                              WHERE g.sseguro = osseguro 
                                 AND ffinefe IS NULL 
                                 AND g.cgarant = gg.cgarant + 0 
                                 AND gg.cidioma = vcidioma 
                                 AND g.icapital <> 0 
                                 AND g.sseguro = s.sseguro + 0 
                                 AND s.sproduc = gp.sproduc + 0 
                                 AND g.cgarant = gp.cgarant + 0 
                                 AND gp.cgarant = gg.cgarant + 0 
                                 AND gp.creaseg = 1)
                     LOOP
                        vtable :=
                              vtable
                           || '         '
                           || regs.trotgar
                           || ' - '
                           || regs.icapital
                           || ' '
                           || regs.moneda
                           || CHR (10);
                     END LOOP;
                  END IF;

                  IF reg_psu.ccontrol IN (999780, 999781)
                  THEN
                     IF reg_psu.ccontrol = 999780
                     THEN
                        -- Tomador 1
                        SELECT sperson
                          INTO vtom1
                          FROM tomadores
                         WHERE sseguro = osseguro
                           AND nordtom = (SELECT MIN (t2.nordtom)
                                            FROM tomadores t2
                                           WHERE t2.sseguro = osseguro);

                        -- Profesion del tomador 1
                        SELECT cprofes
                          INTO vcprofes1
                          FROM per_detper
                         WHERE sperson = vtom1
                           AND cagente = ff_agente_cpervisio (reg_psu.cagente);

                        -- Retiene profesion 1
                        IF vcprofes1 IS NOT NULL
                        THEN
                           SELECT cretiene
                             INTO vcretiene1
                             FROM profesiones
                            WHERE cprofes = vcprofes1
                              AND cidioma = pac_md_common.f_get_cxtidioma ();
                        END IF;

                        IF vcretiene1 = 1
                        THEN
                           SELECT pac_isqlfor.f_dades_persona (vtom1,
                                                               1,
                                                               vcidioma,
                                                               'POL'
                                                              )
                             INTO vnnumide1
                             FROM DUAL;

                           SELECT    pac_isqlfor.f_dades_persona (vtom1,
                                                                  4,
                                                                  vcidioma,
                                                                  'POL'
                                                                 )
                                  || ' '
                                  || pac_isqlfor.f_dades_persona (vtom1,
                                                                  5,
                                                                  vcidioma,
                                                                  'POL'
                                                                 )
                             INTO vnombre1
                             FROM DUAL;
                        END IF;

                        BEGIN
                           SELECT sperson
                             INTO vtom2
                             FROM tomadores
                            WHERE sseguro = osseguro AND sperson <> vtom1;

                           -- Tomador 2
                           SELECT cprofes
                             INTO vcprofes2
                             FROM per_detper
                            WHERE sperson = vtom2
                              AND cagente =
                                         ff_agente_cpervisio (reg_psu.cagente);

                           -- Profesion tomador 2
                           IF vcprofes2 IS NOT NULL
                           THEN
                              SELECT cretiene
                                INTO vcretiene2
                                FROM profesiones
                               WHERE cprofes = vcprofes2
                                 AND cidioma =
                                              pac_md_common.f_get_cxtidioma
                                                                           ();
                           -- Retiene profesion 2
                           END IF;

                           IF vcretiene2 = 1
                           THEN
                              SELECT pac_isqlfor.f_dades_persona (vtom2,
                                                                  1,
                                                                  vcidioma,
                                                                  'POL'
                                                                 )
                                INTO vnnumide2
                                FROM DUAL;

                              SELECT    pac_isqlfor.f_dades_persona (vtom2,
                                                                     4,
                                                                     vcidioma,
                                                                     'POL'
                                                                    )
                                     || ' '
                                     || pac_isqlfor.f_dades_persona (vtom2,
                                                                     5,
                                                                     vcidioma,
                                                                     'POL'
                                                                    )
                                INTO vnombre2
                                FROM DUAL;
                           END IF;
                        EXCEPTION
                           WHEN NO_DATA_FOUND
                           THEN
                              NULL;
                        END;

                        IF vcretiene1 = 1 AND vcretiene2 = 0
                        THEN
                           vtable :=
                                 'policyholder'
                              || '|'
                              || vnnumide1
                              || '|'
                              || vnombre1;
                        ELSIF vcretiene1 = 0 AND vcretiene2 = 1
                        THEN
                           vtable :=
                                 'policyholder'
                              || '|'
                              || vnnumide2
                              || '|'
                              || vnombre2;
                        ELSIF vcretiene1 = 1 AND vcretiene2 = 1
                        THEN
                           vtable :=
                                 'policyholders'
                              || '|'
                              || vnnumide1
                              || ' & '
                              || vnnumide2
                              || '|'
                              || vnombre1
                              || ' & '
                              || vnombre2;
                        END IF;
                     END IF;

                     IF reg_psu.ccontrol = 999781
                     THEN
                        -- Asegurado 1
                        SELECT sperson
                          INTO vase1
                          FROM asegurados
                         WHERE sseguro = osseguro
                           AND norden = (SELECT MIN (t2.norden)
                                           FROM asegurados t2
                                          WHERE t2.sseguro = osseguro);

                        v_res :=
                           pac_preguntas.f_get_pregunseg (osseguro,
                                                          1,
                                                          1988,
                                                          'SEG',
                                                          v_crespue_1988
                                                         );
                        v_res :=
                           pac_preguntas.f_get_pregunseg (osseguro,
                                                          1,
                                                          1995,
                                                          'SEG',
                                                          v_crespue_1995
                                                         );

                        IF v_crespue_1988 IS NOT NULL
                        THEN
                           SELECT cretiene
                             INTO vcretiene1
                             FROM profesiones
                            WHERE cprofes = v_crespue_1988 AND cidioma = 5;
                        END IF;

                        IF vcretiene1 = 1
                        THEN
                           SELECT pac_isqlfor.f_dades_persona (vase1,
                                                               1,
                                                               vcidioma,
                                                               'POL'
                                                              )
                             INTO vnnumide1
                             FROM DUAL;

                           SELECT    pac_isqlfor.f_dades_persona (vase1,
                                                                  4,
                                                                  vcidioma,
                                                                  'POL'
                                                                 )
                                  || ' '
                                  || pac_isqlfor.f_dades_persona (vase1,
                                                                  5,
                                                                  vcidioma,
                                                                  'POL'
                                                                 )
                             INTO vnombre1
                             FROM DUAL;
                        END IF;

                        IF v_crespue_1995 IS NOT NULL
                        THEN
                           SELECT cretiene
                             INTO vcretiene2
                             FROM profesiones
                            WHERE cprofes = v_crespue_1995 AND cidioma = 5;
                        END IF;

                        BEGIN
                           -- Asegurado 2
                           SELECT sperson
                             INTO vase2
                             FROM asegurados
                            WHERE sseguro = osseguro AND sperson <> vase1;

                           IF vcretiene2 = 1
                           THEN
                              SELECT pac_isqlfor.f_dades_persona (vase2,
                                                                  1,
                                                                  vcidioma,
                                                                  'POL'
                                                                 )
                                INTO vnnumide2
                                FROM DUAL;

                              SELECT    pac_isqlfor.f_dades_persona (vase2,
                                                                     4,
                                                                     vcidioma,
                                                                     'POL'
                                                                    )
                                     || ' '
                                     || pac_isqlfor.f_dades_persona (vase2,
                                                                     5,
                                                                     vcidioma,
                                                                     'POL'
                                                                    )
                                INTO vnombre2
                                FROM DUAL;
                           END IF;
                        EXCEPTION
                           WHEN NO_DATA_FOUND
                           THEN
                              NULL;
                        END;

                        IF vcretiene1 = 1 AND vcretiene2 = 0
                        THEN
                           vtable :=
                                 'personcovered'
                              || '|'
                              || vnnumide1
                              || '|'
                              || vnombre1;
                        ELSIF vcretiene1 = 0 AND vcretiene2 = 1
                        THEN
                           vtable :=
                                 'personcovered'
                              || '|'
                              || vnnumide2
                              || '|'
                              || vnombre2;
                        ELSIF vcretiene1 = 1 AND vcretiene2 = 1
                        THEN
                           vtable :=
                                 'personscovered'
                              || '|'
                              || vnnumide1
                              || ' & '
                              || vnnumide2
                              || '|'
                              || vnombre1
                              || ' & '
                              || vnombre2;
                        END IF;
                     END IF;
                  END IF;

                  BEGIN
                     SELECT scorreo
                       INTO vscorreo
                       FROM cfg_notificacion
                      WHERE cempres = pac_md_common.f_get_cxtempresa
                        AND cmodo = 'GENERAL'
                        AND sproduc = 0
                        AND tevento = reg_psu.tevento;

                     vpasexec := 74;
                     vmailreturn :=
                        pac_correo.f_mail (vscorreo,
                                           osseguro,
                                           NULL,
                                           vcidioma,
                                           NULL,
                                           vmail,
                                           vasunto,
                                           vfrom,
                                           vto,
                                           vto2,
                                           verror,
                                           NULL,
                                           NULL,
                                           NULL,
                                           reg_psu.tcontrol,
                                           vtable
                                          );

                     IF vmailreturn <> 0
                     THEN
                        /*RAISE error_envio_correo;*/
                        NULL;
                     /* Si falla el env¿o de correo no hacer nada de momento*/
                     END IF;
                  EXCEPTION
                     WHEN NO_DATA_FOUND
                     THEN
                        p_tab_error (f_sysdate,
                                     f_user,
                                     vobject,
                                     vpasexec,
                                     vparam,
                                     f_axis_literales (9904235, vcidioma)
                                    );
                        RAISE error_envio_correo;
                  END;
               END IF;
            END IF;

            vpasexec := 75;
            vtevento := NULL;

            IF pac_md_docrequerida.f_docreq_pendiente (osseguro,
                                                       vnmovimi,
                                                       v_sproduc,
                                                       0
                                                      ) = 1
            THEN
               vtevento := 'REQUIREDDOCUMENTACION';
            END IF;

            IF vtevento IS NOT NULL
            THEN
               BEGIN
                  vpasexec := 76;

                  SELECT scorreo
                    INTO vscorreo
                    FROM cfg_notificacion
                   WHERE cempres = pac_md_common.f_get_cxtempresa
                     AND cmodo = 'GENERAL'
                     AND sproduc = 0
                     AND tevento = vtevento;

                  vpasexec := 77;
                  vmailreturn :=
                     pac_correo.f_mail (vscorreo,
                                        osseguro,
                                        NULL,
                                        vcidioma,
                                        NULL,
                                        vmail,
                                        vasunto,
                                        vfrom,
                                        vto,
                                        vto2,
                                        verror
                                       );

                  IF vmailreturn <> 0
                  THEN
                     /*RAISE error_envio_correo;*/
                     NULL;
                  /* Si falla el env¿o de correo no hacer nada de momento*/
                  END IF;
               EXCEPTION
                  WHEN NO_DATA_FOUND
                  THEN
                     p_tab_error (f_sysdate,
                                  f_user,
                                  vobject,
                                  vpasexec,
                                  vparam,
                                  f_axis_literales (9904235, vcidioma)
                                 );
                     RAISE error_envio_correo;
               END;
            END IF;
         END IF;
      END LOOP;

      /* Fin BUG 36596/212742 YDA*/
      /**/
      /*FI Bug10550 - 17/09/2009 - DCT - Incorporar el BPM al flujo de trabajo del producto i-axis*/
      issave := TRUE;
      /*INI 18351: LCOL003 - Documentacion requerida en contratacion y suplementos*/
      vpasexec := 13;
      vnumerr :=
          pac_md_docrequerida.f_subir_docsgedox (osseguro, vnmovimi, mensajes);

      IF vnumerr > 0
      THEN
         vpasexec := 14;
         RAISE e_object_error;
      END IF;

      /*FI 18351: LCOL003 - Documentacion requerida en contratacion y suplementos*/
      /*36507 KJSC 02/10/2015 Funcion apunte retencion cuando salte una PSU*/
      IF NVL (pac_parametros.f_parempresa_n (pac_md_common.f_get_cxtempresa,
                                             'APUNTE_RETENCION'
                                            ),
              0
             ) = 1
      THEN
         vnumerr := pac_md_produccion.f_apunte_retencion (osseguro, mensajes);

         IF vnumerr <> 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, vnumerr);
            RAISE e_object_error;
         END IF;
      END IF;

      IF vnumerr <> 0
      THEN
         IF NVL
               (pac_parametros.f_parempresa_n
                                           (pac_md_common.f_get_cxtempresa (),
                                            'MAIL_CAMBIOS_ESTADO'
                                           ),
                0
               ) = 1
         THEN
            IF NVL (pac_parametros.f_parproducto_n (v_sproduc,
                                                    'MAIL_SITUACION_POL'
                                                   ),
                    0
                   ) = 1
            THEN
               IF v_csituac = 4 AND vcreteni = 2
               THEN
                  vnumerr :=
                     pac_correo.f_destinatario (pscorreo      => 316,
                                                psseguro      => osseguro,
                                                p_to          => p_to,
                                                p_to2         => p_to2,
                                                pcmotmov      => NULL
                                               );
                  vnumerr :=
                     pac_correo.f_origen (pscorreo      => 316,
                                          p_from        => p_from,
                                          paviso        => NULL
                                         );
                  vnumerr :=
                     pac_correo.f_asunto (pscorreo      => 316,
                                          pcidioma      => 8,
                                          psubject      => psubject,
                                          psseguro      => osseguro,
                                          pcmotmov      => NULL,
                                          ptasunto      => NULL
                                         );
                  vnumerr :=
                     pac_correo.f_cuerpo (pscorreo      => 316,
                                          pcidioma      => 8,
                                          ptexto        => ptexto,
                                          psseguro      => osseguro,
                                          pnriesgo      => 1,
                                          pnsinies      => NULL,
                                          pcmotmov      => NULL,
                                          ptcuerpo      => NULL,
                                          pcramo        => 801
                                         );
                  vnumerr :=
                     pac_md_informes.f_enviar_mail (piddoc            => NULL,
                                                    pmailgrc          => p_to,
                                                    prutafichero      => NULL,
                                                    pfichero          => NULL,
                                                    psubject          => psubject,
                                                    pcuerpo           => ptexto,
                                                    pmailcc           => NULL,
                                                    pmailcco          => NULL,
                                                    pdirectorio       => NULL,
                                                    pfrom             => p_from,
                                                    pdirectorio2      => NULL,
                                                    pfichero2         => NULL
                                                   );
               END IF;
            END IF;
         END IF;
      END IF;

      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN error_generar_apunte
      THEN
         p_tab_error (f_sysdate,
                      f_user,
                      vobject,
                      vpasexec,
                      vparam,
                      f_axis_literales (9903168, vcidioma)
                     );
         RETURN 1;
      WHEN error_envio_correo
      THEN
         p_tab_error (f_sysdate,
                      f_user,
                      vobject,
                      vpasexec,
                      vparam,
                      f_axis_literales (9904380, vcidioma)
                     );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_retenerpropuesta;

   /*************************************************************************
   Emite la poliza
   param out mensajes : mensajes de error
   param out onpoliza : numero de poliza
   param out osseguro : sseguro
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_emitir (
      mensajes   OUT   t_iax_mensajes,
      onpoliza   OUT   NUMBER,
      osseguro   OUT   NUMBER
   )
      RETURN NUMBER
   IS
      vfefecto         DATE;
      nerror           NUMBER;
      vmens            VARCHAR2 (100);
      vsproduc         NUMBER;
      vnmovimi         NUMBER;
      vpasexec         NUMBER (8)                    := 1;
      vparam           VARCHAR2 (1)                  := NULL;
      vobject          VARCHAR2 (200)        := 'PAC_IAX_PRODUCCION.F_Emitir';
      vsinterf         NUMBER;
      verror           VARCHAR2 (2000);
      v_haypendiente   NUMBER;
      v_produce_req    NUMBER;
      vpolini          VARCHAR2 (200);
      v_emitir         NUMBER                        := 0;
      --INI BUG CONF-186  Fecha (22/08/2016) - HRE - proceso de marcas
      cur_marcas       sys_refcursor;
      v_empresa        VARCHAR2 (10);
      v_sperson        per_agr_marcas.sperson%TYPE;
      v_area           VARCHAR2 (500);
      v_cmarca         per_agr_marcas.cmarca%TYPE;
      v_descripcion    VARCHAR2 (500);
      v_tipo           VARCHAR2 (50);
      v_caacion        agr_marcas.caacion%TYPE;
      v_accion         VARCHAR2 (50);
      v_persona        VARCHAR2 (500);
      v_rol            VARCHAR2 (50);
      v_validamarca    BOOLEAN                       := FALSE;
   --FIN BUG CONF-186  - Fecha (22/08/2016) - HRE

   /*0. Emetre, 1. retenerpropuesta , 2. Error*/
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      --INI BUG CONF-186  Fecha (22/08/2016) - HRE - proceso de marcas
      vpasexec := 20;
      v_empresa := f_parinstalacion_n ('EMPRESADEF');
      cur_marcas :=
         pac_md_marcas.f_get_marcas_poliza (v_empresa,
                                            poliza.det_poliza.sseguro,
                                            'EST',
                                            mensajes
                                           );

      FETCH cur_marcas
       INTO v_sperson, v_area, v_cmarca, v_descripcion, v_tipo, v_caacion,
            v_accion, v_persona, v_rol;

      WHILE cur_marcas%FOUND
      LOOP
         IF v_caacion != 0
         THEN
            v_validamarca := TRUE;

            -- Ini IAXIS- 3981 -- ECP -- 10/07/2019
            /*pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 0,
                                                 f_axis_literales(9909325,
                                                                   pac_md_common.f_get_cxtidioma) || ' :' ||
                                                  ' Area:' || v_area ||
                                                  ' Marca:' || v_cmarca || '-' ||
                                                  v_descripcion || ' Tipo:' ||
                                                  v_tipo || ' Acci¿n:' ||
                                                  v_accion || ' Persona:' ||
                                                  v_persona || ' Rol:' ||
                                                  v_rol);*/
            IF v_rol = 'Tomador'
            THEN
               BEGIN
                  INSERT INTO per_agr_marcas
                              (cempres, sperson, cmarca,
                               nmovimi, ctipo, ctomador, cconsorcio,
                               casegurado, ccodeudor, cbenef, caccionista,
                               cintermed, crepresen, capoderado, cpagador,
                               observacion, cuser, falta, cproveedor
                              )
                       VALUES (v_empresa, v_sperson, v_cmarca,
                               (SELECT MAX (nmovimi) + 1
                                  FROM per_agr_marcas
                                 WHERE sperson = v_sperson), 1, 1, 1,
                               0, 0, 0, 0,
                               0, 0, 0, 0,
                               NULL, f_user, TRUNC (f_sysdate), 0
                              );
               EXCEPTION
                  WHEN dup_val_on_index
                  THEN
                     NULL;
               END;
            ELSIF v_rol = 'Asegurado'
            THEN
               BEGIN
                  INSERT INTO per_agr_marcas
                              (cempres, sperson, cmarca,
                               nmovimi, ctipo, ctomador, cconsorcio,
                               casegurado, ccodeudor, cbenef, caccionista,
                               cintermed, crepresen, capoderado, cpagador,
                               observacion, cuser, falta, cproveedor
                              )
                       VALUES (v_empresa, v_sperson, v_cmarca,
                               (SELECT MAX (nmovimi) + 1
                                  FROM per_agr_marcas
                                 WHERE sperson = v_sperson), 1, 0, 1,
                               1, 0, 0, 0,
                               0, 0, 0, 0,
                               NULL, f_user, TRUNC (f_sysdate), 0
                              );

                  COMMIT;
               EXCEPTION
                  WHEN dup_val_on_index
                  THEN
                     NULL;
               END;
            END IF;

            IF v_rol = 'Tomador'
            THEN
               BEGIN
                  INSERT INTO per_agr_marcas
                              (cempres, sperson, cmarca,
                               nmovimi, ctipo, ctomador, cconsorcio,
                               casegurado, ccodeudor, cbenef, caccionista,
                               cintermed, crepresen, capoderado, cpagador,
                               observacion, cuser, falta, cproveedor
                              )
                       VALUES (v_empresa, v_sperson, v_cmarca,
                               (SELECT MAX (nmovimi) + 1
                                  FROM per_agr_marcas
                                 WHERE sperson = v_sperson), 1, 1, 1,
                               0, 0, 0, 0,
                               0, 0, 0, 0,
                               NULL, f_user, TRUNC (f_sysdate), 0
                              );
               EXCEPTION
                  WHEN dup_val_on_index
                  THEN
                     NULL;
               END;
            ELSIF v_rol = 'Asegurado'
            THEN
               BEGIN
                  INSERT INTO per_agr_marcas
                              (cempres, sperson, cmarca,
                               nmovimi, ctipo, ctomador, cconsorcio,
                               casegurado, ccodeudor, cbenef, caccionista,
                               cintermed, crepresen, capoderado, cpagador,
                               observacion, cuser, falta, cproveedor
                              )
                       VALUES (v_empresa, v_sperson, v_cmarca,
                               (SELECT MAX (nmovimi) + 1
                                  FROM per_agr_marcas
                                 WHERE sperson = v_sperson), 1, 0, 1,
                               1, 0, 0, 0,
                               0, 0, 0, 0,
                               NULL, f_user, TRUNC (f_sysdate), 0
                              );

                  COMMIT;
               EXCEPTION
                  WHEN dup_val_on_index
                  THEN
                     NULL;
               END;
            END IF;

         END IF;

         FETCH cur_marcas
          INTO v_sperson, v_area, v_cmarca, v_descripcion, v_tipo, v_caacion,
               v_accion, v_persona, v_rol;
      END LOOP;

      IF (v_validamarca)
      THEN
         v_emitir := 1;
      END IF;
 -- Fin IAXIS-3981 --ECP -- 21/07/2019
      --FIN BUG CONF-186  - Fecha (22/08/2016) - HRE

      /*INI 18351: LCOL003 - Documentacion requerida en contratacion y suplementos*/
      vpasexec := 21;
      /* Validem si hi ha documentacio requerida pendent*/
      v_haypendiente :=
         pac_md_docrequerida.f_aviso_docreq_pendiente
                                           (poliza.det_poliza.sseguro,
                                            poliza.det_poliza.nmovimi,
                                            poliza.det_poliza.sproduc,
                                            poliza.det_poliza.gestion.cactivi,
                                            mensajes
                                           );
      v_produce_req :=
         NVL (pac_parametros.f_parempresa_n (pac_md_common.f_get_cxtempresa,
                                             'PRODUCE_REQUERIDA'
                                            ),
              0
             );

      IF v_haypendiente <> 0 AND v_produce_req <> 0
      THEN
         IF v_produce_req = 1
         THEN
            /* Error*/
            v_emitir := 2;
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 2, 9902065);
            vpasexec := 22;
            RAISE e_object_error;
         ELSIF v_produce_req = 2
         THEN
            /* retenerpropuesta*/
            v_emitir := 1;
         END IF;
      END IF;

      /*FI 18351: LCOL003 - Documentacion requerida en contratacion y suplementos*/
      IF v_emitir = 0
      THEN
         vpasexec := 2;

         /* Nomes s'ha de baixar a la db en cas de que no sigui suplement si es suplement ja ho fa pac_iax_suplementos.f_EmitirPropuesta*/
         /* BUG9107:DRA:19-02-2009*/
         IF issuplem = FALSE AND ismodifprop = FALSE
         THEN
            /* toda la informacio s'ha de baixar a la base de dades*/
            nerror := f_grabarobjetodb (mensajes);

            IF nerror = 1
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000773);
               vpasexec := 3;
               RAISE e_object_error;
            END IF;
         END IF;

         vpasexec := 4;
         /*Obtenemos los datos necesarios para realizar el traspaso de las tablas EST a las REALES.*/
         vfefecto := poliza.det_poliza.gestion.fefecto;
         vpasexec := 5;
         /*Traspasamos los registros de las tablas EST a las REALES.*/
         nerror :=
            pac_md_produccion.traspaso_tablas_est (vsolicit,
                                                   vfefecto,
                                                   mensajes
                                                  );

         IF nerror > 0
         THEN
            vpasexec := 7;
            RAISE e_object_error;
         END IF;

         vpasexec := 8;
         nerror :=
            pac_md_produccion.f_emitir_propuesta (vsolicit,
                                                  onpoliza,
                                                  osseguro,
                                                  vnmovimi,
                                                  mensajes
                                                 );

         /* Bug 16106 - RSC - 25/10/2010 - APR - Ajustes e implementacion para el alta de colectivos*/
         IF isaltacol = FALSE
         THEN
            /* Fin Bug 16106*/
            /*JRB*/
            vsproduc := poliza.det_poliza.sproduc;
            /*COMMIT;  -- dra 27-10-2008: bug mantis 7519*/
            vpasexec := 10;

            IF nerror = 0
            THEN
               IF     (pac_mdpar_productos.f_get_parproducto
                                                          ('COBRO_AUTOMATICO',
                                                           vsproduc
                                                          ) = 1
                      )
                  AND nerror = 0
               THEN
                  nerror :=
                     pac_md_produccion.f_cobro_recibos (osseguro,
                                                        vnmovimi,
                                                        NULL,
                                                        NULL,
                                                        NULL,
                                                        mensajes
                                                       );
               END IF;

               IF nerror = 0
               THEN
                  COMMIT;

                  /* BUG19863:DRA:21/10/2011: Se pasa el parametro a productos*/
                  IF NVL
                        (pac_parametros.f_parproducto_n (vsproduc,
                                                         'INT_SINCRON_POLIZA'
                                                        ),
                         0
                        ) = 1
                  THEN
                     nerror :=
                        pac_md_con.f_proceso_alta
                                             (pac_md_common.f_get_cxtempresa,
                                              /* empresa*/
                                              osseguro,
                                              /*seguro*/
                                              vnmovimi,

                                              /* nmovimi*/
                                              'A',
                                              -- A (alta ) 'M' (suplemento)
                                              f_user,
                                              /* fuser*/
                                              vsinterf,
                                              /* ni caso*/
                                              verror
                                             /* ni caso*/
                                             );
                  END IF;
               END IF;

               BEGIN
                  poliza.det_poliza.npoliza := onpoliza;
                  poliza.det_poliza.sseguro := osseguro;
                  poliza.det_poliza.nmovimi := vnmovimi;
               /* dra 05-11-2008: bug 7519*/
               EXCEPTION
                  WHEN OTHERS
                  THEN
                     NULL;
               END;

               vpasexec := 12;
               issave := TRUE;
            END IF;
         /* BUG 24240 - 14/12/2012 - FPG - LCOL899 - Piloto Vida Grupo*/
         /*Bug10550 - 17/09/2009 - DCT - Incorporar el BPM al flujo de trabajo del producto i-axis*/
         /*IF nerror = 0 THEN*/
         /*   nerror := pac_md_bpm.f_lanzar_proceso(osseguro, vnmovimi, NULL, '*', 'EMITIDA',*/
         /*                                         mensajes);*/
         /*END IF;*/
         /*IF nerror <> 0 THEN*/
         /*   --pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, nerror);*/
         /*   --RAISE e_object_error;*/
         /*   NULL;   --continuo*/
         /*END IF;*/
         /* BUG 24240 - 14/12/2012 - FPG - LCOL899 - Piloto Vida Grupo*/
         ELSE
            BEGIN
               poliza.det_poliza.npoliza := onpoliza;
               poliza.det_poliza.sseguro := osseguro;
               poliza.det_poliza.nmovimi := vnmovimi;
            /* dra 05-11-2008: bug 7519*/
            EXCEPTION
               WHEN OTHERS
               THEN
                  NULL;
            END;
         /* Bug 16106 - RSC - 25/10/2010 - APR - Ajustes e implementacion para el alta de colectivos*/
         END IF;

         /* FIn Bug 16106*/
         /*FI Bug10550 - 17/09/2009 - DCT - Incorporar el BPM al flujo de trabajo del producto i-axis*/
         /* BUG 18351 - 16/05/2011 - JMP - Subida de documentacion requerida*/
         vpasexec := 13;
         nerror :=
            pac_md_docrequerida.f_subir_docsgedox (osseguro,
                                                   vnmovimi,
                                                   mensajes
                                                  );

         IF nerror > 0
         THEN
            vpasexec := 14;
            RAISE e_object_error;
         END IF;

         /* FIn Bug 16106*/
         /* BUG 24240 - 14/12/2012 - FPG - LCOL899 - Piloto Vida Grupo - Inicio*/
         /*Bug10550 - 17/09/2009 - DCT - Incorporar el BPM al flujo de trabajo del producto i-axis*/
         IF nerror = 0
         THEN
            nerror :=
               pac_md_bpm.f_lanzar_proceso (osseguro,
                                            vnmovimi,
                                            NULL,
                                            '*',
                                            'EMITIDA',
                                            mensajes
                                           );
         END IF;

         IF nerror <> 0
         THEN
            /*pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, nerror);*/
            /*RAISE e_object_error;*/
            NULL;
         /*continuo*/
         END IF;
      /* BUG 24240 - 14/12/2012 - FPG - LCOL899 - Piloto Vida Grupo - Final*/
      ELSIF v_emitir = 1
      THEN
         vpasexec := 2;
         /* Actulizamos el crteni de las tablas est.*/
         poliza.det_poliza.creteni := 1;
         nerror :=
            pac_md_docrequerida.f_retencion
                                          (vsolicit,
                                           poliza.det_poliza.nmovimi,
                                           poliza.det_poliza.gestion.fefecto,
                                           mensajes
                                          );

         IF nerror > 0
         THEN
            vpasexec := 15;
            RAISE e_object_error;
         END IF;

         nerror := f_retenerpropuesta (onpoliza, osseguro, mensajes);

         IF nerror > 0
         THEN
            vpasexec := 16;
            RAISE e_object_error;
         END IF;
      END IF;

      /*FI Bug10550 - 17/09/2009 - DCT - Incorporar el BPM al flujo de trabajo del producto i-axis*/
      /* FIN BUG 18351 - 16/05/2011 - JMP*/
      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_emitir;

   /*************************************************************************
   Recupera la informacion de la gestion de comision
   param out mensajes : mensajes de error
   return             : objeto gestion de comision
   *************************************************************************/
   FUNCTION f_leegestioncomision (
      pctipcom   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      /* BUG 0025214 - FAL - 24/12/20*/
   RETURN t_iax_gstcomision
   IS
      gst                   t_iax_gstcomision;
      vpasexec              NUMBER (8)                  := 1;
      vparam                VARCHAR2 (500)       := 'pctipcom = ' || pctipcom;
      vobject               VARCHAR2 (200)
                                 := 'PAC_IAX_PRODUCCION.F_LeeGestionComision';
      vfinivig              DATE;
      vpcomisi              comisionsegu.pcomisi%TYPE;
      num_err               NUMBER;
      v_ctipcom             NUMBER;
      colcomesp             t_iax_gstcomision;
      /* BUG 0025214 - FAL - 24/12/2012*/
      w_sincomis            NUMBER                      := 0;
      /* BUG 0025214 - FAL - 24/12/20*/
      v_reaplica_conv       NUMBER;
      /* BUG 0025214 - FAL - 24/12/20*/
      vsseguro              NUMBER;
      /* Bug 30642/169851 - 20/03/2014 - AMC*/
      v_nmovimi_cero        NUMBER;
      /*BUG 27924/151061 - RCL - 21/03/2014*/
      v_t_iax_detcomision   t_iax_detcomision;  -- CONF-55 - 09/06/2016 - APR
      vnumerr               NUMBER;             -- CONF-55 - 09/06/2016 - APR
      vsperson              NUMBER;
      vriesgos              t_iax_riesgos;
      aseg                  t_iax_asegurados;

      --Ini IAXIS-4082 -- ECP -- 29/08/2019
      v_cpregun_2912   preguntas.cpregun%TYPE   := 2912;
      v_trespue_2912   pregunseg.trespue%TYPE;
      --PRAGMA AUTONOMOUS_TRANSACTION;

   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      gst := pac_iobj_prod.f_partpolcomisiones (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;


      IF gst IS NULL
      THEN
         poliza.det_poliza.gstcomision := t_iax_gstcomision ();
         vpasexec := 5;

         SELECT MAX (c.finivig)
           INTO vfinivig
           FROM comisionprod c, agentes a, productos p
          WHERE c.ccomisi = a.ccomisi
            AND a.cagente =
                   NVL (poliza.det_poliza.cagente,
                        pac_md_common.f_get_cxtagente
                       )
            AND p.cramo = c.cramo
            AND p.cmodali = c.cmodali
            AND p.ctipseg = c.ctipseg
            AND p.ccolect = c.ccolect
            AND p.sproduc = poliza.det_poliza.sproduc;

         vpasexec := 6;
/**TCS-jpaezr-SQL-86**/
         FOR cur IN (SELECT /*+ FULL(C) */ c.cmodcom, 
                     c.ninialt, 
                     c.nfinalt, 
                     d.tatribu 
               FROM agentes a, 
                     detvalores d, 
                     productos p, 
                     comisionprod c 
               WHERE c.ccomisi = a.ccomisi + 0 
                  AND a.cagente = NVL(poliza.det_poliza.cagente, pac_md_common.f_get_cxtagente) 
                  AND c.cramo = p.cramo + 0 
                  AND c.cmodali = p.cmodali + 0 
                  AND c.ctipseg = p.ctipseg 
                  AND c.ccolect = p.ccolect 
                  AND p.sproduc = poliza.det_poliza.sproduc 
                  AND c.cmodcom = d.catribu 
                  AND d.cvalor + 0 = 67 
                  AND d.cidioma + 0 = pac_md_common.f_get_cxtidioma() 
                  AND finivig = vfinivig 
               ORDER BY c.cmodcom, c.ninialt)
         LOOP
            vpasexec := 7;
            poliza.det_poliza.gstcomision.EXTEND;
            vpasexec := 8;
            poliza.det_poliza.gstcomision (poliza.det_poliza.gstcomision.LAST) :=
                                                        ob_iax_gstcomision
                                                                          ();
            vpasexec := 9;
            poliza.det_poliza.gstcomision (poliza.det_poliza.gstcomision.LAST).cmodcom :=
                                                                  cur.cmodcom;
            vpasexec := 10;
            poliza.det_poliza.gstcomision (poliza.det_poliza.gstcomision.LAST).ninialt :=
                                                                  cur.ninialt;
            vpasexec := 11;
            poliza.det_poliza.gstcomision (poliza.det_poliza.gstcomision.LAST).nfinalt :=
                                                                  cur.nfinalt;
            vpasexec := 12;
            poliza.det_poliza.gstcomision (poliza.det_poliza.gstcomision.LAST).tatribu :=
                                                                  cur.tatribu;
            vpasexec := 13;

            IF     pac_mdpar_productos.f_get_parproducto
                                ('ADMITE_CERTIFICADOS',
                                 pac_iax_produccion.poliza.det_poliza.sproduc
                                ) = 1
               AND NOT pac_iax_produccion.isaltacol
            THEN
               vpasexec := 14;

               num_err :=
                  pac_productos.f_get_herencia_col
                               (pac_iax_produccion.poliza.det_poliza.sproduc,
                                13,
                                v_ctipcom
                               );
               vpasexec := 15;

               IF NVL (v_ctipcom, 0) = 1 AND num_err = 0
               THEN
                  vpasexec := 16;

                  /* Bug 30642/169851 - 20/03/2014 - AMC*/
                  SELECT sseguro
                    INTO vsseguro
                    FROM seguros
                   WHERE npoliza =
                                  pac_iax_produccion.poliza.det_poliza.npoliza
                     AND ncertif = 0;

                  SELECT pcomisi
                    INTO vpcomisi
                    FROM comisionsegu s
                   WHERE s.sseguro = vsseguro
                     AND s.nmovimi = (SELECT MAX (nmovimi)
                                        FROM comisionsegu
                                       WHERE sseguro = vsseguro)
                     AND cmodcom = cur.cmodcom
                     AND ninialt = cur.ninialt
                     AND nfinalt = cur.nfinalt;

                  /* Fi Bug 30642/169851 - 20/03/2014 - AMC*/
                  vpasexec := 17;

                  poliza.det_poliza.gstcomision
                                           (poliza.det_poliza.gstcomision.LAST).pcomisi :=
                                                                      vpcomisi;
               END IF;
            END IF;

            vpasexec := 18;
            gst := poliza.det_poliza.gstcomision;
         END LOOP;

         vpasexec := 19;
         -- Ini IAXIS-4082 --ECP --08/09/2019
         /* BUG 0025214 - FAL - 24/12/2012*/


         IF pctipcom = 92
         THEN
            IF NVL
            (pac_mdpar_productos.f_get_parproducto
                                 ('CONV_CONTRATANTE',
                                  pac_iax_produccion.poliza.det_poliza.sproduc
                                 ),
             0
            ) = 1
      THEN
      IF pac_iax_produccion.poliza.det_poliza.preguntas IS NOT NULL
         THEN
            IF pac_iax_produccion.poliza.det_poliza.preguntas.COUNT > 0
            THEN
               FOR i IN
                  pac_iax_produccion.poliza.det_poliza.preguntas.FIRST .. pac_iax_produccion.poliza.det_poliza.preguntas.LAST
               LOOP
                  --Ini IAXIS-4082 -- ECP -- 29/08/2019
                  IF v_cpregun_2912 =
                        pac_iax_produccion.poliza.det_poliza.preguntas (i).cpregun
                  THEN
                     v_trespue_2912 :=
                        pac_iax_produccion.poliza.det_poliza.preguntas (i).trespue;
                  END IF;
               --Fin IAXIS-4082 -- ECP -- 29/08/2019
               END LOOP;
            END IF;
         END IF;




         --Ini IAXIS-4082 -- ECP -- 29/08/2019
         IF v_trespue_2912 IS NOT NULL
         THEN
            SELECT sperson
              INTO vsperson
              FROM per_personas
             WHERE nnumide = v_trespue_2912;


         END IF;

         else
            IF NVL
                  (pac_mdpar_productos.f_get_parproducto
                                 ('CONVENIO_TOMADOR',
                                  pac_iax_produccion.poliza.det_poliza.sproduc
                                 ),
                   0
                  ) = 1
            THEN

               FOR i IN
                  pac_iax_produccion.poliza.det_poliza.tomadores.FIRST .. pac_iax_produccion.poliza.det_poliza.tomadores.LAST
               LOOP
                  vpasexec := 20;
                  colcomesp :=
                     pac_md_comisionegocio.f_get_porcenconvcomesp
                        (pac_iax_produccion.poliza.det_poliza.sproduc,
                         pac_iax_produccion.poliza.det_poliza.cagente,
                         pac_iax_produccion.poliza.det_poliza.tomadores (i).sperson,
                         /* null  -- 211767 -- 1*/
                         pac_iax_produccion.poliza.det_poliza.gestion.fefecto,
                         /*to_date('01/01/2012','dd/mm/yyyy'),*/
                         mensajes
                        );

                  IF colcomesp IS NOT NULL
                  THEN
                     gst := colcomesp;
                  END IF;
               END LOOP;

            --ELSE -- IAXIS -4082 -- 18/10/2019
               vriesgos :=
                  pac_iobj_prod.f_partpolriesgos
                                       (pac_iax_produccion.poliza.det_poliza,
                                        mensajes
                                       );

               IF vriesgos IS NOT NULL
               THEN
                  IF vriesgos.COUNT > 0
                  THEN
                     FOR vrie IN vriesgos.FIRST .. vriesgos.LAST
                     LOOP
                        IF vriesgos.EXISTS (vrie)
                        THEN
                           aseg :=
                              pac_iobj_prod.f_partriesasegurado
                                                             (vriesgos (vrie),
                                                              mensajes
                                                             );

                           IF aseg IS NOT NULL
                           THEN
                              IF aseg.COUNT > 0
                              THEN
                                 FOR vaseg IN aseg.FIRST .. aseg.LAST
                                 LOOP
                                    IF aseg.EXISTS (vaseg)
                                    THEN
                                       vsperson := aseg (vaseg).spereal;
                                    END IF;
                                 END LOOP;
                              END IF;
                           END IF;
                        END IF;
                     END LOOP;
                  END IF;
               END IF;

             end if;
             end if;  



               -- Fin IAXIS-4082 --ECP --08/09/2019
               colcomesp :=
                  pac_md_comisionegocio.f_get_porcenconvcomesp
                        (pac_iax_produccion.poliza.det_poliza.sproduc,
                         pac_iax_produccion.poliza.det_poliza.cagente,
                         vsperson,
                         /* null  -- 211767 -- 1*/
                         pac_iax_produccion.poliza.det_poliza.gestion.fefecto,
                         /*to_date('01/01/2012','dd/mm/yyyy'),*/
                         mensajes
                        );

               IF colcomesp IS NOT NULL
               THEN
                  gst := colcomesp;
               END IF;

         --CONF-55  APR
         ELSIF     pctipcom = 0
               AND (pac_parametros.f_parempresa_n
                                           (pac_md_common.f_get_cxtempresa (),
                                            'SHOW_COMIS_HABITUAL'
                                           ) = 1
                   )
         THEN
            gst (gst.COUNT).pcomisi :=
               pac_md_comisiones.f_get_comsis_agente
                  (pcagente      => pac_iax_produccion.poliza.det_poliza.cagente,
                   psproduc      => pac_iax_produccion.poliza.det_poliza.sproduc,
                   pramo         => poliza.det_poliza.cramo,
                   pfefecto      => pac_iax_produccion.poliza.det_poliza.gestion.fefecto,
                   mensajes      => mensajes
                  );
         END IF;
      --CONF-55  APR
      ELSIF gst IS NOT NULL AND pctipcom = 92
      THEN
         v_reaplica_conv := 0;
         vpasexec := 21;

         FOR vgst IN gst.FIRST .. gst.LAST
         LOOP
            IF gst.EXISTS (vgst)
            THEN
               IF gst (vgst).pcomisi IS NOT NULL
               THEN
                  v_reaplica_conv := 1;
               END IF;
            END IF;
         END LOOP;

         vpasexec := 22;
IF NVL
            (pac_mdpar_productos.f_get_parproducto
                                 ('CONV_CONTRATANTE',
                                  pac_iax_produccion.poliza.det_poliza.sproduc
                                 ),
             0
            ) = 1
      THEN
      IF pac_iax_produccion.poliza.det_poliza.preguntas IS NOT NULL
         THEN
            IF pac_iax_produccion.poliza.det_poliza.preguntas.COUNT > 0
            THEN
               FOR i IN
                  pac_iax_produccion.poliza.det_poliza.preguntas.FIRST .. pac_iax_produccion.poliza.det_poliza.preguntas.LAST
               LOOP
                  --Ini IAXIS-4082 -- ECP -- 29/08/2019
                  IF v_cpregun_2912 =
                        pac_iax_produccion.poliza.det_poliza.preguntas (i).cpregun
                  THEN
                     v_trespue_2912 :=
                        pac_iax_produccion.poliza.det_poliza.preguntas (i).trespue;
                  END IF;
               --Fin IAXIS-4082 -- ECP -- 29/08/2019
               END LOOP;
            END IF;
         END IF;




         --Ini IAXIS-4082 -- ECP -- 29/08/2019
         IF v_trespue_2912 IS NOT NULL
         THEN
            SELECT sperson
              INTO vsperson
              FROM per_personas
             WHERE nnumide = v_trespue_2912;


         END IF;

         else
         IF v_reaplica_conv = 0
         THEN
            IF NVL
                  (pac_mdpar_productos.f_get_parproducto
                                 ('CONVENIO_TOMADOR',
                                  pac_iax_produccion.poliza.det_poliza.sproduc
                                 ),
                   0
                  ) = 0
            THEN
               FOR i IN
                  pac_iax_produccion.poliza.det_poliza.tomadores.FIRST .. pac_iax_produccion.poliza.det_poliza.tomadores.LAST
               LOOP
                  vpasexec := 23;
                  colcomesp :=
                     pac_md_comisionegocio.f_get_porcenconvcomesp
                        (pac_iax_produccion.poliza.det_poliza.sproduc,
                         pac_iax_produccion.poliza.det_poliza.cagente,
                         pac_iax_produccion.poliza.det_poliza.tomadores (i).sperson,
                         /* null  -- 211767 -- 1*/
                         pac_iax_produccion.poliza.det_poliza.gestion.fefecto,
                         /*to_date('01/01/2012','dd/mm/yyyy'),*/
                         mensajes
                        );

                  IF colcomesp IS NOT NULL
                  THEN
                     gst := colcomesp;
                  END IF;
               END LOOP;
            ELSE
               vriesgos :=
                  pac_iobj_prod.f_partpolriesgos
                                       (pac_iax_produccion.poliza.det_poliza,
                                        mensajes
                                       );

               IF vriesgos IS NOT NULL
               THEN
                  IF vriesgos.COUNT > 0
                  THEN
                     FOR vrie IN vriesgos.FIRST .. vriesgos.LAST
                     LOOP
                        IF vriesgos.EXISTS (vrie)
                        THEN
                           aseg :=
                              pac_iobj_prod.f_partriesasegurado
                                                             (vriesgos (vrie),
                                                              mensajes
                                                             );

                           IF aseg IS NOT NULL
                           THEN
                              IF aseg.COUNT > 0
                              THEN
                                 FOR vaseg IN aseg.FIRST .. aseg.LAST
                                 LOOP
                                    IF aseg.EXISTS (vaseg)
                                    THEN
                                       vsperson := aseg (vaseg).spereal;
                                    END IF;
                                 END LOOP;
                              END IF;
                           END IF;
                        END IF;
                     END LOOP;
                  END IF;
               END IF;
               end if;
 END IF;
               colcomesp :=
                  pac_md_comisionegocio.f_get_porcenconvcomesp
                        (pac_iax_produccion.poliza.det_poliza.sproduc,
                         pac_iax_produccion.poliza.det_poliza.cagente,
                         vsperson,
                         /* null  -- 211767 -- 1*/
                         pac_iax_produccion.poliza.det_poliza.gestion.fefecto,
                         /*to_date('01/01/2012','dd/mm/yyyy'),*/
                         mensajes
                        );

               IF colcomesp IS NOT NULL
               THEN
                  gst := colcomesp;
               END IF;

         END IF;

         vpasexec := 24;
      /* FI BUG 0025214*/
      -- CONF-55 - 09/06/2016 - APR
      ELSIF     pctipcom = 0
            AND (pac_parametros.f_parempresa_n
                                           (pac_md_common.f_get_cxtempresa (),
                                            'SHOW_COMIS_HABITUAL'
                                           ) = 1
                )
      THEN
         vpasexec := 25;

         FOR i IN gst.FIRST .. gst.LAST
         LOOP
            vpasexec := 26;
            vnumerr :=
               pac_md_comisiones.f_get_detalle_comision
                                      (pccomisi         => gst (i).pcomisi,
                                       pcagrprod        => NULL,
                                       pcramo           => poliza.det_poliza.cramo,
                                       psproduc         => poliza.det_poliza.sproduc,
                                       pcactivi         => NULL,
                                       pcgarant         => NULL,
                                       ptodos           => NULL,
                                       pcmodcon         => gst (i).cmodcom,
                                       pfinivig         => NULL,
                                       pffinvig         => NULL,
                                       porderby         => NULL,
                                       pt_comision      => v_t_iax_detcomision,
                                       mensajes         => mensajes
                                      );

            --
            IF vnumerr != 0
            THEN
               --
               RAISE e_param_error;
            --
            END IF;

            --
            vpasexec := 27;

            IF v_t_iax_detcomision IS NOT NULL
            THEN
               IF v_t_iax_detcomision.COUNT > 0
               THEN
                  gst (i).cmodcom := v_t_iax_detcomision (i).cmodcom;
               END IF;
            END IF;

            --
            IF vnumerr != 0
            THEN
               --
               RAISE e_param_error;
            --
            END IF;

            --
            vpasexec := 27;

            IF v_t_iax_detcomision IS NOT NULL
            THEN
               IF v_t_iax_detcomision.COUNT > 0
               THEN
                  gst (i).cmodcom := v_t_iax_detcomision (i).cmodcom;
               END IF;
            END IF;

            --
            vpasexec := 28;
         END LOOP;
      END IF;

      -- CONF-55 - 09/06/2016 - APR
      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN gst;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leegestioncomision;

   /*************************************************************************
   Graba la informacion de gestion de comisiones de la poliza
   param in  cmodcom  : modalidad de la comision
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabagestioncomision (
      pcmodcom   IN       NUMBER,
      pcomisi    IN       NUMBER,
      pninialt   IN       NUMBER DEFAULT NULL,
      /* Inicio de la altura*/
      pnfinalt   IN       NUMBER DEFAULT NULL,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      gst         t_iax_gstcomision;
      npos        NUMBER;
      vpasexec    NUMBER (8)                  := 1;
      vparam      VARCHAR2 (1)                := NULL;
      vobject     VARCHAR2 (200)
                               := 'PAC_IAX_PRODUCCION.F_GrabaGestionComision';
      /* Bug 21629 - FAL - 18/04/2012*/
      v_ninialt   comisionprod.ninialt%TYPE;
      v_nfinalt   comisionprod.nfinalt%TYPE;
      /* Fi Bug 21629*/
      vfinivig    DATE;
   /* Bug 29284/160732 - 09/12/2013 - AMC*/
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      gst := pac_iobj_prod.f_partpolcomisiones (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF gst IS NULL
      THEN
         gst := t_iax_gstcomision ();
      END IF;

      npos := -1;

      /*Buixa*/
      IF gst IS NOT NULL AND gst.COUNT > 0
      THEN
         /* BUG 0038192 - FAL - 18/11/2015*/
         FOR vgst IN gst.FIRST .. gst.LAST
         LOOP
            IF gst.EXISTS (vgst)
            THEN
               IF     gst (vgst).cmodcom = pcmodcom
                  /*bug  28504#c158882 -- 0028504: LCOL_C001-LCOL: Revisi?n error comisi?n especial p?liza*/
                  AND gst (vgst).ninialt = NVL (pninialt, gst (vgst).ninialt)
                  AND gst (vgst).nfinalt = NVL (pnfinalt, gst (vgst).nfinalt)
               THEN
                  npos := vgst;
               END IF;
            END IF;
         END LOOP;
      END IF;

      IF npos = -1
      THEN
         gst.EXTEND;
         gst (gst.LAST) := ob_iax_gstcomision ();
         npos := gst.LAST;
      END IF;

      vpasexec := 7;
      gst (npos).pcomisi := pcomisi;
      gst (npos).cmodcom := pcmodcom;

      /* Bug 21629 - FAL - 18/04/2012*/
      BEGIN
         /* Bug 29284/160732 - 09/12/2013 - AMC*/
         SELECT MAX (c.finivig)
           INTO vfinivig
           FROM comisionprod c, agentes a, productos p
          WHERE c.ccomisi = a.ccomisi
            AND a.cagente =
                   NVL (poliza.det_poliza.cagente,
                        pac_md_common.f_get_cxtagente
                       )
            AND p.cramo = c.cramo
            AND p.cmodali = c.cmodali
            AND p.ctipseg = c.ctipseg
            AND p.ccolect = c.ccolect
            AND p.sproduc = poliza.det_poliza.sproduc;

         SELECT DISTINCT c.ninialt, c.nfinalt
                    INTO v_ninialt, v_nfinalt
                    FROM comisionprod c
                   WHERE c.cramo = poliza.det_poliza.cramo
                     AND c.cmodali = poliza.det_poliza.cmodali
                     AND c.ctipseg = poliza.det_poliza.ctipseg
                     AND c.ccolect = poliza.det_poliza.ccolect
                     AND c.cmodcom = pcmodcom
                     AND c.finivig = vfinivig;
      /*
      AND c.finivig = (SELECT finivig
      FROM comisionvig
      WHERE ccomisi = c.ccomisi
      AND cestado = 2
      AND TRUNC(f_sysdate) BETWEEN finivig
      AND NVL(ffinvig,
      TRUNC(f_sysdate)));*/
      /* Fi Bug 29284/160732 - 09/12/2013 - AMC*/
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            p_tab_error
               (f_sysdate,
                f_user,
                'f_grabagestioncomision',
                666,
                   '1 - f_pcomisi. xcramo-xcmodali-xctipseg-xccolect-pcmodcom-xccomisi-xnanuali-pfecha: '
                || poliza.det_poliza.cramo
                || '-'
                || poliza.det_poliza.cmodali
                || '-'
                || poliza.det_poliza.ctipseg
                || '-'
                || poliza.det_poliza.ccolect
                || '-'
                || pcmodcom,
                NULL
               );
            RETURN 100933;
         /* Comissi¿ inexistent*/
         WHEN OTHERS
         THEN
            p_tab_error (f_sysdate,
                         f_user,
                         'f_grabagestioncomision',
                         666,
                         'when others',
                         NULL
                        );
            p_tab_error
               (f_sysdate,
                f_user,
                'f_grabagestioncomision',
                666,
                   'when others. xcramo-xcmodali-xctipseg-xccolect-pcmodcom-xccomisi-xnanuali-pfecha: '
                || poliza.det_poliza.cramo
                || '-'
                || poliza.det_poliza.cmodali
                || '-'
                || poliza.det_poliza.ctipseg
                || '-'
                || poliza.det_poliza.ccolect
                || '-'
                || pcmodcom
                || '-'
                || SQLERRM,
                NULL
               );
      /*  RETURN 103216;*/
      END;

      gst (npos).ninialt := NVL (pninialt, v_ninialt);
      gst (npos).nfinalt := NVL (pnfinalt, v_nfinalt);
      /* Fi Bug 21629*/
      poliza.det_poliza.gstcomision := gst;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabagestioncomision;

   /*************************************************************************
   Recupera la informacion de las preguntas de garantia
   param in nriesgo   : numero de riesgo
   param in cgarant   : codigo de garantia
   param out mensajes : mensajes de error
   return             : objeto preguntas
   *************************************************************************/
   FUNCTION f_get_preggarant (
      nriesgo    IN       NUMBER,
      cgarant    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_preguntas
   IS
      preg       t_iax_preguntas;
      rie        ob_iax_riesgos;
      gar        ob_iax_garantias;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_Get_PregGarant';
      /* Bug 9109 - 12/02/2009 - RSC - APR - Preguntas semiautomaticas*/
      v_nerr     NUMBER;
      vcgarant   NUMBER;
   /* Fin Bug 9109*/
   BEGIN
      vcgarant := cgarant;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001105);
         vpasexec := 5;
         RAISE e_object_error;
      END IF;

      vpasexec := 6;
      gar := pac_iobj_prod.f_partriesgarantia (rie, cgarant, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 7;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 8;

      IF gar IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001106);
         vpasexec := 9;
         RAISE e_object_error;
      END IF;

      /* Bug 9109 - 12/02/2009 - RSC - APR - Preguntas semiautomaticas*/
      /*BUG 24657-XVM-30/11/2012*/
      v_nerr :=
         pac_md_produccion.p_set_garanpregunprod (gar.preguntas,
                                                  vcgarant,
                                                  NVL (vnmovimi, 1),
                                                  mensajes
                                                 );

      IF v_nerr = 0 OR v_nerr = -1
      THEN
         vpasexec := 10;
         v_nerr :=
            pac_md_produccion.f_grabar_semiautomatriesgo (gar.nmovimi,
                                                          gar.finiefe,
                                                          poliza,
                                                          gar.preguntas,
                                                          mensajes,
                                                          nriesgo,
                                                          vcgarant
                                                         );

         IF v_nerr <> 0
         THEN
            vpasexec := 11;
            RAISE e_object_error;
         END IF;
      ELSIF v_nerr = 1
      THEN
         vpasexec := 12;
         RAISE e_object_error;
      END IF;

      /* Fin Bug 9109*/
      vpasexec := 13;
      preg := gar.preguntas;

      IF preg IS NULL
      THEN
         preg := t_iax_preguntas ();
      END IF;

      RETURN preg;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_preggarant;

   /*************************************************************************
   Grabar informacion de las preguntas a nivel de garantia
   param in nriesgo   : numero de riesgo
   param in cgarant   : codigo de garantia
   param in cpregun   : Codigo de la pregunta
   param in crespue   : codigo de la respuesta
   param in trespue   : texto de la respuesta
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabapreguntasgarantia (
      nriesgo    IN       NUMBER,
      cgarant    IN       NUMBER,
      cpregun    IN       NUMBER,
      crespue    IN       FLOAT,
      trespue    IN       VARCHAR2,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      preg             t_iax_preguntas            := t_iax_preguntas ();
      rie              ob_iax_riesgos;
      gar              ob_iax_garantias;
      npos             NUMBER;
      nerr             NUMBER;
      vpasexec         NUMBER (8)                 := 1;
      vparam           VARCHAR2 (1)               := NULL;
      vobject          VARCHAR2 (200)
                             := 'PAC_IAX_PRODUCCION.F_GrabaPreguntasGarantia';
      /*ACC 1312008*/
      vefectsuple      DATE                       := NULL;
      nerrfefec        NUMBER;
      dtpoliza         ob_iax_detpoliza;
      /*9099*/
      verror           NUMBER;
      /*9099*/
      /*ACC 1312008*/
      v_nriesgo        estgaranseg.nriesgo%TYPE;
      v_cgarant        estgaranseg.cgarant%TYPE;
      v_nmovima        estgaranseg.nmovima%TYPE;
      v_cont_est_gar   NUMBER;
      v_cont_gar       NUMBER;
      v_nmovimi_real   NUMBER;

      /* comproba que el codigo de pregunta no exista*/
      /* devuelve la posicion del indice o bien -1 sino existe*/
      FUNCTION existpreg (cpregun IN NUMBER)
         RETURN NUMBER
      IS
      BEGIN
         IF preg IS NULL
         THEN
            RETURN -1;
         END IF;

         IF preg.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vprg IN preg.FIRST .. preg.LAST
         LOOP
            IF preg.EXISTS (vprg)
            THEN
               IF preg (vprg).cpregun = cpregun
               THEN
                  RETURN vprg;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existpreg;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /*ACC 1312008 si es suplement ha de controlar data efcte*/
      IF issuplem
      THEN
         nerrfefec :=
            pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                   vnmovimi,
                                                   vefectsuple,
                                                   mensajes
                                                  );

         IF (nerrfefec <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001109);
            RAISE e_object_error;
         END IF;
      END IF;

      /*ACC 1312008*/
      /*Bug 9099*/
      /* BUG 9916 02/07/2009: ETM : antes-->poliza.det_poliza.cactivi, ahora le pasamos el de gestion.*/
      verror :=
         pac_iax_validaciones.f_validapregungaran
                                      (poliza.det_poliza.sproduc,
                                       poliza.det_poliza.gestion.cactivi,
                                       cgarant,
                                       poliza.det_poliza.nmovimi,
                                       cpregun,
                                       crespue,
                                       trespue,
                                       poliza.det_poliza.sseguro,
                                       nriesgo,
                                       /* Mas parametros*/
                                       /* BUG 15137 - 16/02/2011 - JMP - Pasar correctamente la fecha de efecto*/
                                       NVL (vefectsuple,
                                            poliza.det_poliza.gestion.fefecto
                                           ),
                                       /* FIN BUG 15137 - 16/02/2011 - JMP*/
                                       rie.nmovima,
                                       'EST',
                                       -- Mas parametros
                                       mensajes
                                      );

      IF verror <> 0
      THEN
         RAISE e_object_error;
      END IF;

      /*Fin Bug 9099*/
      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      gar := pac_iobj_prod.f_partriesgarantia (rie, cgarant, mensajes);

      IF gar IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001108);
         vpasexec := 5;
         RAISE e_object_error;
      END IF;

      vpasexec := 6;
      preg := gar.preguntas;

      IF preg IS NULL
      THEN
         preg := t_iax_preguntas ();
      END IF;

      vpasexec := 7;
      npos := existpreg (cpregun);
      vpasexec := 8;

      IF npos = -1
      THEN
         vpasexec := 9;
         preg.EXTEND;
         preg (preg.LAST) := ob_iax_preguntas ();
         preg (preg.LAST).cpregun := cpregun;
         preg (preg.LAST).crespue := crespue;
         preg (preg.LAST).nmovimi := vnmovimi;

         IF issuplem
         THEN
            v_nriesgo := nriesgo;
            v_cgarant := cgarant;
            v_cont_est_gar :=
               pac_md_suplementos.f_get_existe_garantia
                                                  (poliza.det_poliza.sseguro,
                                                   v_nriesgo,
                                                   v_cgarant,
                                                   vnmovimi,
                                                   'EST',
                                                   mensajes
                                                  );

            SELECT DISTINCT nmovimi
                       INTO v_nmovimi_real
                       FROM garanseg
                      WHERE sseguro = poliza.det_poliza.ssegpol
                        AND ffinefe IS NULL;

            v_cont_gar :=
               pac_md_suplementos.f_get_existe_garantia
                                                   (poliza.det_poliza.ssegpol,
                                                    v_nriesgo,
                                                    v_cgarant,
                                                    v_nmovimi_real,
                                                    'POL',
                                                    mensajes
                                                   );

            IF v_cont_est_gar > 0 AND v_cont_gar > 0
            THEN
               v_nmovima :=
                  pac_md_suplementos.f_get_nmovima_garantia
                                                  (poliza.det_poliza.sseguro,
                                                   v_nriesgo,
                                                   v_cgarant,
                                                   vnmovimi,
                                                   'EST',
                                                   mensajes
                                                  );
            END IF;

            preg (preg.LAST).nmovima := NVL (v_nmovima, vnmovimi);
         ELSE
            preg (preg.LAST).nmovima := vnmovimi;
         END IF;

         preg (preg.LAST).nmovima := vnmovimi;
         preg (preg.LAST).trespue := trespue;
         preg (preg.LAST).finiefe :=
                          NVL (vefectsuple, poliza.det_poliza.gestion.fefecto);
      /*ACC 1312008 si es suplement ha de controlar data efcte --//ACC*/
      ELSIF npos > -1
      THEN
         vpasexec := 10;
         preg (npos).crespue := crespue;
         preg (npos).trespue := trespue;

         IF issuplem
         THEN
            v_nriesgo := nriesgo;
            v_cgarant := cgarant;
            v_cont_est_gar :=
               pac_md_suplementos.f_get_existe_garantia
                                                  (poliza.det_poliza.sseguro,
                                                   v_nriesgo,
                                                   v_cgarant,
                                                   vnmovimi,
                                                   'EST',
                                                   mensajes
                                                  );

            SELECT DISTINCT nmovimi
                       INTO v_nmovimi_real
                       FROM garanseg
                      WHERE sseguro = poliza.det_poliza.ssegpol
                        AND ffinefe IS NULL;

            v_cont_gar :=
               pac_md_suplementos.f_get_existe_garantia
                                                   (poliza.det_poliza.ssegpol,
                                                    v_nriesgo,
                                                    v_cgarant,
                                                    v_nmovimi_real,
                                                    'POL',
                                                    mensajes
                                                   );

            IF v_cont_est_gar > 0 AND v_cont_gar > 0
            THEN
               v_nmovima :=
                  pac_md_suplementos.f_get_nmovima_garantia
                                                  (poliza.det_poliza.sseguro,
                                                   v_nriesgo,
                                                   v_cgarant,
                                                   vnmovimi,
                                                   'EST',
                                                   mensajes
                                                  );
            END IF;

            preg (npos).nmovima := NVL (v_nmovima, vnmovimi);
         END IF;
      END IF;

      vpasexec := 11;
      nerr :=
         pac_iobj_prod.f_set_partgarpreguntas (poliza.det_poliza,
                                               nriesgo,
                                               cgarant,
                                               preg,
                                               mensajes
                                              );

      IF nerr = 1
      THEN
         vpasexec := 12;
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001110);
         vpasexec := 2;
         RAISE e_object_error;
      END IF;

      /* BUG24655:DRA:03/12/2012:Inici*/
      nerr :=
         pac_md_grabardatos.f_inicializa (vpmode, vsolicit, vnmovimi,
                                          mensajes);

      IF nerr <> 0
      THEN
         RAISE e_object_error;
      END IF;

      nerr :=
         pac_md_grabardatos.f_grabarpreguntasgarantia (preg,
                                                       nriesgo,
                                                       cgarant,
                                                       mensajes
                                                      );

      IF nerr <> 0
      THEN
         RAISE e_object_error;
      END IF;

      COMMIT;
      /* BUG24655:DRA:03/12/2012:Fi*/
      RETURN nerr;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabapreguntasgarantia;

   /*************************************************************************
   Recupera las primas a nivel de poliza
   param out mensajes : mensajes de error
   return             : objeto de primas
   *************************************************************************/
   FUNCTION f_get_primaspoliza (mensajes OUT t_iax_mensajes)
      RETURN ob_iax_primas
   IS
      ries       t_iax_riesgos;
      pri        ob_iax_primas  := ob_iax_primas ();
      rpri       ob_iax_primas;
      tpri       t_iax_primas;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_PrimasPoliza';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      tpri := poliza.det_poliza.f_get_primas (vsolicit, vnmovimi, vpmode);

      IF tpri IS NOT NULL
      THEN
         IF tpri.COUNT > 0
         THEN
            pri := tpri (tpri.LAST);
         END IF;
      END IF;

      /*        vpasexec:=2;*/
      /*        ries :=PAC_IOBJ_PROD.F_Partpolriesgos(poliza.det_poliza,mensajes);*/
      /*        IF ries is null THEN*/
      /*            IF isNewSol=false THEN*/
      /*                PAC_IOBJ_MENSAJES.Crea_Nuevo_Mensaje(mensajes,1,9001040);*/
      /*                vpasexec:=3;*/
      /*                RAISE e_object_error;*/
      /*            ELSE*/
      /*                RETURN NULL;*/
      /*            END IF;*/
      /*        ELSE*/
      /*            IF ries.count=0 THEN*/
      /*                IF isNewSol=false THEN*/
      /*                    PAC_IOBJ_MENSAJES.Crea_Nuevo_Mensaje(mensajes,1,9001040);*/
      /*                    vpasexec:=4;*/
      /*                    RAISE e_object_error;*/
      /*                ELSE*/
      /*                    RETURN NULL;*/
      /*                END IF;*/
      /*            END IF;*/
      /*        END IF;*/
      /**/
      /*        IF mensajes is not null THEN*/
      /*            IF mensajes.count > 0 THEN*/
      /*                vpasexec := 5;*/
      /*                RAISE e_object_error;*/
      /*            END IF;*/
      /*        END IF;*/
      /**/
      /*        vpasexec:=6;*/
      /*        FOR vrie IN ries.FIRST..ries.LAST LOOP*/
      /*            vpasexec:=7;*/
      /*            IF ries.exists(vrie) THEN*/
      /*                vpasexec:=8;*/
      /*                rpri:= ries(vrie).F_Get_Primas(vsolicit,vnmovimi,vpmode);*/
      /*                vpasexec:=9;*/
      /*                pri.needTarifar := rpri.needTarifar;*/
      /*                pri.primaseguro := nvl(pri.primaseguro,0) + nvl(rpri.primaseguro,0);*/
      /*                pri.impuestos   := nvl(pri.impuestos,0) + nvl(rpri.impuestos,0);*/
      /*                pri.recargos    := nvl(pri.recargos,0) + nvl(rpri.recargos,0);*/
      /*                pri.primatotal  := nvl(pri.primatotal,0) + nvl(rpri.primatotal,0);*/
      /*                pri.primarecibo := nvl(pri.primarecibo,0) + nvl(rpri.primarecibo,0);*/
      /*                pri.iextrap     := nvl(pri.iextrap,0) + nvl(rpri.iextrap,0);*/
      /*                pri.iprianu     := nvl(pri.iprianu,0) + nvl(rpri.iprianu,0);*/
      /*                pri.ipritar     := nvl(pri.ipritar,0) + nvl(rpri.ipritar,0);*/
      /*                pri.ipritot     := nvl(pri.ipritot,0) + nvl(rpri.ipritot,0);*/
      /*                pri.irecarg     := nvl(pri.irecarg,0) + nvl(rpri.irecarg,0);*/
      /*                pri.itarifa     := nvl(pri.itarifa,0) + nvl(rpri.itarifa,0);*/
      /*                pri.ICONSOR        := nvl(pri.ICONSOR,0) + nvl(rpri.ICONSOR,0);*/
      /*                pri.IRECCON        := nvl(pri.IRECCON,0) + nvl(rpri.IRECCON,0);*/
      /*                pri.IIPS        := nvl(pri.IIPS,0) + nvl(rpri.IIPS,0);*/
      /*                pri.IDGS        := nvl(pri.IDGS,0) + nvl(rpri.IDGS,0);*/
      /*                pri.IARBITR        := nvl(pri.IARBITR,0) + nvl(rpri.IARBITR,0);*/
      /*                pri.IFNG        := nvl(pri.IFNG,0) + nvl(rpri.IFNG,0);*/
      /*                pri.IRECFRA        := nvl(pri.IRECFRA,0) + nvl(rpri.IRECFRA,0);*/
      /*                pri.ITOTPRI        := nvl(pri.ITOTPRI,0) + nvl(rpri.ITOTPRI,0);*/
      /*                pri.ITOTDTO        := nvl(pri.ITOTDTO,0) + nvl(rpri.ITOTDTO,0);*/
      /*                pri.ITOTCON        := nvl(pri.ITOTCON,0) + nvl(rpri.ITOTCON,0);*/
      /*                pri.ITOTIMP     := nvl(pri.ITOTIMP,0) + nvl(rpri.ITOTIMP,0);*/
      /*                pri.ITOTALR     := nvl(pri.ITOTALR,0) + nvl(rpri.ITOTALR,0);*/
      /*                vpasexec:=10;*/
      /*                vpasexec:= PAC_IOBJ_PROD.F_Set_Partriesgo(poliza.det_poliza,ries(vrie).nriesgo,ries(vrie),mensajes);*/
      /*            END IF;*/
      /*        END LOOP;*/
      RETURN pri;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_primaspoliza;

   /*************************************************************************
   Antes de emitir la propuesta debe pasar por una serie de controles para saber
   la propuesta debe quedar retenida o no. Dicha funcion realiza dichos controles,
   dejando la poliza retenida si corresponde.
   param out mensajes  : mensajes de error
   return              : 0/1 -> Ok/Error
   *************************************************************************/
   FUNCTION f_control_emision (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      vnumerr      NUMBER (8)     := 0;
      vcreteni     NUMBER (8);
      vpasexec     NUMBER (8)     := 1;
      vparam       VARCHAR2 (500)
         := 'parametros - vsolicit: ' || vsolicit || ' - vnmovimi: '
            || vnmovimi;
      vobject      VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Control_Emision';
      existmot     NUMBER;
      vparampsu    NUMBER;
      vsproduc     NUMBER;
      vparamnota   NUMBER;
   BEGIN
      /*Solucion temporal. Se debe corregir, se prepara para el arranque de AGM. Motivo de retencion datos incompletos. XPL#20043*/
      SELECT COUNT (1)
        INTO existmot
        FROM estmotretencion
       WHERE sseguro = vsolicit AND nmovimi = vnmovimi AND cmotret IN (1, 20);

      /* BUG21469:DRA:28/02/2012*/
      /* Bug 19684 - XPL - 17/11/2011 - 19684: LCOL - P.S.U. Adaptacion a Nuevo Modulo PSU*/
      SELECT sproduc
        INTO vsproduc
        FROM estseguros
       WHERE sseguro = vsolicit;

      vparampsu := pac_parametros.f_parproducto_n (vsproduc, 'PSU');
      vparamnota :=
                 pac_parametros.f_parproducto_n (vsproduc, 'NOTA_INFORMATIVA');

      /* BUG7701:10-02-2009:dra: Si ya esta retenida no se vuelve a hacer el control*/
      IF    NOT ismodifprop
         OR (    ismodifprop
             AND (   existmot > 0
                  OR NVL (vparampsu, 0) = 1
                  OR NVL (vparamnota, 0) = 1
                 )
            )
      THEN
         vnumerr :=
            pac_md_produccion.f_control_emision (vsolicit,
                                                 vnmovimi,
                                                 vcreteni,
                                                 mensajes
                                                );

         IF NVL (vcreteni, 0) <> 0
         THEN
            poliza.det_poliza.creteni := vcreteni;
         ELSE
            /* BUG9107:DRA:20-02-2009:Aixi esborrara el motiu si es refa la retencio*/
            poliza.det_poliza.creteni := NULL;
         END IF;
      END IF;

      RETURN vnumerr;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_control_emision;

   /*************************************************************************
   Borra los registros de las tablas est
   *************************************************************************/
   PROCEDURE limpiartemporales
   IS
      nerr      NUMBER;
      msj       t_iax_mensajes;
      vobuser   ob_iax_users;
   BEGIN
      /*Cas especial de ser suplement i nomes en aquest cas*/
      IF issuplem
      THEN
         pac_iax_suplementos.limpiartemporales;
         poliza := NULL;
         issuplem := FALSE;
         issimul := FALSE;
         isneedtom := TRUE;
         issave := FALSE;
         vsolicit := NULL;
         poliza := NULL;
         vpmode := NULL;
         vcaseid := NULL;
         /* Bug 11735 - RSC - 19/01/2010 - APR - suplemento de modificacion de capital /prima*/
         /* Bug 11735 - RSC - 22/03/2010 - APR - suplemento de modificacion de capital /prima (a¿adimos isbajagar)*/
         isaltagar := FALSE;
         imodifgar := FALSE;
         isbajagar := FALSE;
         /* Fin Bug 11735*/
         RETURN;
      END IF;

      /*Cas especial per simulacions per continuar emeten poliza*/
      IF issimul OR pac_iax_simulaciones.contracsimul
      THEN
         IF pac_iax_simulaciones.contracsimul
         THEN
            nerr := pac_iax_simulaciones.f_grabarsimulacion_sinvalidar (msj);
            COMMIT;
            RETURN;
         ELSIF issave = FALSE
         THEN
            poliza := pac_iax_simulaciones.simulacion;

            IF poliza IS NOT NULL
            THEN
               issimul := TRUE;
               isneedtom := FALSE;
               pac_iax_simulaciones.simulacion := NULL;
               pac_iax_simulaciones.contracsimul := FALSE;
               poliza.det_poliza.csituac := -1;
               nerr :=
                  pac_md_produccion.f_borra_datos_prod_simul (vsolicit,
                                                              vnmovimi,
                                                              msj
                                                             );
               nerr := f_grabarobjetodb (msj);
               nerr := pac_md_produccion.f_get_personsimul (vsolicit, msj);
               issimul := FALSE;
               isneedtom := TRUE;
               issave := FALSE;
               poliza := NULL;
               vsolicit := NULL;
               poliza := NULL;
               vpmode := NULL;
               vcaseid := NULL;
               COMMIT;
               RETURN;
            END IF;

            pac_iax_simulaciones.simulacion := NULL;
            pac_iax_simulaciones.isconsultsimul := FALSE;
            pac_iax_simulaciones.contracsimul := FALSE;
         ELSE
            pac_iax_simulaciones.simulacion := NULL;
            pac_iax_simulaciones.contracsimul := FALSE;
            issimul := FALSE;
            isneedtom := TRUE;
            issave := FALSE;
            vsolicit := NULL;
            poliza := NULL;
            vpmode := NULL;
            vcaseid := NULL;
         END IF;
      END IF;

      /*Cas especial de ser modificacio proposta i nomes en aquest cas*/
      IF ismodifprop
      THEN
         pac_iax_gestionpropuesta.limpiartemporales (vsolicit);
         poliza := NULL;
         vsseguro := NULL;
         issuplem := FALSE;
         issimul := FALSE;
         isneedtom := TRUE;
         issave := FALSE;
         ismodifprop := FALSE;
         vpmode := NULL;
         /* BUG23902:JMC:22/10/2012*/
         vcaseid := NULL;
         RETURN;
      END IF;

      IF issave
      THEN
         RETURN;
      END IF;

      IF NVL (vpmode, ' ') = 'EST'
      THEN
         pac_md_produccion.borrar_tablas_est (vsolicit, msj);
         poliza := NULL;
         issuplem := FALSE;
         issimul := FALSE;
         isneedtom := TRUE;
         issave := FALSE;
         vsolicit := NULL;
         poliza := NULL;
         vpmode := NULL;
         vcaseid := NULL;
         COMMIT;
      END IF;

      /*pac_iax_login.p_iax_iniconnect(f_user);*/
      vobuser := pac_md_user.f_get_datuser (f_user, msj);

      IF vobuser IS NULL
      THEN
         RAISE e_object_error;
      END IF;

      pac_md_common.p_set_cxtagente (vobuser.cagente);
      pac_md_common.p_set_cxtagenteprod (vobuser.cagente);
   END limpiartemporales;

   /*JRH 03/2008*/
   /*************************************************************************
   Lee los datos del riesgo (rentas irregulares)
   param out mensajes : mensajes de error
   return             : objeto preguntas
   *************************************************************************/
   FUNCTION f_leerentasirregulares (
      nriesgo    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_rentairr
   IS
      irr        t_iax_rentairr;
      rie        ob_iax_riesgos;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200)
                              := 'PAC_IAX_PRODUCCION.F_LeeRentasIrregulares ';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 3;
      irr := pac_iobj_prod.f_partrentirreg (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN irr;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leerentasirregulares;

   /*JRH 03/2008*/
   /*JRH 03/2008*/
   /*************************************************************************
   Grabar informacion de un registro de renta irregular
   param in nriesgo   : numero de riesgo
   param in anyo    : a¿o
   iy los importes de cada mes
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   /*************************************************************************
   Grabar informacion de un registro de renta irregular
   param in nriesgo   : numero de riesgo
   param in anyo    : a¿o
   iy los importes de cada mes
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabarrentairregular (
      nriesgo    IN       NUMBER,
      anyo       IN       NUMBER,
      pmes1      IN       NUMBER,
      pmes2      IN       NUMBER,
      pmes3      IN       NUMBER,
      pmes4      IN       NUMBER,
      pmes5      IN       NUMBER,
      pmes6      IN       NUMBER,
      pmes7      IN       NUMBER,
      pmes8      IN       NUMBER,
      pmes9      IN       NUMBER,
      pmes10     IN       NUMBER,
      pmes11     IN       NUMBER,
      pmes12     IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      rirr       t_iax_rentairr;
      tgr        ob_iax_rentairr;
      rie        ob_iax_riesgos;
      npos       NUMBER;
      nerr       NUMBER;
      vmensaje   VARCHAR2 (1000);
      tgarant    VARCHAR2 (1000);
      desmsj     VARCHAR2 (1000);
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_GrabarRentaIrreg';

      /* comproba que el a¿o de la renta irreg. no existe*/
      /* devuelve la posicion del indice o bien -1 sino existe*/
      FUNCTION existirreg (panyo IN NUMBER)
         RETURN NUMBER
      IS
      BEGIN
         IF rirr IS NULL
         THEN
            RETURN -1;
         END IF;

         IF rirr.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vgar IN rirr.FIRST .. rirr.LAST
         LOOP
            IF rirr.EXISTS (vgar)
            THEN
               IF rirr (vgar).anyo = panyo
               THEN
                  RETURN vgar;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existirreg;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      rirr := pac_iobj_prod.f_partrentirreg (rie, mensajes);

      IF rirr IS NULL
      THEN
         rirr := t_iax_rentairr ();
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;
      /* elimina una garantia previament seleccionada*/
      npos := existirreg (anyo);

      /* inserta una nova garantia*/
      IF npos = -1
      THEN
         vpasexec := 7;
         rirr.EXTEND;
         npos := rirr.LAST;
         rirr (npos) := ob_iax_rentairr ();
         rirr (npos).nriesgo := nriesgo;
         rirr (npos).nmovimi := vnmovimi;
         rirr (npos).anyo := anyo;

         IF pmes1 IS NOT NULL
         THEN
            IF LAST_DAY (TO_DATE ('01/' || '01/' || anyo, 'DD/MM/YYYY')) <
                                            poliza.det_poliza.gestion.fefecto
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101203);
               vpasexec := 12;
               RAISE e_object_error;
            END IF;

            IF poliza.det_poliza.gestion.fvencim IS NOT NULL
            THEN
               IF (TO_DATE ('01/' || '01/' || anyo, 'DD/MM/YYYY')) >
                                            poliza.det_poliza.gestion.fvencim
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101729);
                  vpasexec := 14;
                  RAISE e_object_error;
               END IF;
            END IF;

            rirr (npos).mes1 := pmes1;
         END IF;

         IF pmes2 IS NOT NULL
         THEN
            IF LAST_DAY (TO_DATE ('01/' || '02/' || anyo, 'DD/MM/YYYY')) <
                                            poliza.det_poliza.gestion.fefecto
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101203);
               vpasexec := 12;
               RAISE e_object_error;
            END IF;

            IF poliza.det_poliza.gestion.fvencim IS NOT NULL
            THEN
               IF (TO_DATE ('01/' || '02/' || anyo, 'DD/MM/YYYY')) >
                                            poliza.det_poliza.gestion.fvencim
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101729);
                  vpasexec := 14;
                  RAISE e_object_error;
               END IF;
            END IF;

            rirr (npos).mes2 := pmes2;
         END IF;

         IF pmes3 IS NOT NULL
         THEN
            IF LAST_DAY (TO_DATE ('01/' || '03/' || anyo, 'DD/MM/YYYY')) <
                                            poliza.det_poliza.gestion.fefecto
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101203);
               vpasexec := 12;
               RAISE e_object_error;
            END IF;

            IF poliza.det_poliza.gestion.fvencim IS NOT NULL
            THEN
               IF (TO_DATE ('01/' || '03/' || anyo, 'DD/MM/YYYY')) >
                                            poliza.det_poliza.gestion.fvencim
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101729);
                  vpasexec := 14;
                  RAISE e_object_error;
               END IF;
            END IF;

            rirr (npos).mes3 := pmes3;
         END IF;

         IF pmes4 IS NOT NULL
         THEN
            IF LAST_DAY (TO_DATE ('01/' || '04/' || anyo, 'DD/MM/YYYY')) <
                                            poliza.det_poliza.gestion.fefecto
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101203);
               vpasexec := 12;
               RAISE e_object_error;
            END IF;

            IF poliza.det_poliza.gestion.fvencim IS NOT NULL
            THEN
               IF (TO_DATE ('01/' || '04/' || anyo, 'DD/MM/YYYY')) >
                                            poliza.det_poliza.gestion.fvencim
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101729);
                  vpasexec := 14;
                  RAISE e_object_error;
               END IF;
            END IF;

            rirr (npos).mes4 := pmes4;
         END IF;

         IF pmes5 IS NOT NULL
         THEN
            IF LAST_DAY (TO_DATE ('01/' || '05/' || anyo, 'DD/MM/YYYY')) <
                                            poliza.det_poliza.gestion.fefecto
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101203);
               vpasexec := 12;
               RAISE e_object_error;
            END IF;

            IF poliza.det_poliza.gestion.fvencim IS NOT NULL
            THEN
               IF (TO_DATE ('01/' || '05/' || anyo, 'DD/MM/YYYY')) >
                                            poliza.det_poliza.gestion.fvencim
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101729);
                  vpasexec := 14;
                  RAISE e_object_error;
               END IF;
            END IF;

            rirr (npos).mes5 := pmes5;
         END IF;

         IF pmes6 IS NOT NULL
         THEN
            IF LAST_DAY (TO_DATE ('01/' || '06/' || anyo, 'DD/MM/YYYY')) <
                                            poliza.det_poliza.gestion.fefecto
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101203);
               vpasexec := 12;
               RAISE e_object_error;
            END IF;

            IF poliza.det_poliza.gestion.fvencim IS NOT NULL
            THEN
               IF (TO_DATE ('01/' || '06/' || anyo, 'DD/MM/YYYY')) >
                                            poliza.det_poliza.gestion.fvencim
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101729);
                  vpasexec := 14;
                  RAISE e_object_error;
               END IF;
            END IF;

            rirr (npos).mes6 := pmes6;
         END IF;

         IF pmes7 IS NOT NULL
         THEN
            IF LAST_DAY (TO_DATE ('01/' || '07/' || anyo, 'DD/MM/YYYY')) <
                                            poliza.det_poliza.gestion.fefecto
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101203);
               vpasexec := 12;
               RAISE e_object_error;
            END IF;

            IF poliza.det_poliza.gestion.fvencim IS NOT NULL
            THEN
               IF (TO_DATE ('01/' || '07/' || anyo, 'DD/MM/YYYY')) >
                                            poliza.det_poliza.gestion.fvencim
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101729);
                  vpasexec := 14;
                  RAISE e_object_error;
               END IF;
            END IF;

            rirr (npos).mes7 := pmes7;
         END IF;

         IF pmes8 IS NOT NULL
         THEN
            IF LAST_DAY (TO_DATE ('01/' || '08/' || anyo, 'DD/MM/YYYY')) <
                                            poliza.det_poliza.gestion.fefecto
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101203);
               vpasexec := 12;
               RAISE e_object_error;
            END IF;

            IF poliza.det_poliza.gestion.fvencim IS NOT NULL
            THEN
               IF (TO_DATE ('01/' || '08/' || anyo, 'DD/MM/YYYY')) >
                                            poliza.det_poliza.gestion.fvencim
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101729);
                  vpasexec := 14;
                  RAISE e_object_error;
               END IF;
            END IF;

            rirr (npos).mes8 := pmes8;
         END IF;

         IF pmes9 IS NOT NULL
         THEN
            IF LAST_DAY (TO_DATE ('01/' || '09/' || anyo, 'DD/MM/YYYY')) <
                                            poliza.det_poliza.gestion.fefecto
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101203);
               vpasexec := 12;
               RAISE e_object_error;
            END IF;

            IF poliza.det_poliza.gestion.fvencim IS NOT NULL
            THEN
               IF (TO_DATE ('01/' || '09/' || anyo, 'DD/MM/YYYY')) >
                                            poliza.det_poliza.gestion.fvencim
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101729);
                  vpasexec := 14;
                  RAISE e_object_error;
               END IF;
            END IF;

            rirr (npos).mes9 := pmes9;
         END IF;

         IF pmes10 IS NOT NULL
         THEN
            IF LAST_DAY (TO_DATE ('01/' || '10/' || anyo, 'DD/MM/YYYY')) <
                                            poliza.det_poliza.gestion.fefecto
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101203);
               vpasexec := 12;
               RAISE e_object_error;
            END IF;

            IF poliza.det_poliza.gestion.fvencim IS NOT NULL
            THEN
               IF (TO_DATE ('01/' || '10/' || anyo, 'DD/MM/YYYY')) >
                                            poliza.det_poliza.gestion.fvencim
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101729);
                  vpasexec := 14;
                  RAISE e_object_error;
               END IF;
            END IF;

            rirr (npos).mes10 := pmes10;
         END IF;

         IF pmes11 IS NOT NULL
         THEN
            IF LAST_DAY (TO_DATE ('01/' || '11/' || anyo, 'DD/MM/YYYY')) <
                                            poliza.det_poliza.gestion.fefecto
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101203);
               vpasexec := 12;
               RAISE e_object_error;
            END IF;

            IF poliza.det_poliza.gestion.fvencim IS NOT NULL
            THEN
               IF (TO_DATE ('01/' || '11/' || anyo, 'DD/MM/YYYY')) >
                                            poliza.det_poliza.gestion.fvencim
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101729);
                  vpasexec := 14;
                  RAISE e_object_error;
               END IF;
            END IF;

            rirr (npos).mes11 := pmes11;
         END IF;

         IF pmes12 IS NOT NULL
         THEN
            IF LAST_DAY (TO_DATE ('01/' || '12/' || anyo, 'DD/MM/YYYY')) <
                                            poliza.det_poliza.gestion.fefecto
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101203);
               vpasexec := 12;
               RAISE e_object_error;
            END IF;

            IF poliza.det_poliza.gestion.fvencim IS NOT NULL
            THEN
               IF (TO_DATE ('01/' || '12/' || anyo, 'DD/MM/YYYY')) >
                                            poliza.det_poliza.gestion.fvencim
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 101729);
                  vpasexec := 14;
                  RAISE e_object_error;
               END IF;
            END IF;

            rirr (npos).mes12 := pmes12;
         END IF;
      ELSE
         /*Si ya existe el a¿o es un error y avisamos al usuario*/
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001111);
         vpasexec := 20;
         RAISE e_object_error;
      END IF;

      vpasexec := 8;
      nerr :=
         pac_iobj_prod.f_set_partriesrentirreg (poliza.det_poliza,
                                                nriesgo,
                                                rirr,
                                                mensajes
                                               );

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001112);
         vpasexec := 20;
         RAISE e_object_error;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabarrentairregular;

   /*JRH 03/2008*/
   /*JRH 03/2008*/
   /*************************************************************************
   Incializa a null las rentas irregulares de un riesgo
   param out mensajes : mensajes de error
   return             : objeto preguntas
   *************************************************************************/
   FUNCTION f_inicrentasirregulares (
      nriesgo    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      irr        t_iax_rentairr;
      rie        ob_iax_riesgos;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200)
                              := 'PAC_IAX_PRODUCCION.F_LeeRentasIrregulares ';
      numerr     NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 3;
      numerr :=
         pac_iobj_prod.f_set_partriesrentirreg (poliza.det_poliza,
                                                nriesgo,
                                                NULL,
                                                mensajes
                                               );

      IF numerr <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001113);
         vpasexec := 20;
         RAISE e_object_error;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_inicrentasirregulares;

/************************************************************************
FI EMISIO
************************************************************************/
/************************************************************************
INICI CONSULTA
************************************************************************/
/* BUG 9017 - 01/04/2009 - SBG - S'afegeix parametre p_filtroprod*/
/*************************************************************************
Devuelve las polizas que cumplan con el criterio de seleccion
param in psproduc     : codigo de producto
param in pnpoliza     : numero de poliza
param in pncert       : numero de cerificado por defecto 0
param in pnnumide     : numero identidad persona
param in psnip        : numero identificador externo
param in pbuscar      : nombre+apellidos a buscar de la persona
param in ptipopersona : tipo de persona
1 tomador
2 asegurado
param in p_filtroprod : Tipo de productos requeridos:
'TF'         ---> Contratables des de Front-Office
'REEMB'      ---> Productos de salud
'APOR_EXTRA' ---> Con aportaciones extra
'SIMUL'      ---> Que puedan tener simulacion
'RESCA'      ---> Que puedan tener rescates
'SINIS'      ---> Que puedan tener siniestros
null         ---> Todos los productos
param in pcmodo       : modo. Vale 1 para pignoraciones
param out mensajes    : mensajes de error
return                : ref cursor
*************************************************************************/
/* xpl 13-05-2009: bug mantis 0010093, se a¿ade el cramo*/
   FUNCTION f_consultapoliza (
      pramo              IN       NUMBER,
      psproduc           IN       NUMBER,
      pnpoliza           IN       NUMBER,
      pncert             IN       NUMBER DEFAULT -1,
      pnnumide           IN       VARCHAR2,
      psnip              IN       VARCHAR2,
      pbuscar            IN       VARCHAR2,
      pnsolici           IN       NUMBER,
      /*bug15468 05/08/2010 VCL A¿adir camp numero solicitud*/
      ptipopersona       IN       NUMBER,
      pcagente           IN       NUMBER,
      /*BUG 11313 - JTS - 29/10/2009*/
      pcmatric           IN       VARCHAR2,
      /*BUG19605:LCF:19/02/2010*/
      pcpostal           IN       VARCHAR2,
      /*BUG19605:LCF:19/02/2010*/
      ptdomici           IN       VARCHAR2,
      /*BUG19605:LCF:19/02/2010*/
      ptnatrie           IN       VARCHAR2,
      /*BUG19605:LCF:19/02/2010*/
      pcsituac           IN       NUMBER,
      /*BUG19605:LCF:19/02/2010*/
      p_filtroprod       IN       VARCHAR2,
      pcpolcia           IN       VARCHAR2,
      /* BUG 14585 - PFA - Anadir campo poliza compania*/
      pccompani          IN       NUMBER,
      /* BUG 17160 - JBN - Anadir campo compani*/
      pcactivi           IN       NUMBER,
      /* BUG18024:DRA:14/04/2011*/
      pcestsupl          IN       NUMBER,
      /* BUG18024:DRA:14/04/2011*/
      pnpolrelacionada   IN       NUMBER,
      pnpolini           IN       VARCHAR2,
      /*BUG19715:XPL:06/12/2011*/
      mensajes           OUT      t_iax_mensajes,
      pfilage            IN       NUMBER,
      /* BUG 16730: JMC : 27/04/2011*/
      pcsucursal         IN       NUMBER DEFAULT NULL,
      /* Bug 22839/126886 - 29/10/2012 - AMC*/
      pcadm              IN       NUMBER DEFAULT NULL,
      /* Bug 22839/126886 - 29/10/2012 - AMC*/
      pcmotor            IN       VARCHAR2 DEFAULT NULL,
      /* Bug 25177/133016 - 07/01/2013 - AMC*/
      pcchasis           IN       VARCHAR2 DEFAULT NULL,
      /* Bug 25177/133016 - 07/01/2013 - AMC*/
      pnbastid           IN       VARCHAR2 DEFAULT NULL,
      /* Bug 25177/133016 - 07/01/2013 - AMC*/
      pcmodo             IN       NUMBER DEFAULT NULL,
      /* Bug 27766 10/12/2013*/
      pncontrato         IN       VARCHAR2 DEFAULT NULL,        -- AP CONF-219
      pfemiini           IN       DATE DEFAULT NULL,
      -- CJMR 22/03/2019 IAXIS-3195
      pfemifin           IN       DATE DEFAULT NULL,
      -- CJMR 22/03/2019 IAXIS-3195
      pfefeini           IN       DATE DEFAULT NULL,
      -- CJMR 22/03/2019 IAXIS-3195
      pfefefin           IN       DATE DEFAULT NULL,
      -- CJMR 22/03/2019 IAXIS-3195
      pcusuari           IN       VARCHAR2 DEFAULT NULL,
      -- CJMR 22/03/2019 IAXIS-3195
      pnnumidease        IN       VARCHAR2 DEFAULT NULL,
      -- CJMR 22/03/2019 IAXIS-3195
      pbuscarase         IN       VARCHAR2
            DEFAULT NULL                         -- CJMR 22/03/2019 IAXIS-3195
   )
      RETURN sys_refcursor
   IS
      /**/
      cur        sys_refcursor;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (500)
         :=    'psproduc='
            || psproduc
            || ' pnpoliza: '
            || pnpoliza
            || ' pncert='
            || pncert
            || ' pnnumide='
            || pnnumide
            || ' psnip='
            || psnip
            || ' pbuscar='
            || pbuscar
            || ' ptipopersona='
            || ptipopersona
            || ' pnsolici='
            || pnsolici
            || ' p_filtroprod='
            || p_filtroprod
            || ' pcpolcia='
            || pcpolcia
            || ' pccompani= '
            || pccompani
            || ' pcactivi='
            || pcactivi
            || ' pcestsupl='
            || pcestsupl
            || ' pnpolrelacionada='
            || pnpolrelacionada
            || ',pnpolini = '
            || pnpolini;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_ConsultaPoliza';
   BEGIN
      /* Bug 11702 - 02/11/2009 - AMC*/
      cur :=
         pac_md_produccion.f_consultapoliza
                                   (pramo,
                                    psproduc,
                                    pnpoliza,
                                    pncert,
                                    pnnumide,
                                    psnip,
                                    pbuscar,
                                    pnsolici,
                                    ptipopersona,
                                    pcagente,
                                    pcmatric,
                                    pcpostal,
                                    ptdomici,
                                    ptnatrie,
                                    pcsituac,
                                    p_filtroprod,
                                    pcpolcia,
                                    pccompani,
                                    pcactivi,
                                    pcestsupl,
                                    pnpolrelacionada,
                                    pnpolini,
                                    mensajes,
                                    pfilage,
                                    /* BUG 16730: JMC : 27/04/2011*/
                                    pcsucursal,
                                    pcadm,
                                    /* Bug 22839/126886 - 29/10/2012 - AMC*/
                                    pcmotor,
                                    pcchasis,
                                    pnbastid,
                                    /* Bug 25177/133016 - 07/01/2013 - AMC*/
                                    pcmodo,
                                    /* Bug 17766 10/12/2013*/
                                    pncontrato,
                                    -- AP CONF-219
                                    pfemiini,
                                    pfemifin,    -- CJMR 22/03/2019 IAXIS-3195
                                    pfefeini,
                                    pfefefin,    -- CJMR 22/03/2019 IAXIS-3195
                                    pcusuari,
                                    pnnumidease, -- CJMR 22/03/2019 IAXIS-3195
                                    pbuscarase
                                   );            -- CJMR 22/03/2019 IAXIS-3195
      /* Fi Bug 11702 - 02/11/2009 - AMC*/
      /* FINAL BUG 9017 - 01/04/2009 - SBG*/
      RETURN cur;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
   END f_consultapoliza;

   /*************************************************************************
   Llena el objeto poliza con la informacion
   param in sseguro   : numero de seguro
   param out mensajes : mensajes de error
   param in pmode     : indica el mode com entra
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_set_consultapoliza (
      sseguro    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes,
      pmode      IN       VARCHAR2 DEFAULT 'POL'
   )
      RETURN NUMBER
   IS
      idtprd      pac_iax_common.prodidentified;
      nerror      NUMBER;
      vvnmovimi   NUMBER;
      vpasexec    NUMBER (8)                    := 1;
      vparam      VARCHAR2 (500)                := 'sseguro=' || sseguro;
      vobject     VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Set_ConsultaPoliza';
   BEGIN
      issave := TRUE;
      poliza := NULL;
      poliza := ob_iax_poliza ();
      vparam := 'SSEGURO ' || sseguro;
      /*// Asigna variables globales*/
      define_mode (pmode, mensajes);
      vsolicit := sseguro;

      IF NVL (vsolicit, 0) = 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001114);
         vpasexec := 2;
         RAISE e_param_error;
      END IF;

      /*ACC 131208 indica que estem consulta la polissa*/
      isconsult := TRUE;
      nerror :=
         pac_md_produccion.f_set_consultapoliza (vsolicit,
                                                 pmode,
                                                 vvnmovimi,
                                                 vproducto,
                                                 vagente,
                                                 vempresa,
                                                 vfefecto,
                                                 vfvencim,
                                                 mensajes
                                                );

      /* BUG9107:DRA:19-02-2009*/
      IF issuplem = FALSE AND ismodifprop = FALSE
      THEN
         /*cas especial per controlar el moviment del suplem*/
         vnmovimi := vvnmovimi;
      END IF;

      IF nerror > 0
      THEN
         RAISE e_object_error;
      END IF;

      IF vproducto <> 0
      THEN
         nerror :=
            pac_mdpar_productos.f_get_identprod (vproducto,
                                                 vcramo,
                                                 vmodalidad,
                                                 vctipseg,
                                                 vccolect,
                                                 mensajes
                                                );
      ELSE
         IF     NVL (vcramo, -1) <> -1
            AND NVL (vmodalidad, -1) <> -1
            AND NVL (vctipseg, -1) <> -1
         THEN
            vproducto :=
               pac_mdpar_productos.f_get_sproduc (vcramo,
                                                  vmodalidad,
                                                  vctipseg,
                                                  vccolect,
                                                  mensajes
                                                 );
         ELSE
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000817);
         END IF;
      END IF;

      IF NVL (vmodalidad, -1) = -1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000818);
      END IF;

      IF NVL (vempresa, -1) = -1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000819);
      END IF;

      IF NVL (gidioma, -1) = -1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000820);
      END IF;

      IF NVL (vagente, -1) = -1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000821);
      END IF;

      IF vfefecto IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000822);
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            RAISE e_param_error;
         END IF;
      END IF;

      nerror :=
         pac_iaxpar_productos.f_inicializa (vproducto,
                                            vmodalidad,
                                            vempresa,
                                            gidioma,
                                            vccolect,
                                            vcramo,
                                            vctipseg,
                                            mensajes
                                           );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 25;
            RAISE e_object_error;
         END IF;
      END IF;

      llenadatosobjetos (mensajes);
      /*ACC 13122008*/
      /*recarrega la parametritzacio del producte*/
      pac_md_produccion.inicializaobjetosproduct (poliza.det_poliza, mensajes);
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_consultapoliza;

   /***********************************************************************
   Recupera datos genericos la poliza
   param in psseguro  : codigo de seguro
   param in pmode     : indica si es el EST POL
   param out mensajes : mensajes de error
   return             : OB_IAX_GENPOLIZA objeto con datos de consulta de la poliza
   NULL si error;
   ***********************************************************************/
   FUNCTION f_get_datpoliza (
      psseguro   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes,
      pmode      IN       VARCHAR2 DEFAULT NULL
   )
      RETURN ob_iax_genpoliza
   IS
      vnumerr        NUMBER (8)       := 0;
      vobgenpoliza   ob_iax_genpoliza;
      vseguro        NUMBER;
      vmode          VARCHAR2 (5);
      vobjdb         NUMBER           := 0;
      /* Indica que la informacio s'ha de recuperar desde 1 objet 0 desde DB*/
      vpasexec       NUMBER (8)       := 1;
      vparam         VARCHAR2 (500)  := 'parametros - psseguro: ' || psseguro;
      vobject        VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_Get_DatPoliza';
   BEGIN
      IF NVL (psseguro, -1) = -1
      THEN
         vseguro := vsolicit;
         vobjdb := 1;
      ELSE
         vseguro := psseguro;
      END IF;

      /*Comprovacio de parametres d'entrada*/
      IF vseguro IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vmode := NVL (pmode, 'POL');
      /*        IF vmode IS NULL THEN*/
      /*            IF isSimul OR isSuplem THEN*/
      /*                vmode := 'EST';*/
      /*                vseguro := vssegpol;*/
      /*            ELSE*/
      /*                vmode := 'POL';*/
      /*            END IF;*/
      /*        END IF;*/
      vnumerr :=
             pac_md_obtenerdatos.f_inicializa (vmode, vseguro, NULL, mensajes);

      IF vnumerr <> 0
      THEN
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      IF vobjdb = 1
      THEN
         vobgenpoliza :=
            pac_md_obtenerdatos.f_leedatosgenpoliza (poliza.det_poliza,
                                                     mensajes
                                                    );
      ELSE
         vobgenpoliza :=
                     pac_md_obtenerdatos.f_leedatosgenpoliza (NULL, mensajes);
      END IF;

      IF vobgenpoliza IS NULL
      THEN
         vpasexec := 5;
         RAISE e_object_error;
      END IF;

      RETURN vobgenpoliza;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_datpoliza;

   /***********************************************************************
   Recupera los recibos de la poliza
   param out mensajes : mensajes de error
   return             : objeto detalle de la poliza
   ***********************************************************************/
   FUNCTION f_get_recibos (mensajes OUT t_iax_mensajes)
      RETURN t_iax_detrecibo
   IS
      rebuts     t_iax_detrecibo := t_iax_detrecibo ();
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_Get_Recibos';
   BEGIN
      rebuts := pac_md_produccion.f_get_recibos (vsolicit, mensajes);
      RETURN rebuts;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_recibos;

   /***********************************************************************
   Recupera los movimientos de la poliza
   param out mensajes : mensajes de error
   return             : ref cursor
   ***********************************************************************/
   FUNCTION f_get_mvtpoliza (mensajes OUT t_iax_mensajes)
      RETURN sys_refcursor
   IS
      cur        sys_refcursor;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_MvtPoliza';
   BEGIN
      cur := pac_md_produccion.f_get_mvtpoliza (vsolicit, mensajes);
      RETURN cur;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
   END f_get_mvtpoliza;

   /***********************************************************************
   Recupera los documentos asociados a un determinado movimiento de la poliza
   param in psseguro   : numero del seguro
   param in pnmovimi   : numero del movimiento
   param out mensajes  : mensajes de error
   return              : ref cursor
   ***********************************************************************/
   FUNCTION f_get_docmvtpoliza (
      psseguro   IN       NUMBER,
      pnmovimi   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN sys_refcursor
   IS
      cur        sys_refcursor;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (500)
         := 'parametros - psseguro: ' || psseguro || ' - pnmovimi: '
            || pnmovimi;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_DocMvtPoliza';
   BEGIN
      /*Comprovacio dels parametres d'entrada*/
      IF psseguro IS NULL OR pnmovimi IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      cur :=
           pac_md_produccion.f_get_docmvtpoliza (psseguro, pnmovimi, mensajes);
      RETURN cur;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
   END f_get_docmvtpoliza;

   /***********************************************************************
   Cobro de un recibo
   param in pctipcob  : tipo cobro VF 552
   param in pnrecibo  : numero de recibo
   param in pcbancar  : cuenta bancaria
   param in pctipban  : tipo cuenta bancaria
   param out mensajes : mensajes de error
   return             : O todo correcto
   1 ha habido un error
   ***********************************************************************/
   FUNCTION f_set_cobrorec (
      psseguro   IN       NUMBER,
      pnmovimi   IN       NUMBER,
      pctipcob   IN       NUMBER,
      pctipban   IN       NUMBER,
      pcbancar   IN       VARCHAR2,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vnumerr    NUMBER;
      vparam     VARCHAR2 (500)
         :=    'psseguro '
            || psseguro
            || ' pnmovimi '
            || pnmovimi
            || ' pctipcob '
            || pctipcob
            || ' pcbancar '
            || pcbancar
            || ' pctipban '
            || pctipban;
      vpasexec   NUMBER (8);
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_Set_CobroRec';
      vterror    VARCHAR2 (2000);
      vtmsg      VARCHAR2 (100);
      vnpoliza   NUMBER;
      vsinterf   NUMBER;
      vsproduc   NUMBER (6);
   BEGIN
      /*Comprovacio de parametres d'entrada*/
      IF psseguro IS NULL OR pnmovimi IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      vnumerr :=
         pac_md_produccion.f_emitirpropuesta (psseguro,
                                              pnmovimi,
                                              vnpoliza,
                                              mensajes
                                             );

      /* BUG9640:DRA:22/04/2009*/
      IF vnumerr = 0
      THEN
         vpasexec := 6;
         vnumerr :=
            pac_md_produccion.f_set_cobrorec (psseguro,
                                              pnmovimi,
                                              pctipcob,
                                              pctipban,
                                              pcbancar,
                                              vterror,
                                              mensajes
                                             );

         IF vnumerr <> 0
         THEN
            ROLLBACK;
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                  1,
                                                  151295,
                                                  vterror
                                                 );
            RETURN 1;
         END IF;
      END IF;

      IF vnumerr = 0
      THEN
         /*Emissio correcta de la polissa.*/
         vpasexec := 9;
         COMMIT;
         /* BUG19863:DRA:21/10/2011: Se pasa el parametro a productos*/
         vnumerr := pac_seguros.f_get_sproduc (psseguro, 'POL', vsproduc);

         IF vnumerr <> 0
         THEN
            ROLLBACK;
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                  1,
                                                  151295,
                                                  vterror
                                                 );
            RETURN 1;
         END IF;

         /*Enviem l'alta a HOST.*/
         IF NVL (pac_parametros.f_parproducto_n (vsproduc,
                                                 'INT_SINCRON_POLIZA'
                                                ),
                 0
                ) = 1
         THEN
            vnumerr :=
               pac_md_con.f_proceso_alta (pac_md_common.f_get_cxtempresa,
                                          /* empresa*/
                                          psseguro,
                                          /*seguro*/
                                          pnmovimi,

                                          /* nmovimi*/
                                          'A',
                                          -- A (alta ) 'M' (suplemento)
                                          f_user,
                                          /* fuser*/
                                          vsinterf,
                                          /* ni caso*/
                                          vterror
                                         /* ni caso*/
                                         );
         END IF;
      END IF;

      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_cobrorec;

   /*************************************************************************
   Recupera el riesgo indicado para la consulta
   param in nriesgo   : numero de riesgo
   param out mensajes : mensajes de error
   return             : objeto riesgo
   *************************************************************************/
   FUNCTION f_get_riesgoconsulta (
      nriesgo    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN ob_iax_riesgos
   IS
      rie          ob_iax_riesgos;
      gars         t_iax_garantias  := t_iax_garantias ();
      pregs        t_iax_preguntas  := t_iax_preguntas ();
      preg         ob_iax_preguntas;
      gar          ob_iax_garantias;
      vpasexec     NUMBER (8)       := 1;
      vparam       VARCHAR2 (1)     := NULL;
      vobject      VARCHAR2 (200)
                                 := 'PAC_IAX_PRODUCCION.F_Get_RiesgoConsulta';
      tippre       NUMBER;
      trespue      VARCHAR2 (2000);
      /* BUG12760:DRA:03/02/2010:Inici*/
      v_cpretip    NUMBER (2);
      v_cvisible   NUMBER (1);
      v_num_err    NUMBER;
   /* BUG12760:DRA:03/02/2010:Fi*/
    --INI SPV IAXIS-4201
      bonfs t_iax_bonfranseg:= t_iax_bonfranseg();
      bonf  ob_iax_bonfranseg;
      v_tnivel bf_desnivel.tnivel%TYPE;
      v_cnivel bf_detnivel.cnivel%TYPE;
     --FIN SPV IAXIS-4201
   BEGIN
      vpasexec := 2;
      rie := f_get_riesgo (nriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      v_num_err :=
         pac_iax_produccion.f_get_dtorec_riesgo (vpmode,
                                                 vsolicit,
                                                 nriesgo,
                                                 rie.primas.pdtocom,
                                                 rie.primas.precarg,
                                                 rie.primas.pdtotec,
                                                 rie.primas.preccom,
                                                 mensajes
                                                );

      IF v_num_err <> 0
      THEN
         p_tab_error (f_sysdate,
                      f_user,
                      'OB_IAX_RIESGOS.p_calc_primas',
                      1,
                      SQLCODE,
                      SQLERRM
                     );
      END IF;

      vpasexec := 3;
      /* BUG 0020671 - 03/01/2012 - JMF*/
      v_cpretip := NULL;
      v_cvisible := NULL;

      IF rie.garantias IS NOT NULL
      THEN
         IF rie.garantias.COUNT > 0
         THEN
            vpasexec := 4;

            FOR vgar IN rie.garantias.FIRST .. rie.garantias.LAST
            LOOP
               IF rie.garantias.EXISTS (vgar)
               THEN
                  vpasexec := 5;

                  IF rie.garantias (vgar).cobliga = 1
                  THEN
                     vpasexec := 6;
                     gar := rie.garantias (vgar);
                     vpasexec := 7;
                     gar.p_calc_primas (vsolicit, vnmovimi, vpmode, nriesgo);
                     vpasexec := 8;
                     gar.tgarant :=
                        pac_iaxpar_productos.f_get_descgarant (gar.cgarant,
                                                               mensajes
                                                              );
                     vpasexec := 9;
                     gar.trevali :=
                        pac_iax_listvalores.f_getdescripvalores (62,
                                                                 gar.crevali,
                                                                 mensajes
                                                                );
                     vpasexec := 10;

                     IF gar.preguntas IS NOT NULL
                     THEN
                        IF gar.preguntas.COUNT > 0
                        THEN
                           vpasexec := 11;
                           pregs := t_iax_preguntas ();

                           /*BUG 9883 - 29/04/2009 - JTS*/
                           FOR vprg IN
                              gar.preguntas.FIRST .. gar.preguntas.LAST
                           LOOP
                              vpasexec := 12;

                              IF gar.preguntas.EXISTS (vprg)
                              THEN
                                 vpasexec := 13;
                                 v_cpretip :=
                                    pac_iaxpar_productos.f_get_pregunautomatica
                                                (gar.preguntas (vprg).cpregun,
                                                 'GAR',
                                                 f_get_actividad (mensajes),
                                                 gar.cgarant,
                                                 mensajes
                                                );
                                 /* ini BUG 0020671 - 03/01/2012 - JMF*/
                                 v_num_err :=
                                    pac_iaxpar_productos.f_get_pregunprogaranvisible
                                                 (poliza.det_poliza.sproduc,
                                                  gar.preguntas (vprg).cpregun,
                                                  f_get_actividad (mensajes),
                                                  gar.cgarant,
                                                  v_cvisible,
                                                  mensajes
                                                 );

                                 IF v_num_err <> 0
                                 THEN
                                    RAISE e_object_error;
                                 END IF;

                                 IF    (v_cpretip <> 2)
                                    OR (    v_cpretip = 2
                                        AND NVL (v_cvisible, 0) IN (1, 2)
                                       )
                                 THEN
                                    /* fin BUG 0020671 - 03/01/2012 - JMF*/
                                    vpasexec := 14;
                                    preg := gar.preguntas (vprg);
                                    vpasexec := 15;
                                    preg.tpregun :=
                                       pac_iaxpar_productos.f_get_descpregun
                                                               (preg.cpregun,
                                                                mensajes
                                                               );
                                    vpasexec := 16;
                                    tippre :=
                                       pac_iaxpar_productos.f_get_pregtippre
                                                                (preg.cpregun,
                                                                 mensajes
                                                                );
                                    vpasexec := 17;

                                    IF tippre IN (1, 2, 6)
                                    THEN
                                       /* 0010470.01/07/2009.NMM.CEM - ESCUT - Afegim tippre = 6.*/
                                       vpasexec := 18;
                                       /* Bug 0012227 - 18/12/2009 - JMF: Afegir sproduc*/
                                       trespue :=
                                          pac_iaxpar_productos.f_get_pregunrespue
                                                  (poliza.det_poliza.sproduc,
                                                   preg.cpregun,
                                                   preg.crespue,
                                                   mensajes
                                                  );
                                       vpasexec := 19;

                                       IF NVL (trespue, '###') <> '###'
                                       THEN
                                          vpasexec := 20;
                                          preg.trespue := trespue;
                                          preg.crespue := NULL;
                                       ELSE
                                          preg.trespue := NULL;
                                       END IF;
                                    END IF;

                                    /* BUG 6296 - 16/03/2009 - SBG - Informem nou camp ctipgru*/
                                    vpasexec := 21;
                                    preg.ctipgru :=
                                       pac_iaxpar_productos.f_get_pregtipgru
                                                                (preg.cpregun,
                                                                 mensajes
                                                                );
                                    vpasexec := 22;
                                    pregs.EXTEND;
                                    pregs (pregs.LAST) := preg;
                                 END IF;
                              END IF;
                           END LOOP;

                           vpasexec := 23;
                           gar.preguntas := pregs;
                        END IF;
                     END IF;

                     vpasexec := 24;
                     gars.EXTEND;
                     gars (gars.LAST) := gar;
                  END IF;
               END IF;
            END LOOP;

            vpasexec := 25;
            rie.garantias := gars;
         END IF;
      END IF;

      vpasexec := 26;
      pregs := t_iax_preguntas ();
      preg := NULL;
      /* BUG 0020671 - 03/01/2012 - JMF*/
      v_cpretip := NULL;
      v_cvisible := NULL;

      IF rie.preguntas IS NOT NULL
      THEN
         IF rie.preguntas.COUNT > 0
         THEN
            vpasexec := 27;

            FOR vprg IN rie.preguntas.FIRST .. rie.preguntas.LAST
            LOOP
               IF rie.preguntas.EXISTS (vprg)
               THEN
                  vpasexec := 28;
                  /* BUG12760:DRA:03/02/2010:Inici*/
                  v_cpretip :=
                     pac_iaxpar_productos.f_get_pregunautomatica
                                                (rie.preguntas (vprg).cpregun,
                                                 'RIE',
                                                 f_get_actividad (mensajes),
                                                 NULL,
                                                 mensajes
                                                );
                  vpasexec := 281;
                  v_num_err :=
                     pac_iaxpar_productos.f_get_pregvisible
                                           (poliza.det_poliza.sproduc,
                                            rie.preguntas (vprg).cpregun,
                                            poliza.det_poliza.gestion.cactivi,
                                            v_cvisible,
                                            mensajes
                                           );

                  /* BUG 0036730 - FAL - 09/12/2015*/
                  IF v_num_err <> 0
                  THEN
                     RAISE e_object_error;
                  END IF;

                  vpasexec := 282;

                  IF    v_cpretip <> 2
                     OR (v_cpretip = 2 AND NVL (v_cvisible, 0) IN (1, 2))
                  THEN
                     /* BUG12760:DRA:03/02/2010:Fi*/
                     vpasexec := 29;
                     preg := rie.preguntas (vprg);
                     vpasexec := 30;
                     preg.tpregun :=
                        pac_iaxpar_productos.f_get_descpregun (preg.cpregun,
                                                               mensajes
                                                              );
                     vpasexec := 31;
                     tippre :=
                        pac_iaxpar_productos.f_get_pregtippre (preg.cpregun,
                                                               mensajes
                                                              );

                     IF tippre IN (1, 2, 6)
                     THEN
                        /* 0010470.01/07/2009.NMM.CEM - ESCUT - Afegim tippre = 6.*/
                        vpasexec := 32;
                        /* Bug 0012227 - 18/12/2009 - JMF: Afegir sproduc*/
                        trespue :=
                           pac_iaxpar_productos.f_get_pregunrespue
                                                  (poliza.det_poliza.sproduc,
                                                   preg.cpregun,
                                                   preg.crespue,
                                                   mensajes
                                                  );

                        IF NVL (trespue, '###') <> '###'
                        THEN
                           vpasexec := 33;
                           preg.trespue := trespue;
                           preg.crespue := NULL;
                        ELSE
                           preg.trespue := NULL;
                        END IF;
                     END IF;

                     /* BUG 6296 - 16/03/2009 - SBG - Informem nou camp ctipgru*/
                     vpasexec := 34;
                     preg.ctipgru :=
                        pac_iaxpar_productos.f_get_pregtipgru (preg.cpregun,
                                                               mensajes
                                                              );
                     vpasexec := 35;
                     pregs.EXTEND;
                     pregs (pregs.LAST) := preg;
                  END IF;
               END IF;
            END LOOP;

            vpasexec := 36;
            rie.preguntas := pregs;
         END IF;
      END IF;

      vpasexec := 37;

      IF rie.beneficiario IS NOT NULL
      THEN
         IF rie.beneficiario.ctipo = 2
         THEN
            vpasexec := 38;
            rie.beneficiario.tclaben :=
               pac_iaxpar_productos.f_get_descclausulaben
                                                   (rie.beneficiario.sclaben,
                                                    mensajes
                                                   );
         END IF;
      END IF;
      -- INI SPV IAXIS-4201
      vpasexec := 39;
      --
      IF rie.bonfranseg IS NOT NULL THEN
        --
        vpasexec := 40;
        IF rie.bonfranseg.count > 0 THEN
          --
          vpasexec := 41;
          FOR vbon IN rie.bonfranseg.first .. rie.bonfranseg.last LOOP
            --
            vpasexec := 42;
            IF rie.bonfranseg.exists(vbon) THEN
              --
              vpasexec := 43;
              --
              bonf := rie.bonfranseg(vbon);
              --
              vpasexec := 44;
              --
              BEGIN
               --
               SELECT  cnivel
                INTO v_cnivel
                FROM  estbf_bonfranseg
               WHERE sseguro = poliza.det_poliza.sseguro
                AND cgrup = bonf.cgrup;
                --
                SELECT tnivel
                 INTO v_tnivel
                FROM bf_desnivel
                WHERE CIDIOMA = pac_md_common.f_get_cxtidioma
                  AND cgrup = bonf.cgrup
                  AND cnivel= v_cnivel;
                 --
              EXCEPTION WHEN OTHERS THEN
                --
                v_cnivel := bonf.cnivel;
                v_tnivel := bonf.tnivel;
                --
              END;
              --
              IF v_cnivel <> bonf.cnivel AND 
                 v_tnivel <> bonf.tnivel THEN
                 --
                 bonf.cnivel := v_cnivel;
                 bonf.tnivel := v_tnivel;
                 --
              END IF;
              --
              bonfs.extend;
              bonfs(bonfs.last) := bonf;
            END IF;
            --
          END LOOP;
          --
          vpasexec := 45;
          rie.bonfranseg := bonfs;     
        END IF;
        --
      END IF;
      -- FIN SPV IAXIS-4201 
      RETURN rie;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_riesgoconsulta;

   /*************************************************************************
   Lee los datos de la poliza (preguntas) para la consulta
   param out mensajes : mensajes de error
   return             : objeto preguntas
   *************************************************************************/
   FUNCTION f_get_pregunpolizaconsulta (mensajes OUT t_iax_mensajes)
      RETURN t_iax_preguntas
   IS
      prg          t_iax_preguntas  := NULL;
      pregs        t_iax_preguntas  := t_iax_preguntas ();
      preg         ob_iax_preguntas;
      vpasexec     NUMBER (8)       := 1;
      vparam       VARCHAR2 (1)     := NULL;
      vobject      VARCHAR2 (200)
                           := 'PAC_IAX_PRODUCCION.F_Get_PregunPolizaConsulta';
      tippre       NUMBER;
      trespue      VARCHAR2 (2000);
      /* BUG12760:DRA:03/02/2010:Inici*/
      v_cpretip    NUMBER (2);
      v_cvisible   NUMBER (1);
      v_num_err    NUMBER;
   /* BUG12760:DRA:03/02/2010:Fi*/
   BEGIN
      prg := f_leepreguntaspoliza (mensajes);

      IF prg IS NOT NULL
      THEN
         IF prg.COUNT > 0
         THEN
            FOR vprg IN prg.FIRST .. prg.LAST
            LOOP
               IF prg.EXISTS (vprg)
               THEN
                  vpasexec := 2;
                  /* BUG12760:DRA:03/02/2010:Inici*/
                  v_cpretip :=
                     pac_iaxpar_productos.f_get_pregunautomatica
                                                          (prg (vprg).cpregun,
                                                           'POL',
                                                           NULL,
                                                           NULL,
                                                           mensajes
                                                          );
                  vpasexec := 21;
                  v_num_err :=
                     pac_iaxpar_productos.f_get_pregvisible
                                           (poliza.det_poliza.sproduc,
                                            prg (vprg).cpregun,
                                            poliza.det_poliza.gestion.cactivi,
                                            v_cvisible,
                                            /* BUG 0036730 - FAL - 09/12/2015*/
                                            mensajes
                                           );

                  IF v_num_err <> 0
                  THEN
                     RAISE e_object_error;
                  END IF;

                  vpasexec := 22;

                  IF    v_cpretip <> 2
                     OR (v_cpretip = 2 AND NVL (v_cvisible, 0) IN (1, 2))
                  THEN
                     /* BUG12760:DRA:03/02/2010:Fi*/
                     vpasexec := 3;
                     preg := prg (vprg);
                     preg.tpregun :=
                        pac_iaxpar_productos.f_get_descpregun (preg.cpregun,
                                                               mensajes
                                                              );
                     vpasexec := 4;
                     tippre :=
                        pac_iaxpar_productos.f_get_pregtippre (preg.cpregun,
                                                               mensajes
                                                              );

                     IF tippre IN (1, 2, 6)
                     THEN
                        /* 0010470.01/07/2009.NMM.CEM - ESCUT - Afegim tippre = 6.*/
                        vpasexec := 5;
                        /* Bug 0012227 - 18/12/2009 - JMF: Afegir sproduc*/
                        trespue :=
                           pac_iaxpar_productos.f_get_pregunrespue
                                                  (poliza.det_poliza.sproduc,
                                                   preg.cpregun,
                                                   preg.crespue,
                                                   mensajes
                                                  );

                        IF NVL (trespue, '###') <> '###'
                        THEN
                           preg.trespue := trespue;
                           preg.crespue := NULL;
                        ELSE
                           preg.trespue := NULL;
                        END IF;
                     END IF;

                     /* BUG 6296 - 16/03/2009 - SBG - Informem nou camp ctipgru*/
                     vpasexec := 6;
                     preg.ctipgru :=
                        pac_iaxpar_productos.f_get_pregtipgru (preg.cpregun,
                                                               mensajes
                                                              );
                     pregs.EXTEND;
                     pregs (pregs.LAST) := preg;
                  END IF;
               END IF;
            END LOOP;

            prg := pregs;
         END IF;
      END IF;

      RETURN prg;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_pregunpolizaconsulta;

   /*************************************************************************
   Recupera las clausulas que el usuario a seleccionado o bien automaticas
   a nivel de producto par la consulta
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_get_clausulasprodconsulta (mensajes OUT t_iax_mensajes)
      RETURN t_iax_clausulas
   IS
      clau       t_iax_clausulas := NULL;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)
                          := 'PAC_IAX_PRODUCCION.F_Get_ClausulasProdConsulta';
   BEGIN
      clau := f_leeclausulasprod (mensajes);

      IF clau IS NOT NULL
      THEN
         IF clau.COUNT > 0
         THEN
            FOR vcl IN clau.FIRST .. clau.LAST
            LOOP
               IF clau.EXISTS (vcl)
               THEN
                  clau (vcl).tclagen :=
                     pac_iaxpar_productos.f_get_descclausula
                                                          (clau (vcl).sclagen,
                                                           mensajes
                                                          );
               END IF;
            END LOOP;
         END IF;
      END IF;

      RETURN clau;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_clausulasprodconsulta;

   /*************************************************************************
   Recuperar informacion de las garantias
   param in pnriesgo  : numero de riesgo
   param in pcgarant  : codigo garantia
   param out mensajes : mensajes de error
   return             : objeto garantias
   *************************************************************************/
   /* Bug 10101 - RSC - 25/06/2009 - Detalle de garantias (Consulta de poliza): A¿adimos pndetgar*/
   FUNCTION f_get_detallegarantia (
      pnriesgo   IN       NUMBER,
      pcgarant   IN       NUMBER,
      pndetgar   IN       NUMBER,
      /* Bug 10101 - RSC - 25/06/2009 - Detalle de garantia (Consulta)*/
      mensajes   OUT      t_iax_mensajes
   )
      RETURN ob_iax_garantias
   IS
      gars       t_iax_garantias;
      rie        ob_iax_riesgos;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_DetalleGarantia';
   BEGIN
      rie := f_get_riesgoconsulta (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      gars := rie.garantias;

      /* Bug 10101 - RSC - 25/06/2009 - Detalle de garantia (Consulta)*/
      IF NVL (f_parproductos_v (poliza.det_poliza.sproduc, 'DETALLE_GARANT'),
              0
             ) IN (1, 2)
      THEN
         IF gars IS NOT NULL
         THEN
            IF gars.COUNT > 0
            THEN
               FOR vgar IN gars.FIRST .. gars.LAST
               LOOP
                  IF gars.EXISTS (vgar)
                  THEN
                     IF     gars (vgar).cgarant = pcgarant
                        AND gars (vgar).masdatos.ndetgar = pndetgar
                     THEN
                        RETURN gars (vgar);
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      ELSE
         /* Fin Bug 10101*/
         IF gars IS NOT NULL
         THEN
            IF gars.COUNT > 0
            THEN
               FOR vgar IN gars.FIRST .. gars.LAST
               LOOP
                  IF gars.EXISTS (vgar)
                  THEN
                     IF gars (vgar).cgarant = pcgarant
                     THEN
                        RETURN gars (vgar);
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      END IF;

      RETURN NULL;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_detallegarantia;

   /* Fin Bug 10101*/
   /*************************************************************************
   Recuperar informacion de mas datos las garantias (detalle de garantias)
   param in pnriesgo  : numero de riesgo
   param in pcgarant  : codigo garantia
   param out mensajes : mensajes de error
   return             : objeto garantias
   *************************************************************************/
   /* Bug 10101 - RSC - 28/07/2009 - Detalle de garantias (Consulta de poliza)*/
   FUNCTION f_get_masdatosdetgarantia (
      pnriesgo   IN       NUMBER,
      pcgarant   IN       NUMBER,
      pndetgar   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN ob_iax_masdatosgar
   IS
      gars       t_iax_garantias;
      rie        ob_iax_riesgos;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_DetalleGarantia';
   BEGIN
      rie := f_get_riesgoconsulta (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      gars := rie.garantias;

      /* Bug 10101 - RSC - 25/06/2009 - Detalle de garantia (Consulta)*/
      IF NVL (f_parproductos_v (poliza.det_poliza.sproduc, 'DETALLE_GARANT'),
              0
             ) IN (1, 2)
      THEN
         IF gars IS NOT NULL
         THEN
            IF gars.COUNT > 0
            THEN
               FOR vgar IN gars.FIRST .. gars.LAST
               LOOP
                  IF gars.EXISTS (vgar)
                  THEN
                     IF     gars (vgar).cgarant = pcgarant
                        AND gars (vgar).masdatos.ndetgar = pndetgar
                     THEN
                        RETURN gars (vgar).masdatos;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      ELSE
         /* Fin Bug 10101*/
         IF gars IS NOT NULL
         THEN
            IF gars.COUNT > 0
            THEN
               FOR vgar IN gars.FIRST .. gars.LAST
               LOOP
                  IF gars.EXISTS (vgar)
                  THEN
                     IF gars (vgar).cgarant = pcgarant
                     THEN
                        RETURN gars (vgar).masdatos;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      END IF;

      RETURN NULL;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_masdatosdetgarantia;

   /* Fin Bug 10101*/
   /*************************************************************************
   Recuperar informacion de el riesgo asegurado
   param in pnriesgo  : numero de riesgo
   param out mensajes : mensajes de error
   return             : objeto garantias
   *************************************************************************/
   FUNCTION f_get_detalleriesgoaseg (
      pnriesgo   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_asegurados
   IS
      aseg       ob_iax_asegurados;
      rie        ob_iax_riesgos;
      vpasexec   NUMBER (8)        := 1;
      vparam     VARCHAR2 (1)      := NULL;
      vobject    VARCHAR2 (200)
                              := 'PAC_IAX_PRODUCCION.F_Get_DetalleRiesgoAseg';
   BEGIN
      rie := f_get_riesgo (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      IF rie.riesgoase IS NULL
      THEN
         RETURN NULL;
      END IF;

      IF rie.riesgoase.COUNT = 0
      THEN
         RETURN NULL;
      END IF;

      RETURN rie.riesgoase;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_detalleriesgoaseg;

/************************************************************************
FI CONSULTA
************************************************************************/
/************************************************************************
RETENCION POLIZAS
************************************************************************/
/*************************************************************************
Llena el objeto retencion polizas con la informacion de las retenidas
param in psproduc  : codigo de producto
param in pnpoliza  : numero de poliza
param in pnsolici  : numero de solicitud        -- BUG5673:dra:11-02-2009
param in pncertif  : numero de certificado
param in pnnumide  : numero de identificacion persona
param in psnip     : identificador externo de persona DEFAULT NULL
param in pnombre   : texto a buscar como tomador
param in pcsituac  : situacion de la poliza
param out mensajes : mensajes de error
return             : 0 todo correcto
1 ha habido un error
*************************************************************************/
   FUNCTION f_get_polizasreten (
      pcagente       IN       NUMBER,
      pcramo         IN       NUMBER,
      psproduc       IN       NUMBER,
      pnpoliza       IN       NUMBER,
      pnsolici       IN       NUMBER,
      pncertif       IN       NUMBER DEFAULT -1,
      pnnumide       IN       VARCHAR2,
      psnip          IN       VARCHAR2 DEFAULT NULL,
      pnombre        IN       VARCHAR2,
      pcsituac       IN       NUMBER,
      pcmatric       IN       VARCHAR2,
      /*BUG19605:LCF:19/02/2010*/
      pcpostal       IN       VARCHAR2,
      /*BUG19605:LCF:19/02/2010*/
      ptdomici       IN       VARCHAR2,
      /*BUG19605:LCF:19/02/2010*/
      ptnatrie       IN       VARCHAR2,
      /*BUG19605:LCF:19/02/2010*/
      p_filtroprod   IN       VARCHAR2,
      mensajes       OUT      t_iax_mensajes,
      pcsucursal     IN       NUMBER DEFAULT NULL,
      /* Bug 22839/126886 - 29/10/2012 - AMC*/
      pcadm          IN       NUMBER DEFAULT NULL,
      /* Bug 22839/126886 - 29/10/2012 - AMC*/
      pcmotor        IN       VARCHAR2 DEFAULT NULL,
      /* Bug 25177/133016 - 28/12/2012 - AMC*/
      pcchasis       IN       VARCHAR2 DEFAULT NULL,
      /* Bug 25177/133016 - 28/12/2012 - AMC*/
      pnbastid       IN       VARCHAR2 DEFAULT NULL,
      /* Bug 25177/133016 - 28/12/2012 - AMC*/
      pcpolcia       IN       VARCHAR2 DEFAULT NULL,
      /* Bug 0029965 - 14/04/2014 - FAL*/
      pfretend       IN       DATE DEFAULT NULL,
      /* Bug 0029965 - 14/04/2014 - FAL*/
      pfretenh       IN       DATE DEFAULT NULL,
      pcactivi       IN       NUMBER DEFAULT NULL,
      -- CJMR 19/03/2019 IAXIS-3194
      pnnumidease    IN       VARCHAR2 DEFAULT NULL,
      -- CJMR 19/03/2019 IAXIS-3194
      pnombrease     IN       VARCHAR2 DEFAULT NULL
   )                                             -- CJMR 19/03/2019 IAXIS-3194
      /* Bug 0029965 - 14/04/2014 - FAL*/
   RETURN t_iax_polizasreten
   IS
      reten      t_iax_polizasreten;
      vpasexec   NUMBER (8)         := 1;
      vparam     VARCHAR2 (500)
         :=    'psproduc= '
            || psproduc
            || ' pnpoliza= '
            || pnpoliza
            || ' pncertif='
            || pncertif
            || ' pnnumide='
            || pnnumide
            || ' psnip='
            || psnip
            || ' pnombre='
            || pnombre
            || ' pcsituac='
            || pcsituac;
      vobject    VARCHAR2 (200)     := 'PAC_IAX_PRODUCCION.F_Get_PolizasReten';
   BEGIN
      vpasexec := 1;
      reten :=
         pac_md_produccion.f_get_polizasreten (pcagente,
                                               pcramo,
                                               psproduc,
                                               pnpoliza,
                                               pnsolici,
                                               pncertif,
                                               pnnumide,
                                               psnip,
                                               pnombre,
                                               pcsituac,
                                               pcmatric,
                                               pcpostal,
                                               ptdomici,
                                               ptnatrie,
                                               p_filtroprod,
                                               mensajes,
                                               pcsucursal,
                                               pcadm,
                                               /* Bug 22839/126886 - 29/10/2012 - AMC*/
                                               pcmotor,
                                               pcchasis,
                                               pnbastid,
                                               /* Bug 25177/133016 - 28/12/2012 - AMC*/
                                               pcpolcia,
                                               pfretend,
                                               pfretenh
                                                       /* Bug 0029965 - 14/04/2014 - FAL*/
         ,
                                               pcactivi,
                                               pnnumidease,
                                               pnombrease
                                              ); -- CJMR 19/03/2019 IAXIS-3194
      RETURN reten;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_polizasreten;

   /*************************************************************************
   Llena el objeto motivos de retencion de polizas con la informacion
   de la poliza seleccionada
   param in psseguro  : codigo de poliza
   param out mensajes : mensajes de error
   return             : objeto motivos retencion poliza
   *************************************************************************/
   FUNCTION f_get_polmvtreten (psseguro IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN t_iax_polmvtreten
   IS
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (500) := 'psseguro= ' || psseguro;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_PolMvtReten';
   BEGIN
      /*Comprovacio dels parametres d'entrada*/
      IF psseguro IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 3;
      RETURN f_get_motretenmov (psseguro, NULL, mensajes);
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_polmvtreten;

   /*************************************************************************
   Llena el objeto el o los motivos de retencion de polizas con la informacion
   de la poliza seleccionada y movimiento. Si el movimiento es informado con un NULO, retorna
   todos los motivos de retencion de la poliza.
   param in psseguro  : codigo de poliza
   param in pnmovimi  : numero del movimiento de la poliza
   param out mensajes : mensajes de error
   return             : objeto motivos retencion poliza
   *************************************************************************/
   FUNCTION f_get_motretenmov (
      psseguro   IN       NUMBER,
      pnmovimi   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_polmvtreten
   IS
      mvtreten   t_iax_polmvtreten;
      num_err    NUMBER;
      vpasexec   NUMBER (8)        := 1;
      vparam     VARCHAR2 (500)
                    := 'psseguro= ' || psseguro || ' - pnmovimi=' || pnmovimi;
      vobject    VARCHAR2 (200)    := 'PAC_IAX_PRODUCCION.F_Get_MotRetenMov ';
   BEGIN
      /*Comprovacio dels parametres d'entrada*/
      IF psseguro IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 3;
      mvtreten :=
            pac_md_produccion.f_get_motretenmov (psseguro, pnmovimi, mensajes);
      RETURN mvtreten;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_motretenmov;

   /*************************************************************************
   Valida si se puede anular una propuesta de poliza retenida
   param in psseguro  : codigo de poliza
   param out mensajes : mensajes de error
   return             : 0 -> No se puede anular la propuesta
   1 -> Si se permite anular la propuesta
   *************************************************************************/
   FUNCTION f_permite_anularpropuesta (
      psseguro   IN       NUMBER,
      pnmovimi   IN       NUMBER,
      /* BUG10464:DRA:16/06/2009*/
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vnumerr    NUMBER (8);
      vcreteni   NUMBER;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (500) := 'psseguro= ' || psseguro;
      vobject    VARCHAR2 (200)
                            := 'PAC_IAX_PRODUCCION.F_Permite_AnularPropuesta';
   BEGIN
      /*Comprovacio de parametres d'entrada*/
      IF psseguro IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 3;
      /*Comprovem l'estat en que es troba la proposta*/
      vnumerr := pac_gestion_retenidas.f_estado_propuesta (psseguro, vcreteni);

      IF vnumerr <> 0
      THEN
         /*Error recuperant el tipus de retencio de la polissa.*/
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, vnumerr);
         RAISE e_object_error;
      END IF;

      vpasexec := 5;

      /*Actuem segons l'estat de la proposta*/
      IF vcreteni = 2
      THEN
         /*Proposta pendent d'autoritzacio => No es pot anul.lar la proposta.*/
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 140598);
         RETURN 0;
      ELSIF vcreteni IN (3, 4)
      THEN
         /*Proposta anulada o rebutjada => No es pot anul.lar la proposta.*/
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 151177);
         RETURN 0;
      ELSIF vcreteni IN (0, 1)
      THEN
         /* Retencio Normal*/
         vpasexec := 7;
         RETURN pac_md_produccion.f_permite_anularpropuesta (psseguro,
                                                             pnmovimi,
                                                             /*BUG10464:DRA:16/06/2009*/
                                                             vcreteni,
                                                             mensajes
                                                            );
      END IF;

      RETURN 1;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 0;
   END f_permite_anularpropuesta;

   /*************************************************************************
   Anula la propuesta de poliza retenida
   param in psseguro  : codigo de poliza
   param in pnsuplem  : Contador del numero de suplementos
   param in pcmotmov  : codigo motivo de movimiento
   param in ptobserva : observaciones
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido errores
   *************************************************************************/
   FUNCTION f_anularpropuesta (
      psseguro    IN       NUMBER,
      pnsuplem    IN       NUMBER,
      pcmotmov    IN       NUMBER,
      ptobserva   IN       VARCHAR2,
      mensajes    OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      nerr       NUMBER (8);
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (500)
         :=    'parametros - psseguro: '
            || psseguro
            || ' - pnsuplem: '
            || pnsuplem
            || ' - pcmotmov: '
            || pcmotmov;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_AnularPropuesta';
   BEGIN
      /*Comprovacio de parametres d'entrada*/
      IF psseguro IS NULL OR pnsuplem IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 3;
      nerr :=
         pac_md_produccion.f_anularpropuesta (psseguro,
                                              pnsuplem,
                                              pcmotmov,
                                              ptobserva,
                                              mensajes
                                             );
      vpasexec := 5;
      RETURN nerr;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_anularpropuesta;

   /*************************************************************************
   Devuelve la fecha de aceptacion de la poliza retenida
   return  : fecha aceptacion
   *************************************************************************/
   FUNCTION f_get_fechaceptar
      RETURN DATE
   IS
   BEGIN
      RETURN LAST_DAY (TRUNC (f_sysdate)) + 1;
   EXCEPTION
      WHEN OTHERS
      THEN
         p_tab_error (f_sysdate,
                      f_user,
                      'PAC_IAX_PRODUCCION.F_Get_FechAceptar',
                      NULL,
                      SQLCODE,
                      SQLERRM
                     );
         RETURN NULL;
   END f_get_fechaceptar;

   /*************************************************************************
   Emitir la propuesta de poliza retenida
   param in  psseguro : codigo de poliza
   param in  pnmovimi : numero de movimiento
   param out onpoliza : numero de polissa assignat a la proposta emessa
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido errores
   *************************************************************************/
   FUNCTION f_emitirpropuesta (
      psseguro   IN       NUMBER,
      pnmovimi   IN       NUMBER,
      onpoliza   OUT      NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      e_trm_error      EXCEPTION;
      e_tasa_error     EXCEPTION;
      vnumerr          NUMBER (8);
      vpasexec         NUMBER (8)                    := 1;
      vparam           VARCHAR2 (1)                  := NULL;
      vobject          VARCHAR2 (200)
                                    := 'PAC_IAX_PRODUCCION.F_EmitirPropuesta';
      vsproduc         NUMBER (6);
      vsinterf         NUMBER;
      verror           VARCHAR2 (2000);
      vaccion          VARCHAR2 (1);
      n_mov            movseguro.nmovimi%TYPE;
      /* BUG 0018910 - 30/08/2011 - JMF: solucion temporal*/
      /* BUG9107:DRA:19-02-2009*/
      vsproces         NUMBER;
      vcont            NUMBER;
      v_fefecto        movseguro.fefecto%TYPE;
      /* Bug 24278 - APD - 03/12/2012*/
      /* BUG 24240 - 14/12/2012 - FPG - LCOL899 - Piloto Vida Grupo - Inicio*/
      v_mensajes_bpm   t_iax_mensajes;
      /* BUG 24240 - 14/12/2012 - FPG - LCOL899 - Piloto Vida Grupo - Final*/
      /*Inici bug 26070 / 139455 JDS 04-03-2013*/
      vnpoliza         NUMBER;
      /*fi bug 26070 / 139455 JDS 04-03-2013*/
      /* BUG 38217/0219708 - FAL - 09/12/2015*/
      v_cmovseg        movseguro.cmovseg%TYPE;
      hay_asegmes      NUMBER;
      vmens            VARCHAR2 (1000);
      /* FI BUG 38217/0219708*/
      v_itasa          eco_tipocambio.itasa%TYPE;
      v_itasa1         eco_tipocambio.itasa%TYPE;
      v_resultado      NUMBER;
      v_margentasa     NUMBER;
      --INI CJMR 13/03/2019
      cur_marcas       sys_refcursor;
      v_sperson        per_agr_marcas.sperson%TYPE;
      v_area           VARCHAR2 (500);
      v_cmarca         per_agr_marcas.cmarca%TYPE;
      v_descripcion    VARCHAR2 (500);
      v_tipo           VARCHAR2 (50);
      v_caacion        agr_marcas.caacion%TYPE;
      v_accion         VARCHAR2 (50);
      v_persona        VARCHAR2 (500);
      v_rol            VARCHAR2 (50);
      v_validamarca    BOOLEAN                       := FALSE;

      --FIN CJMR 13/03/2019
      CURSOR c_psu_retenidas
      IS
      /**TCS_jpaezr_SQL_6**/
         SELECT /*+ USE_HASH(P,R) ORDERED */ DISTINCT TRUNC(e.fautrec) fautrec 
               FROM psucontrolseg e, 
                     psu_retenidas r, 
                     psu_controlpro p 
               WHERE p.ccontrol = e.ccontrol + 0 
                  AND r.sseguro = e.sseguro + 0 
                  AND r.sseguro = psseguro 
                  AND p.ccambio = 1;

   BEGIN
      /*Comprovacio de parametres d'entrada*/
      IF psseguro IS NULL OR pnmovimi IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vnumerr := pac_seguros.f_get_sproduc (psseguro, NULL, vsproduc);

      IF vnumerr <> 0
      THEN
         vpasexec := 5;
         RAISE e_object_error;
      END IF;

      --INI CJMR 13/03/2019
      vpasexec := 11;
      cur_marcas :=
         pac_md_marcas.f_get_marcas_poliza (pac_md_common.f_get_cxtempresa,
                                            psseguro,
                                            'POL',
                                            mensajes
                                           );

      FETCH cur_marcas
       INTO v_sperson, v_area, v_cmarca, v_descripcion, v_tipo, v_caacion,
            v_accion, v_persona, v_rol;

      WHILE cur_marcas%FOUND
      LOOP
         IF v_caacion != 0
         THEN
            v_validamarca := TRUE;
            pac_iobj_mensajes.crea_nuevo_mensaje
                           (mensajes,
                            1,
                            0,
                               f_axis_literales (9909325,
                                                 pac_md_common.f_get_cxtidioma
                                                )
                            || ': '
                            || ' Area:'
                            || v_area
                            || ' Marca:'
                            || v_cmarca
                            || '-'
                            || v_descripcion
                            || ' Tipo:'
                            || v_tipo
                            || ' Acci�n:'
                            || v_accion
                            || ' Persona:'
                            || v_persona
                            || ' Rol:'
                            || v_rol
                           );
         END IF;

         FETCH cur_marcas
          INTO v_sperson, v_area, v_cmarca, v_descripcion, v_tipo, v_caacion,
               v_accion, v_persona, v_rol;
      END LOOP;

      IF (v_validamarca)
      THEN
         RAISE e_object_error;
      END IF;

      --FIN CJMR 13/03/2019
      IF pac_monedas.f_moneda_producto (vsproduc) !=
                              pac_parametros.f_parinstalacion_n ('MONEDAINST')
      THEN
         FOR regpsu IN c_psu_retenidas
         LOOP
            v_itasa :=
               pac_eco_tipocambio.f_cambio
                  (pac_monedas.f_cmoneda_t
                                      (pac_monedas.f_moneda_producto (vsproduc)
                                      ),
                   pac_monedas.f_cmoneda_t
                              (pac_parametros.f_parinstalacion_n ('MONEDAINST')
                              ),
                   F_SYSDATE
                  );

            IF v_itasa IS NULL
            THEN
               RAISE e_tasa_error;
            END IF;

            v_itasa1 :=
               pac_eco_tipocambio.f_cambio
                  (pac_monedas.f_cmoneda_t
                                      (pac_monedas.f_moneda_producto (vsproduc)
                                      ),
                   pac_monedas.f_cmoneda_t
                              (pac_parametros.f_parinstalacion_n ('MONEDAINST')
                              ),
                   regpsu.fautrec
                  );

            IF v_itasa1 < v_itasa
            THEN
               v_resultado := 100 - ((v_itasa1 / v_itasa) * 100);
            ELSE
               v_resultado := 100 - ((v_itasa / v_itasa1) * 100);
            END IF;

            v_margentasa :=
                      pac_parametros.f_parempresa_n (24, 'MARGEN_TASA_CAMBIO');

            IF NVL (v_resultado, 0) > NVL (v_margentasa, 0)
            THEN
               RAISE e_trm_error;
            END IF;
         END LOOP;
      END IF;

      /*Inici bug 26070 / 139455 JDS 04-03-2013*/
      SELECT npoliza
        INTO vnpoliza
        FROM seguros
       WHERE sseguro = psseguro;

      IF     pac_seguros.f_es_col_admin (psseguro) = 1
         AND pac_seguros.f_get_escertifcero (vnpoliza) = 1
         AND pac_seguros.f_get_escertifcero (NULL, psseguro) <> 1
      THEN
         /* Es un certificado ya que existe certificado 0 para esa p¿liza*/
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9905060);
         RETURN 1;
      END IF;

      /*fi bug 26070 / 139455 JDS 04-03-2013*/
      /* BUG 0018910 - 30/08/2011 - JMF: solucion temporal*/
      SELECT NVL (MAX (nmovimi), pnmovimi)
        INTO n_mov
        FROM movseguro
       WHERE sseguro = psseguro;

      vpasexec := 2;
      /*BUG18926 - JTS - 15/07/2011*/
      vnumerr :=
         pac_md_produccion.f_emitir (psseguro,
                                     n_mov,
                                     issuplem,
                                     onpoliza,
                                     mensajes
                                    );

      /*vnumerr := pac_md_produccion.f_emitirpropuesta(psseguro, pnmovimi, onpoliza, mensajes);*/
      /*Fi BUG18926*/
      /* BUG9640:DRA:22/04/2009*/
      IF vnumerr = 0
      THEN
         vpasexec := 4;
         vnumerr := pac_seguros.f_get_sproduc (psseguro, NULL, vsproduc);

         IF vnumerr <> 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      IF     (pac_mdpar_productos.f_get_parproducto ('COBRO_AUTOMATICO',
                                                     vsproduc
                                                    ) = 1
             )
         AND vnumerr = 0
      THEN
         vnumerr :=
            pac_md_produccion.f_cobro_recibos (psseguro,
                                               n_mov,
                                               NULL,
                                               NULL,
                                               NULL,
                                               mensajes
                                              );
      END IF;

      IF vnumerr = 0
      THEN
         COMMIT;

         /* Bug 24278 - APD - 03/12/2012*/
         /* Si la emisi¿n del suplemento ha ido correctamente, ejecutar los*/
         /* suplementos diferidos programados en caso de colectivo (ncertif = 0)*/
         /* Bug 24278 - APD - 03/12/2012*/
         /* Si la emisi¿n del suplemento ha ido correctamente, ejecutar los*/
         /* suplementos diferidos programados en caso de colectivo (ncertif = 0)*/
         IF n_mov > 1
         THEN
            /* Bug 23940 - APD  - 03/01/2012 - si se est¿ realmente haciendo un suplemnto*/
            vnumerr :=
               pac_iax_suplementos.f_ejecuta_supl_certifs (psseguro,
                                                           NULL,
                                                           mensajes
                                                          );

            IF vnumerr <> 0
            THEN
               RAISE e_object_error;
            END IF;
         END IF;

         /* fin Bug 24278 - APD - 03/12/2012*/
         /* BUG19863:DRA:21/10/2011: Se pasa el parametro a productos*/
         IF NVL (pac_parametros.f_parproducto_n (vsproduc,
                                                 'INT_SINCRON_POLIZA'
                                                ),
                 0
                ) = 1
         THEN
            /* dra 28-11-2008: bug mantis 8301*/
            IF n_mov > 1
            THEN
               vaccion := 'M';
            ELSE
               vaccion := 'A';
            END IF;

            vnumerr :=
               pac_md_con.f_proceso_alta (pac_md_common.f_get_cxtempresa,
                                          /* empresa*/
                                          psseguro,
                                          /*seguro*/
                                          n_mov,
                                          /* nmovimi*/
                                          vaccion,
                                          /* A (alta ) 'M' (suplemento)*/
                                          f_user,
                                          /* fuser*/
                                          vsinterf,
                                          /* ni caso*/
                                          verror
                                         /* ni caso*/
                                         );
         END IF;
      END IF;

      /*Bug10550 - 17/09/2009 - DCT - Incorporar el BPM al flujo de trabajo del producto i-axis*/
      IF vnumerr = 0
      THEN
         /* BUG 24240 - 14/12/2012 - FPG - LCOL899 - Piloto Vida Grupo - Inicio*/
         /* Aunque haya mensajes de error los ignoraremos*/
         /*         vnumerr := pac_md_bpm.f_lanzar_proceso(psseguro, n_mov, NULL, '*', 'EMITIDA',*/
         /*                                                mensajes);*/
         vnumerr :=
            pac_md_bpm.f_lanzar_proceso (psseguro,
                                         n_mov,
                                         NULL,
                                         '*',
                                         'EMITIDA',
                                         v_mensajes_bpm
                                        );
      /* BUG 24240 - 14/12/2012 - FPG - LCOL899 - Piloto Vida Grupo - Final*/
      END IF;

      IF vnumerr <> 0
      THEN
         /*pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, vnumerr);*/
         /*RAISE e_object_error;*/
         NULL;
      /*continuo*/
      END IF;

      /*FI Bug10550 - 17/09/2009 - DCT - Incorporar el BPM al flujo de trabajo del producto i-axis*/
      COMMIT;

      /* BUG 38217/0219708 - FAL - 09/12/2015*/
      BEGIN
         SELECT cmovseg
           INTO v_cmovseg
           FROM movseguro
          WHERE sseguro = psseguro AND nmovimi = n_mov;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            v_cmovseg := 0;
      END;

      /**/
      IF v_cmovseg = 6
      THEN
         SELECT COUNT (1)
           INTO hay_asegmes
           FROM aseguradosmes
          WHERE sseguro = psseguro AND nmovimi = n_mov;
      END IF;

      /**/
      IF v_cmovseg = 6 AND NVL (hay_asegmes, 0) > 0
      THEN
         vnumerr := pac_sup_general.f_cambio_aut_numaseg (psseguro);

         IF vnumerr = 0
         THEN
            /* Se ha actualizado la pregunta nro. de asegurados con el promedio calculado.*/
            vmens :=
               pac_iobj_mensajes.f_get_descmensaje
                                               (9908264,
                                                pac_md_common.f_get_cxtidioma
                                               );
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 2, 9908264, vmens);
            COMMIT;
         ELSE
            /* No se puede realizar la actualizaci¿n de la pregunta nro de personas. Tiene que realizarse manualmente.*/
            vmens :=
               pac_iobj_mensajes.f_get_descmensaje
                                               (9908265,
                                                pac_md_common.f_get_cxtidioma
                                               );
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 2, 9908265, vmens);
         END IF;

         COMMIT;
      END IF;

      /* FI BUG 38217/0219708*/
      RETURN 0;
   EXCEPTION
      WHEN e_tasa_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            9905777,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_trm_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            9909275,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_param_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_emitirpropuesta;

   /*************************************************************************
   Editar la propuesta de poliza retenida
   param in  psseguro : codigo de poliza
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido errores
   *************************************************************************/
   FUNCTION f_editarpropuesta (
      psseguro   IN       NUMBER,
      osseguro   OUT      NUMBER,
      /* BUG11288:DRA:21/06/2010*/
      onmovimi   OUT      NUMBER,
      /* BUG11288:DRA:21/06/2010*/
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      nerr        NUMBER;
      vseguro     NUMBER;
      vpasexec    NUMBER (8)     := 1;
      vparam      VARCHAR2 (100) := 'psseguro= ' || psseguro;
      vobject     VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_EditarPropuesta';
      vcsituac    NUMBER (2);
      /* Bug 16800 - 13/12/2010 - AMC*/
      vvnmovimi   NUMBER;
   BEGIN
      nerr :=
         pac_md_produccion.f_editarpropuesta (psseguro,
                                              vseguro,
                                              vvnmovimi,
                                              /* BUG14754:DRA:01/06/2010*/
                                              NULL,
                                              mensajes
                                             );
      /* BUG11288:DRA:26/05/2010*/
      vpasexec := 4;
      ismodifprop := TRUE;
      vnmovimi := vvnmovimi;
      /* BUG11288:DRA:21/06/2010:Inici*/
      osseguro := vseguro;
      onmovimi := vvnmovimi;

      /* BUG11288:DRA:21/06/2010:Fi*/
      /* COMMIT;  -- BUG11288:DRA:20/10/2009: Lo hemos quitado para que no modifique el estado hasta el final*/
      IF nerr = 0
      THEN
         vpasexec := 5;
         nerr := f_set_consultapoliza (vseguro, mensajes, 'EST');
         pac_iax_produccion.issave := FALSE;
      ELSE
         vpasexec := 8;
         /* BUG11288:DRA:20/10/2009*/
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, nerr);
         RAISE e_object_error;
      END IF;

      RETURN nerr;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         /* BUG11288:DRA:20/10/2009: Lo hemos quitado de la capa MD*/
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         /* BUG11288:DRA:20/10/2009: Lo hemos quitado de la capa MD*/
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         /* BUG11288:DRA:20/10/2009: Lo hemos quitado de la capa MD*/
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_editarpropuesta;

   /*************************************************************************
   Editar la propuesta de poliza retenida pero no aceptada todavia
   param in  psseguro : codigo de poliza
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido errores
   *************************************************************************/
   FUNCTION f_editarpropuestaretenida (
      psseguro   IN       NUMBER,
      osseguro   OUT      NUMBER,
      /* BUG11288:DRA:21/06/2010*/
      onmovimi   OUT      NUMBER,
      /* BUG11288:DRA:21/06/2010*/
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      nerr        NUMBER;
      vseguro     NUMBER;
      vpasexec    NUMBER (8)     := 1;
      vparam      VARCHAR2 (100) := 'psseguro= ' || psseguro;
      vobject     VARCHAR2 (200)
                            := 'PAC_IAX_PRODUCCION.F_EditarPropuestaRetenida';
      vcsituac    NUMBER (2);
      /* Bug 16800 - 13/12/2010 - AMC*/
      vvnmovimi   NUMBER;
   BEGIN
      nerr :=
         pac_md_produccion.f_editarpropuesta (psseguro,
                                              vseguro,
                                              vvnmovimi,

                                              /* BUG14754:DRA:01/06/2010*/
                                              'RET',
                                              mensajes
                                             );
      vpasexec := 4;
      ismodifprop := TRUE;
      vnmovimi := vvnmovimi;
      /* BUG11288:DRA:21/06/2010:Inici*/
      osseguro := vseguro;
      onmovimi := vvnmovimi;

      /* BUG11288:DRA:21/06/2010:Fi*/
      /* COMMIT;  -- BUG11288:DRA:20/10/2009: Lo hemos quitado para que no modifique el estado hasta el final*/
      IF nerr = 0
      THEN
         vpasexec := 5;
         nerr := f_set_consultapoliza (vseguro, mensajes, 'EST');
         pac_iax_produccion.issave := FALSE;
      ELSE
         vpasexec := 8;
         /* BUG11288:DRA:20/10/2009*/
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, nerr);
         RAISE e_object_error;
      END IF;

      RETURN nerr;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         /* BUG11288:DRA:20/10/2009: Lo hemos quitado de la capa MD*/
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         /* BUG11288:DRA:20/10/2009: Lo hemos quitado de la capa MD*/
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         /* BUG11288:DRA:20/10/2009: Lo hemos quitado de la capa MD*/
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_editarpropuestaretenida;

/************************************************************************
FI RETENCION POLIZAS
************************************************************************/
/************************************************************************
INICI DOCUMENTACION NECESARIA
************************************************************************/
/*************************************************************************
Recupera la documentacion necesaria adjuntada para la poliza en el
movimiento de alta.
param out mensajes       : mensajes de error
return    T_IAX_DOCUMNEC : Documentacion necesaria ya adjuntada para la poliza.
*************************************************************************/
   FUNCTION f_leedocumalta (mensajes OUT t_iax_mensajes)
      RETURN t_iax_documnec
   IS
      vobjectname   VARCHAR2 (500) := 'PAC_IAX_PRODUCCION.F_LeeDocumAlta';
      vparam        VARCHAR2 (500) := 'parametros - NULL';
      vpasexec      NUMBER (5)     := 1;
      vnumerr       NUMBER (8)     := 0;
      vt_docnec     t_iax_documnec;
   BEGIN
      /*Recuperacio de la documentacio necessaria pel moviment d'alta d'una polissa*/
      vt_docnec := t_iax_documnec ();
      RETURN vt_docnec;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            NULL,
                                            SQLCODE,
                                            SQLERRM
                                           );
         RETURN NULL;
   END f_leedocumalta;

   /*************************************************************************
   Grabar informacion de la documentacion necessaria.
   param in  pcdocument     : codigo del documento.
   param in  pnversion      : numero de la version del documento.
   param in  pcmotomov      : codigo del tipo de movimiento de poliza.
   param in  pcselec        : indicador de seleccion (1) o deseleccion (0) de la documentacion
   param out mensajes       : mensajes de error
   return    NUMBER         : 0    -> Grabacion realizada correctamente.
   : <> 0 -> Error grabando
   *************************************************************************/
   FUNCTION f_grabadocummov (
      pcdocument   IN       NUMBER,
      pnversion    IN       NUMBER,
      pcmotmov     IN       NUMBER,
      pcselec      IN       NUMBER,
      mensajes     OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vobjectname   VARCHAR2 (500) := 'PAC_IAX_PRODUCCION.F_GrabaDocumMov';
      vparam        VARCHAR2 (500)
         :=    'parametros - pcdocument: '
            || pcdocument
            || ' - pnversion: '
            || pnversion
            || ' - pcmotmov: '
            || pcmotmov
            || ' - pcselec: '
            || pcselec;
      vpasexec      NUMBER (5)     := 1;
      vnumerr       NUMBER (8)     := 0;
   BEGIN
      /*Comprovacio dels parametres d'entrada*/
      IF    pcdocument IS NULL
         OR pnversion IS NULL
         OR pcmotmov IS NULL
         OR NVL (pcselec, 0) NOT IN (0, 1)
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 3;
      RETURN vnumerr;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            NULL,
                                            SQLCODE,
                                            SQLERRM
                                           );
         RETURN 1;
   END f_grabadocummov;

/************************************************************************
FI DOCUMENTACIO NECESS¿RIA
************************************************************************/
/*JRH IMP ******* Treure el SSEGURO*/
   FUNCTION f_gar_reval_dif (
      psseguro   IN       NUMBER,
      pnriesgo   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (100)
                       := 'psseguro=' || psseguro || ' pnriesgo=' || pnriesgo;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.f_gar_reval_dif';
      rie        ob_iax_riesgos;
      gars       t_iax_garantias;
   BEGIN
      IF
         /*psseguro IS NULL
                   OR*/
         pnriesgo IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF gars IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001100);
         vpasexec := 5;
         RAISE e_object_error;
      ELSE
         IF gars.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001100);
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 7;

      FOR vgar IN gars.FIRST .. gars.LAST
      LOOP
         vpasexec := 8;

         IF gars.EXISTS (vgar)
         THEN
            IF gars (vgar).crevali <> 0 AND gars (vgar).ctipgar NOT IN
                                                                      (8, 9)
            THEN
               /*JRH 06/2008 En estos casos no podemos cambiar la revalorizacion*/
               vpasexec := 9;

               IF    (NVL (gars (vgar).crevali, 0) <>
                                            NVL (poliza.det_poliza.crevali, 0)
                     )
                  OR (NVL (gars (vgar).prevali, 0) <>
                                            NVL (poliza.det_poliza.prevali, 0)
                     )
                  OR (NVL (gars (vgar).irevali, 0) <>
                                            NVL (poliza.det_poliza.irevali, 0)
                     )
               THEN
                  RETURN 1;
               END IF;
            END IF;
         END IF;
      END LOOP;

      RETURN 0;
   /*return(PAC_MD_PRODUCCION.f_gar_reval_dif(psseguro ,
   pnriesgo ,
   mensajes ));*/
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_gar_reval_dif;

   FUNCTION f_set_nduraci (
      pfefecto   IN       DATE,
      pnduraci   IN       NUMBER,
      pcduraci   IN       NUMBER,
      /* Bug 19412 - RSC - 26/10/2011*/
      vfvencim   OUT      DATE,
      pndurcob   OUT      NUMBER
                                /* Mantis 7919.#6.*/
   ,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (100) := 'pnduraci=' || pnduraci;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_set_nduraci';
      gest       ob_iax_gestion;
      nerr       NUMBER;
   /**/
   BEGIN
      IF pnduraci IS NULL AND pcduraci IS NULL
      THEN
         /* Bug 19412 - RSC - 26/10/2011*/
         RAISE e_param_error;
      END IF;

      gest :=
             pac_iobj_prod.f_partpoldatosgestion (poliza.det_poliza, mensajes);

      IF gest IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001115);
         vpasexec := 2;
         RAISE e_object_error;
      END IF;

      vpasexec := 3;
      gest.fefecto := pfefecto;
      gest.duracion := pnduraci;
      gest.fvencim := NULL;

      /* Bug 19412 - RSC - 26/10/2011 - LCOL_T004: Completar parametrizacion de los productos de Vida Individual*/
      IF pcduraci IS NOT NULL
      THEN
         gest.cduraci := pcduraci;
      END IF;

      /* Fin Bug 19412*/
      nerr := pac_md_produccion.f_set_calc_vencim_nduraci (gest, mensajes);
      vfvencim := gest.fvencim;
      /* Mantis 7919.#6.i.*/
      nerr :=
         pac_md_produccion.f_set_calc_ndurcob (poliza.det_poliza.sproduc,
                                               gest,
                                               mensajes
                                              );
      pndurcob := gest.ndurcob;
      /* Mantis 7919.#6.f.*/
      vpasexec := 4;
      RETURN nerr;
   /**/
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_nduraci;

   /*************************************************************************
   Devuelve el numero de riesgos que hay en la coleccion de riesgos.
   param in out     : mensajes de error
   return NUMBER, numero de riesgos
   *************************************************************************/
   FUNCTION f_existriesgo (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      ries       t_iax_riesgos;
      nerr       NUMBER         := 0;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_ExistRiesgo';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

      IF ries IS NULL
      THEN
         RETURN 0;
      ELSE
         RETURN ries.COUNT;
      END IF;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 0;
   END f_existriesgo;

   /*************************************************************************
   Graba un nuevo riesgo o lo modifica en el objeto persistente
   param in pnriesgo  : numero de riesgo
   param in ptdomici  : domicilio
   param in pcpostal  : codigo postal
   param in pcpoblac  : codigo de poblacion
   param in pcprovin  : codigo de provincia
   param in pcpais    : codigo de pais
   param in pcsiglas  : tipo de via
   param in ptnomvia  : descripcion via
   param in pnnumvia  : numero via
   param in ptcomple  : descripcion complementaria
   param in pcciudad  : codigo ciudad para chile
   param in pfgisx    : coordenada gis x (gps)
   param in pfgisy    : coordenada gis y (gps)
   param in pfgisz    : coordenada gis z (gps)
   param in pcvalida  : Codigo validacion direccion. Valor fijo 1006
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   -- Bug 12668 - 16/02/2010 - AMC - Normalizacion de la direccion
   *************************************************************************/
   FUNCTION f_grabariedomicilio (
      pnriesgo       IN       NUMBER,
      ptdomici       IN       VARCHAR2,
      pcpostal       IN       VARCHAR2,
      pcpoblac       IN       NUMBER,
      pcprovin       IN       NUMBER,
      pcpais         IN       NUMBER,
      pcsiglas       IN       NUMBER,
      ptnomvia       IN       VARCHAR2,
      pnnumvia       IN       NUMBER,
      ptcomple       IN       VARCHAR2,
      pcciudad       IN       NUMBER,
      pfgisx         IN       FLOAT,
      pfgisy         IN       FLOAT,
      pfgisz         IN       FLOAT,
      pcvalida       IN       NUMBER,
      piddirrie      IN       NUMBER,
      piddomicis     IN       VARCHAR2,
      pcviavp        IN       NUMBER,
      pclitvp        IN       NUMBER,
      pcbisvp        IN       NUMBER,
      pcorvp         IN       NUMBER,
      pnviaadco      IN       NUMBER,
      pclitco        IN       NUMBER,
      pcorco         IN       NUMBER,
      pnplacaco      IN       NUMBER,
      pcor2co        IN       NUMBER,
      pcdet1ia       IN       NUMBER,
      ptnum1ia       IN       VARCHAR2,
      pcdet2ia       IN       NUMBER,
      ptnum2ia       IN       VARCHAR2,
      pcdet3ia       IN       NUMBER,
      ptnum3ia       IN       VARCHAR2,
      piddomici      IN       NUMBER,
      plocalidad     IN       VARCHAR2,
      pfdefecto      IN       NUMBER,
      pdescripcion   IN       VARCHAR2,
      mensajes       OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      rie           ob_iax_riesgos        := ob_iax_riesgos ();
      ries          t_iax_riesgos;
      nerr          NUMBER;
      vpasexec      NUMBER (8)            := 1;
      vparam        VARCHAR2 (1)          := NULL;
      vobject       VARCHAR2 (200)
                                  := 'PAC_IAX_PRODUCCION.F_GrabaRieDomicilio';
      vnriesgo      NUMBER;
      vdomici       VARCHAR2 (300);
      vmaxtriesgo   NUMBER                := 300;
      vidomici      NUMBER;
      viddomicis    VARCHAR2 (300);
      vpos          NUMBER;
      vpiddomicis   VARCHAR2 (300);
      domicili      ob_iax_dir_domicilios;
      vnumerr       NUMBER;
   BEGIN
/*-------------*/
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);
      vpasexec := 3;
      nerr :=
         pac_md_validaciones.f_valida_codigosdireccion (pcpostal,
                                                        pcpoblac,
                                                        pcprovin,
                                                        pcpais,
                                                        mensajes
                                                       );
      vpasexec := 7;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 8;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 81;

      /* BUG11263:DRA:21/04/2010:Inici (de moment nomes ho poso per domicilis)*/
      IF poliza.det_poliza.cobjase = 2
      THEN
         vnriesgo := 1;

         IF ries IS NULL OR ries.COUNT = 0
         THEN
            /* si entra aqui es que no han clicado "Asegurado"*/
            vnriesgo := NULL;
         ELSE
            IF ries (ries.LAST).riesdireccion IS NOT NULL
            THEN
               IF pnriesgo IS NULL
               THEN
                  vnriesgo := NULL;
               /* Para que a¿ada otro riesgo*/
               ELSE
                  IF issimul AND pnriesgo = 0
                  THEN
                     vnriesgo := NULL;
                  /* Estamos en Simulacion a¿adiendo un riesgo*/
                  ELSE
                     vnriesgo := pnriesgo;
                  /* Estan editando el riesgo actual*/
                  END IF;
               END IF;
            END IF;
         END IF;
      ELSE
         vnriesgo := pnriesgo;
      END IF;

      /* BUG11263:DRA:21/04/2010:Fi*/
      vpasexec := 9;

/*-------------*/
      IF vnriesgo IS NOT NULL
      THEN
         vpasexec := 10;

         FOR vrie IN ries.FIRST .. ries.LAST
         LOOP
            IF ries.EXISTS (vrie)
            THEN
               IF ries (vrie).nriesgo = vnriesgo
               THEN
                  vpasexec := 11;
                  vdomici := ptdomici;

                  IF LENGTH (vdomici) > vmaxtriesgo
                  THEN
                     vdomici := SUBSTR (vdomici, 1, vmaxtriesgo);
                  END IF;

                  ries (vrie).riesdireccion := ob_iax_sitriesgos ();
                  /* BUG11263:DRA:21/04/2010*/
                  /* ries(vrie).riesdireccion.nriesgo := pnriesgo;*/
                  ries (vrie).riesdireccion.tdomici := vdomici;
                  ries (vrie).riesdireccion.cpostal := pcpostal;
                  ries (vrie).riesdireccion.cpoblac := pcpoblac;
                  ries (vrie).riesdireccion.cprovin := pcprovin;
                  ries (vrie).riesdireccion.cpais := pcpais;
                  /* bug 12668 - 17/02/2010 - AMC*/
                  ries (vrie).riesdireccion.csiglas := pcsiglas;
                  ries (vrie).riesdireccion.tnomvia := ptnomvia;
                  ries (vrie).riesdireccion.nnumvia := pnnumvia;
                  ries (vrie).riesdireccion.tcomple := ptcomple;
                  ries (vrie).riesdireccion.cciudad := pcciudad;
                  ries (vrie).riesdireccion.fgisx := pfgisx;
                  ries (vrie).riesdireccion.fgisy := pfgisy;
                  ries (vrie).riesdireccion.fgisz := pfgisz;
                  ries (vrie).riesdireccion.cvalida := pcvalida;
                  ries (vrie).riesdireccion.cviavp := pcviavp;
                  ries (vrie).riesdireccion.clitvp := pclitvp;
                  ries (vrie).riesdireccion.cbisvp := pcbisvp;
                  ries (vrie).riesdireccion.corvp := pcorvp;
                  ries (vrie).riesdireccion.nviaadco := pnviaadco;
                  ries (vrie).riesdireccion.clitco := pclitco;
                  ries (vrie).riesdireccion.corco := pcorco;
                  ries (vrie).riesdireccion.nplacaco := pnplacaco;
                  ries (vrie).riesdireccion.cor2co := pcor2co;
                  ries (vrie).riesdireccion.cdet1ia := pcdet1ia;
                  ries (vrie).riesdireccion.tnum1ia := ptnum1ia;
                  ries (vrie).riesdireccion.cdet2ia := pcdet2ia;
                  ries (vrie).riesdireccion.tnum2ia := ptnum2ia;
                  ries (vrie).riesdireccion.cdet3ia := pcdet3ia;
                  ries (vrie).riesdireccion.tnum3ia := ptnum3ia;
                  ries (vrie).riesdireccion.iddomici := piddomici;
                  ries (vrie).riesdireccion.localidad := plocalidad;
                  ries (vrie).riesdireccion.fdefecto := pfdefecto;
                  ries (vrie).riesdireccion.descripcion := pdescripcion;
                  /* Fi bug 12668 - 17/02/2010 - AMC*/
                  ries (vrie).riesdireccion.tprovin :=
                     pac_iax_listvalores.f_getdescripvalor
                         (   'SELECT tprovin FROM PROVINCIAS WHERE cprovin ='
                          || ries (vrie).riesdireccion.cprovin,
                          mensajes
                         );
                  ries (vrie).riesdireccion.tpoblac :=
                     pac_iax_listvalores.f_getdescripvalor
                        (   'SELECT tpoblac FROM POBLACIONES WHERE cprovin = '
                         || ries (vrie).riesdireccion.cprovin
                         || ' AND cpoblac = '
                         || ries (vrie).riesdireccion.cpoblac,
                         mensajes
                        );
                  ries (vrie).riesdireccion.tpais :=
                     pac_iax_listvalores.f_getdescripvalor
                                (   'SELECT tpais FROM PAISES WHERE cpais = '
                                 || ries (vrie).riesdireccion.cpais,
                                 mensajes
                                );
                  vpasexec := 12;

                  /* Bug 20893/111636 - 02/05/2012 - AMC*/
                  IF piddomicis IS NOT NULL
                  THEN
                     vpiddomicis := piddomicis;
                     ries (vrie).riesdireccion.domicilios :=
                                                      t_iax_dir_domicilios
                                                                          ();

                     LOOP
                        EXIT WHEN NVL (INSTR (vpiddomicis, '|'), 0) = 0;
                        viddomicis :=
                           SUBSTR (vpiddomicis,
                                   1,
                                   (INSTR (vpiddomicis, '|') - 1)
                                  );
                        vpos := INSTR (vpiddomicis, '|') + 1;
                        vpiddomicis :=
                              SUBSTR (vpiddomicis, vpos, LENGTH (vpiddomicis));
                        vidomici := TO_NUMBER (viddomicis);
                        ries (vrie).riesdireccion.domicilios.EXTEND;
                        domicili := ob_iax_dir_domicilios ();
                        vnumerr :=
                           pac_md_direcciones.f_get_departamento (vidomici,
                                                                  domicili,
                                                                  mensajes
                                                                 );
                        ries (vrie).riesdireccion.domicilios
                                     (ries (vrie).riesdireccion.domicilios.LAST
                                     ) := domicili;

                        IF ries (vrie).riesdireccion.tdomici IS NULL
                        THEN
                           vdomici :=
                              ries (vrie).riesdireccion.domicilios
                                    (ries (vrie).riesdireccion.domicilios.LAST
                                    ).tdomici;
                           ries (vrie).riesdireccion.tdomici := vdomici;
                        ELSE
                           vdomici :=
                                 vdomici
                              || ' '
                              || ries (vrie).riesdireccion.domicilios
                                     (ries (vrie).riesdireccion.domicilios.LAST
                                     ).tdomici;
                           ries (vrie).riesdireccion.tdomici := vdomici;
                        END IF;
                     END LOOP;
                  END IF;

                  /* Fi Bug 20893/111636 - 02/05/2012 - AMC*/
                  IF poliza.det_poliza.cobjase = 2
                  THEN
                     ries (vrie).tnatrie := vdomici;
                     ries (vrie).triesgo := vdomici;
                  END IF;

                  vpasexec := 13;
                  poliza.det_poliza.riesgos := ries;
                  vpasexec := 14;
                  RETURN 0;
               END IF;
            END IF;
         END LOOP;

         vpasexec := 15;
      ELSE
         vpasexec := 16;
         vnriesgo := NVL (ries.COUNT, 0) + 1;
         vpasexec := 17;
         ries.EXTEND;
         vpasexec := 18;
         ries (ries.LAST) := ob_iax_riesgos ();
         ries (ries.LAST).nriesgo := vnriesgo;
         ries (ries.LAST).riesdireccion := ob_iax_sitriesgos ();
         vdomici := ptdomici;

         IF LENGTH (vdomici) > vmaxtriesgo
         THEN
            vdomici := SUBSTR (vdomici, 1, vmaxtriesgo);
         END IF;

         ries (ries.LAST).riesdireccion.tdomici := vdomici;
         ries (ries.LAST).riesdireccion.cpostal := pcpostal;
         ries (ries.LAST).riesdireccion.cpoblac := pcpoblac;
         ries (ries.LAST).riesdireccion.cprovin := pcprovin;
         ries (ries.LAST).riesdireccion.cpais := pcpais;
         /* bug 12668 - 17/02/2010 - AMC*/
         ries (ries.LAST).riesdireccion.csiglas := pcsiglas;
         ries (ries.LAST).riesdireccion.tnomvia := ptnomvia;
         ries (ries.LAST).riesdireccion.nnumvia := pnnumvia;
         ries (ries.LAST).riesdireccion.tcomple := ptcomple;
         ries (ries.LAST).riesdireccion.cciudad := pcciudad;
         ries (ries.LAST).riesdireccion.fgisx := pfgisx;
         ries (ries.LAST).riesdireccion.fgisy := pfgisy;
         ries (ries.LAST).riesdireccion.fgisz := pfgisz;
         ries (ries.LAST).riesdireccion.cvalida := pcvalida;
         ries (ries.LAST).riesdireccion.cviavp := pcviavp;
         ries (ries.LAST).riesdireccion.clitvp := pclitvp;
         ries (ries.LAST).riesdireccion.cbisvp := pcbisvp;
         ries (ries.LAST).riesdireccion.corvp := pcorvp;
         ries (ries.LAST).riesdireccion.nviaadco := pnviaadco;
         ries (ries.LAST).riesdireccion.clitco := pclitco;
         ries (ries.LAST).riesdireccion.corco := pcorco;
         ries (ries.LAST).riesdireccion.nplacaco := pnplacaco;
         ries (ries.LAST).riesdireccion.cor2co := pcor2co;
         ries (ries.LAST).riesdireccion.cdet1ia := pcdet1ia;
         ries (ries.LAST).riesdireccion.tnum1ia := ptnum1ia;
         ries (ries.LAST).riesdireccion.cdet2ia := pcdet2ia;
         ries (ries.LAST).riesdireccion.tnum2ia := ptnum2ia;
         ries (ries.LAST).riesdireccion.cdet3ia := pcdet3ia;
         ries (ries.LAST).riesdireccion.tnum3ia := ptnum3ia;
         ries (ries.LAST).riesdireccion.iddomici := piddomici;
         ries (ries.LAST).riesdireccion.localidad := plocalidad;
         ries (ries.LAST).riesdireccion.fdefecto := pfdefecto;
         ries (ries.LAST).riesdireccion.descripcion := pdescripcion;
         /* Fi bug 12668 - 17/02/2010 - AMC*/
         ries (ries.LAST).riesdireccion.tprovin :=
            pac_iax_listvalores.f_getdescripvalor
                         (   'SELECT tprovin FROM PROVINCIAS WHERE cprovin ='
                          || ries (ries.LAST).riesdireccion.cprovin,
                          mensajes
                         );
         ries (ries.LAST).riesdireccion.tpoblac :=
            pac_iax_listvalores.f_getdescripvalor
                       (   'SELECT tpoblac FROM POBLACIONES WHERE cprovin = '
                        || ries (ries.LAST).riesdireccion.cprovin
                        || ' AND cpoblac = '
                        || ries (ries.LAST).riesdireccion.cpoblac,
                        mensajes
                       );
         ries (ries.LAST).riesdireccion.tpais :=
            pac_iax_listvalores.f_getdescripvalor
                                (   'SELECT tpais FROM PAISES WHERE cpais = '
                                 || ries (ries.LAST).riesdireccion.cpais,
                                 mensajes
                                );
         /* Bug 20893/111636 - 02/05/2012 - AMC*/
         ries (ries.LAST).riesdireccion.iddirrie := piddirrie;

         IF piddomicis IS NOT NULL
         THEN
            vpiddomicis := piddomicis;
            ries (ries.LAST).riesdireccion.domicilios :=
                                                      t_iax_dir_domicilios
                                                                          ();

            LOOP
               EXIT WHEN NVL (INSTR (vpiddomicis, '|'), 0) = 0;
               viddomicis :=
                       SUBSTR (vpiddomicis, 1,
                               (INSTR (vpiddomicis, '|') - 1));
               vpos := INSTR (vpiddomicis, '|') + 1;
               vpiddomicis :=
                             SUBSTR (vpiddomicis, vpos, LENGTH (vpiddomicis));
               vidomici := TO_NUMBER (viddomicis);
               ries (ries.LAST).riesdireccion.domicilios.EXTEND;
               domicili := ob_iax_dir_domicilios ();
               vnumerr :=
                  pac_md_direcciones.f_get_departamento (vidomici,
                                                         domicili,
                                                         mensajes
                                                        );
               ries (ries.LAST).riesdireccion.domicilios
                                (ries (ries.LAST).riesdireccion.domicilios.LAST
                                ) := domicili;

               IF ries (ries.LAST).riesdireccion.tdomici IS NULL
               THEN
                  vdomici :=
                     ries (ries.LAST).riesdireccion.domicilios
                               (ries (ries.LAST).riesdireccion.domicilios.LAST
                               ).tdomici;
                  ries (ries.LAST).riesdireccion.tdomici := vdomici;
               ELSE
                  vdomici :=
                        vdomici
                     || ' '
                     || ries (ries.LAST).riesdireccion.domicilios
                                (ries (ries.LAST).riesdireccion.domicilios.LAST
                                ).tdomici;
                  ries (ries.LAST).riesdireccion.tdomici := vdomici;
               END IF;
            END LOOP;
         END IF;

         /* fi Bug 20893/111636 - 02/05/2012 - AMC*/
         /*JRB*/
         IF poliza.det_poliza.cobjase = 2
         THEN
            ries (ries.LAST).tnatrie := vdomici;
            ries (ries.LAST).triesgo := vdomici;
         END IF;

         vpasexec := 19;
         poliza.det_poliza.riesgos := ries;
         vpasexec := 20;
         RETURN 0;
      END IF;

      RETURN 1;
   /*no se ha modificado ningun riesgo -- Error*/
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabariedomicilio;

   /*************************************************************************
   Graba un nuevo riesgo o lo modifica en el objeto persistente
   param in pnriesgo       : numero de riesgo
   param in ptdescripcion  : descripcion del riesgo
   param in pnasegur       : numero de asegurados
   param in pnedadcol      : Edad de un riesgo de un colectivo inominado
   param in psexcol        : Sexo de un riesgo de un colectivo inominado
   param out mensajes      : mensajes de error
   return                  : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabariedescripcion (
      pnriesgo        IN       NUMBER,
      ptdescripcion   IN       VARCHAR2,
      pnasegur        IN       VARCHAR2,
      pnedadcol       IN       NUMBER,
      psexcol         IN       NUMBER,
      mensajes        OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      rie            ob_iax_riesgos;
      ries           t_iax_riesgos;
      nerr           NUMBER;
      vpasexec       NUMBER (8)     := 1;
      vparam         VARCHAR2 (1)   := NULL;
      vobject        VARCHAR2 (200)
                                := 'PAC_IAX_PRODUCCION.F_GrabaRieDescripcion';
      vnriesgo       NUMBER;
      vdescripcion   VARCHAR2 (300);
      vmaxtriesgo    NUMBER         := 300;
      vefectsuple    DATE           := NULL;
   BEGIN
/*-------------*/
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);
      vpasexec := 3;

      /* BUG11263:DRA:21/04/2010:Inici*/
      IF poliza.det_poliza.cobjase IN (3, 4)
      THEN
         vnriesgo := 1;

         IF ries IS NULL OR ries.COUNT = 0
         THEN
            /* si entra aqui es que no han clicado "Asegurado"*/
            vnriesgo := NULL;
         ELSE
            IF ries (ries.LAST).riesdescripcion IS NOT NULL
            THEN
               IF pnriesgo IS NULL
               THEN
                  vnriesgo := NULL;
               /* Para que a¿ada otro riesgo*/
               ELSE
                  vnriesgo := pnriesgo;
               /* Estan editando el riesgo actual*/
               END IF;
            END IF;
         END IF;
      ELSE
         vnriesgo := pnriesgo;
      END IF;

      /* BUG11263:DRA:21/04/2010:Fi*/
      IF ries IS NULL
      THEN
         vpasexec := 4;
/*----------*/
         ries := t_iax_riesgos ();
/*---------*/
         vpasexec := 5;

         IF nerr = 1
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000645);
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 7;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 8;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 9;
      vdescripcion := ptdescripcion;

      IF LENGTH (vdescripcion) > vmaxtriesgo
      THEN
         vdescripcion := SUBSTR (vdescripcion, 1, vmaxtriesgo);
      END IF;

/*-------------*/
      IF vnriesgo IS NOT NULL
      THEN
         vpasexec := 10;

         FOR vrie IN ries.FIRST .. ries.LAST
         LOOP
            IF ries.EXISTS (vrie)
            THEN
               IF ries (vrie).nriesgo = vnriesgo
               THEN
                  vpasexec := 11;
                  ries (vrie).riesdescripcion := ob_iax_descripcion ();
                  /* BUG11263:DRA:21/04/2010*/
                  ries (vrie).riesdescripcion.nasegur := pnasegur;
                  ries (vrie).riesdescripcion.nedacol := pnedadcol;
                  ries (vrie).riesdescripcion.csexcol := psexcol;
                  ries (vrie).triesgo := vdescripcion;
                  ries (vrie).tnatrie := vdescripcion;
                  ries (vrie).nmovima := vnmovimi;
                  vpasexec := 12;
                  poliza.det_poliza.riesgos := ries;
                  RETURN 0;
               END IF;
            END IF;
         END LOOP;

         vpasexec := 15;
      ELSE
         vpasexec := 16;
         vnriesgo := ries.COUNT + 1;
         vpasexec := 17;
         ries.EXTEND;
         ries (ries.LAST) := ob_iax_riesgos ();
         vpasexec := 18;
         ries (ries.LAST).nriesgo := vnriesgo;
         ries (ries.LAST).riesdescripcion := ob_iax_descripcion ();
         ries (ries.LAST).riesdescripcion.nasegur := pnasegur;
         ries (ries.LAST).riesdescripcion.nedacol := pnedadcol;
         ries (ries.LAST).riesdescripcion.csexcol := psexcol;
         ries (ries.LAST).triesgo := vdescripcion;
         ries (ries.LAST).tnatrie := vdescripcion;
         ries (ries.LAST).nmovima := vnmovimi;

         /* Ini bug 29582#c164832 jds 04/02/2014*/
         IF issuplem
         THEN
            nerr :=
               pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                      vnmovimi,
                                                      vefectsuple,
                                                      mensajes
                                                     );

            IF (nerr <> 0)
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000827);
               RAISE e_object_error;
            END IF;
         END IF;

         ries (ries.LAST).fefecto := NVL (vefectsuple, vfefecto);
         /*Fi bug 29582#c164832 jds 04/02/2014*/
         vpasexec := 19;
         poliza.det_poliza.riesgos := ries;
         vpasexec := 20;
         RETURN 0;
      END IF;

      RETURN 1;
/*no se ha modificado ningun riesgo -- Error*/
/*---------------------*/
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabariedescripcion;

   /*************************************************************************
   Devuelve la coleccion de riesgos que tiene la poliza
   param out mensajes : mensajes de error
   return             : coleccion de riesgos
   *************************************************************************/
   FUNCTION f_leeriesgos (mensajes OUT t_iax_mensajes)
      RETURN t_iax_riesgos
   IS
      ries       t_iax_riesgos;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_LeeRiesgos';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);
      vpasexec := 3;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN ries;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leeriesgos;

   -- CONF-108 AP
   /*************************************************************************
   Devuelve la colecci¿n de riesgos que tiene la p¿liza
   param out mensajes : mensajes de error
   return             : colecci¿n de agensegu
   *************************************************************************/
   FUNCTION f_leeagensegu (mensajes OUT t_iax_mensajes)
      RETURN t_iax_agensegu
   IS
      agen       t_iax_agensegu;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR (1)    := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_leeagendas';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      agen := pac_iobj_prod.f_partpolagensegu (poliza.det_poliza, mensajes);
      vpasexec := 3;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN agen;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leeagensegu;

   -- CONF-108 AP
   --CONF-274-25/11/2016-JLTS Ini

   /*************************************************************************
   Graba el objeto ob_iax_reinicio
   param in  sseguro           c¿digo del seguro
   param in  finicio           fecha de inicio de la suspensi¿n/reinicio
   param in  ffinal          fecha de fin de la suspensi¿n/reinicio
   param in  ttexto          motivo de la suspensi¿n/reinicio
   param in  cmotmov           motivo del movimiento que corresponde al tipo de suspension/reinicio
   param in  nmovimi           n¿mero del movimiento al que corresponde la suspensi¿n/reinicio
   param out mensajes : mensajes de error
   return             : objeto tomador
   *************************************************************************/
   FUNCTION f_set_reinicio (
      psseguro         NUMBER,
      pfinicio         DATE,
      pffinal          DATE,
      pttexto          VARCHAR2,
      pcmotmov         NUMBER,
      pnmovimi         NUMBER,
      mensajes   OUT   t_iax_mensajes
   )
      RETURN NUMBER
   IS
      --
      vpasexec   NUMBER         := 1;
      vobject    VARCHAR2 (200) := 'pac_iax_produccion.f_set_reinicio';
      vparam     VARCHAR2 (500);
      vnum_err   NUMBER;
   --
   BEGIN
      --
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      --
      /*     v_reinicio := pac_iobj_prod.f_partpolreinicio(poliza.det_poliza,
                                                    mensajes);
      --
      IF v_reinicio IS NOT NULL THEN
        IF v_reinicio.count > 0 THEN
          vpasexec := 1;
          FOR i IN v_reinicio.first .. v_reinicio.last LOOP
            vpasexec := 2;
            IF v_reinicio.exists(i) THEN
              vpasexec := 3;
              v_reinicio.extend;
              v_reinicio(v_reinicio.last) := ob_iax_reinicio();
              v_reinicio(v_reinicio.last).sseguro := psseguro;
              v_reinicio(v_reinicio.last).finicio := pfinicio;
              v_reinicio(v_reinicio.last).ffinal := pffinal;
              v_reinicio(v_reinicio.last).ttexto := pttexto;
              v_reinicio(v_reinicio.last).cmotmov := pcmotmov;
              v_reinicio(v_reinicio.last).nmovimi := pnmovimi + 1;
            END IF;
          END LOOP;
          --
          poliza.det_poliza.reinicio := v_reinicio;
          --
        END IF;
      END IF;*/
      vnum_err :=
         pac_md_suplementos.f_valida_poliza_permite_supl
                                                   (poliza.det_poliza.ssegpol,
                                                    pffinal,
                                                    pcmotmov,
                                                    mensajes
                                                   );

      IF vnum_err != 0
      THEN
         RETURN vnum_err;
      END IF;

      vnum_err :=
         pac_md_grabardatos.f_grabar_reinicio (poliza.det_poliza.ssegpol,
                                               psseguro,
                                               pfinicio,
                                               pffinal,
                                               pttexto,
                                               pcmotmov,
                                               pnmovimi + 1,
                                               mensajes
                                              );

      IF vnum_err != 0
      THEN
         RETURN vnum_err;
      ELSE
         COMMIT;
      END IF;

      --
      RETURN 0;
   --
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_reinicio;

   --CONF-274-25/11/2016-JLTS Fin

   /*************************************************************************
   Realiza la llamada a la capa MD para el cobro de los recibos de un seguro
   param out mensajes : mensajes de error
   return             : number   0 -> OK  1 --> Error
   *************************************************************************/
   FUNCTION f_cobro_recibos (
      psolicit   IN       NUMBER,
      pnmovimi   IN       NUMBER,
      pctipcob   IN       NUMBER,
      pctipban   IN       NUMBER,
      pcbancar   IN       VARCHAR2,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (500)
                    := 'psolicit: ' || psolicit || ' - pnmovimi:' || pnmovimi;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Cobro_Recibos';
      verror     NUMBER;
   BEGIN
      IF psolicit IS NULL OR pnmovimi IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      verror :=
         pac_md_produccion.f_cobro_recibos (psolicit,
                                            pnmovimi,
                                            pctipcob,
                                            pctipban,
                                            pcbancar,
                                            mensajes
                                           );
      vpasexec := 3;
      RETURN verror;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_cobro_recibos;

   /*************************************************************************
   Devuelve si debemos mostrar una pantalla para volver a recobrar un seguro
   param out mensajes : mensajes de error
   return             : number   0 -> OK  1 --> Error
   *************************************************************************/
   FUNCTION f_cobro_retenido (
      psolicit   IN       NUMBER,
      pnmovimi   IN       NUMBER,
      mensajes   IN OUT   t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)        := 1;
      vparam     VARCHAR2 (500)
                    := 'psolicit: ' || psolicit || ' - pnmovimi:' || pnmovimi;
      vobject    VARCHAR2 (200)    := 'PAC_IAX_PRODUCCION.F_Cobro_Retenido';
      verror     NUMBER;
      mvtreten   t_iax_polmvtreten;
      vret       NUMBER            := 0;
   BEGIN
      IF psolicit IS NULL OR pnmovimi IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      define_mode ('POL', mensajes);
      vpasexec := 3;
      mvtreten :=
           pac_iax_produccion.f_get_motretenmov (psolicit, pnmovimi, mensajes);
      vpasexec := 4;
      vret := 0;

      /* BUG9296:DRA:04-03-2009*/
      IF mvtreten IS NOT NULL
      THEN
         FOR v_indice IN mvtreten.FIRST .. mvtreten.LAST
         LOOP
            IF mvtreten.EXISTS (v_indice)
            THEN
               IF     mvtreten (v_indice).cmotret = 4
                  AND NVL (mvtreten (v_indice).cresulta, 0) <> 1
               THEN
                  /* Pendiente de Cobro Prima*/
                  vret := 1;
               END IF;
            END IF;
         END LOOP;
      END IF;

      vpasexec := 5;
      RETURN vret;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_cobro_retenido;

   /*************************************************************************
   Recupera las cuentas corrientes de un tomador concreto del seguro
   param out mensajes : mensajes de error
   sperson  : sperson real
   return             : ref cursor
   *************************************************************************/
   FUNCTION f_get_ccc_seguro (
      psseguro   IN       NUMBER,
      pnordtom   IN       NUMBER,
      psperson   OUT      NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN sys_refcursor
   IS
      vpasexec           NUMBER (8)                      := 1;
      vparam             VARCHAR2 (500)
                    := 'psseguro: ' || psseguro || ' - pnordtom:' || pnordtom;
      vobject            VARCHAR2 (200)
                                     := 'PAC_IAX_PRODUCCION.F_Get_CCC_Seguro';
      cur                sys_refcursor;
      v_cexistepagador   tomadores.cexistepagador%TYPE;
   /* BUG 23075 - FPG - 1-8-2012*/
   BEGIN
      IF psseguro IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      define_mode ('POL', mensajes);
      vpasexec := 3;

      /* FPG - 01-08-2012 - BUG 0023075: LCOL_T010-Figura del pagador - incluir campo cexistepagador - inicio*/
      /*            SELECT tom.sperson*/
      /*        INTO psperson*/
      /*        FROM tomadores tom*/
      /*       WHERE tom.sseguro = psseguro*/
      /*         AND tom.nordtom = NVL(pnordtom, 1)*/
      /*         AND ROWNUM = 1;   --> Me aseguro que no falle por un TOO_MANY_ROWS*/
      /*      vpasexec := 4;*/
      /*      cur := pac_md_produccion.f_get_tomadorccc(psperson, mensajes);*/
      SELECT tom.sperson, NVL (tom.cexistepagador, 0)
        INTO psperson, v_cexistepagador
        FROM tomadores tom
       WHERE tom.sseguro = psseguro
         AND tom.nordtom = NVL (pnordtom, 1)
         AND ROWNUM = 1;

      /*> Me aseguro que no falle por un TOO_MANY_ROWS*/
      IF v_cexistepagador = 1
      THEN
         SELECT g.sperson
           INTO psperson
           FROM gescobros g
          WHERE g.sseguro = psseguro;

         cur :=
             pac_md_produccion.f_get_pagadorccc (psperson, mensajes, psseguro);
      ELSE
         vpasexec := 4;
         cur := pac_md_produccion.f_get_tomadorccc (psperson, mensajes);
      END IF;

      /* FPG - 01-08-2012 - BUG 0023075: LCOL_T010-Figura del pagador - incluir campo cexistepagador - final*/
      RETURN cur;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
   END f_get_ccc_seguro;

   /***********************************************************************
   Devuelve el valor de la revalorizacion de una poliza.
   param in ptablas   : Tablas ('EST' - temporales, 'SEG' - reales, 'SOL' - solicitudes)
   param in psseguro  : Numero interno de seguro
   param out prevali  : Porcentaje o valor de revalorizacion
   param out pcrevali : Tipo de revalorizacion
   mensajes : mensajes de error
   return             : number
   ***********************************************************************/
   FUNCTION f_get_reval_poliza (
      ptablas    IN       VARCHAR2 DEFAULT 'SEG',
      psseguro   IN       NUMBER,
      prevali    OUT      NUMBER,
      pcrevali   OUT      NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (500)
                      := 'PTABLAS: ' || ptablas || ', PSSEGURO: ' || psseguro;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_Reval_Poliza';
      num_err    NUMBER         := 0;
   BEGIN
      IF psseguro IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      num_err :=
         pac_md_produccion.f_get_reval_poliza (NVL (ptablas, 'SEG'),
                                               psseguro,
                                               prevali,
                                               pcrevali,
                                               mensajes
                                              );
      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN -1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN -1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         ROLLBACK;
         RETURN -1;
   END f_get_reval_poliza;

   /***********************************************************************
   Devuelve un objeto con los datos de gestion de una poliza.
   param in psseguro  : Numero interno de seguro
   param in ptablas   : Tablas ('EST' - temporales, 'SEG' - reales, 'SOL' - solicitudes)
   param out mensajes : mensajes de error
   return             : ob_iax_poliza
   ***********************************************************************/
   FUNCTION f_get_datos_cobro (psseguro IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN ob_iax_gestion
   IS
      vpasexec    NUMBER (8)     := 1;
      vparam      VARCHAR2 (500) := 'PSSEGURO: ' || psseguro;
      vobject     VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_get_datos_cobro';
      num_err     NUMBER         := 0;
      o_gestion   ob_iax_gestion;
   BEGIN
      IF psseguro IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      o_gestion :=
               pac_md_produccion.f_get_datos_cobro (psseguro, 'SEG', mensajes);

      IF o_gestion IS NULL
      THEN
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      RETURN o_gestion;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_datos_cobro;

   /*************************************************************************
   Devuelve los meses que tienen paga extraordinaria
   param in : numero de seguro
   param out mensajes : mensajes de error
   return             : objeto nmesextra
   *************************************************************************/
   FUNCTION f_get_mesesextra (
      psseguro     IN       NUMBER,
      pcmodextra   OUT      NUMBER,
      mensajes     OUT      t_iax_mensajes
   )
      RETURN ob_iax_nmesextra
   IS
      meses      ob_iax_nmesextra;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (200)   := 'PSSEGURO:' || psseguro;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_get_mesesextra';
   BEGIN
      IF psseguro IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      /*  meses := pac_md_obtenerdatos.f_leermesesextra ( PSSEGURO,*/
      /*                                                  mensajes);*/
      IF poliza.det_poliza.nmesextra IS NOT NULL
      THEN
         meses := poliza.det_poliza.nmesextra;
         pcmodextra := poliza.det_poliza.cmodextra;
      ELSE
         meses :=
            pac_md_obtenerdatos.f_leermesesextra (poliza.det_poliza.sseguro,
                                                  mensajes
                                                 );
         pcmodextra := 1;

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 21;
               RAISE e_object_error;
            END IF;
         END IF;

         IF meses IS NULL
         THEN
            meses :=
               pac_md_obtenerdatos.f_leermesesextrapro
                                                  (poliza.det_poliza.sproduc,
                                                   pcmodextra,
                                                   mensajes
                                                  );

            IF mensajes IS NOT NULL
            THEN
               IF mensajes.COUNT > 0
               THEN
                  vpasexec := 22;
                  RAISE e_object_error;
               END IF;
            END IF;
         END IF;
      END IF;

      RETURN meses;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_mesesextra;

   /*************************************************************************
   Funcion que crea un objeto ob_iax_nmesextra y lo asigna a la poliza del contexto
   param in : los 12 meses del a¿o
   param out mensajes : mensajes de error
   return             : 0 ok
   <> 0 ko
   *************************************************************************/
   FUNCTION f_set_nmesextra (
      pnmes1     IN       NUMBER,
      pnmes2     IN       NUMBER,
      pnmes3     IN       NUMBER,
      pnmes4     IN       NUMBER,
      pnmes5     IN       NUMBER,
      pnmes6     IN       NUMBER,
      pnmes7     IN       NUMBER,
      pnmes8     IN       NUMBER,
      pnmes9     IN       NUMBER,
      pnmes10    IN       NUMBER,
      pnmes11    IN       NUMBER,
      pnmes12    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (200)   := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.f_set_nmesextra';
      pagas      ob_iax_nmesextra := ob_iax_nmesextra ();
   BEGIN
      pagas.nmes1 := NVL (pnmes1, 0);
      pagas.nmes2 := NVL (pnmes2, 0);
      pagas.nmes3 := NVL (pnmes3, 0);
      pagas.nmes4 := NVL (pnmes4, 0);
      pagas.nmes5 := NVL (pnmes5, 0);
      pagas.nmes6 := NVL (pnmes6, 0);
      pagas.nmes7 := NVL (pnmes7, 0);
      pagas.nmes8 := NVL (pnmes8, 0);
      pagas.nmes9 := NVL (pnmes9, 0);
      pagas.nmes10 := NVL (pnmes10, 0);
      pagas.nmes11 := NVL (pnmes11, 0);
      pagas.nmes12 := NVL (pnmes12, 0);
      poliza.det_poliza.nmesextra := pagas;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_set_nmesextra;

   /* 24735.NMM.i.*/
   /*************************************************************************
   Funci¿ que crea un objecte ob_iax_nmesextra i l' assigna a la p¿lissa del contexte
   param in : els 12 mesos de l'any
   param out mensajes : missatges d'error
   return             : 0 ok
   <> 0 ko
   *************************************************************************/
   FUNCTION f_set_imesextra (
      pimes1     IN       NUMBER,
      pimes2     IN       NUMBER,
      pimes3     IN       NUMBER,
      pimes4     IN       NUMBER,
      pimes5     IN       NUMBER,
      pimes6     IN       NUMBER,
      pimes7     IN       NUMBER,
      pimes8     IN       NUMBER,
      pimes9     IN       NUMBER,
      pimes10    IN       NUMBER,
      pimes11    IN       NUMBER,
      pimes12    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (200)   := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.f_set_imesextra';
      pagas      ob_iax_nmesextra := ob_iax_nmesextra ();
   /**/
   BEGIN
      /* Recuperem els valors dels checks que hem recuperat en la funci¿ f_set_nmesextra.*/
      pagas := poliza.det_poliza.nmesextra;
      /* Assignem els valors dels imports.*/
      pagas.imp_nmes1 := NVL (pimes1, 0);
      pagas.imp_nmes2 := NVL (pimes2, 0);
      pagas.imp_nmes3 := NVL (pimes3, 0);
      pagas.imp_nmes4 := NVL (pimes4, 0);
      pagas.imp_nmes5 := NVL (pimes5, 0);
      pagas.imp_nmes6 := NVL (pimes6, 0);
      pagas.imp_nmes7 := NVL (pimes7, 0);
      pagas.imp_nmes8 := NVL (pimes8, 0);
      pagas.imp_nmes9 := NVL (pimes9, 0);
      pagas.imp_nmes10 := NVL (pimes10, 0);
      pagas.imp_nmes11 := NVL (pimes11, 0);
      pagas.imp_nmes12 := NVL (pimes12, 0);
      /* Tornem a passar a l'objecte p¿lissa els valors dels checks i els imports.*/
      poliza.det_poliza.nmesextra := pagas;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_set_imesextra;

   /* 24735.NMM.f.*/
   /***********************************************************************
   Funcion que indica si para un producto se debe mostrar la lista de polizas con certificado cero
   param in psproduc  : codigo de producto
   param out mensajes : mensajes de error
   return             : number  0 -> No mostrar  1 --> Si mostrar
   ***********************************************************************/
   FUNCTION f_mostrar_certificadoscero (
      psproduc   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (500) := 'psproduc: ' || psproduc;
      vobject    VARCHAR2 (200)
                           := 'PAC_IAX_PRODUCCION.f_mostrar_certificadoscero';
      num_err    NUMBER;
   BEGIN
      IF psproduc IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;

      /* Posibles valores del parproducto ADMITE_CERTIFICADOS:*/
      /* 0 - No*/
      /* 1 -- Si*/
      IF pac_iaxpar_productos.f_get_parproducto ('ADMITE_CERTIFICADOS',
                                                 psproduc
                                                ) = 0
      THEN
         num_err := 0;
      /* No mostrar certificados cero*/
      ELSE
         num_err := 1;
      /* Si mostrar certificados cero*/
      END IF;

      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN -1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN -1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN -1;
   END f_mostrar_certificadoscero;

   /*************************************************************************
   Recupera las polizas de colectivos con certificado cero para el producto indicado
   param in psproduc  : codigo de producto
   param in pnpoliza  : num. poliza
   param in pbuscar  : texto a buscar por nombre de tomador
   param out mensajes : mensajes de error
   return             : ref cursor
   *************************************************************************/
   FUNCTION f_get_certificadoscero (
      psproduc     IN       NUMBER,
      pnpoliza     IN       NUMBER,
      /*BUG11008-01092009-XPL*/
      pnsolici     IN       NUMBER,
      /* Bug 34409/196980 - 16/04/2015 - POS*/
      pbuscar      IN       VARCHAR2,
      /*BUG11008-01092009-XPL*/
      pcintermed   IN       NUMBER,
      /*BUG22839/125740:DCT:21/10/2012*/
      pcsucursal   IN       NUMBER,
      /*BUG22839/125740:DCT:21/10/2012*/
      pcadm        IN       NUMBER,
      /*BUG22839/125740:DCT:21/10/2012*/
      pmodo        IN       VARCHAR2,
      /* Bug 30360/174025 - 09/05/2014 - AMC*/
      mensajes     OUT      t_iax_mensajes
   )
      RETURN sys_refcursor
   IS
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1000)
         :=    'psproduc: '
            || psproduc
            || 'pnpoliza: '
            || pnpoliza
            || 'pnsolici: '
            || pnsolici
            || 'pbuscar: '
            || pbuscar
            || 'pcintermed: '
            || pcintermed
            || 'pcsucursal: '
            || pcsucursal
            || 'pcadm: '
            || pcadm
            || 'pmodo: '
            || pmodo;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_get_certificadoscero';
      squery     VARCHAR2 (3000);
      cur        sys_refcursor;
   BEGIN
      IF psproduc IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      squery :=
         pac_md_produccion.f_get_certificadoscero (psproduc,
                                                   pnpoliza,
                                                   pnsolici,
                                                   pbuscar,
                                                   pcintermed,
                                                   pcsucursal,
                                                   pcadm,
                                                   /*BUG22839/125740:DCT:21/10/2012*/
                                                   mensajes,
                                                   pmodo
                                                  /* Bug 30360/174025 - 09/05/2014 - AMC*/
                                                  );

      IF squery IS NULL
      THEN
         RAISE e_object_error;
      END IF;

      vpasexec := 3;
      cur := pac_iax_listvalores.f_opencursor (squery, mensajes);
      RETURN cur;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
   END f_get_certificadoscero;

   /***********************************************************************
   Funcion que asigna el numero de poliza del tomador del colectivo, al certificado que se crea nuevo,
   modificando una de las variables del tipo persistente de la contratacion.
   param in pnpoliza  : numero de poliza
   param out mensajes : mensajes de error
   return             : number  0 -> Ok  1 --> Error
   ***********************************************************************/
   FUNCTION f_set_npoliza (pnpoliza IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      vpasexec      NUMBER (8)                         := 1;
      vparam        VARCHAR2 (500)                := 'pnpoliza: ' || pnpoliza;
      vobject       VARCHAR2 (200)      := 'PAC_IAX_PRODUCCION.f_set_npoliza';
      /*poliza         OB_IAX_DETPOLIZA;*/
      num_err       NUMBER;
      /* Bug 22839 - RSC - 17/07/2012 - LCOL - Funcionalidad Certificado 0*/
      v_cobjase     NUMBER;
      /* Fin bug 22839*/
      v_cagente     prodherencia_colect.cagente%TYPE;
      /* BUG 0022839 - FAL - 24/07/2012*/
      /* Bug 23117 - RSC - 13/08/2012- LCOL_T010-LCOL - POLIZAS RENOVABLES Y VIGENCIA DIFERENTE A UN A*/
      v_cduraci     NUMBER;
      vcduraci      NUMBER;
      v_ccorret     NUMBER;
      v_cretorno    NUMBER;
      v_coaseguro   NUMBER (1);
      /* Fin Bug 23117*/
      v_fechapol    DATE;
   BEGIN
      IF pnpoliza IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 3;
      num_err :=
           pac_iobj_prod.f_set_npoliza (pnpoliza, poliza.det_poliza, mensajes);

      IF num_err > 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001664);
         RETURN 1;
      END IF;

      /* Bug 16106 - RSC - 21/09/2010 - APR - Ajustes e implementacion para el alta de colectivos*/
      /*num_err := f_set_isaltacolect(mensajes);*/
      /* Bug 16106*/
      isaltacol := FALSE;

      /* Bug 22839 - RSC - 18/07/2012 - LCOL - Funcionalidad Certificado 0 (Lo movemos aqu arriba!)*/
      IF NVL (pac_parametros.f_parproducto_n (poliza.det_poliza.sproduc,
                                              'ALTACERO_DESCRIPCION'
                                             ),
              0
             ) = 1
      THEN
         IF NOT isaltacol
         THEN
            SELECT p.cobjase
              INTO v_cobjase
              FROM productos p
             WHERE p.sproduc = poliza.det_poliza.sproduc;

            poliza.det_poliza.cobjase := v_cobjase;
         END IF;
      END IF;

      /* Fin Bug 22839*/
      /* BUG 0022839 - FAL - 24/07/2012*/
      IF     NVL
                (pac_mdpar_productos.f_get_parproducto
                                                    ('ADMITE_CERTIFICADOS',
                                                     poliza.det_poliza.sproduc
                                                    ),
                 0
                ) = 1
         AND NOT isaltacol
      THEN
         num_err :=
            pac_productos.f_get_herencia_col (poliza.det_poliza.sproduc,
                                              1,
                                              v_cagente
                                             );

         IF NVL (v_cagente, 0) = 1 AND num_err = 0
         THEN
            poliza.det_poliza.cagente :=
               pac_md_produccion.f_get_agentecol (poliza.det_poliza.npoliza,
                                                  mensajes
                                                 );
            pac_md_common.p_set_cxtagenteprod (poliza.det_poliza.cagente);
         END IF;

         /* FI BUG 0022839*/
         IF     pac_mdpar_productos.f_get_parproducto
                                                    ('ADMITE_CERTIFICADOS',
                                                     poliza.det_poliza.sproduc
                                                    ) = 1
            AND NOT isaltacol
         THEN
            v_fechapol :=
               NVL
                  (pac_md_produccion.f_get_efectocol
                                                   (poliza.det_poliza.npoliza,
                                                    mensajes
                                                   ),
                   poliza.det_poliza.gestion.fefecto
                  );
            poliza.det_poliza.gestion.fefecto :=
                      GREATEST (v_fechapol, poliza.det_poliza.gestion.fefecto);
         END IF;

         /* Bug 23117 - RSC - 13/08/2012- LCOL_T010-LCOL - POLIZAS RENOVABLES Y VIGENCIA DIFERENTE A UN*/
         vpasexec := 20;
         num_err :=
            pac_productos.f_get_herencia_col (poliza.det_poliza.sproduc,
                                              7,
                                              v_cduraci
                                             );

         IF NVL (v_cduraci, 0) IN (1, 2) AND num_err = 0
         THEN
            num_err :=
               pac_seguros.f_get_tipo_duracion_cero
                                                  (NULL,
                                                   poliza.det_poliza.npoliza,
                                                   'SEG',
                                                   vcduraci
                                                  );

            IF num_err <> 0
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, num_err);
               RAISE e_object_error;
            END IF;

            num_err :=
               f_set_frenova (poliza.det_poliza.gestion.fefecto,
                              vcduraci,
                              poliza.det_poliza.gestion.frenova,
                              mensajes
                             );

            IF mensajes IS NOT NULL
            THEN
               IF mensajes.COUNT > 0
               THEN
                  vpasexec := 21;
                  RAISE e_object_error;
               END IF;
            END IF;
         END IF;

         /* BUG22402:DRA:16/10/2012:Inici*/
         vpasexec := 22;
         num_err :=
            pac_productos.f_get_herencia_col (poliza.det_poliza.sproduc,
                                              8,
                                              v_ccorret
                                             );

         IF NVL (v_ccorret, 0) = 1 AND num_err = 0
         THEN
            vpasexec := 23;
            poliza.det_poliza.corretaje :=
               pac_mdpar_productos.f_get_corretaje
                                                  (poliza.det_poliza.sproduc,
                                                   mensajes
                                                  );
         END IF;

         /* BUG22402:DRA:16/10/2012:Fi*/
         /* BUG23911:DRA:18/10/2012:Inici*/
         vpasexec := 24;
         num_err :=
            pac_productos.f_get_herencia_col (poliza.det_poliza.sproduc,
                                              10,
                                              v_cretorno
                                             );

         IF NVL (v_cretorno, 0) = 1 AND num_err = 0
         THEN
            vpasexec := 25;
            poliza.det_poliza.retorno :=
               pac_mdpar_productos.f_get_retorno (poliza.det_poliza.sproduc,
                                                  mensajes
                                                 );
         END IF;

         /* BUG23911:DRA:18/10/2012:Fi*/
         /*BUG 0023183: XVM :26/10/2012--Inicio*/
         IF     pac_mdpar_productos.f_get_parproducto
                                                    ('ADMITE_CERTIFICADOS',
                                                     poliza.det_poliza.sproduc
                                                    ) = 1
            AND NOT pac_iax_produccion.isaltacol
         THEN
            num_err :=
               pac_productos.f_get_herencia_col (poliza.det_poliza.sproduc,
                                                 14,
                                                 v_coaseguro
                                                );

            IF NVL (v_coaseguro, 0) = 1
            THEN
               poliza.det_poliza.coacuadro :=
                  pac_md_obtenerdatos.f_leercoacuadro
                                                  (poliza.det_poliza.sseguro,
                                                   mensajes,
                                                   1
                                                  );
            END IF;
         END IF;

         /*BUG 0023183: XVM :26/10/2012--FIN*/
         /*CONVENIOS*/
         IF     pac_mdpar_productos.f_get_parproducto
                                                    ('ADMITE_CERTIFICADOS',
                                                     poliza.det_poliza.sproduc
                                                    ) = 1
            AND NOT pac_iax_produccion.isaltacol
         THEN
            num_err :=
               pac_productos.f_get_herencia_col (poliza.det_poliza.sproduc,
                                                 21,
                                                 v_coaseguro
                                                );

            IF NVL (v_coaseguro, 0) = 1
            THEN
               poliza.det_poliza.convempvers :=
                  pac_md_obtenerdatos.f_leer_convempvers
                                                  (poliza.det_poliza.sseguro,
                                                   mensajes,
                                                   1
                                                  );
            END IF;
         END IF;
      /*CONVENIOS*/
      END IF;

      /* Fin Bug 23117*/
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_npoliza;

   /*************************************************************************
   Obtiene datos gestion del certificado 0
   param out mensajes : mensajes de error
   return             : objeto datos gestion
   *************************************************************************/
   FUNCTION f_get_datosgestion (mensajes OUT t_iax_mensajes)
      RETURN ob_iax_detpoliza
   IS
      obpoliza   ob_iax_detpoliza;
      nerr       NUMBER;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_get_DatosGestion';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      obpoliza :=
            pac_md_produccion.f_get_datosgestion (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 1;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN obpoliza;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_datosgestion;

   /*************************************************************************
   Obtiene garantias del certificado 0
   param out mensajes : mensajes de error
   return             : objeto datos gestion
   *************************************************************************/
   FUNCTION f_get_garantias (mensajes OUT t_iax_mensajes)
      RETURN ob_iax_detpoliza
   IS
   BEGIN
      /* 18/02/2009 : De momento la funcion no hace nada*/
      RETURN NULL;
   END f_get_garantias;

   FUNCTION f_admitecertificados (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      nerr       NUMBER         := 0;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_admitecertificados';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      RETURN (pac_mdpar_productos.f_get_parproducto ('ADMITE_CERTIFICADOS',
                                                     poliza.det_poliza.sproduc
                                                    )
             );
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_admitecertificados;

   /*************************************************************************
   Recupera la informacion de un modelo de inversion seleccionado
   param in pnmodelo  : numero de modelo de inversion
   param out mensajes : mensajes de error
   return             : type T_IAX_DISTRIBUCION
   *************************************************************************/
   FUNCTION f_leemodeloinversionfinv (
      pnmodelo   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN ob_iax_produlkmodelosinv
   IS
      distr      ob_iax_produlkmodelosinv;
      vpasexec   NUMBER (8)               := 1;
      vparam     VARCHAR2 (1)             := NULL;
      vobject    VARCHAR2 (200)
                             := 'PAC_IAX_PRODUCCION.f_leemodeloinversionFinv';
      nerr       NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      distr := pac_iobj_prod.f_partpolmodeloinv (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      /* Posibilidad de control: OR (poliza.det_poliza.modeloinv IS NOT NULL*/
      /*                             AND poliza.det_poliza.modeloinv <> pnmodelo)*/
      IF pnmodelo IS NOT NULL
      THEN
         poliza.det_poliza.modeloinv := distr;
         /* Asignamos las preguntas a la poliza*/
         nerr :=
            pac_md_produccion_finv.f_grabar_modeloinvfinv (pnmodelo,
                                                           poliza,
                                                           mensajes
                                                          );

         IF nerr <> 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;

         vpasexec := 5;
         distr :=
                pac_iobj_prod.f_partpolmodeloinv (poliza.det_poliza, mensajes);

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 6;
               RAISE e_object_error;
            END IF;
         END IF;

         RETURN distr;
      END IF;

      RETURN distr;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leemodeloinversionfinv;

   /*************************************************************************
   Devuelve la coleccion de SALDOS DEUTORS DEL RIESGO DE LA POLIZA PASADO POR PARAM.
   param in  pnriesgo : riesgo
   param out mensajes : mensajes de error
   return             : coleccion de saldo deutors
   *************************************************************************/
   -- Bug 11165 - 16/09/2009 - AMC - Se sustituye  T_iax_saldodeutorseg por t_iax_prestamoseg
   FUNCTION f_leedatosprestamoseg (
      pnriesgo   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_prestamoseg
   IS
      ries       t_iax_riesgos;
      vpasexec   NUMBER (8)     := 1;
      /* Bug 0022701 - 03/09/2012 - JMF*/
      vparam     VARCHAR2 (200) := pnriesgo;
      vobject    VARCHAR2 (200)
                               := 'PAC_IAX_PRODUCCION.F_leedatossaldodeutors';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);
      vpasexec := 3;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      IF pnriesgo IS NOT NULL
      THEN
         vpasexec := 10;

         FOR vrie IN ries.FIRST .. ries.LAST
         LOOP
            IF ries.EXISTS (vrie)
            THEN
               IF ries (vrie).nriesgo = pnriesgo
               THEN
                  vpasexec := 11;
                  RETURN ries (vrie).prestamo;
               END IF;
            END IF;
         END LOOP;
      END IF;

      RETURN NULL;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leedatosprestamoseg;

   /*************************************************************************
   Graba en el objeto el saldo deutor
   pnriesgo IN NUMBER,
   selsaldo IN NUMBER,
   pidcuenta IN VARCHAR2,
   pctipcuenta IN NUMBER,
   pttipcuenta IN VARCHAR2,
   pctipban IN NUMBER,
   pttipban IN VARCHAR2,
   pctipimp IN NUMBER,
   pttipimp IN VARCHAR2,
   pisaldo IN NUMBER,
   pporcen IN NUMBER,
   pilimite IN NUMBER,
   picapmax IN NUMBER,
   param out mensajes : mensajes de error
   return             : coleccion de saldo deutors
   *************************************************************************/
   /* Bug 11165 - 16/09/2009 - AMC - Se sustituye  T_iax_saldodeutorseg por t_iax_prestamoseg*/
   FUNCTION f_set_prestamoseg (
      pnriesgo       IN       NUMBER,
      selsaldo       IN       NUMBER,
      pidcuenta      IN       VARCHAR2,
      pctipcuenta    IN       NUMBER,
      pctipban       IN       NUMBER,
      pctipimp       IN       NUMBER,
      pisaldo        IN       NUMBER,
      pporcen        IN       NUMBER,
      pilimite       IN       NUMBER,
      picapmax       IN       NUMBER,
      pcmoneda       IN       VARCHAR2,
      picapmaxpol    IN       NUMBER,
      picapase       IN       NUMBER,
      pdescripcion   IN       VARCHAR2,
      pfiniprest     IN       DATE,
      pffinprest     IN       DATE,
      mensajes       OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      ries       t_iax_riesgos;
      prestamo   ob_iax_prestamoseg;
      vpasexec   NUMBER (8)         := 1;
      vparam     VARCHAR2 (5000)
         :=    '  - pnriesgo   = '
            || pnriesgo
            || '  - selsaldo   = '
            || selsaldo
            || '  - pidcuenta  = '
            || pidcuenta
            || '  - pctipcuenta= '
            || pctipcuenta
            || '  - pctipban   = '
            || pctipban
            || '  - pctipimp   = '
            || pctipimp
            || '  - pisaldo    = '
            || pisaldo
            || '  - pporcen    = '
            || pporcen
            || '  - pilimite   = '
            || pilimite
            || '  - picapmax   = '
            || picapmax
            || '  - pcmoneda   = '
            || pcmoneda
            || '  - picapmaxpol= '
            || picapmaxpol
            || '  - picapase   = '
            || picapase;
      vobject    VARCHAR2 (200)     := 'PAC_IAX_PRODUCCION.f_set_prestamoseg';
      trobat     BOOLEAN            := FALSE;
      v_index    NUMBER;
      v_numerr   NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);
      vpasexec := 3;
      poliza.det_poliza.icapmaxpol := picapmaxpol;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      IF NVL (pac_iax_produccion.vproducto, -1) IN (571, 572)
      THEN
         IF poliza.det_poliza.riesgos IS NOT NULL
         THEN
            vpasexec := 2;

            IF poliza.det_poliza.riesgos.COUNT > 0
            THEN
               vpasexec := 3;

               FOR vrie IN
                  poliza.det_poliza.riesgos.FIRST .. poliza.det_poliza.riesgos.LAST
               LOOP
                  IF poliza.det_poliza.riesgos.EXISTS (vrie)
                  THEN
                     vpasexec := 11;

                     /* Bug 11165 - 16/09/2009 - AMC*/
                     IF     poliza.det_poliza.riesgos (vrie).prestamo IS NOT NULL
                        AND poliza.det_poliza.riesgos (vrie).prestamo.COUNT >
                                                                             0
                     THEN
                        poliza.det_poliza.riesgos (vrie).prestamo := NULL;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      END IF;

      prestamo := ob_iax_prestamoseg ();
      prestamo.idcuenta := pidcuenta;
      prestamo.ctipcuenta := pctipcuenta;
      prestamo.ttipcuenta :=
          ff_desvalorfijo (401, pac_md_common.f_get_cxtidioma (), pctipcuenta);
      prestamo.ctipban := pctipban;
      prestamo.ttipban :=
             ff_desvalorfijo (274, pac_md_common.f_get_cxtidioma (), pctipban);
      prestamo.ctipimp := pctipimp;
      prestamo.ttipimp :=
             ff_desvalorfijo (402, pac_md_common.f_get_cxtidioma (), pctipimp);
      prestamo.isaldo := pisaldo;
      prestamo.porcen := pporcen;
      prestamo.ilimite := pilimite;
      prestamo.icapmax := picapmax;
      prestamo.cmoneda := pcmoneda;
      prestamo.icapaseg := picapase;
      prestamo.descripcion := pdescripcion;
      prestamo.finiprest := pfiniprest;
      prestamo.ffinprest := pffinprest;
      v_numerr :=
         pac_iobj_prod.f_set_partriessaldodeutor (poliza.det_poliza,
                                                  pnriesgo,
                                                  selsaldo,
                                                  prestamo,
                                                  mensajes
                                                 );

      IF v_numerr <> 0
      THEN
         RAISE e_object_error;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_prestamoseg;

   /*************************************************************************
   Calcula el Capital asegurado
   pctipimp IN NUMBER,
   pisaldo IN NUMBER,
   pporcen IN NUMBER,
   pilimite IN NUMBER,
   picapmax IN NUMBER,
   param out mensajes : mensajes de error
   return             : coleccion de saldo deutors
   *************************************************************************/
   FUNCTION f_calcula_capase (
      pctipimp   IN       NUMBER,
      pisaldo    IN       NUMBER,
      pporcen    IN       NUMBER,
      pilimite   IN       NUMBER,
      picapmax   IN       NUMBER,
      picapase   OUT      NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      ries       t_iax_riesgos;
      /*saldo          ob_iax_saldodeutorseg;*/
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_calcula_capase';
      trobat     BOOLEAN        := FALSE;
      v_index    NUMBER;
      v_numerr   NUMBER;
   BEGIN
      picapase := 0;

      IF pctipimp = 1
      THEN
         /* Saldo*/
         picapase := pisaldo;

         /* BUG12421:DRA:01/03/2010:Inici*/
         IF picapase < 0
         THEN
            picapase := ABS (picapase);
         ELSE
            picapase := 0;
         END IF;
      /* BUG12421:DRA:01/03/2010:Fi*/
      /* BUG12421:DRA:29/01/2010:Inici*/
      /*ELSIF pctipimp = 2 THEN   -- %*/
      /*   picapase := (pisaldo * pporcen) / 100;*/
      /* BUG12421:DRA:29/01/2010:Fi*/
      ELSIF pctipimp = 3
      THEN
         /* limite*/
         /* BUG12421:DRA:17/03/2010:Inici*/
         IF pilimite IS NULL
         THEN
            IF pisaldo < 0
            THEN
               picapase := ABS (pisaldo);
            ELSE
               picapase := 0;
            END IF;
         ELSE
            IF pisaldo < 0
            THEN
               picapase := GREATEST (ABS (pilimite), ABS (pisaldo));
            ELSE
               picapase := ABS (pilimite);
            END IF;
         END IF;
      /* BUG12421:DRA:17/03/2010:Fi*/
      END IF;

      /* BUG12421:DRA:29/01/2010:Inici*/
      IF NVL (pporcen, 0) > 0 AND NVL (pporcen, 0) < 100
      THEN
         picapase := ROUND ((picapase * pporcen) / 100, 2);
      END IF;

      /* BUG12421:DRA:29/01/2010:Fi*/
      /* Si supera el capital maximo por cuenta, permitimos el maximo.*/
      IF NVL (picapmax, 0) <> 0 AND picapmax < picapase
      THEN
         picapase := picapmax;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_calcula_capase;

   /*************************************************************************
   Obtiene det poliza
   param out mensajes : mensajes de error
   return             : objeto datos gestion
   *************************************************************************/
   FUNCTION f_get_detpoliza (mensajes OUT t_iax_mensajes)
      RETURN ob_iax_detpoliza
   IS
      obpoliza   ob_iax_detpoliza;
      nerr       NUMBER;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_get_detpoliza';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      RETURN poliza.det_poliza;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_detpoliza;

   /*************************************************************************
   Prepara el objeto de saldodeutor si venimos de simulacion
   param out mensajes : mensajes de error
   return             : objeto datos gestion
   *************************************************************************/
   /* Bug 11165 - 16/09/2009 - AMC - Se sustituye  T_iax_saldodeutorseg por t_iax_prestamoseg*/
   FUNCTION f_simul_prestamoseg (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      ries       t_iax_riesgos;
      vparam     VARCHAR2 (200);
      vpasexec   NUMBER (8)     := 1;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_simul_saldodeutors';
      vnumerr    NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);
      vpasexec := 3;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 5;

      FOR vrie IN ries.FIRST .. ries.LAST
      LOOP
         vpasexec := 6;

         IF ries.EXISTS (vrie)
         THEN
            vpasexec := 7;
            ries (vrie).prestamo := t_iax_prestamoseg ();
            vpasexec := 8;
            pac_iax_produccion.poliza.det_poliza.riesgos (vrie).prestamo :=
                                                                         NULL;
            vpasexec := 9;
         END IF;
      END LOOP;

      vpasexec := 10;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_simul_prestamoseg;

   /**/
   /*************************************************************************
   Recuperar informacion de las garantias
   param in nriesgo  : numero de riesgo
   param in pmodalidad  : Modalidad de la funcion (Alta / Modificacion / Baja)
   param out mensajes : mensajes de error
   return             : objeto garantias
   *************************************************************************/
   /* Bug 11735 - RSC - 19/01/2010 - APR - suplemento de modificacion de capital /prima*/
   FUNCTION f_leegarantias_alt (
      pnriesgo     IN       NUMBER,
      pmodalidad   IN       NUMBER,
      pcmodo       IN       VARCHAR2,
      mensajes     OUT      t_iax_mensajes
   )
      RETURN t_iax_garantias
   IS
      gars          t_iax_garantias;
      gar           ob_iax_garantias;
      rie           ob_iax_riesgos;
      nerr          NUMBER;
      vpasexec      NUMBER (8)       := 1;
      vparam        VARCHAR2 (1)     := NULL;
      vobject       VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_LeeGarantias';
      vefectsuple   DATE             := NULL;
      nerrfefec     NUMBER;
      v_num_gar     NUMBER;
      v_i           NUMBER;
      vcount        NUMBER;
      v_modo        NUMBER;
   BEGIN
      v_i := 1;
      vcount := 0;

      WHILE v_i < LENGTH (pcmodo)
      LOOP
         IF SUBSTR (pcmodo, v_i, 1) = '_'
         THEN
            vcount := vcount + 1;
         END IF;

         v_i := v_i + 1;
      END LOOP;

      v_modo := pac_util.splitt (pcmodo, vcount + 1, '_');

      IF pmodalidad = 1
      THEN
         pac_iax_produccion.imodifgar := FALSE;
         pac_iax_produccion.isbajagar := FALSE;
         pac_iax_produccion.isaltagar := TRUE;
      ELSIF pmodalidad = 2
      THEN
         pac_iax_produccion.isaltagar := FALSE;
         pac_iax_produccion.isbajagar := FALSE;
         pac_iax_produccion.imodifgar := TRUE;
      ELSIF pmodalidad = 3
      THEN
         pac_iax_produccion.isaltagar := FALSE;
         pac_iax_produccion.imodifgar := FALSE;
         pac_iax_produccion.isbajagar := TRUE;
      END IF;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      /* Reset de motmovs de suplementos - para suplementos encadenados de Alta - Baja - Modificacion*/
      /* queremos que la estructura este vacia*/
      IF pac_iax_suplementos.lstmotmov IS NOT NULL
      THEN
         IF pac_iax_suplementos.lstmotmov.COUNT > 0
         THEN
            FOR i IN
               pac_iax_suplementos.lstmotmov.FIRST .. pac_iax_suplementos.lstmotmov.LAST
            LOOP
               IF pac_iax_suplementos.lstmotmov.EXISTS (i)
               THEN
                  IF pac_iax_suplementos.lstmotmov (i).cmotmov <> v_modo
                  THEN
                     pac_iax_suplementos.lstmotmov.DELETE (i);
                  /* Bug 13832 - RSC - 09/06/2010 - APRS015 - suplemento de aportaciones unicas*/
                  ELSE
                     pac_iax_suplementos.lstmotmov (1) :=
                                                        ob_iax_motmovsuple
                                                                          ();
                     pac_iax_suplementos.lstmotmov (1).cmotmov := v_modo;
                  END IF;
               /* Fin Bug 13832*/
               END IF;
            END LOOP;
         END IF;
      END IF;

      /* Reset de editabilidad de las garantias*/
      IF gars IS NOT NULL
      THEN
         IF gars.COUNT > 0
         THEN
            FOR vgar IN gars.FIRST .. gars.LAST
            LOOP
               IF gars.EXISTS (vgar)
               THEN
                  gars (vgar).editable := 1;
               END IF;
            END LOOP;
         END IF;
      END IF;

      vpasexec := 6;

      IF gars IS NOT NULL
      THEN
         vpasexec := 7;

         IF gars.COUNT > 0
         THEN
            vpasexec := 8;

            FOR vgar IN gars.FIRST .. gars.LAST
            LOOP
               vpasexec := 9;

               IF pmodalidad = 1
               THEN
                  /* Alta de garantias*/
                  IF gars.EXISTS (vgar)
                  THEN
                     v_num_gar :=
                        pac_md_produccion.f_get_contagar (vsolicit,
                                                          gars (vgar).cgarant
                                                         );

                     IF gars (vgar).cobliga = 0 OR v_num_gar = 0
                     THEN
                        vpasexec := 10;
                        gars (vgar).p_calc_primas (vsolicit,
                                                   vnmovimi,
                                                   vpmode,
                                                   pnriesgo
                                                  );
                     ELSE
                        gars (vgar).editable := 0;
                     END IF;
                  END IF;
               ELSIF pmodalidad = 2
               THEN
                  /* Modificacion de garantias*/
                  IF gars.EXISTS (vgar)
                  THEN
                     v_num_gar :=
                        pac_md_produccion.f_get_contagar (vsolicit,
                                                          gars (vgar).cgarant
                                                         );

                     IF gars (vgar).cgarant IN (2113, 2115, 2105)
                     THEN
                        gars (vgar).editable := 0;

                        /* Bug 13832 - RSC - 09/06/2010 - APRS015 - suplemento de aportaciones unicas*/
                        IF pac_md_produccion.f_bloqueo_grabarobjectodb
                                   (vsseguro,
                                    pac_iax_suplementos.lstmotmov (1).cmotmov,
                                    mensajes
                                   ) = 1
                        THEN
                           gars (vgar).icapital := NULL;
                           gars (vgar).icaptot := NULL;
                           gars (vgar).primas.ipritar := NULL;
                           gars (vgar).primas.ipritot := NULL;
                           gars (vgar).primas.iprianu := NULL;
                        END IF;
                     /* Fin Bug 13832*/
                     ELSE
                        IF gars (vgar).cobliga = 1 AND v_num_gar <> 0
                        THEN
                           vpasexec := 10;

                           /* Bug 13832 - RSC - 09/06/2010 - APRS015 - suplemento de aportaciones unicas*/
                           IF pac_md_produccion.f_bloqueo_grabarobjectodb
                                   (vsseguro,
                                    pac_iax_suplementos.lstmotmov (1).cmotmov,
                                    mensajes
                                   ) = 1
                           THEN
                              gars (vgar).icapital := NULL;
                              gars (vgar).icaptot := NULL;
                              gars (vgar).primas.ipritar := NULL;
                              gars (vgar).primas.ipritot := NULL;
                              gars (vgar).primas.iprianu := NULL;
                           ELSE
                              /* Fin Bug 13832*/
                              gars (vgar).p_calc_primas (vsolicit,
                                                         vnmovimi,
                                                         vpmode,
                                                         pnriesgo
                                                        );
                           END IF;
                        ELSE
                           gars (vgar).editable := 0;
                        END IF;
                     END IF;
                  END IF;
               ELSIF pmodalidad = 3
               THEN
                  /* Baja de garantias*/
                  /* Bug 11735 - RSC - 22/03/2010 - APR - suplemento de modificacion de capital /prima*/
                  IF gars.EXISTS (vgar)
                  THEN
                     v_num_gar :=
                        pac_md_produccion.f_get_contagar (vsolicit,
                                                          gars (vgar).cgarant
                                                         );

                     /*IF gars(vgar).cgarant = 2113 THEN*/
                     /*    gars(vgar).editable := 0;*/
                     /*ELSE*/
                     IF v_num_gar = 0
                     THEN
                        gars (vgar).editable := 0;
                     ELSE
                        vpasexec := 10;
                        gars (vgar).p_calc_primas (vsolicit,
                                                   vnmovimi,
                                                   vpmode,
                                                   pnriesgo
                                                  );
                     END IF;
                  /*END IF;*/
                  END IF;
               /* Fin Bug 11735*/
               ELSE
                  IF gars.EXISTS (vgar)
                  THEN
                     vpasexec := 10;
                     gars (vgar).p_calc_primas (vsolicit,
                                                vnmovimi,
                                                vpmode,
                                                pnriesgo
                                               );
                  END IF;
               END IF;
            END LOOP;

            vpasexec := 11;
            nerr :=
               pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                      pnriesgo,
                                                      gars,
                                                      mensajes
                                                     );
         END IF;
      END IF;

      vpasexec := 12;
      /* Bug 26662 - APD - 16/04/2013 - se a¿ade el parametro pnriesgo a la funcion*/
      nerr :=
         pac_md_produccion.p_set_garanprod (gars, vnmovimi, mensajes,
                                            pnriesgo);

      /* fin Bug 26662 - APD - 16/04/2013*/
      IF nerr = 0
      THEN
         vpasexec := 13;
         nerr :=
            pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                   pnriesgo,
                                                   gars,
                                                   mensajes
                                                  );
      ELSIF nerr = 1
      THEN
         vpasexec := 14;
         RAISE e_object_error;
      END IF;

      /*16122008  s'ha de controlar data efecte per suplement*/
      IF issuplem
      THEN
         nerrfefec :=
            pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                   vnmovimi,
                                                   vefectsuple,
                                                   mensajes
                                                  );

         IF (nerrfefec <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001097);
            RAISE e_object_error;
         END IF;

         IF gars IS NOT NULL
         THEN
            vpasexec := 15;

            IF gars.COUNT > 0
            THEN
               vpasexec := 16;

               FOR vgar IN gars.FIRST .. gars.LAST
               LOOP
                  vpasexec := 17;

                  IF gars.EXISTS (vgar)
                  THEN
                     vpasexec := 18;
                     gars (vgar).finiefe :=
                         NVL (vefectsuple, poliza.det_poliza.gestion.fefecto);
                  END IF;
               END LOOP;

               vpasexec := 19;
               nerr :=
                  pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                         pnriesgo,
                                                         gars,
                                                         mensajes
                                                        );
            END IF;
         END IF;
      END IF;

      RETURN gars;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leegarantias_alt;

   /* Fin Bug 11735*/
   /*************************************************************************
   Recupera la direccion del tomador
   param out  psitriesgo
   param out mensajes  : mensajes de error
   return              : 0 todo correcto
   1 ha habido un error
   Bug 14443 - 12/05/2010 - AMC
   *************************************************************************/
   FUNCTION f_get_domicili_prenedor (
      psitriesgo   OUT   ob_iax_sitriesgos,
      mensajes     OUT   t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vparam     VARCHAR2 (200);
      vpasexec   NUMBER (8)      := 1;
      vobject    VARCHAR2 (200)
                              := 'PAC_IAX_PRODUCCION.f_get_domicili_prenedor';
      vnumerr    NUMBER;
      toma       t_iax_tomadores;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      toma := pac_iobj_prod.f_partpoltomadores (poliza.det_poliza, mensajes);
      vpasexec := 3;
      vnumerr :=
         pac_md_produccion.f_get_domicili_prenedor (toma, psitriesgo,
                                                    mensajes);

      IF vnumerr <> 0
      THEN
         /* Bug 21709 - APD - 20/04/2012 - se a¿ade el mensaje*/
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 107574);
         /*No existe ning¿n domicilio para el tomador*/
         /*RAISE e_object_error;*/
         /* fin Bug 21709 - APD - 20/04/2012*/
         RETURN 1;
      END IF;

      vpasexec := 10;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_get_domicili_prenedor;

   /*************************************************************************
   Actualitzar el camp ctarman
   param in  nriesgo
   param in  cgarant
   param in  ctarman
   param out mensajes  : mensajes de error
   return              : 0 todo correcto
   1 ha habido un error
   --30/07/2010#XPL#14429: AGA005 - Primes manuals pels productes de Llar
   *************************************************************************/
   FUNCTION f_actualitzarctarman (
      nriesgo    IN       NUMBER,
      cgarant    IN       NUMBER,
      ctarman    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      gar           t_iax_garantias;
      tgr           ob_iax_garantias;
      rie           ob_iax_riesgos;
      npos          NUMBER;
      nerr          NUMBER;
      vmensaje      VARCHAR2 (1000);
      tgarant       VARCHAR2 (1000);
      desmsj        VARCHAR2 (1000);
      vpasexec      NUMBER (8)       := 1;
      vparam        VARCHAR2 (1)     := NULL;
      vobject       VARCHAR2 (200)
                                 := 'PAC_IAX_PRODUCCION.F_actualitzarctarman';
      /*ACC 13122008*/
      nerrfefec     NUMBER;
      vefectsuple   DATE             := NULL;
      /*ACC 13122008*/
      v_irevali     NUMBER (13, 2);
      v_prevali     NUMBER (5, 2);

      /* comproba que el codigo de garantia no exista*/
      /* devuelve la posicion del indice o bien -1 sino existe*/
      FUNCTION existgar (cgarant IN NUMBER)
         RETURN NUMBER
      IS
      BEGIN
         IF gar IS NULL
         THEN
            RETURN -1;
         END IF;

         IF gar.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vgar IN gar.FIRST .. gar.LAST
         LOOP
            IF gar.EXISTS (vgar)
            THEN
               IF gar (vgar).cgarant = cgarant
               THEN
                  RETURN vgar;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existgar;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                                       (mensajes,
                                        1,
                                        -456,
                                        'No se ha inicializado correctamente'
                                       );
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                                             (mensajes,
                                              1,
                                              49773,
                                              'No se ha encontrado el riesgo'
                                             );
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      gar := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;
      /* elimina una garantia previament seleccionada*/
      npos := existgar (cgarant);
      vpasexec := 8;

      IF gar (npos).cobliga = 1
      THEN
         gar (npos).ctarman := ctarman;
      ELSE
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                               1,
                                               45532,
                                               'Garantia no contratada'
                                              );
      END IF;

      vpasexec := 19;
      nerr :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                nriesgo,
                                                gar,
                                                mensajes
                                               );

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                               (mensajes,
                                1,
                                45532,
                                'Error al inserto en el riesgo las garantias'
                               );
         vpasexec := 20;
         RAISE e_object_error;
      END IF;

      IF gar IS NOT NULL
      THEN
         IF gar.COUNT > 0
         THEN
            FOR vgar IN gar.FIRST .. gar.LAST
            LOOP
               IF gar.EXISTS (vgar)
               THEN
                  nerr := f_grabarobjetodbgar (gar (vgar), nriesgo, mensajes);

                  IF nerr > 0
                  THEN
                     vpasexec := 10;
                     RAISE e_object_error;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_actualitzarctarman;

   /*************************************************************************
   Actualitzar les primes manualts iprianu,ipritot i ipritar
   param in  nriesgo
   param in  cgarant
   param in  ipritar
   param in  ipritot
   param out mensajes  : mensajes de error
   return              : 0 todo correcto
   1 ha habido un error
   --30/07/2010#XPL#14429: AGA005 - Primes manuals pels productes de Llar
   *************************************************************************/
   FUNCTION f_actualitzarcapitales (
      nriesgo    IN       NUMBER,
      cgarant    IN       NUMBER,
      ipritar    IN       NUMBER,
      ipritot    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      gar           t_iax_garantias;
      tgr           ob_iax_garantias;
      rie           ob_iax_riesgos;
      npos          NUMBER;
      nerr          NUMBER;
      vmensaje      VARCHAR2 (1000);
      tgarant       VARCHAR2 (1000);
      desmsj        VARCHAR2 (1000);
      vpasexec      NUMBER (8)       := 1;
      vparam        VARCHAR2 (1)     := NULL;
      vobject       VARCHAR2 (200)
                               := 'PAC_IAX_PRODUCCION.F_actualitzarcapitales';
      /*ACC 13122008*/
      nerrfefec     NUMBER;
      vefectsuple   DATE             := NULL;
      /*ACC 13122008*/
      v_irevali     NUMBER (13, 2);
      v_prevali     NUMBER (5, 2);

      /* comproba que el codigo de garantia no exista*/
      /* devuelve la posicion del indice o bien -1 sino existe*/
      FUNCTION existgar (cgarant IN NUMBER)
         RETURN NUMBER
      IS
      BEGIN
         IF gar IS NULL
         THEN
            RETURN -1;
         END IF;

         IF gar.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vgar IN gar.FIRST .. gar.LAST
         LOOP
            IF gar.EXISTS (vgar)
            THEN
               IF gar (vgar).cgarant = cgarant
               THEN
                  RETURN vgar;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existgar;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                                       (mensajes,
                                        1,
                                        -456,
                                        'No se ha inicializado correctamente'
                                       );
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                                             (mensajes,
                                              1,
                                              49773,
                                              'No se ha encontrado el riesgo'
                                             );
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      gar := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;
      /* elimina una garantia previament seleccionada*/
      npos := existgar (cgarant);
      vpasexec := 8;

      IF gar (npos).cobliga = 1
      THEN
         gar (npos).primas.ipritar := ipritar;
         gar (npos).primas.ipritot := ipritot;
         gar (npos).primas.iprianu := ipritot;
      ELSE
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                               1,
                                               45532,
                                               'Garantia no contratada'
                                              );
      END IF;

      vpasexec := 19;
      nerr :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                nriesgo,
                                                gar,
                                                mensajes
                                               );

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                               (mensajes,
                                1,
                                45532,
                                'Error al inserto en el riesgo las garantias'
                               );
         vpasexec := 20;
         RAISE e_object_error;
      END IF;

      IF gar IS NOT NULL
      THEN
         IF gar.COUNT > 0
         THEN
            FOR vgar IN gar.FIRST .. gar.LAST
            LOOP
               IF gar.EXISTS (vgar)
               THEN
                  nerr := f_grabarobjetodbgar (gar (vgar), nriesgo, mensajes);

                  IF nerr > 0
                  THEN
                     vpasexec := 10;
                     RAISE e_object_error;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      COMMIT;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                                             (mensajes,
                                              1,
                                              49773,
                                              'No se ha encontrado el riesgo'
                                             );
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      gar := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;
      /* elimina una garantia previament seleccionada*/
      npos := existgar (cgarant);
      rie.p_set_needtarifar (0);
      /* t.7817 ob_iax_riesgos*/
      vpasexec := 25;
      rie.p_calc_primas (vsolicit, vnmovimi, vpmode);
      /* recupera les primes*/
      vpasexec := 26;
      rie.p_get_pregauto (vsolicit, vnmovimi, vpmode);
      /* per recuperar les preguntes automatiques*/
      vpasexec := 27;
      rie.p_get_garaftertar (vsolicit, vnmovimi, vpmode);
      /* per recuperar les noves garantias despres de tarificar*/
      vpasexec := 28;
      rie.p_get_pregautoriegar (vsolicit, vnmovimi, vpmode);
      /* Preguntes automatiques*/
      rie.p_set_needtarifar (0);
      /* bug 7535 ACC 170209*/
      vpasexec := 29;
      npos :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         nriesgo,
                                         rie,
                                         mensajes
                                        );
      vpasexec := 30;
      poliza.det_poliza.p_check_needtarificarpol;
      /* bug 7535 ACC 170209*/
      /*            --Recuperar la informacio de la garantia despres de la seva validacio*/
      /*      IF gar IS NOT NULL THEN*/
      /*         IF gar.COUNT > 0 THEN*/
      /*            FOR vgar IN gar.FIRST .. gar.LAST LOOP*/
      /*               IF gar.EXISTS(vgar) THEN*/
      /*                  gar(vgar).p_get_garaftertar(vsolicit, vnmovimi, vpmode, nriesgo);*/
      /*               END IF;*/
      /*            END LOOP;*/
      /*         END IF;*/
      /*      END IF;*/
      /*      vpasexec := 19;*/
      /*      nerr := pac_iobj_prod.f_set_partriesgarantias(poliza.det_poliza, nriesgo, gar, mensajes);*/
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_actualitzarcapitales;

   /*************************************************************************
   Grabar informacion de las garantias
   param in nriesgo   : numero de riesgo
   param in cgarant   : codigo garantia
   param in selgar    : 1 indica que se ha seleccionado garantia
   0 indica que se ha deseleccionado la garantia
   param in icapital  : importe de capital
   param in crevali   : tipo de revalorizacion
   param in prevali   : porcentaje de revalorizacion
   param in irevali   : importe de revalorizacion
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabardetgarantias (
      nriesgo    IN       NUMBER,
      cgarant    IN       NUMBER,
      selgar     IN       NUMBER,
      icapital   IN       NUMBER,
      crevali    IN       NUMBER,
      prevali    IN       NUMBER,
      irevali    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes,
      ipritar    IN       NUMBER DEFAULT NULL
   )
      RETURN NUMBER
   IS
      gar           t_iax_garantias;
      tgr           ob_iax_garantias;
      rie           ob_iax_riesgos;
      npos          NUMBER;
      nerr          NUMBER;
      vmensaje      VARCHAR2 (1000);
      tgarant       VARCHAR2 (1000);
      desmsj        VARCHAR2 (1000);
      vpasexec      NUMBER (8)              := 1;
      vparam        VARCHAR2 (1)            := NULL;
      vobject       VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_GrabarGarantias';
      /*ACC 13122008*/
      nerrfefec     NUMBER;
      vefectsuple   DATE                    := NULL;
      /*ACC 13122008*/
      v_irevali     NUMBER (13, 2);
      v_prevali     NUMBER (5, 2);
      /* BUG9496:DRA:18/05/2009:Inici*/
      preg          t_iax_preguntas;
      pregpar       t_iaxpar_preguntas;
      v_entra       BOOLEAN;
      v_crespue     NUMBER;
      v_trespue     VARCHAR2 (2000);
      vtprefor      VARCHAR2 (100);
      v_resp        NUMBER;
      /* BUG9496:DRA:18/05/2009:Fi*/
      /* Bug 11735 - RSC - 10/05/2010 - APR - suplemento de modificacion de capital /prima*/
      garis         sys_refcursor;
      v_garardep    garanpro.cgarant%TYPE;

      /* Fin Bug 11735*/
      /* comproba que el codigo de garantia no exista*/
      /* devuelve la posicion del indice o bien -1 sino existe*/
      FUNCTION existgar (cgarant IN NUMBER)
         RETURN NUMBER
      IS
      BEGIN
         IF gar IS NULL
         THEN
            RETURN -1;
         END IF;

         IF gar.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vgar IN gar.FIRST .. gar.LAST
         LOOP
            IF gar.EXISTS (vgar)
            THEN
               IF gar (vgar).cgarant = cgarant
               THEN
                  RETURN vgar;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existgar;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      gar := t_iax_garantias ();

      IF NVL (crevali, 0) = 1
      THEN
         v_prevali := NULL;
         v_irevali := prevali;
      ELSE
         v_prevali := prevali;
         v_irevali := NULL;
      END IF;

      vpasexec := 7;
      gar.EXTEND;
      npos := gar.LAST;
      gar (npos) := ob_iax_garantias ();

      IF issuplem
      THEN
         nerrfefec :=
            pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                   vnmovimi,
                                                   vefectsuple,
                                                   mensajes
                                                  );

         IF (nerrfefec <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001097);
            RAISE e_object_error;
         END IF;
      END IF;

      gar (npos).cgarant := cgarant;
      gar (npos).crevali := NVL (crevali, 0);
      gar (npos).prevali := v_prevali;
      gar (npos).irevali := v_irevali;
      gar (npos).finiefe :=
                          NVL (vefectsuple, poliza.det_poliza.gestion.fefecto);
      /*ACC 1312008 si es suplement ha de controlar data efcte*/
      gar (npos).nmovimi := vnmovimi;
      gar (npos).nmovima := vnmovimi;
      vpasexec := 8;
      gar (npos).cobliga := selgar;
      gar (npos).cgarant := cgarant;
      gar (npos).icapital := icapital;

      IF    pac_iax_produccion.isaltagar
         OR pac_iax_produccion.imodifgar
         OR pac_iax_produccion.isbajagar
      THEN
         IF ipritar IS NOT NULL
         THEN
            gar (npos).primas.iprianu := ipritar;
            gar (npos).primas.ipritar := ipritar;
         END IF;
      END IF;

      IF pac_iaxpar_productos.f_permitirrevalgar (cgarant,
                                                  NVL (crevali, 0),
                                                  v_prevali,
                                                  v_irevali
                                                 ) = 1
      THEN
         pac_iaxpar_productos.p_revalgar (cgarant,
                                          NVL (crevali, 0),
                                          v_prevali,
                                          v_irevali,
                                          gar (npos).crevali,
                                          gar (npos).prevali,
                                          gar (npos).irevali,
                                          mensajes
                                         );
      ELSE
         gar (npos).crevali := 0;
         gar (npos).prevali := NULL;
         gar (npos).irevali := NULL;
      END IF;

      /* Bug 10336 - 20/09/2009- JRH - CRE - Simular producto de rentas a partir del importe de renta y no de la prima*/
      IF gar (npos).ctipo IN (8, 9)
      THEN
         /*JRH Para que no se queje de que es nulo el PK_NUEVAPRODUCCION*/
         IF gar (npos).icapital IS NULL
         THEN
            gar (npos).icapital := 0;
         END IF;
      END IF;

      vpasexec := 9;
      gar (npos).esextra := 1;

      IF gar IS NOT NULL
      THEN
         IF gar.COUNT > 0
         THEN
            FOR vgar IN gar.FIRST .. gar.LAST
            LOOP
               IF gar.EXISTS (vgar)
               THEN
                  nerr := f_grabarobjetodbgar (gar (vgar), nriesgo, mensajes);

                  IF nerr > 0
                  THEN
                     vpasexec := 10;
                     RAISE e_object_error;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabardetgarantias;

   FUNCTION f_set_desglosegar (
      psseguro        IN       NUMBER,
      pcgarant        IN       NUMBER,
      pnriesgo        IN       NUMBER,
      pnmovimi        IN       NUMBER,
      pnorden         IN       NUMBER,
      pcconcepto      IN       NUMBER,
      ptdescripcion   IN       VARCHAR2,
      picapital       IN       NUMBER,
      pnseq_out       OUT      NUMBER,
      mensajes        OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec    NUMBER (8)       := 1;
      vparam      VARCHAR2 (1)     := NULL;
      vobject     VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.f_set_desglosegar';
      terror      VARCHAR2 (200) := 'Error grabando el desglose de capitales';
      squery      VARCHAR2 (400);
      vnseq       NUMBER;
      trobat      BOOLEAN          := FALSE;
      vnorden     NUMBER;
      v_index     NUMBER;
      nerr        NUMBER;
      gar         t_iax_garantias;
      tgr         ob_iax_garantias;
      rie         ob_iax_riesgos;
      vicapital   NUMBER           := 0;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001093);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      gar := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;
      vnorden := pnorden;

      IF gar IS NOT NULL
      THEN
         IF gar.COUNT > 0
         THEN
            FOR vgar IN gar.FIRST .. gar.LAST
            LOOP
               IF gar.EXISTS (vgar)
               THEN
                  IF gar (vgar).cgarant = pcgarant
                  THEN
                     IF     gar (vgar).desglose IS NOT NULL
                        AND gar (vgar).desglose.COUNT > 0
                     THEN
                        FOR vdes IN
                           gar (vgar).desglose.FIRST .. gar (vgar).desglose.LAST
                        LOOP
                           IF gar (vgar).desglose.EXISTS (vdes)
                           THEN
                              IF gar (vgar).desglose (vdes).norden = pnorden
                              THEN
                                 trobat := TRUE;
                                 gar (vgar).desglose (vdes).norden := pnorden;
                                 gar (vgar).desglose (vdes).cconcepto :=
                                                                   pcconcepto;
                                 gar (vgar).desglose (vdes).tconcepto :=
                                    pac_iax_listvalores.f_getdescripvalores
                                                                 (1,
                                                                  pcconcepto,
                                                                  mensajes
                                                                 );
                                 /* Falta crear el detvalores que toqui*/
                                 gar (vgar).desglose (vdes).tdescripcion :=
                                                                 ptdescripcion;
                                 gar (vgar).desglose (vdes).icapital :=
                                                            NVL (picapital, 0);
                                 vicapital := vicapital + NVL (picapital, 0);
                              ELSE
                                 vicapital :=
                                      vicapital
                                    + NVL (gar (vgar).desglose (vdes).icapital,
                                           0
                                          );
                              END IF;
                           END IF;
                        END LOOP;
                     END IF;

                     IF trobat = FALSE
                     THEN
                        /*nueva linea*/
                        vnorden := 1;

                        IF gar (vgar).desglose IS NULL
                        THEN
                           gar (vgar).desglose := t_iax_desglose_gar ();
                        ELSIF gar (vgar).desglose.COUNT > 0
                        THEN
                           vnorden :=
                                NVL
                                   (gar (vgar).desglose
                                                      (gar (vgar).desglose.LAST
                                                      ).norden,
                                    0
                                   )
                              + 1;
                        END IF;

                        vpasexec := 7;
                        gar (vgar).desglose.EXTEND;
                        v_index := gar (vgar).desglose.LAST;
                        gar (vgar).desglose (v_index) :=
                                                        ob_iax_desglose_gar
                                                                           ();
                        gar (vgar).desglose (v_index).norden := vnorden;
                        gar (vgar).desglose (v_index).cconcepto := pcconcepto;
                        gar (vgar).desglose (v_index).tconcepto :=
                           pac_iax_listvalores.f_getdescripvalores
                                                                  (1,
                                                                   pcconcepto,
                                                                   mensajes
                                                                  );
                        gar (vgar).desglose (v_index).tdescripcion :=
                                                                 ptdescripcion;
                        gar (vgar).desglose (v_index).icapital :=
                                                            NVL (picapital, 0);
                        vicapital := vicapital + NVL (picapital, 0);
                     END IF;

                     gar (vgar).icapital := vicapital;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      nerr :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                pnriesgo,
                                                gar,
                                                mensajes
                                               );

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001102);
         vpasexec := 20;
         RAISE e_object_error;
      END IF;

      pnseq_out := vnorden;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_desglosegar;

   FUNCTION f_del_desglosegar (
      psseguro   IN       NUMBER,
      pcgarant   IN       NUMBER,
      pnriesgo   IN       NUMBER,
      pnmovimi   IN       NUMBER,
      pnorden    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec    NUMBER (8)       := 1;
      vparam      VARCHAR2 (1)     := NULL;
      vobject     VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.f_del_desglosegar';
      terror      VARCHAR2 (200)
                               := 'Error eliminando el desglose de capitales';
      vnorden     NUMBER;
      v_index     NUMBER;
      nerr        NUMBER;
      gar         t_iax_garantias;
      tgr         ob_iax_garantias;
      rie         ob_iax_riesgos;
      vicapital   NUMBER           := 0;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001093);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      gar := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      IF gar IS NOT NULL
      THEN
         IF gar.COUNT > 0
         THEN
            FOR vgar IN gar.FIRST .. gar.LAST
            LOOP
               IF gar.EXISTS (vgar)
               THEN
                  IF gar (vgar).cgarant = pcgarant
                  THEN
                     IF     gar (vgar).desglose IS NOT NULL
                        AND gar (vgar).desglose.COUNT > 0
                     THEN
                        FOR vdes IN
                           gar (vgar).desglose.FIRST .. gar (vgar).desglose.LAST
                        LOOP
                           IF gar (vgar).desglose.EXISTS (vdes)
                           THEN
                              IF gar (vgar).desglose (vdes).norden = pnorden
                              THEN
                                 vicapital :=
                                          gar (vgar).desglose (vdes).icapital;
                                 gar (vgar).desglose.DELETE (vdes);
                                 gar (vgar).icapital :=
                                      NVL (gar (vgar).icapital, 0)
                                    - NVL (vicapital, 0);
                              END IF;
                           END IF;
                        END LOOP;
                     END IF;
                  END IF;

                  IF gar (vgar).icapital < 0
                  THEN
                     gar (vgar).icapital := 0;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      nerr :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                pnriesgo,
                                                gar,
                                                mensajes
                                               );

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001102);
         vpasexec := 20;
         RAISE e_object_error;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_del_desglosegar;

   FUNCTION f_get_garantias_bd (pnriesgo IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      vpasexec    NUMBER (8)       := 1;
      vparam      VARCHAR2 (1)     := NULL;
      vobject     VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.f_get_garantias_bd';
      terror      VARCHAR2 (200)   := 'Error recuperando garantias';
      vnorden     NUMBER;
      v_index     NUMBER;
      nerr        NUMBER;
      gar         t_iax_garantias;
      tgr         ob_iax_garantias;
      rie         ob_iax_riesgos;
      vicapital   NUMBER           := 0;
      vmodo       VARCHAR2 (30);
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /*pac_md_obtenerdatos.define_mode(pac_iax_produccion.vpmode, mensajes);*/
      nerr :=
         pac_md_obtenerdatos.f_inicializa (pac_iax_produccion.vpmode,
                                           pac_iax_produccion.vsolicit,
                                           pac_iax_produccion.vnmovimi,
                                           mensajes
                                          );
      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001093);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      gar := pac_md_obtenerdatos.f_leegarantias (pnriesgo, mensajes);
      nerr :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                pnriesgo,
                                                gar,
                                                mensajes
                                               );

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001102);
         vpasexec := 20;
         RAISE e_object_error;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_get_garantias_bd;

   /*************************************************************************
   Lee datos gestion
   param out mensajes : mensajes de error
   return             : objeto datos gestion
   *************************************************************************/
   /* Bug 16106 - RSC - 23/09/2010 - APR - Ajustes e implementacion para el alta de colectivos*/
   FUNCTION f_leedatosreglasseg (mensajes OUT t_iax_mensajes)
      RETURN ob_iax_reglasseg
   IS
      reglas     ob_iax_reglasseg;
      nerr       NUMBER;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.f_leedatosreglasseg';
      vnriesgo   NUMBER;
      vcgarant   NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;

      FOR i IN
         poliza.det_poliza.polinfo.FIRST .. poliza.det_poliza.polinfo.LAST
      LOOP
         IF LOWER (poliza.det_poliza.polinfo (i).nombre_columna) = 'nriesgo'
         THEN
            vnriesgo := poliza.det_poliza.polinfo (i).valor_columna;
         END IF;

         IF LOWER (poliza.det_poliza.polinfo (i).nombre_columna) = 'cgarant'
         THEN
            vcgarant := poliza.det_poliza.polinfo (i).valor_columna;
         END IF;
      END LOOP;

      vpasexec := 3;

      IF vnriesgo IS NULL OR vcgarant IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 4;
      reglas :=
         pac_iobj_prod.f_partpoldatosreglasseg (poliza.det_poliza,
                                                vnriesgo,
                                                vcgarant,
                                                mensajes
                                               );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 1;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN reglas;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leedatosreglasseg;

   /*************************************************************************
   Lee datos gestion
   param out mensajes : mensajes de error
   return             : objeto datos gestion
   *************************************************************************/
   FUNCTION f_leedatosreglassegtramos (mensajes OUT t_iax_mensajes)
      RETURN t_iax_reglassegtramos
   IS
      reglas     t_iax_reglassegtramos;
      nerr       NUMBER;
      vpasexec   NUMBER (8)            := 1;
      vparam     VARCHAR2 (1)          := NULL;
      vobject    VARCHAR2 (200)
                            := 'PAC_IAX_PRODUCCION.f_leedatosreglassegtramos';
      vnriesgo   NUMBER;
      vcgarant   NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;

      FOR i IN
         poliza.det_poliza.polinfo.FIRST .. poliza.det_poliza.polinfo.LAST
      LOOP
         IF LOWER (poliza.det_poliza.polinfo (i).nombre_columna) = 'nriesgo'
         THEN
            vnriesgo := poliza.det_poliza.polinfo (i).valor_columna;
         END IF;

         IF LOWER (poliza.det_poliza.polinfo (i).nombre_columna) = 'cgarant'
         THEN
            vcgarant := poliza.det_poliza.polinfo (i).valor_columna;
         END IF;
      END LOOP;

      vpasexec := 3;

      IF vnriesgo IS NULL OR vcgarant IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 4;
      reglas :=
         pac_iobj_prod.f_partpoldatosreglassegtramos (poliza.det_poliza,
                                                      vnriesgo,
                                                      vcgarant,
                                                      mensajes
                                                     );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 1;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN reglas;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leedatosreglassegtramos;

   /*************************************************************************
   Grabar datos reglasseg
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabardatosreglasseg (
      pcapmaxemp   IN       NUMBER,
      pcapminemp   IN       NUMBER,
      pcapmaxtra   IN       NUMBER,
      pcapmintra   IN       NUMBER,
      mensajes     OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      reglas     ob_iax_reglasseg;
      vnriesgo   NUMBER;
      vcgarant   NUMBER;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (4000)
         :=    'pcapmaxemp='
            || pcapmaxemp
            || ' pcapminemp='
            || pcapminemp
            || ' pcapmaxtra='
            || pcapmaxtra
            || ' pcapmintra='
            || pcapmintra;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_grabardatosreglasseg';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;

      FOR i IN
         poliza.det_poliza.polinfo.FIRST .. poliza.det_poliza.polinfo.LAST
      LOOP
         IF LOWER (poliza.det_poliza.polinfo (i).nombre_columna) = 'nriesgo'
         THEN
            vnriesgo := poliza.det_poliza.polinfo (i).valor_columna;
         END IF;

         IF LOWER (poliza.det_poliza.polinfo (i).nombre_columna) = 'cgarant'
         THEN
            vcgarant := poliza.det_poliza.polinfo (i).valor_columna;
         END IF;
      END LOOP;

      vpasexec := 3;

      IF vnriesgo IS NULL OR vcgarant IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 4;
      reglas :=
         pac_iobj_prod.f_set_partpoldatosregla (poliza.det_poliza,
                                                vnriesgo,
                                                vcgarant,
                                                pcapmaxemp,
                                                pcapminemp,
                                                pcapmaxtra,
                                                pcapmintra,
                                                mensajes
                                               );

      IF reglas IS NULL
      THEN
         RAISE e_object_error;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabardatosreglasseg;

   /*************************************************************************
   Grabar datos reglassegtramos
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabardatosreglassegtramos (
      pnumbloq   IN       NUMBER,
      pedadini   IN       NUMBER,
      pedadfin   IN       NUMBER,
      pt1emp     IN       NUMBER,
      pt1trab    IN       NUMBER,
      pt2emp     IN       NUMBER,
      pt2trab    IN       NUMBER,
      pt3emp     IN       NUMBER,
      pt3trab    IN       NUMBER,
      pt4emp     IN       NUMBER,
      pt4trab    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      reglas     t_iax_reglassegtramos;
      vpasexec   NUMBER (8)            := 1;
      vparam     VARCHAR2 (4000)
         :=    'pnumbloq='
            || pnumbloq
            || ' pedadini='
            || pedadini
            || ' pedadfin='
            || pedadfin
            || ' pt1emp='
            || pt1emp
            || ' pt1trab='
            || pt1trab
            || ' pt2emp='
            || pt2emp
            || ' pt2trab='
            || pt2trab
            || ' pt3emp='
            || pt3emp
            || ' pt3trab='
            || pt3trab
            || ' pt4emp='
            || pt4emp
            || ' pt4trab='
            || pt4trab;
      vobject    VARCHAR2 (200)
                          := 'PAC_IAX_PRODUCCION.f_grabardatosreglassegtramos';
      vcgarant   NUMBER;
      vnriesgo   NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;

      FOR i IN
         poliza.det_poliza.polinfo.FIRST .. poliza.det_poliza.polinfo.LAST
      LOOP
         IF LOWER (poliza.det_poliza.polinfo (i).nombre_columna) = 'nriesgo'
         THEN
            vnriesgo := poliza.det_poliza.polinfo (i).valor_columna;
         END IF;

         IF LOWER (poliza.det_poliza.polinfo (i).nombre_columna) = 'cgarant'
         THEN
            vcgarant := poliza.det_poliza.polinfo (i).valor_columna;
         END IF;
      END LOOP;

      vpasexec := 3;

      IF vnriesgo IS NULL OR vcgarant IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 4;
      reglas :=
         pac_iobj_prod.f_set_partpoldatosreglatramos (poliza.det_poliza,
                                                      vnriesgo,
                                                      vcgarant,
                                                      pnumbloq,
                                                      pedadini,
                                                      pedadfin,
                                                      pt1emp,
                                                      pt1trab,
                                                      pt2emp,
                                                      pt2trab,
                                                      pt3emp,
                                                      pt3trab,
                                                      pt4emp,
                                                      pt4trab,
                                                      mensajes
                                                     );

      IF reglas IS NULL
      THEN
         RAISE e_object_error;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabardatosreglassegtramos;

   /*************************************************************************
   Alta datos reglassegtramos
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_altareglassegtramos (
      pnumbloq   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      reglas     t_iax_reglassegtramos;
      vpasexec   NUMBER (8)            := 1;
      vparam     VARCHAR2 (500)        := '';
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_altareglassegtramos';
      vnriesgo   NUMBER;
      vcgarant   NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;

      FOR i IN
         poliza.det_poliza.polinfo.FIRST .. poliza.det_poliza.polinfo.LAST
      LOOP
         IF LOWER (poliza.det_poliza.polinfo (i).nombre_columna) = 'nriesgo'
         THEN
            vnriesgo := poliza.det_poliza.polinfo (i).valor_columna;
         END IF;

         IF LOWER (poliza.det_poliza.polinfo (i).nombre_columna) = 'cgarant'
         THEN
            vcgarant := poliza.det_poliza.polinfo (i).valor_columna;
         END IF;
      END LOOP;

      vpasexec := 3;

      IF vnriesgo IS NULL OR vcgarant IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 4;
      reglas :=
         pac_iobj_prod.f_set_partpoldatosreglatramos (poliza.det_poliza,
                                                      vnriesgo,
                                                      vcgarant,
                                                      pnumbloq,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      0,
                                                      mensajes
                                                     );

      IF reglas IS NULL
      THEN
         RAISE e_object_error;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_altareglassegtramos;

   /*************************************************************************
   Alta datos reglasseg
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_altareglasseg (
      pnriesgo   IN       NUMBER,
      pcgarant   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      reglas     ob_iax_reglasseg;
      vnumerr    NUMBER;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (500)   := '';
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.f_altareglasseg';
      vnriesgo   NUMBER           := 0;
      vcgarant   NUMBER           := 0;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;

      IF poliza.det_poliza.polinfo IS NULL
      THEN
         poliza.det_poliza.polinfo := t_iax_info ();
      END IF;

      vpasexec := 3;

      IF poliza.det_poliza.polinfo.COUNT > 0
      THEN
         FOR i IN
            poliza.det_poliza.polinfo.FIRST .. poliza.det_poliza.polinfo.LAST
         LOOP
            IF LOWER (poliza.det_poliza.polinfo (i).nombre_columna) =
                                                                    'nriesgo'
            THEN
               poliza.det_poliza.polinfo (i).valor_columna := pnriesgo;
               vnriesgo := 1;
            END IF;

            IF LOWER (poliza.det_poliza.polinfo (i).nombre_columna) =
                                                                     'cgarant'
            THEN
               poliza.det_poliza.polinfo (i).valor_columna := pcgarant;
               vcgarant := 1;
            END IF;
         END LOOP;
      END IF;

      vpasexec := 4;

      IF vnriesgo = 0
      THEN
         poliza.det_poliza.polinfo.EXTEND;
         poliza.det_poliza.polinfo (poliza.det_poliza.polinfo.LAST) :=
                                                               ob_iax_info
                                                                          ();
         poliza.det_poliza.polinfo (poliza.det_poliza.polinfo.LAST).nombre_columna :=
                                                                    'NRIESGO';
         poliza.det_poliza.polinfo (poliza.det_poliza.polinfo.LAST).valor_columna :=
                                                                     pnriesgo;
      END IF;

      vpasexec := 5;

      IF vcgarant = 0
      THEN
         poliza.det_poliza.polinfo.EXTEND;
         poliza.det_poliza.polinfo (poliza.det_poliza.polinfo.LAST) :=
                                                               ob_iax_info
                                                                          ();
         poliza.det_poliza.polinfo (poliza.det_poliza.polinfo.LAST).nombre_columna :=
                                                                    'CGARANT';
         poliza.det_poliza.polinfo (poliza.det_poliza.polinfo.LAST).valor_columna :=
                                                                     pcgarant;
      END IF;

      vpasexec := 6;
      reglas := f_leedatosreglasseg (mensajes);

      IF reglas.reglassegtramos IS NULL OR reglas.reglassegtramos.COUNT = 0
      THEN
         reglas :=
            pac_iobj_prod.f_set_partpoldatosregla (poliza.det_poliza,
                                                   pnriesgo,
                                                   pcgarant,
                                                   0,
                                                   0,
                                                   0,
                                                   0,
                                                   mensajes
                                                  );

         IF reglas IS NULL
         THEN
            RAISE e_object_error;
         END IF;

         vnumerr := f_altareglassegtramos (1, mensajes);

         IF vnumerr IS NULL
         THEN
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_altareglasseg;

   /*************************************************************************
   Graba capitales ob_iax_reglasseg
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************tur
   FUNCTION f_grabasigtramos(
   pcapmaxemp IN NUMBER,
   pcapminemp IN NUMBER,
   pcapmaxtra IN NUMBER,
   pcapmintra IN NUMBER,
   mensajes OUT t_iax_mensajes)
   RETURN NUMBER IS
   reglas         ob_iax_reglasseg;
   vpasexec       NUMBER(8) := 1;
   vparam         VARCHAR2(1000)
   := 'pcapmaxemp=' || pcapmaxemp || ' pcapminemp=' || pcapminemp || ' pcapmaxtra='
   || pcapmaxtra || ' pcapmintra=' || pcapmintra;
   vobject        VARCHAR2(200) := 'PAC_IAX_PRODUCCION.f_grabasigtramos';
   BEGIN
   IF poliza.det_poliza IS NULL THEN
   pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 1000644);
   RAISE e_param_error;
   END IF;
   vpasexec := 2;
   reglas := pac_iobj_prod.f_partpoldatosreglasseg(poliza.det_poliza, mensajes);
   IF reglas IS NULL THEN
   reglas := ob_iax_reglasseg();
   END IF;
   reglas.capmaxemp := pcapmaxemp;
   reglas.capminemp := pcapminemp;
   reglas.capmaxtra := pcapmaxtra;
   reglas.capmintra := pcapmintra;
   poliza.det_poliza.reglasseg := reglas;
   RETURN 0;
   EXCEPTION
   WHEN e_param_error THEN
   pac_iobj_mensajes.p_tratarmensaje(mensajes, vobject, 1000005, vpasexec, vparam);
   RETURN 1;
   WHEN e_object_error THEN
   pac_iobj_mensajes.p_tratarmensaje(mensajes, vobject, 1000006, vpasexec, vparam);
   RETURN 1;
   WHEN OTHERS THEN
   pac_iobj_mensajes.p_tratarmensaje(mensajes, vobject, 1000001, vpasexec, vparam,
   psqcode => SQLCODE, psqerrm => SQLERRM);
   RETURN 1;
   END f_grabasigtramos;*/
   /* Fin Bug 16106*/
   /*************************************************************************
   Recupera la forma de pagament
   param out mensajes : mensajes de error
   return             : forma de pagament o nulo si ha habido errores
   *************************************************************************/
   FUNCTION f_get_fprestaseg (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_GarForpag';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      RETURN poliza.det_poliza.gestion.cfprest;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_fprestaseg;

   /***********************************************************************
   Funcion que nos marcara si estamos en el alta de un colectivo o no
   param out mensajes : mensajes de error
   return             : number  0 -> Ok  1 --> Error
   ***********************************************************************/
   FUNCTION f_set_isaltacolect (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      vpasexec      NUMBER (8)     := 1;
      vparam        VARCHAR2 (500);
      vobject       VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_set_isaltacolect';
      /*poliza         OB_IAX_DETPOLIZA;*/
      num_err       NUMBER;
      v_existe      NUMBER;
      v_escertif0   NUMBER;
   BEGIN
      vpasexec := 2;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      IF NVL (f_parproductos_v (vproducto, 'ADMITE_CERTIFICADOS'), 0) = 1
      THEN
         /* vsseguro: en modificaci??e propuestas en el sseguro del certificado 0 en las reales.*/
         v_existe :=
                   pac_seguros.f_get_escertifcero (poliza.det_poliza.npoliza);
         v_escertif0 := pac_seguros.f_get_escertifcero (NULL, vsseguro);

         IF v_escertif0 > 0
         THEN
            isaltacol := TRUE;
         ELSE
            IF v_existe > 0
            THEN
               isaltacol := FALSE;
            ELSE
               isaltacol := TRUE;
            END IF;
         END IF;
      ELSE
         isaltacol := FALSE;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_isaltacolect;

   /* Fin Bug 16106*/
   /*--Bug 16410 JBN INICIO*/
   /*************************************************************************
   Graba los parametros de una clausulas de producto indicadas por el usuario
   param in  sclagen  : codigo clausula producto generica
   param in  selclau  : 1 indica que se ha seleccionado clausula
   0 indica que se ha deseleccionado la clausula
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabaclausula (
      sclagen    IN       NUMBER,
      nparame    IN       NUMBER,
      tclagen    IN       VARCHAR2,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      clau          t_iax_clausulas;
      npos          NUMBER;
      vpasexec      NUMBER (8)      := 1;
      vparam        VARCHAR2 (1)    := NULL;
      vobject       VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_GrabaClausulas';
      /*ACC 13122008*/
      nerrfefec     NUMBER;
      vefectsuple   DATE            := NULL;
      nerrval       NUMBER;

      /* Bug 18362 - APD - 17/05/2011*/
      /*ACC 13122008*/
      /* BUG9107:DRA:18-02-2009: Buscamos el NORDCLA mayor*/
      FUNCTION max_nordcla
         RETURN NUMBER
      IS
         v_max   NUMBER := 0;
      BEGIN
         IF clau IS NULL
         THEN
            RETURN 0;
         END IF;

         IF clau.COUNT = 0
         THEN
            RETURN 0;
         END IF;

         FOR vclau IN clau.FIRST .. clau.LAST
         LOOP
            IF clau.EXISTS (vclau)
            THEN
               IF clau (vclau).cidentity > v_max
               THEN
                  v_max := clau (vclau).cidentity;
               END IF;
            END IF;
         END LOOP;

         RETURN v_max;
      END max_nordcla;

      /* comproba que el codigo de clausula no exista*/
      /* devuelve la posicion del indice o bien -1 sino existe*/
      FUNCTION existclau (sclapro IN NUMBER)
         RETURN NUMBER
      IS
      BEGIN
         IF clau IS NULL
         THEN
            RETURN -1;
         END IF;

         IF clau.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vclau IN clau.FIRST .. clau.LAST
         LOOP
            IF clau.EXISTS (vclau)
            THEN
               IF clau (vclau).sclagen = sclapro
               THEN
                  RETURN vclau;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existclau;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      clau :=
         pac_iobj_prod.f_partpolclausulas (poliza.det_poliza, mensajes,
                                           vpmode);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 1;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 3;

      IF clau IS NULL
      THEN
         clau := t_iax_clausulas ();
      END IF;

      vpasexec := 4;
      npos := existclau (sclagen);
      vpasexec := 5;
      vpasexec := 6;

      /* inserta una nova clausula*/
      IF npos = -1
      THEN
         clau.EXTEND;
         npos := clau.LAST;
         clau (npos) := ob_iax_clausulas ();
      END IF;

      /* Bug 18362 - APD - 23/05/2011 - si el ctipo is not nulo se debe dejar el tipo*/
      /* de clausula que ya tenia*/
      IF clau (npos).ctipo IS NULL OR clau (npos).ctipo = 0
      THEN
         clau (npos).ctipo := 4;
      END IF;

      /* fIN Bug 18362 - APD - 23/05/2011*/
      clau (npos).sclagen := sclagen;

      IF clau (npos).parametros IS NULL OR clau (npos).parametros.COUNT = 0
      THEN
         clau (npos).parametros :=
            pac_mdpar_productos.f_get_clausulas (sclagen,
                                                 clau (npos).cparams,
                                                 mensajes
                                                );
      END IF;

      FOR cur_param IN
         clau (npos).parametros.FIRST .. clau (npos).parametros.LAST
      LOOP
         IF clau (npos).parametros (cur_param).nparame = nparame
         THEN
            IF clau (npos).parametros (cur_param).cformat = 2
            THEN
               clau (npos).parametros (cur_param).ttexto :=
                  clau (npos).parametros (cur_param).valores (tclagen).tparame;
            ELSE
               clau (npos).parametros (cur_param).ttexto := tclagen;
            END IF;

            /* Bug 18362 - APD - 17/05/2011 - se valida el valor del parametro*/
            nerrval :=
               pac_md_validaciones.f_valida_claupar
                                    (poliza.det_poliza.sseguro,
                                     poliza.det_poliza.gestion.cactivi,
                                     poliza.det_poliza.gestion.fefecto,
                                     poliza.det_poliza.riesgos (1).nriesgo,
                                     poliza.det_poliza.nmovimi,
                                     NULL,
                                     'EST',
                                     -- ptablas
                                     clau (npos).sclagen,
                                     clau (npos).parametros (cur_param).nparame,
                                     clau (npos).parametros,
                                     mensajes
                                    );

            IF (nerrval <> 0)
            THEN
               /*pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 9902019);   -- El valor del parametro no es correcto*/
               RAISE e_object_error;
            END IF;
         /* fin Bug 18362 - APD - 17/05/2011*/
         END IF;
      END LOOP;

      /*ACC 1312008 si es suplement ha de controlar data efcte*/
      IF issuplem
      THEN
         nerrfefec :=
            pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                   vnmovimi,
                                                   vefectsuple,
                                                   mensajes
                                                  );

         IF (nerrfefec <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001103);
            RAISE e_object_error;
         END IF;
      END IF;

      /*ACC 1312008*/
      clau (npos).finiclau :=
                          NVL (vefectsuple, poliza.det_poliza.gestion.fefecto);
      /*ACC 1312008 si es suplement ha de controlar data efcte --/// ACC*/
      clau (npos).ffinclau := NULL;

      /*/// ACC*/
      /*clau(npos).cidentity := clau.count +1;*/
      /* Bug 18362 - APD - 02/06/2011 - si el ctipo es 2, 3 se debe guardar el cidentity*/
      /* ya que son un tipo de clausulas especiales*/
      IF clau (npos).ctipo IN (2, 3) AND clau (npos).cidentity = 0
      THEN
         clau (npos).cidentity := max_nordcla () + 1;
      /* clau.LAST;  -- BUG9107:DRA:18-02-2009*/
      END IF;

      /* Fin Bug 18362 - APD - 02/06/2011*/
      poliza.det_poliza.clausulas := clau;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabaclausula;

   /*************************************************************************
   Graba los parametros de una clausulas de producto indicadas por el usuario
   param in  sclagen  : codigo clausula producto generica
   param in  selclau  : 1 indica que se ha seleccionado clausula
   0 indica que se ha deseleccionado la clausula
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabaclausulamult (
      sclagen    IN       NUMBER,
      nordcla    IN       NUMBER,
      nparame    IN       NUMBER,
      tclagen    IN       VARCHAR2,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      clau          t_iax_clausulas;
      npos          NUMBER;
      vpasexec      NUMBER (8)      := 1;
      vparam        VARCHAR2 (1)    := NULL;
      vobject       VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_GrabaClausulas';
      /*ACC 13122008*/
      vcformat      NUMBER;
      vtparame      VARCHAR2 (2000);
      vtclagen      VARCHAR2 (2000);
      nerrfefec     NUMBER;
      vefectsuple   DATE            := NULL;
      nerrval       NUMBER;
      /* Bug 18362 - APD - 17/05/2011*/
      vnumerr       NUMBER;
      vdummy        VARCHAR2 (100);

      /*ACC 13122008*/
      /* BUG9107:DRA:18-02-2009: Buscamos el NORDCLA mayor*/
      FUNCTION max_nordcla
         RETURN NUMBER
      IS
         v_max   NUMBER := 0;
      BEGIN
         IF clau IS NULL
         THEN
            RETURN 0;
         END IF;

         IF clau.COUNT = 0
         THEN
            RETURN 0;
         END IF;

         FOR vclau IN clau.FIRST .. clau.LAST
         LOOP
            IF clau.EXISTS (vclau)
            THEN
               IF clau (vclau).cidentity > v_max
               THEN
                  v_max := clau (vclau).cidentity;
               END IF;
            END IF;
         END LOOP;

         RETURN v_max;
      END max_nordcla;

      /* comproba que el codigo de clausula no exista*/
      /* devuelve la posicion del indice o bien -1 sino existe*/
      FUNCTION existclau (sclapro IN NUMBER, nordcla IN NUMBER)
         RETURN NUMBER
      IS
      BEGIN
         IF clau IS NULL
         THEN
            RETURN -1;
         END IF;

         IF clau.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vclau IN clau.FIRST .. clau.LAST
         LOOP
            IF clau.EXISTS (vclau)
            THEN
               IF     clau (vclau).sclagen = sclapro
                  AND clau (vclau).cidentity = nordcla
               THEN
                  RETURN vclau;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existclau;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      clau :=
         pac_iobj_prod.f_partpolclausulas (poliza.det_poliza, mensajes,
                                           vpmode);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 1;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 3;

      IF clau IS NULL
      THEN
         clau := t_iax_clausulas ();
      END IF;

      vpasexec := 4;
      npos := existclau (sclagen, nordcla);
      vpasexec := 5;

      /* inserta una nova clausula*/
      IF npos = -1
      THEN
         clau.EXTEND;
         npos := clau.LAST;
         clau (npos) := ob_iax_clausulas ();
         vnumerr :=
            pac_productos.f_get_clausugen (sclagen,
                                           pac_md_common.f_get_cxtidioma,
                                           vdummy,
                                           clau (npos).tclagen
                                          );
         clau (npos).tclagen := vdummy || ' - ' || clau (npos).tclagen;
         vtclagen := clau (npos).tclagen;
         clau (npos).cidentity := 0;
      ELSE
         clau (npos).cidentity := nordcla;
      END IF;

      /* Inicio BUG 24656/129268 HPM- 13/11/2012*/
      vnumerr :=
         pac_productos.f_get_clausugen (sclagen,
                                        pac_md_common.f_get_cxtidioma,
                                        vdummy,
                                        vtclagen
                                       );
      vtclagen := vdummy || ' - ' || vtclagen;
      /* FIN BUG 24656/129268 HPM- 13/11/2012*/
      clau (npos).ctipo := 8;
      vpasexec := 6;
      /* fIN Bug 18362 - APD - 23/05/2011*/
      clau (npos).sclagen := sclagen;

      IF clau (npos).parametros IS NULL OR clau (npos).parametros.COUNT = 0
      THEN
         clau (npos).parametros :=
            pac_mdpar_productos.f_get_clausulas (sclagen,
                                                 clau (npos).cparams,
                                                 mensajes
                                                );
      END IF;

      vpasexec := 7;

      FOR cur_param IN
         clau (npos).parametros.FIRST .. clau (npos).parametros.LAST
      LOOP
         IF clau (npos).parametros (cur_param).nparame = nparame
         THEN
            clau (npos).parametros (cur_param).ttexto := tclagen;
            /* Bug 18362 - APD - 17/05/2011 - se valida el valor del parametro*/
            nerrval :=
               pac_md_validaciones.f_valida_claupar
                                   (poliza.det_poliza.sseguro,
                                    poliza.det_poliza.gestion.cactivi,
                                    poliza.det_poliza.gestion.fefecto,
                                    poliza.det_poliza.riesgos (1).nriesgo,
                                    poliza.det_poliza.nmovimi,
                                    NULL,
                                    'EST',
                                    -- ptablas
                                    clau (npos).sclagen,
                                    clau (npos).parametros (cur_param).nparame,
                                    clau (npos).parametros,
                                    mensajes
                                   );

            IF (nerrval <> 0)
            THEN
               clau (npos).tclagen := vtclagen;
               /*pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 9902019);   -- El valor del parametro no es correcto*/
               RAISE e_object_error;
            END IF;

            SELECT cformat
              INTO vcformat
              FROM clausupara
             WHERE sclagen = clau (npos).sclagen
               AND nparame = clau (npos).parametros (cur_param).nparame
               AND cidioma = pac_md_common.f_get_cxtidioma;

            IF vcformat <> 2
            THEN
               clau (npos).tclagen :=
                  REPLACE (clau (npos).tclagen,
                           '#' || nparame || '#',
                           tclagen
                          );
            ELSIF vcformat = 2
            THEN
               IF tclagen IS NOT NULL
               THEN
                  SELECT tparame
                    INTO vtparame
                    FROM clausupara_valores
                   WHERE sclagen = clau (npos).sclagen
                     AND nparame = clau (npos).parametros (cur_param).nparame
                     AND cidioma = pac_md_common.f_get_cxtidioma
                     AND cparame = TO_NUMBER (tclagen);

                  clau (npos).tclagen :=
                     REPLACE (clau (npos).tclagen,
                              '#' || nparame || '#',
                              vtparame
                             );
               ELSE
                  clau (npos).tclagen :=
                     REPLACE (clau (npos).tclagen,
                              '#' || nparame || '#',
                              tclagen
                             );
               END IF;
            END IF;

            /* Inicio BUG 24656/129268 HPM- 13/11/2012*/
            clau (npos).tclagen :=
                 REPLACE (clau (npos).tclagen, '#' || nparame || '#', tclagen);
         /* Fin BUG 24656/129268 HPM- 13/11/2012*/
         /**/
         /* fin Bug 18362 - APD - 17/05/2011*/
         END IF;
      END LOOP;

      /*ACC 1312008 si es suplement ha de controlar data efcte*/
      IF issuplem
      THEN
         nerrfefec :=
            pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                   vnmovimi,
                                                   vefectsuple,
                                                   mensajes
                                                  );

         IF (nerrfefec <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001103);
            RAISE e_object_error;
         END IF;
      END IF;

      /*ACC 1312008*/
      clau (npos).finiclau :=
                          NVL (vefectsuple, poliza.det_poliza.gestion.fefecto);
      /*ACC 1312008 si es suplement ha de controlar data efcte --/// ACC*/
      clau (npos).ffinclau := NULL;

      /*/// ACC*/
      /*clau(npos).cidentity := clau.count +1;*/
      /* Bug 18362 - APD - 02/06/2011 - si el ctipo es 2, 3 se debe guardar el cidentity*/
      /* ya que son un tipo de clausulas especiales*/
      IF clau (npos).cidentity = 0
      THEN
         clau (npos).cidentity := max_nordcla () + 1;
      /* clau.LAST;  -- BUG9107:DRA:18-02-2009*/
      END IF;

      /* Fin Bug 18362 - APD - 02/06/2011*/
      poliza.det_poliza.clausulas := clau;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabaclausulamult;

   /*************************************************************************
   Recupera una clausulas que el usuario a seleccionado o bien automaticas
   a nivel de producto
   param in  psclagen:   Codigo de la clausula
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_leeclausulaprod (psclagen IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN ob_iax_clausulas
   IS
      clau       t_iax_clausulas;
      clab       t_iax_clausulas;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_LeeClausulasProd';
      vnumerr    NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      clau :=
         pac_iobj_prod.f_partpolclausulas (poliza.det_poliza, mensajes,
                                           vpmode);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF clau IS NULL
      THEN
         RETURN NULL;
      ELSE
         IF clau.COUNT = 0
         THEN
            RETURN NULL;
         END IF;
      END IF;

      vpasexec := 5;

      FOR vclau IN clau.FIRST .. clau.LAST
      LOOP
         vpasexec := 6;

         IF clau.EXISTS (vclau)
         THEN
            vpasexec := 7;

            IF clau (vclau).sclagen = psclagen
            THEN
               RETURN clau (vclau);
            END IF;
         END IF;
      END LOOP;

      RETURN NULL;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leeclausulaprod;

   /*************************************************************************
   Recupera una clausulas que el usuario a seleccionado o bien automaticas
   a nivel de producto
   param in  psclagen:   Codigo de la clausula
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   /*FUNCTION f_leeclausulaprodmult(psclagen IN NUMBER,pnordcla IN NUMBER, mensajes OUT t_iax_mensajes)
   RETURN ob_iax_clausulas IS
   clau           t_iax_clausulas;
   clab           t_iax_clausulas;
   vpasexec       NUMBER(8) := 1;
   vparam         VARCHAR2(1) := NULL;
   vobject        VARCHAR2(200) := 'PAC_IAX_PRODUCCION.F_LeeClausulasProd';
   vnumerr        NUMBER;
   BEGIN
   IF poliza.det_poliza IS NULL THEN
   pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 1000644);
   RAISE e_param_error;
   END IF;
   vpasexec := 2;
   clau := pac_iobj_prod.f_partpolclausulas(poliza.det_poliza, mensajes, vpmode);
   IF mensajes IS NOT NULL THEN
   IF mensajes.COUNT > 0 THEN
   vpasexec := 3;
   RAISE e_object_error;
   END IF;
   END IF;
   vpasexec := 4;
   IF clau IS NULL THEN
   RETURN NULL;
   ELSE
   IF clau.COUNT = 0 THEN
   RETURN NULL;
   END IF;
   END IF;
   vpasexec := 5;
   FOR vclau IN clau.FIRST .. clau.LAST LOOP
   vpasexec := 6;
   IF clau.EXISTS(vclau) THEN
   vpasexec := 7;
   IF clau(vclau).sclagen = psclagen THEN
   RETURN clau(vclau);
   END IF;
   END IF;
   END LOOP;
   RETURN NULL;
   EXCEPTION
   WHEN e_param_error THEN
   pac_iobj_mensajes.p_tratarmensaje(mensajes, vobject, 1000005, vpasexec, vparam);
   RETURN NULL;
   WHEN e_object_error THEN
   pac_iobj_mensajes.p_tratarmensaje(mensajes, vobject, 1000006, vpasexec, vparam);
   RETURN NULL;
   WHEN OTHERS THEN
   pac_iobj_mensajes.p_tratarmensaje(mensajes, vobject, 1000001, vpasexec, vparam,
   psqcode => SQLCODE, psqerrm => SQLERRM);
   RETURN NULL;
   END f_leeclausulaprodmult;*/
   /*************************************************************************
   Recupera las clausulas que el usuario a seleccionado o bien automaticas
   a nivel de producto
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_getclausulaparam (sclagen IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN ob_iaxpar_clausulas
   IS
      clau       ob_iaxpar_clausulas;
      vpasexec   NUMBER (8)          := 1;
      vparam     VARCHAR2 (1)        := NULL;
      vobject    VARCHAR2 (200)      := 'PAC_IAX_PRODUCCION.f_leeclausula';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      clau :=
         pac_mdpar_productos.f_get_clausula (poliza.det_poliza.cramo,
                                             poliza.det_poliza.cmodali,
                                             poliza.det_poliza.ctipseg,
                                             poliza.det_poliza.ccolect,
                                             sclagen,
                                             mensajes
                                            );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;
      RETURN clau;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_getclausulaparam;

   /*************************************************************************
   Recupera las clausulas que el usuario a seleccionado o bien automaticas
   a nivel de producto
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_getclausulaparammult (
      sclagen    IN       NUMBER,
      pnordcla   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN ob_iaxpar_clausulas
   IS
      clau          ob_iaxpar_clausulas;
      vpasexec      NUMBER (8)          := 1;
      vparam        VARCHAR2 (1)        := NULL;
      vobject       VARCHAR2 (200)      := 'PAC_IAX_PRODUCCION.f_leeclausula';
      vnewnordcla   NUMBER;
      clau2         t_iax_clausulas;

      FUNCTION max_nordcla
         RETURN NUMBER
      IS
         v_max   NUMBER := 0;
      BEGIN
         IF clau2 IS NULL
         THEN
            RETURN 0;
         END IF;

         IF clau2.COUNT = 0
         THEN
            RETURN 0;
         END IF;

         FOR vclau IN clau2.FIRST .. clau2.LAST
         LOOP
            IF clau2.EXISTS (vclau)
            THEN
               IF clau2 (vclau).cidentity > v_max
               THEN
                  v_max := clau2 (vclau).cidentity;
               END IF;
            END IF;
         END LOOP;

         RETURN v_max;
      END max_nordcla;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      clau :=
         pac_mdpar_productos.f_get_clausulamult (poliza.det_poliza.cramo,
                                                 poliza.det_poliza.cmodali,
                                                 poliza.det_poliza.ctipseg,
                                                 poliza.det_poliza.ccolect,
                                                 sclagen,
                                                 pnordcla,
                                                 mensajes
                                                );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      IF pnordcla = 0
      THEN
         clau2 :=
            pac_iobj_prod.f_partpolclausulas (poliza.det_poliza,
                                              mensajes,
                                              vpmode
                                             );
         clau.norden := max_nordcla + 1;
      END IF;

      vpasexec := 4;
      RETURN clau;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_getclausulaparammult;

   /*************************************************************************
   Borra una clausula que el usuario a deseleccionado
   param in  psclagen:   Codigo de la clausula
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_delclausulaprod (psclagen IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      clau       t_iax_clausulas;
      clab       t_iax_clausulas;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.f_delclausulaprod';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      clau :=
         pac_iobj_prod.f_partpolclausulas (poliza.det_poliza, mensajes,
                                           vpmode);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF clau IS NULL
      THEN
         RETURN 0;
      ELSE
         IF clau.LAST IS NULL                   --  GEK IAXIS-4205 06/07/2019
         THEN
            -- INI GEK IAXIS-4205 06/07/2019
            BEGIN
               DELETE FROM estclaususeg cs
                     WHERE cs.sclagen = psclagen
                       AND cs.sseguro =
                                  (SELECT s.sseguro
                                     FROM seguros s
                                    WHERE npoliza = poliza.det_poliza.npoliza);

               COMMIT;
               RETURN 20;
            EXCEPTION
               WHEN NO_DATA_FOUND
               THEN
                  RETURN 10;
            END;
         -- FIN GEK IAXIS-4205 06/07/2019
         END IF;
      END IF;

      vpasexec := 5;

      FOR vclau IN clau.FIRST .. clau.LAST
      LOOP
         vpasexec := 6;

         IF clau.EXISTS (vclau)
         THEN
            vpasexec := 7;

            IF clau (vclau).sclagen = psclagen
            THEN
               /* clau(vclau).DELETE;*/
               clau.DELETE (vclau);
            END IF;
         END IF;
      END LOOP;

      poliza.det_poliza.clausulas := clau;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_delclausulaprod;

   /*Bug 16410 JBN FIN*/
   /*************************************************************************
   Borra una clausula que el usuario a deseleccionado
   param in  psclagen:   Codigo de la clausula
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_delclausulaprodmult (
      psclagen   IN       NUMBER,
      pnordcla   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      clau       t_iax_clausulas;
      clab       t_iax_clausulas;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_delclausulaprodmult';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      clau :=
         pac_iobj_prod.f_partpolclausulas (poliza.det_poliza, mensajes,
                                           vpmode);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF clau IS NULL
      THEN
         RETURN 0;
      ELSE
         IF clau.COUNT = 0
         THEN
            RETURN 0;
         END IF;
      END IF;

      vpasexec := 5;

      FOR vclau IN clau.FIRST .. clau.LAST
      LOOP
         vpasexec := 6;

         IF clau.EXISTS (vclau)
         THEN
            vpasexec := 7;

            IF     clau (vclau).sclagen = psclagen
               AND clau (vclau).cidentity = pnordcla
               AND clau (vclau).ctipo = 8
            THEN
               clau.DELETE (vclau);
            END IF;
         END IF;
      END LOOP;

      poliza.det_poliza.clausulas := clau;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_delclausulaprodmult;

   /* Bug 17307 - FAL - 01/02/2011 - CRT003 - Traspaso de generico a especifico*/
   /*************************************************************************
   Crea una propuesta de poliza de un producto especifico
   param in  psseguro : codigo de poliza
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido errores
   *************************************************************************/
   FUNCTION f_crearpropuesta (
      psseguro      IN       NUMBER,
      /* poliza del generico*/
      psproducesp   IN       NUMBER,
      /* producto especifico con el q crear la propuesta*/
      osseguro      OUT      NUMBER,
      /* poliza del especifico*/
      mensajes      OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      nerr                   NUMBER;
      vpasexec               NUMBER (8)                     := 1;
      vparam                 VARCHAR2 (100)       := 'psseguro= ' || psseguro;
      vobject                VARCHAR2 (200)
                                     := 'PAC_IAX_PRODUCCION.F_CrearPropuesta';
      polizaesp              ob_iax_poliza;
      /* objeto poliza del especifico*/
      ggarantiasesp          t_iax_garantias;
      ppreguntasesp          t_iax_preguntas;
      wficticia_sperson      estper_personas.sperson%TYPE;
      wsperson               NUMBER;
      ppreguntasesp_riesgo   t_iax_preguntas;

      TYPE t_persons IS TABLE OF NUMBER;

      v_persons              t_persons
         := t_persons (NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL
                      );
      wcont_pers             NUMBER                         := 1;
      v_estpersons           t_persons
         := t_persons (NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL
                      );
      wcont_estpers          NUMBER                         := 1;
      w_traspa               BOOLEAN                        := TRUE;
      w_sperson_est          estper_personas.sperson%TYPE;
      wnpoliza               seguros.npoliza%TYPE;
   BEGIN
      IF psseguro IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001114);
         RAISE e_param_error;
      END IF;

      SELECT npoliza
        INTO wnpoliza
        FROM seguros
       WHERE sseguro = psseguro;

      nerr := f_set_consultapoliza (psseguro, mensajes);
      /* Llena el objeto poliza con la informacion*/
      polizaesp := poliza;
      /* copia objeto del generico al especifico*/
      define_mode ('EST', mensajes);
      crea_solicitud (vsolicit, mensajes);
      /* crea nueva solicitud*/
      polizaesp.det_poliza.ssegpol := vssegpol;
      polizaesp.det_poliza.nsolici := vsolicit;
      polizaesp.det_poliza.sseguro := vsolicit;

      /* ini BUG 0019332 - 30/08/2011 - JMF*/
      /*    dtpoliza.npoliza := vsolicit;   --// ACC si algo surt raro mirar auqi*/
      DECLARE
         v_numaddpoliza   NUMBER;
         v_calemp         NUMBER;
      BEGIN
         v_calemp := pac_md_common.f_get_cxtempresa;
         v_numaddpoliza :=
                     pac_parametros.f_parempresa_n (v_calemp, 'NUMADDPOLIZA');
         polizaesp.det_poliza.npoliza := vsolicit + NVL (v_numaddpoliza, 0);
      END;

      polizaesp.det_poliza.sproduc := psproducesp;
      /* asigna producto especifico*/
      polizaesp.det_poliza.csituac := 4;

      /* poliza especifica en situac. propuesta*/
      BEGIN
         SELECT a.cactivi
           INTO polizaesp.det_poliza.gestion.cactivi
           FROM activiprod a, productos p
          WHERE a.cramo = p.cramo
            AND a.cmodali = p.cmodali
            AND a.ctipseg = p.ctipseg
            AND a.ccolect = p.ccolect
            AND p.sproduc = psproducesp
            AND ROWNUM = 1;
      EXCEPTION
         WHEN OTHERS
         THEN
            polizaesp.det_poliza.gestion.cactivi := 0;
      END;

      SELECT cramo, cmodali,
             ctipseg, ccolect
        INTO polizaesp.det_poliza.cramo, polizaesp.det_poliza.cmodali,
             polizaesp.det_poliza.ctipseg, polizaesp.det_poliza.ccolect
        FROM productos
       WHERE sproduc = polizaesp.det_poliza.sproduc;

      nerr :=
         pac_iaxpar_productos.f_inicializa (polizaesp.det_poliza.sproduc,
                                            polizaesp.det_poliza.cmodali,
                                            polizaesp.det_poliza.cempres,
                                            pac_md_common.f_get_cxtidioma,
                                            polizaesp.det_poliza.ccolect,
                                            polizaesp.det_poliza.cramo,
                                            polizaesp.det_poliza.ctipseg,
                                            mensajes
                                           );
      /* poliza.det_poliza.gestion.cactivi:= polizaesp.det_poliza.gestion.cactivi;*/
      pac_iaxpar_productos.p_set_prodactiviti
                                         (polizaesp.det_poliza.gestion.cactivi);
      /* init. actividad del especifico*/
      ggarantiasesp := t_iax_garantias ();
      /* Bug 26662 - APD - 15/04/2013 - se comenta la llamada a la funcion*/
      /* pac_md_produccion.p_set_garanprod en esta parte de la funcion*/
      /* para realizarla mas abajo ya que se necesita para el nriesgo en la*/
      /* funcion pac_md_produccion.p_set_garanprod*/
      /*nerr := pac_md_produccion.p_set_garanprod(ggarantiasesp, 1, mensajes);*/
      /* fin Bug 26662 - APD - 15/04/2013*/
      /* recupera garantias del producto*/
      ppreguntasesp := t_iax_preguntas ();
      nerr := pac_md_produccion.p_set_pregunprod (1, ppreguntasesp, mensajes);
      /* Se inicializan las preguntas existentes desde producto*/
      ppreguntasesp_riesgo := t_iax_preguntas ();
      nerr :=
         pac_md_produccion.p_set_pregunriesgos (1,
                                                ppreguntasesp_riesgo,
                                                mensajes
                                               );

      /* Se inicializan las preguntas de riesgo existentes desde producto*/
      IF     polizaesp.det_poliza.riesgos IS NOT NULL
         AND polizaesp.det_poliza.riesgos.COUNT > 0
      THEN
         FOR v_indice_riesgos IN
            polizaesp.det_poliza.riesgos.FIRST .. polizaesp.det_poliza.riesgos.LAST
         LOOP
            IF polizaesp.det_poliza.riesgos.EXISTS (v_indice_riesgos)
            THEN
               /* Bug 26662 - APD - 15/04/2013 - se realiza aqui la llamada a la funion*/
               /* pac_md_produccion.p_set_garanprod ya que aqui si que se tiene el nriesgo*/
               nerr :=
                  pac_md_produccion.p_set_garanprod
                      (ggarantiasesp,
                       1,
                       mensajes,
                       polizaesp.det_poliza.riesgos (v_indice_riesgos).nriesgo
                      );
               /* fin Bug 26662 - APD - 15/04/2013*/
               polizaesp.det_poliza.riesgos (v_indice_riesgos).garantias :=
                                                                 ggarantiasesp;

               /* asigna garantias al riesgo(n) del especifico*/
               /* comprueba garantias comunes*/
               IF     poliza.det_poliza.riesgos IS NOT NULL
                  AND poliza.det_poliza.riesgos.COUNT > 0
               THEN
                  FOR v_indice_riesg_gen IN
                     poliza.det_poliza.riesgos.FIRST .. poliza.det_poliza.riesgos.LAST
                  LOOP
                     IF poliza.det_poliza.riesgos.EXISTS (v_indice_riesg_gen)
                     THEN
                        FOR v_indice_garan IN
                           poliza.det_poliza.riesgos (v_indice_riesg_gen).garantias.FIRST .. poliza.det_poliza.riesgos
                                                                                               (v_indice_riesg_gen
                                                                                               ).garantias.LAST
                        LOOP
                           IF     polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias IS NOT NULL
                              AND polizaesp.det_poliza.riesgos
                                                             (v_indice_riesgos).garantias.COUNT >
                                                                             0
                           THEN
                              FOR v_indice_garan_esp IN
                                 polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias.FIRST .. polizaesp.det_poliza.riesgos
                                                                                                    (v_indice_riesgos
                                                                                                    ).garantias.LAST
                              LOOP
                                 IF polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias.EXISTS
                                                          (v_indice_garan_esp)
                                 THEN
                                    IF polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias
                                                          (v_indice_garan_esp).cgarant =
                                          poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).garantias
                                                              (v_indice_garan).cgarant
                                    THEN
                                       polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias
                                                          (v_indice_garan_esp).cobliga :=
                                          poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).garantias
                                                              (v_indice_garan).cobliga;
                                       polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias
                                                          (v_indice_garan_esp).finiefe :=
                                          poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).garantias
                                                              (v_indice_garan).finiefe;
                                       polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias
                                                          (v_indice_garan_esp).ctarman :=
                                          poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).garantias
                                                              (v_indice_garan).ctarman;
                                       polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias
                                                          (v_indice_garan_esp).icapital :=
                                          poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).garantias
                                                              (v_indice_garan).icapital;
                                       polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias
                                                          (v_indice_garan_esp).icaptot :=
                                          poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).garantias
                                                              (v_indice_garan).icaptot;
                                       polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias
                                                          (v_indice_garan_esp).prevali :=
                                          poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).garantias
                                                              (v_indice_garan).prevali;
                                       polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias
                                                          (v_indice_garan_esp).irevali :=
                                          poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).garantias
                                                              (v_indice_garan).irevali;
                                       polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias
                                                          (v_indice_garan_esp).ifranqu :=
                                          poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).garantias
                                                              (v_indice_garan).ifranqu;
                                       polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias
                                                          (v_indice_garan_esp).primas :=
                                          poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).garantias
                                                              (v_indice_garan).primas;
                                       polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias
                                                          (v_indice_garan_esp).preguntas :=
                                          poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).garantias
                                                              (v_indice_garan).preguntas;
                                       polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias
                                                          (v_indice_garan_esp).masdatos :=
                                          poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).garantias
                                                              (v_indice_garan).masdatos;
                                       polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias
                                                          (v_indice_garan_esp).desglose :=
                                          poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).garantias
                                                              (v_indice_garan).desglose;
                                       /* Bug 20694/0109347 - FAL - 07/03/2012*/
                                       polizaesp.det_poliza.riesgos
                                                            (v_indice_riesgos).garantias
                                                          (v_indice_garan_esp).cderreg :=
                                          poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).garantias
                                                              (v_indice_garan).cderreg;
                                    /* Fi Bug 20694/0109347*/
                                    END IF;
                                 END IF;
                              END LOOP;
                           END IF;
                        END LOOP;
                     END IF;
                  END LOOP;
               END IF;
            END IF;
         END LOOP;
      END IF;

      polizaesp.det_poliza.preguntas := ppreguntasesp;

      /* asigna preguntas al especifico*/
      /* comprueba preguntas comunes*/
      IF     poliza.det_poliza.preguntas IS NOT NULL
         AND poliza.det_poliza.preguntas.COUNT > 0
      THEN
         FOR v_indice_pregs IN
            poliza.det_poliza.preguntas.FIRST .. poliza.det_poliza.preguntas.LAST
         LOOP
            IF     polizaesp.det_poliza.preguntas IS NOT NULL
               AND polizaesp.det_poliza.preguntas.COUNT > 0
            THEN
               FOR v_indice_pregs_esp IN
                  polizaesp.det_poliza.preguntas.FIRST .. polizaesp.det_poliza.preguntas.LAST
               LOOP
                  IF polizaesp.det_poliza.preguntas (v_indice_pregs_esp).cpregun =
                         poliza.det_poliza.preguntas (v_indice_pregs).cpregun
                  THEN
                     polizaesp.det_poliza.preguntas (v_indice_pregs_esp).crespue :=
                         poliza.det_poliza.preguntas (v_indice_pregs).crespue;
                     polizaesp.det_poliza.preguntas (v_indice_pregs_esp).trespue :=
                         poliza.det_poliza.preguntas (v_indice_pregs).trespue;
                  END IF;
               END LOOP;
            END IF;
         END LOOP;
      END IF;

      /* traspaso las personas tomadores a las EST*/
      IF     polizaesp.det_poliza.tomadores IS NOT NULL
         AND polizaesp.det_poliza.tomadores.COUNT > 0
      THEN
         FOR v_indice_toma IN
            polizaesp.det_poliza.tomadores.FIRST .. polizaesp.det_poliza.tomadores.LAST
         LOOP
            v_persons (wcont_pers) :=
                       polizaesp.det_poliza.tomadores (v_indice_toma).sperson;
            wcont_pers := wcont_pers + 1;
            pac_persona.traspaso_tablas_per
                      (polizaesp.det_poliza.tomadores (v_indice_toma).sperson,
                       wficticia_sperson,
                       NULL,
                       polizaesp.det_poliza.cagente
                      );
            /* Bug 0020694 - FAL - 29/02/2012 - Informar cagente*/
            polizaesp.det_poliza.tomadores (v_indice_toma).sperson :=
                                                             wficticia_sperson;
            v_estpersons (wcont_estpers) := wficticia_sperson;
            wcont_estpers := wcont_estpers + 1;
         END LOOP;
      END IF;

      /* traspaso las personas asegurados a las EST*/
      IF     polizaesp.det_poliza.riesgos IS NOT NULL
         AND polizaesp.det_poliza.riesgos.COUNT > 0
      THEN
         FOR v_indice_riesg IN
            polizaesp.det_poliza.riesgos.FIRST .. polizaesp.det_poliza.riesgos.LAST
         LOOP
            IF polizaesp.det_poliza.riesgos.EXISTS (v_indice_riesg)
            THEN
               IF     polizaesp.det_poliza.riesgos (v_indice_riesg).riesgoase IS NOT NULL
                  AND polizaesp.det_poliza.riesgos (v_indice_riesg).riesgoase.COUNT >
                                                                             0
               THEN
                  FOR v_indice_aseg IN
                     polizaesp.det_poliza.riesgos (v_indice_riesg).riesgoase.FIRST .. polizaesp.det_poliza.riesgos
                                                                                        (v_indice_riesg
                                                                                        ).riesgoase.LAST
                  LOOP
                     IF polizaesp.det_poliza.riesgos (v_indice_riesg).riesgoase.EXISTS
                                                               (v_indice_aseg)
                     THEN
                        w_traspa := TRUE;

                        FOR i IN 1 .. (wcont_pers - 1)
                        LOOP
                           IF v_persons (i) =
                                 polizaesp.det_poliza.riesgos (v_indice_riesg).riesgoase
                                                               (v_indice_aseg).sperson
                           THEN
                              w_traspa := FALSE;
                              /* evita traspaso a las EST la misma persona asegurado-tomador ya traspasada en tomadores*/
                              w_sperson_est := v_estpersons (i);
                           END IF;
                        END LOOP;

                        IF w_traspa
                        THEN
                           v_persons (wcont_pers) :=
                              polizaesp.det_poliza.riesgos (v_indice_riesg).riesgoase
                                                               (v_indice_aseg).sperson;
                           wcont_pers := wcont_pers + 1;
                           pac_persona.traspaso_tablas_per
                              (polizaesp.det_poliza.riesgos (v_indice_riesg).riesgoase
                                                                (v_indice_aseg).sperson,
                               wficticia_sperson
                              );
                           polizaesp.det_poliza.riesgos (v_indice_riesg).riesgoase
                                                                (v_indice_aseg).sperson :=
                                                             wficticia_sperson;
                           v_estpersons (wcont_estpers) := wficticia_sperson;
                           wcont_estpers := wcont_estpers + 1;
                        ELSE
                           polizaesp.det_poliza.riesgos (v_indice_riesg).riesgoase
                                                               (v_indice_aseg).sperson :=
                                                                w_sperson_est;
                        END IF;
                     END IF;
                  END LOOP;
               END IF;
            END IF;
         END LOOP;
      END IF;

      /* traspaso las personas asegurados a las EST*/
      IF     polizaesp.det_poliza.riesgos IS NOT NULL
         AND polizaesp.det_poliza.riesgos.COUNT > 0
      THEN
         FOR v_indice_riesg IN
            polizaesp.det_poliza.riesgos.FIRST .. polizaesp.det_poliza.riesgos.LAST
         LOOP
            IF polizaesp.det_poliza.riesgos.EXISTS (v_indice_riesg)
            THEN
               IF     polizaesp.det_poliza.riesgos (v_indice_riesg).riespersonal IS NOT NULL
                  AND polizaesp.det_poliza.riesgos (v_indice_riesg).riespersonal.COUNT >
                                                                             0
               THEN
                  FOR v_indice_aseg IN
                     polizaesp.det_poliza.riesgos (v_indice_riesg).riespersonal.FIRST .. polizaesp.det_poliza.riesgos
                                                                                           (v_indice_riesg
                                                                                           ).riespersonal.LAST
                  LOOP
                     IF polizaesp.det_poliza.riesgos (v_indice_riesg).riespersonal.EXISTS
                                                               (v_indice_aseg)
                     THEN
                        w_traspa := TRUE;

                        FOR i IN 1 .. (wcont_pers - 1)
                        LOOP
                           IF v_persons (i) =
                                 polizaesp.det_poliza.riesgos (v_indice_riesg).riespersonal
                                                               (v_indice_aseg).sperson
                           THEN
                              w_traspa := FALSE;
                              /* evita traspaso a las EST la misma persona asegurado-tomador ya traspasada en tomadores*/
                              w_sperson_est := v_estpersons (i);
                           END IF;
                        END LOOP;

                        IF w_traspa
                        THEN
                           v_persons (wcont_pers) :=
                              polizaesp.det_poliza.riesgos (v_indice_riesg).riespersonal
                                                               (v_indice_aseg).sperson;
                           wcont_pers := wcont_pers + 1;
                           pac_persona.traspaso_tablas_per
                              (polizaesp.det_poliza.riesgos (v_indice_riesg).riespersonal
                                                                (v_indice_aseg).sperson,
                               wficticia_sperson
                              );
                           polizaesp.det_poliza.riesgos (v_indice_riesg).riespersonal
                                                                (v_indice_aseg).sperson :=
                                                             wficticia_sperson;
                           v_estpersons (wcont_estpers) := wficticia_sperson;
                           wcont_estpers := wcont_estpers + 1;
                        ELSE
                           polizaesp.det_poliza.riesgos (v_indice_riesg).riespersonal
                                                               (v_indice_aseg).sperson :=
                                                                w_sperson_est;
                        END IF;
                     END IF;
                  END LOOP;
               END IF;
            END IF;
         END LOOP;
      END IF;

      /* traspaso las personas conductores a las EST*/
      IF     polizaesp.det_poliza.riesgos IS NOT NULL
         AND polizaesp.det_poliza.riesgos.COUNT > 0
      THEN
         FOR v_indice_riesg IN
            polizaesp.det_poliza.riesgos.FIRST .. polizaesp.det_poliza.riesgos.LAST
         LOOP
            IF polizaesp.det_poliza.riesgos.EXISTS (v_indice_riesg)
            THEN
               IF     polizaesp.det_poliza.riesgos (v_indice_riesg).riesautos IS NOT NULL
                  AND polizaesp.det_poliza.riesgos (v_indice_riesg).riesautos.COUNT >
                                                                             0
               THEN
                  FOR v_indice_aut IN
                     polizaesp.det_poliza.riesgos (v_indice_riesg).riesautos.FIRST .. polizaesp.det_poliza.riesgos
                                                                                        (v_indice_riesg
                                                                                        ).riesautos.LAST
                  LOOP
                     IF polizaesp.det_poliza.riesgos (v_indice_riesg).riesautos.EXISTS
                                                                (v_indice_aut)
                     THEN
                        IF     polizaesp.det_poliza.riesgos (v_indice_riesg).riesautos
                                                                (v_indice_aut).conductores IS NOT NULL
                           AND polizaesp.det_poliza.riesgos (v_indice_riesg).riesautos
                                                                 (v_indice_aut).conductores.COUNT >
                                                                             0
                        THEN
                           FOR v_indice_conduc IN
                              polizaesp.det_poliza.riesgos (v_indice_riesg).riesautos
                                                                (v_indice_aut).conductores.FIRST .. polizaesp.det_poliza.riesgos
                                                                                                      (v_indice_riesg
                                                                                                      ).riesautos
                                                                                                      (v_indice_aut
                                                                                                      ).conductores.LAST
                           LOOP
                              IF polizaesp.det_poliza.riesgos (v_indice_riesg).riesautos
                                                                (v_indice_aut).conductores.EXISTS
                                                             (v_indice_conduc)
                              THEN
                                 w_traspa := TRUE;

                                 FOR i IN 1 .. (wcont_pers - 1)
                                 LOOP
                                    IF v_persons (i) =
                                          polizaesp.det_poliza.riesgos
                                                              (v_indice_riesg).riesautos
                                                                (v_indice_aut).conductores
                                                             (v_indice_conduc).sperson
                                    THEN
                                       w_traspa := FALSE;
                                       /* evita traspaso a las EST la misma persona asegurado-tomador ya traspasada en tomadores*/
                                       w_sperson_est := v_estpersons (i);
                                    END IF;
                                 END LOOP;

                                 IF w_traspa
                                 THEN
                                    v_persons (wcont_pers) :=
                                       polizaesp.det_poliza.riesgos
                                                              (v_indice_riesg).riesautos
                                                                (v_indice_aut).conductores
                                                             (v_indice_conduc).sperson;
                                    wcont_pers := wcont_pers + 1;
                                    pac_persona.traspaso_tablas_per
                                       (polizaesp.det_poliza.riesgos
                                                               (v_indice_riesg).riesautos
                                                                 (v_indice_aut).conductores
                                                              (v_indice_conduc).sperson,
                                        wficticia_sperson
                                       );
                                    polizaesp.det_poliza.riesgos
                                                               (v_indice_riesg).riesautos
                                                                 (v_indice_aut).conductores
                                                              (v_indice_conduc).sperson :=
                                                             wficticia_sperson;
                                    v_estpersons (wcont_estpers) :=
                                                             wficticia_sperson;
                                    wcont_estpers := wcont_estpers + 1;
                                 ELSE
                                    polizaesp.det_poliza.riesgos
                                                              (v_indice_riesg).riesautos
                                                                (v_indice_aut).conductores
                                                             (v_indice_conduc).sperson :=
                                                                w_sperson_est;
                                 END IF;
                              END IF;
                           END LOOP;
                        END IF;
                     END IF;
                  END LOOP;
               END IF;
            END IF;
         END LOOP;
      END IF;

      /* asigna preguntas de riesgo al especifico segun producto especifico*/
      IF     polizaesp.det_poliza.riesgos IS NOT NULL
         AND polizaesp.det_poliza.riesgos.COUNT > 0
      THEN
         FOR v_indice_riesg IN
            polizaesp.det_poliza.riesgos.FIRST .. polizaesp.det_poliza.riesgos.LAST
         LOOP
            IF polizaesp.det_poliza.riesgos.EXISTS (v_indice_riesg)
            THEN
               polizaesp.det_poliza.riesgos (v_indice_riesg).preguntas :=
                                                         ppreguntasesp_riesgo;
            /* asigna preguntas de riesgo al especifico*/
            END IF;
         END LOOP;
      END IF;

      /* comprueba preguntas de riesgo comunes*/
      IF     polizaesp.det_poliza.riesgos IS NOT NULL
         AND polizaesp.det_poliza.riesgos.COUNT > 0
      THEN
         FOR v_indice_riesg IN
            polizaesp.det_poliza.riesgos.FIRST .. polizaesp.det_poliza.riesgos.LAST
         LOOP
            IF polizaesp.det_poliza.riesgos.EXISTS (v_indice_riesg)
            THEN
               IF     polizaesp.det_poliza.riesgos (v_indice_riesg).preguntas IS NOT NULL
                  AND polizaesp.det_poliza.riesgos (v_indice_riesg).preguntas.COUNT >
                                                                             0
               THEN
                  FOR v_indice_pregs IN
                     polizaesp.det_poliza.riesgos (v_indice_riesg).preguntas.FIRST .. polizaesp.det_poliza.riesgos
                                                                                        (v_indice_riesg
                                                                                        ).preguntas.LAST
                  LOOP
                     IF polizaesp.det_poliza.riesgos (v_indice_riesg).preguntas.EXISTS
                                                              (v_indice_pregs)
                     THEN
                        IF     poliza.det_poliza.riesgos IS NOT NULL
                           AND poliza.det_poliza.riesgos.COUNT > 0
                        THEN
                           FOR v_indice_riesg_gen IN
                              poliza.det_poliza.riesgos.FIRST .. poliza.det_poliza.riesgos.LAST
                           LOOP
                              IF poliza.det_poliza.riesgos.EXISTS
                                                          (v_indice_riesg_gen)
                              THEN
                                 IF     poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).preguntas IS NOT NULL
                                    AND poliza.det_poliza.riesgos
                                                           (v_indice_riesg_gen).preguntas.COUNT >
                                                                             0
                                 THEN
                                    FOR v_indice_pregs_gen IN
                                       poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).preguntas.FIRST .. poliza.det_poliza.riesgos
                                                                                                    (v_indice_riesg_gen
                                                                                                    ).preguntas.LAST
                                    LOOP
                                       IF poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).preguntas.EXISTS
                                                          (v_indice_pregs_gen)
                                       THEN
                                          IF polizaesp.det_poliza.riesgos
                                                              (v_indice_riesg).preguntas
                                                              (v_indice_pregs).cpregun =
                                                poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).preguntas
                                                          (v_indice_pregs_gen).cpregun
                                          THEN
                                             polizaesp.det_poliza.riesgos
                                                              (v_indice_riesg).preguntas
                                                              (v_indice_pregs).crespue :=
                                                poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).preguntas
                                                          (v_indice_pregs_gen).crespue;
                                             polizaesp.det_poliza.riesgos
                                                              (v_indice_riesg).preguntas
                                                              (v_indice_pregs).trespue :=
                                                poliza.det_poliza.riesgos
                                                          (v_indice_riesg_gen).preguntas
                                                          (v_indice_pregs_gen).trespue;
                                          END IF;
                                       END IF;
                                    END LOOP;
                                 END IF;
                              END IF;
                           END LOOP;
                        END IF;
                     END IF;
                  END LOOP;
               END IF;
            END IF;
         END LOOP;
      END IF;

      polizaesp.det_poliza.gstcomision := t_iax_gstcomision ();
      poliza := polizaesp;
      poliza.det_poliza.gestion.polissa_ini := wnpoliza;
      /* relacionar polizas generica y especifica*/
      nerr := f_grabarobjetodb (mensajes);

      DELETE      estcomisionsegu
            WHERE sseguro = polizaesp.det_poliza.sseguro;

      osseguro := vsolicit;
      pac_iax_produccion.vproducto := psproducesp;
      pac_iax_produccion.vempresa := pac_iax_common.f_get_cxtempresa;
      pac_iax_produccion.gidioma := pac_iax_common.f_get_cxtidioma;
      pac_iax_produccion.poliza.det_poliza.sproduc := psproducesp;
      /*Inicializamos los objectos con los nuevos valores*/
      pac_md_produccion.inicializaobjetos (poliza.det_poliza,
                                           poliza.det_poliza.gestion,
                                           mensajes
                                          );
      pac_md_produccion.inicializaobjetosproduct (poliza.det_poliza, mensajes);
      pac_iax_produccion.vssegpol :=
                                  pac_iax_produccion.poliza.det_poliza.ssegpol;
      pac_iax_produccion.vmodalidad :=
                                  pac_iax_produccion.poliza.det_poliza.cmodali;
      pac_iax_produccion.vccolect :=
                                  pac_iax_produccion.poliza.det_poliza.ccolect;
      pac_iax_produccion.vcramo := pac_iax_produccion.poliza.det_poliza.cramo;
      pac_iax_produccion.vctipseg :=
                                  pac_iax_produccion.poliza.det_poliza.ctipseg;
      pac_iax_produccion.vagente :=
                                  pac_iax_produccion.poliza.det_poliza.cagente;
      /*UPDATE seguros
      SET csituac = 16   -- Traspaso de proyecto Generico a traspasada
      WHERE sseguro = psseguro;*/
      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         ROLLBACK;
         RETURN 1;
   END f_crearpropuesta;

    /* Fi Bug 17307*/
   -- INI BUG CONF-1337_QT_1998- 04/04/2018 - Grabar datos de fechas
    /*************************************************************************
      Funci¿n que ajusta los datos de fechas de la p¿liza (garant¿a)
       param in psseguro      : c¿digo del seguro
       param in out mensajes  : colecci¿n de mensajes
       return                 : 0 todo ha ido bien
                                1 se ha producido un error
    *************************************************************************/
   FUNCTION f_actualiza_fechas (
      psseguro      IN   seguros.sseguro%TYPE,
      pfefecto      IN   DATE,
      pfiniefe      IN   DATE,
      pfvencim      IN   DATE,
      pfefeplazo    IN   DATE,
      pfvencplazo   IN   DATE,
      pcmotmov      IN   NUMBER,                 -- IAXIS-3396 CJMR 09/04/2019
      pndias        IN   NUMBER DEFAULT NULL,    -- IAXIS-3394 CJMR 22/04/2019
      pnmeses       IN   NUMBER DEFAULT NULL,    -- IAXIS-3394 CJMR 22/04/2019
      pnanios       IN   NUMBER DEFAULT NULL     -- IAXIS-3394 CJMR 22/04/2019
   )
      RETURN NUMBER
   IS
      v_error            NUMBER := 0;
      v_extcontractual   NUMBER := NULL;
      -- INI IAXIS-3396 CJMR 09/04/2019
      v_fvencim          DATE;
      v_fvencplazo       DATE;
   -- FIN IAXIS-3396 CJMR 09/04/2019
      -- INI IAXIS-5222 CJMR 11/09/2019
      v_dias             NUMBER := 0;
      v_meses            NUMBER := 0;
      v_anios            NUMBER := 0;
      -- FIN IAXIS-5222 CJMR 11/09/2019
      -- INI IAXIS-3394 CJMR 04/02/2020
      xnmovimiant        NUMBER;
      v_finivig          DATE;
      v_ffinvig          DATE;
      -- FIN IAXIS-3394 CJMR 04/02/2020
	  
	  vnmeses          NUMBER; -- IAXIS-13161 BARTOLO HERRERA 14/04/2020
	  
   BEGIN
      IF pac_iax_produccion.poliza.det_poliza.riesgos IS NOT NULL
      THEN
         IF pac_iax_produccion.poliza.det_poliza.riesgos.COUNT > 0
         THEN
            FOR i IN
               1 .. pac_iax_produccion.poliza.det_poliza.riesgos
                          (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT).garantias.COUNT
            LOOP
               IF pac_iax_produccion.poliza.det_poliza.riesgos
                          (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT).garantias
                                                                          (i).cobliga =
                                                                            1
               THEN
                  v_error :=
                     pk_suplementos.f_cambio_fechas_traslado_vig
                        (psseguro,
                         pac_iax_produccion.poliza.det_poliza.sproduc,
                         pac_iax_produccion.poliza.det_poliza.riesgos
                            (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                            ).nriesgo,
                         pac_iax_produccion.poliza.det_poliza.riesgos
                            (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                            ).garantias (i).cgarant,
                         pac_iax_produccion.poliza.det_poliza.riesgos
                            (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                            ).garantias (i).nmovimi,
                         pac_iax_produccion.poliza.det_poliza.riesgos
                            (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                            ).garantias (i).finiefe,
                         pfefecto,
                         pfvencim,
                         TO_DATE (NULL),
                         pfvencplazo,
                         v_extcontractual,
                         pcmotmov,               -- IAXIS-3396 CJMR 09/04/2019
                         pndias,
                         pnmeses,
                         pnanios
                        );

                  IF v_error <> 0
                  THEN
                     RETURN 1;
                  END IF;

                  -- INI IAXIS-3394 CJMR 17/04/2019
                  IF pcmotmov = 918
                  THEN
                     /*p_tab_error
                        (f_sysdate,
                         f_user,
                         'PAC_IAX_PRODUCCION.f_actualiza_fechas',
                         1,
                            pac_iax_produccion.poliza.det_poliza.riesgos
                               (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                               ).garantias (i).cgarant
                         || '--'
                         || pac_iax_produccion.poliza.det_poliza.riesgos
                               (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                               ).garantias (i).finivig
                         || '--'
                         || pac_iax_produccion.poliza.det_poliza.riesgos
                               (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                               ).garantias (i).ffinvig
                         || '--'
                         || NVL (pndias, 0)
                         || '--'
                         || NVL (pnmeses, 0)
                         || '--'
                         || NVL (pnanios, 0),
                         NULL
                        );*/
                     pac_iax_produccion.poliza.det_poliza.riesgos
                           (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT).garantias
                                                                           (i).finivig :=
                          (  (  TRUNC
                                   (pac_iax_produccion.poliza.det_poliza.riesgos
                                       (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                                       ).garantias (i).finivig
                                   )
                              + NUMTODSINTERVAL (NVL (pndias, 0), 'DAY')
                             )
                           + NUMTOYMINTERVAL (NVL (pnmeses, 0), 'MONTH')
                          )
                        + NUMTOYMINTERVAL (NVL (pnanios, 0), 'YEAR');
                     pac_iax_produccion.poliza.det_poliza.riesgos
                           (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT).garantias
                                                                           (i).ffinvig :=
                          (  (  TRUNC
                                   (pac_iax_produccion.poliza.det_poliza.riesgos
                                       (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                                       ).garantias (i).ffinvig
                                   )
                              + NUMTODSINTERVAL (NVL (pndias, 0), 'DAY')
                             )
                           + NUMTOYMINTERVAL (NVL (pnmeses, 0), 'MONTH')
                          )
                        + NUMTOYMINTERVAL (NVL (pnanios, 0), 'YEAR');
                  ELSIF pcmotmov = 915
                  THEN                       -- INI IAXIS-3396 CJMR 09/04/2019
                     
		     -- INI IAXIS-3394 CJMR 04/02/2020
                     v_error := f_buscanmovimi(psseguro, 1, 1, xnmovimiant);
                     
                     SELECT finivig, ffinvig
                       INTO v_finivig, v_ffinvig
                       FROM garanseg
                      WHERE sseguro = psseguro
                        AND cgarant = pac_iax_produccion.poliza.det_poliza.riesgos(pac_iax_produccion.poliza.det_poliza.riesgos.COUNT).garantias(i).cgarant
                        AND nmovimi = xnmovimiant;
		     -- FIN IAXIS-3394 CJMR 04/02/2020

                     SELECT fvencim, fvencplazo
                       INTO v_fvencim, v_fvencplazo
                       FROM seguros
                      WHERE sseguro = psseguro;

                     -- INI IAXIS-5222 CJMR 11/09/2019
                     v_dias := extract(day from pfvencplazo) - extract(day from v_fvencplazo);
                     v_meses := extract(month from pfvencplazo) - extract(month from v_fvencplazo);
                     v_anios := extract(year from pfvencplazo) - extract(year from v_fvencplazo);
                     -- FIN IAXIS-5222 CJMR 11/09/2019

                     IF v_extcontractual IN (0)
                     THEN
                        pac_iax_produccion.poliza.det_poliza.riesgos
                           (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                           ).garantias (i).ffinvig :=
                           (CASE
                               WHEN (TRUNC (v_fvencim) != TRUNC (pfvencim))
                                  THEN pfvencim
                               ELSE pac_iax_produccion.poliza.det_poliza.riesgos
                                      (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                                      ).garantias (i).ffinvig
                            END
                           );
                     -- INI IAXIS-5222 CJMR 04/09/2019
                     ELSIF v_extcontractual IN (1)
                     THEN
                        pac_iax_produccion.poliza.det_poliza.riesgos
                           (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT).garantias
                                                                           (i).ffinvig :=
                             ((v_ffinvig + NUMTODSINTERVAL (NVL (v_dias, 0), 'DAY')
                             )
                           + NUMTOYMINTERVAL (NVL (v_meses, 0), 'MONTH')
                          )
                        + NUMTOYMINTERVAL (NVL (v_anios, 0), 'YEAR');
                     -- FIN IAXIS-5222 CJMR 04/09/2019
                     ELSIF v_extcontractual IN (2)
                     THEN
                        pac_iax_produccion.poliza.det_poliza.riesgos
                           (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                           ).garantias (i).finivig :=
                           (CASE
                               WHEN (TRUNC (v_fvencplazo) !=
                                                           TRUNC (pfvencplazo)
                                    )
                                  THEN   v_finivig + (pfvencplazo - v_fvencplazo)
                               ELSE pac_iax_produccion.poliza.det_poliza.riesgos
                                      (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                                      ).garantias (i).finivig
                            END
                           );
                        -- INI IAXIS-5222 CJMR 24/09/2019
                        pac_iax_produccion.poliza.det_poliza.riesgos
                           (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT).garantias
                                                                           (i).ffinvig :=
                             ((v_ffinvig + NUMTODSINTERVAL (NVL (v_dias, 0), 'DAY')
                             )
                           + NUMTOYMINTERVAL (NVL (v_meses, 0), 'MONTH')
                          )
                        + NUMTOYMINTERVAL (NVL (v_anios, 0), 'YEAR');
                        -- FIN IAXIS-5222 CJMR 24/09/2019
                     END IF;
                  -- INI IAXIS-12903 CJMR 25/02/2020
                  --ELSIF pcmotmov NOT IN (237, 239)
                  ELSIF (pcmotmov NOT IN (237, 239, 212, 828, 971, 684, 685) OR pcmotmov IS NULL) THEN
                  -- FIN IAXIS-12903 CJMR 25/02/2020
                     IF v_extcontractual IN (0)
                     THEN
                        pac_iax_produccion.poliza.det_poliza.riesgos
                           (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                           ).garantias (i).finivig := pfiniefe;
                        pac_iax_produccion.poliza.det_poliza.riesgos
                           (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT).garantias
                                                                           (i).ffinvig :=
                                                                      pfvencim;
                     ELSIF v_extcontractual IN (1)
                     THEN
                        vnmeses := NVL(pac_iaxpar_productos.f_get_pargarantia ('TIEMPO_POSTCONTR_LEY', pac_iax_produccion.poliza.det_poliza.sproduc, pac_iax_produccion.poliza.det_poliza.riesgos
                           (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT).garantias
                                                                           (i).cgarant, poliza.det_poliza.gestion.cactivi), 0);
                     
                        pac_iax_produccion.poliza.det_poliza.riesgos
                           (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                           ).garantias (i).finivig := pfiniefe;
                        pac_iax_produccion.poliza.det_poliza.riesgos
                           (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT).garantias
                                                                           (i).ffinvig :=
                                                                   ADD_MONTHS(pfvencplazo, vnmeses);
                     ELSIF v_extcontractual IN (2)
                     THEN
                        pac_iax_produccion.poliza.det_poliza.riesgos
                           (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT
                           ).garantias (i).finivig := pfvencplazo;
                        pac_iax_produccion.poliza.det_poliza.riesgos
                           (pac_iax_produccion.poliza.det_poliza.riesgos.COUNT).garantias
                                                                           (i).ffinvig :=
                                                                      pfvencim;
                     END IF;
                  END IF;
               -- FIN IAXIS-3396 CJMR 09/04/2019
               END IF;
            END LOOP;
         END IF;
      END IF;

      RETURN 0;
   END f_actualiza_fechas;

   -- FIN BUG CONF-1337_QT_1998- 04/04/2018
    /*************************************************************************
    FUNCTION f_url_prodexterno
    Obtiene una url
    param in pproducto     : codigo producto
    param in ptipo         : tipo
    param in pidpoliza     : idpoliza
    param in out mensajes  : mensajes de error
    return                 : URL
    *************************************************************************/
    /* Bug 18058 - 28/03/2011 - JTS - Se crea la funcion*/
   FUNCTION f_url_prodexterno (
      pproducto   IN       NUMBER,
      ptipo       IN       VARCHAR2,
      pidpoliza   IN       VARCHAR2,
      purl        OUT      VARCHAR2,
      mensajes    OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vparam     VARCHAR2 (200);
      vpasexec   NUMBER (8)     := 1;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_url_prodexterno';
      vres       VARCHAR2 (150);
   BEGIN
      purl :=
         pac_md_produccion.f_url_prodexterno (pproducto,
                                              ptipo,
                                              pidpoliza,
                                              mensajes
                                             );

      IF purl IS NULL
      THEN
         RAISE e_object_error;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_url_prodexterno;

   /* INI bug 18024 jbn*/
   FUNCTION f_grabarcomisiones (pctipcom IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)        := 1;
      vparam     VARCHAR2 (1)      := NULL;
      vobject    VARCHAR2 (200)    := 'PAC_IAX_PRODUCCION.F_grabarcomisiones';
      gstcomi    t_iax_gstcomision;
      num        NUMBER            := 0;
   BEGIN
      IF poliza.det_poliza.gstcomision IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      gstcomi := poliza.det_poliza.gstcomision;

      FOR i IN gstcomi.FIRST .. gstcomi.LAST
      LOOP
         vpasexec := 7;

         IF gstcomi.EXISTS (i)
         THEN
            vpasexec := 8;

            SELECT COUNT (*)
              INTO num
              FROM comisionsegu
             WHERE sseguro = poliza.det_poliza.sseguro
               AND cmodcom = gstcomi (i).cmodcom
               AND nmovimi = poliza.det_poliza.nmovimi;

            /* Bug 30642/169851 - 20/03/2014 - AMC*/
            IF num > 0
            THEN
               /*existeix, updatejem*/
               vpasexec := 9;

               UPDATE comisionsegu
                  SET cmodcom = gstcomi (i).cmodcom,
                      pcomisi = gstcomi (i).pcomisi
                WHERE sseguro = poliza.det_poliza.sseguro
                  AND cmodcom = gstcomi (i).cmodcom
                  AND nmovimi = poliza.det_poliza.nmovimi;
            /* Bug 30642/169851 - 20/03/2014 - AMC*/
            ELSE
               vpasexec := 10;

               /* Bug 30642/169851 - 20/03/2014 - AMC*/
               INSERT INTO comisionsegu
                           (sseguro, cmodcom,
                            pcomisi, ninialt,
                            nfinalt, nmovimi
                           )
                    VALUES (poliza.det_poliza.sseguro, gstcomi (i).cmodcom,
                            gstcomi (i).pcomisi, gstcomi (i).ninialt,
                            gstcomi (i).nfinalt, poliza.det_poliza.nmovimi
                           );
            END IF;
         END IF;
      END LOOP;

      UPDATE seguros
         SET ctipcom = pctipcom
       WHERE sseguro = poliza.det_poliza.sseguro;

      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabarcomisiones;

   /* fi bug 18024 jbn*/
   /*bug 18802 etm*/
   FUNCTION f_set_nrenova (
      pfefecto   IN       DATE,
      pnrenova   OUT      NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec    NUMBER (8)     := 1;
      vparam      VARCHAR2 (200)
                             := 'pfecha=' || TO_CHAR (pfefecto, 'dd/mm/yyyy');
      vobject     VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_SET_NRENOVA';
      num         NUMBER         := 0;
      v_sproduc   NUMBER;
      v_result    NUMBER;
   BEGIN
      v_sproduc := poliza.det_poliza.sproduc;
      v_result :=
         pac_md_produccion.f_calcula_nrenova
                                     (v_sproduc,
                                      NVL (pfefecto,
                                           poliza.det_poliza.gestion.fefecto
                                          ),
                                      poliza.det_poliza,
                                      mensajes
                                     );

      IF v_result <> 0
      THEN
         RAISE e_object_error;
      END IF;

      pnrenova := poliza.det_poliza.nrenova;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_nrenova;

   /*fin bug 18802 etm*/
   /*************************************************************************
   F_LEEDOCREQUERIDA
   Devuelve un objeto T_IAX_DOCREQUERIDA con la documentacion
   requerida para los parametros informados.
   param in psproduc                : codigo de producto
   param in psseguro                : numero secuencial de seguro
   param in pcactivi                : codigo de actividad
   param in pnmovimi                : numero de movimiento
   param out mensajes               : mensajes de error
   return                           : el objeto T_IAX_DOCREQUERIDA
   BUG 18351 - 10/05/2011 - JMP - Se crea la funcion
   *************************************************************************/
   FUNCTION f_leedocrequerida (
      psproduc   IN       NUMBER,
      psseguro   IN       NUMBER,
      pcactivi   IN       NUMBER,
      pnmovimi   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_docrequerida
   IS
      v_pasexec   NUMBER (3)         := 1;
      v_param     VARCHAR2 (200)
         :=    'psproduc: '
            || psproduc
            || ' - psseguro: '
            || psseguro
            || ' - pcactivi: '
            || pcactivi
            || ' - pnmovimi: '
            || pnmovimi;
      vobject     VARCHAR2 (200)     := 'PAC_IAX_PRODUCCION.f_leedocrequerida';
      vt_docreq   t_iax_docrequerida := t_iax_docrequerida ();
   BEGIN
      vt_docreq :=
         pac_md_produccion.f_leedocrequerida (psproduc,
                                              psseguro,
                                              pcactivi,
                                              NVL (pnmovimi, vnmovimi),
                                              pac_md_common.f_get_cxtidioma,
                                              mensajes
                                             );
      COMMIT;
      /* BUG21710:DRA:28/03/2012*/
      RETURN vt_docreq;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            v_pasexec,
                                            v_param
                                           );
         RETURN vt_docreq;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            v_pasexec,
                                            v_param
                                           );
         RETURN vt_docreq;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            v_pasexec,
                                            v_param,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN vt_docreq;
   END f_leedocrequerida;

   /*************************************************************************
   F_GRABARDOCREQUERIDA
   Llama a la funcion PAC_DOCREQUERIDA.F_GRABARDOCREQUERIDA para insertar
   un registro en la tabla ESTDOCREQUERIDA, ESTDOCREQUERIDA_RIESGO o
   ESTDOCREQUERIDA_INQAVAL, dependiendo de la clase de documento que
   estamos insertando.
   param in pseqdocu                : numero secuencial de documento
   param in psproduc                : codigo de producto
   param in psseguro                : numero secuencial de seguro
   param in pcactivi                : codigo de actividad
   param in pnmovimi                : numero de movimiento
   param in pnriesgo                : numero de riesgo
   param in pninqaval               : numero de inquilino/avalista
   param in pcdocume                : codigo de documento
   param in pctipdoc                : tipo de documento
   param in pcclase                 : clase de documento
   param in pnorden                 : numero de orden documento
   param in ptdescrip               : descripcion del documento
   param in ptfilename              : nombre del fichero
   param in padjuntado              : indicador de fichero adjuntado
   param out mensajes               : mensajes de error
   return                           : 0 todo correcto
   1 ha habido un error
   BUG 18351 - 11/05/2011 - JMP - Se crea la funcion
   *************************************************************************/
   FUNCTION f_grabardocrequerida (
      pseqdocu     IN       NUMBER,
      psproduc     IN       NUMBER,
      psseguro     IN       NUMBER,
      pcactivi     IN       NUMBER,
      pnmovimi     IN       NUMBER,
      pnriesgo     IN       NUMBER,
      pninqaval    IN       NUMBER,
      pcdocume     IN       NUMBER,
      pctipdoc     IN       NUMBER,
      pcclase      IN       NUMBER,
      pnorden      IN       NUMBER,
      ptdescrip    IN       VARCHAR2,
      ptfilename   IN       VARCHAR2,
      padjuntado   IN       NUMBER,
      psperson     IN       NUMBER,
      pctipben     IN       NUMBER,
      mensajes     OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      v_error     axis_literales.slitera%TYPE   := 0;
      v_pasexec   NUMBER (3)                    := 1;
      v_object    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_grabardocrequerida';
      v_param     VARCHAR2 (500)
         :=    'pseqdocu: '
            || pseqdocu
            || ' - psproduc: '
            || psproduc
            || ' - psseguro: '
            || psseguro
            || ' - pcactivi: '
            || pcactivi
            || ' - pnmovimi: '
            || pnmovimi
            || '- pnriesgo: '
            || pnriesgo
            || ' - pninqaval: '
            || pninqaval
            || ' - pcdocume: '
            || pcdocume
            || ' - pctipdoc: '
            || pctipdoc
            || ' - pcclase: '
            || pcclase
            || ' - pnorden: '
            || pnorden
            || ' - ptdescrip: '
            || ptdescrip
            || ' - ptfilename: '
            || ptfilename
            || ' - padjuntado: '
            || padjuntado
            || ' - psperson: '
            || psperson
            || ' - pctipbe: '
            || pctipben;
   BEGIN
      v_error :=
         pac_md_grabardatos.f_grabardocrequerida (pseqdocu,
                                                  psproduc,
                                                  psseguro,
                                                  pcactivi,
                                                  NVL (pnmovimi, vnmovimi),
                                                  pnriesgo,
                                                  pninqaval,
                                                  pcdocume,
                                                  pctipdoc,
                                                  pcclase,
                                                  pnorden,
                                                  ptdescrip,
                                                  ptfilename,
                                                  padjuntado,
                                                  psperson,
                                                  pctipben,
                                                  mensajes
                                                 );

      IF v_error <> 0
      THEN
         RAISE e_object_error;
      END IF;

      COMMIT;
      /*Commit por weblogic, pedido por JLB 17112011*/
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            v_object,
                                            1000005,
                                            v_pasexec,
                                            v_param
                                           );
         ROLLBACK;
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            v_object,
                                            1000006,
                                            v_pasexec,
                                            v_param
                                           );
         ROLLBACK;
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            v_object,
                                            1000001,
                                            v_pasexec,
                                            v_param,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         ROLLBACK;
         RETURN 1;
   END f_grabardocrequerida;

   /* BUG21467:DRA:01/03/2012:Inici*/
   FUNCTION f_get_datos_host (
      porigen    IN       VARCHAR2 DEFAULT 'ALTA_POLIZA',
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      /**/
      vnumerr      NUMBER (8)                    := 0;
      vpasexec     NUMBER (8)                    := 1;
      vparam       VARCHAR2 (500)      := 'parametros - porigen: ' || porigen;
      vobject      VARCHAR2 (200)    := 'PAC_IAX_PRODUCCION.f_get_datos_host';
      vsquery      VARCHAR2 (5000);
      cur          sys_refcursor;
      ptablas      VARCHAR2 (40);
      vnsolici     NUMBER;
      poliza       ob_iax_detpoliza;
      /* BUG10569:DRA:11/12/2009*/
      preguntas    t_iax_preguntas;
      riesgos      t_iax_riesgos;
      vnriesgo     NUMBER                        := 1;
      vtriesgo     VARCHAR2 (300);
      vresp_1699   VARCHAR2 (100);
      vcidioma     NUMBER (2);
      v_query1     VARCHAR2 (2000);
      v_query2     VARCHAR2 (2000);
      v_query3     VARCHAR2 (2000);
      v_query4     VARCHAR2 (2000);
      v_ctippre    NUMBER (1);
      datpol       ob_iax_int_datos_poliza      := ob_iax_int_datos_poliza
                                                                          ();
      pregpol      t_iax_int_preg_poliza         := t_iax_int_preg_poliza ();
      r_datpol     int_datos_poliza%ROWTYPE;
      r_pregs      int_datos_preguntas%ROWTYPE;
      r_datrie     int_datos_riesgo%ROWTYPE;
   BEGIN
      vpasexec := 1;
      vcidioma := pac_md_common.f_get_cxtidioma;
      vpasexec := 2;
      ptablas := pac_md_common.f_get_ptablas (porigen, mensajes);
      vpasexec := 3;
      poliza := pac_iobj_prod.f_getpoliza (mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;
      /* Recoleccion de los datos necesarios de la p¿liza*/
      datpol.cempres := poliza.cempres;
      datpol.sseguro := poliza.sseguro;
      datpol.ssegpol := poliza.ssegpol;
      datpol.nsolici := poliza.nsolici;
      datpol.nmovimi := poliza.nmovimi;
      datpol.nsuplem := poliza.nsuplem;
      datpol.npoliza := poliza.npoliza;
      datpol.ncertif := poliza.ncertif;
      datpol.fefecto := poliza.gestion.fefecto;
      datpol.cmodali := poliza.cmodali;
      datpol.ccolect := poliza.ccolect;
      datpol.cramo := poliza.cramo;
      datpol.ctipseg := poliza.ctipseg;
      datpol.cactivi := poliza.gestion.cactivi;
      datpol.sproduc := poliza.sproduc;
      datpol.cagente := poliza.cagente;
      datpol.cobjase := poliza.cobjase;
      datpol.csubpro := poliza.csubpro;
      datpol.cforpag := poliza.gestion.cforpag;
      datpol.csituac := poliza.csituac;
      datpol.creteni := poliza.creteni;
      datpol.cpolcia := poliza.cpolcia;
      datpol.ccompani := poliza.ccompani;
      datpol.cpromotor := poliza.cpromotor;
      datpol.npoliza_ini := poliza.gestion.polissa_ini;
      datpol.cidioma := poliza.gestion.cidioma;
      vpasexec := 5;
      preguntas := pac_iobj_prod.f_partpolpreguntas (poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      IF preguntas IS NOT NULL
      THEN
         IF preguntas.COUNT > 0
         THEN
            FOR pr IN preguntas.FIRST .. preguntas.LAST
            LOOP
               pregpol.EXTEND;
               pregpol (pregpol.LAST) := ob_iax_int_preg_poliza ();
               pregpol (pregpol.LAST).cpregun := preguntas (pr).cpregun;
               pregpol (pregpol.LAST).crespue := preguntas (pr).crespue;
               pregpol (pregpol.LAST).trespue := preguntas (pr).trespue;
               pregpol (pregpol.LAST).cnivel := 'P';

               SELECT ctippre
                 INTO v_ctippre
                 FROM codipregun
                WHERE cpregun = preguntas (pr).cpregun;

               pregpol (pregpol.LAST).ctipprg := v_ctippre;
            END LOOP;
         END IF;
      END IF;

      vpasexec := 7;
      riesgos := pac_iobj_prod.f_partpolriesgos (poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 8;
      vnumerr :=
         pac_md_produccion.f_get_datos_host (datpol,
                                             pregpol,
                                             v_query1,
                                             v_query2,
                                             v_query3,
                                             v_query4,
                                             mensajes
                                            );

      IF vnumerr <> 0
      THEN
         RAISE e_object_error;
      END IF;

      vpasexec := 9;
      pac_iax_produccion.poliza.det_poliza.riesgos := NULL;
      vpasexec := 10;
      /* INT_DATOS_POLIZA*/
      cur := pac_iax_listvalores.f_opencursor (v_query1, mensajes);

      LOOP
         FETCH cur
          INTO r_datpol.sinterf, r_datpol.npoliza, r_datpol.fpoliza,
               r_datpol.nsolici;

         EXIT WHEN cur%NOTFOUND;
         vpasexec := 11;
         pac_iax_produccion.poliza.det_poliza.npoliza := r_datpol.npoliza;
         pac_iax_produccion.poliza.det_poliza.gestion.fefecto :=
                                                             r_datpol.fpoliza;
         pac_iax_produccion.poliza.det_poliza.nsolici := r_datpol.nsolici;
      END LOOP;

      CLOSE cur;

      vpasexec := 12;
      /* INT_DATOS_PREGUNTAS_POLIZA*/
      cur := pac_iax_listvalores.f_opencursor (v_query2, mensajes);

      LOOP
         FETCH cur
          INTO r_pregs.sinterf, r_pregs.cpregun, r_pregs.crespue,
               r_pregs.trespue, r_pregs.ctipprg, r_pregs.cnivel;

         EXIT WHEN cur%NOTFOUND;
         vpasexec := 13;
         vnumerr :=
            pac_iax_produccion.f_grabapreguntaspoliza (r_pregs.cpregun,
                                                       r_pregs.crespue,
                                                       r_pregs.trespue,
                                                       mensajes
                                                      );

         IF vnumerr > 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, vnumerr);
            RAISE e_object_error;
         END IF;
      END LOOP;

      CLOSE cur;

      vpasexec := 14;
      /* INT_DATOS_RIESGO*/
      cur := pac_iax_listvalores.f_opencursor (v_query3, mensajes);

      LOOP
         FETCH cur
          INTO r_datrie.sinterf, r_datrie.nriesgo, r_datrie.triesgo;

         EXIT WHEN cur%NOTFOUND;
         vpasexec := 15;
         vnumerr :=
            pac_iax_produccion.f_grabariedescripcion (NULL,
                                                      r_datrie.triesgo,
                                                      NULL,
                                                      NULL,
                                                      NULL,
                                                      mensajes
                                                     );

         IF vnumerr > 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, vnumerr);
            RAISE e_object_error;
         END IF;
      END LOOP;

      CLOSE cur;

      vpasexec := 16;
      /* INT_DATOS_PREGUNTAS_RIESGO*/
      cur := pac_iax_listvalores.f_opencursor (v_query4, mensajes);

      LOOP
         FETCH cur
          INTO r_pregs.sinterf, r_pregs.nriesgo, r_pregs.cpregun,
               r_pregs.crespue, r_pregs.trespue, r_pregs.ctipprg,
               r_pregs.cnivel;

         EXIT WHEN cur%NOTFOUND;
         vpasexec := 17;
         vnumerr :=
            pac_iax_produccion.f_grabarpreguntasriesgo (r_pregs.nriesgo,
                                                        r_pregs.cpregun,
                                                        r_pregs.crespue,
                                                        r_pregs.trespue,
                                                        mensajes
                                                       );

         IF vnumerr > 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, vnumerr);
            RAISE e_object_error;
         END IF;
      END LOOP;

      CLOSE cur;

      vpasexec := 19;
      /* Ahora volvemos a dejar los asegurados como estaban*/
      pac_iax_produccion.poliza.det_poliza.riesgos
                           (pac_iax_produccion.poliza.det_poliza.riesgos.FIRST).riesgoase :=
                                             riesgos (riesgos.FIRST).riesgoase;
      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_get_datos_host;

   /* BUG21467:DRA:01/03/2012:Fi*/
   /* INICIO BUG 19276, JBN, REEMPLAZOS*/
   /*************************************************************************
   Crea una propuesta de poliza de un producto especifico a partir de una poliza de remplazo
   param in  psseguro : codigo de poliza
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido errores
   *************************************************************************/
   FUNCTION f_crearpropuesta_reemp (
      psseguros   IN       VARCHAR2,
      /* poliza del generico*/
      pmode       IN       VARCHAR2,
      pproducto            NUMBER,
      pcagente             NUMBER,
      pmodopant   IN       VARCHAR2 DEFAULT NULL,
      /*Bug.: 18610 - ICV - 20/05/2011*/
      pssolicit   OUT      NUMBER,
      purl        OUT      VARCHAR2,
      mensajes    OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      idtprd                 pac_iax_common.prodidentified;
      nerror                 NUMBER;
      vpasexec               NUMBER (8)                     := 1;
      vparam                 VARCHAR2 (500)
         :=    'pmode '
            || pmode
            || ' psseguros '
            || psseguros
            || ' pproducto '
            || pproducto
            || ' pcagente '
            || pcagente
            || ' pmodopant '
            || pmodopant
            || ' pssolicit '
            || pssolicit
            || ' purl '
            || purl;
      vobject                VARCHAR2 (200)
                                := 'PAC_IAX_PRODUCCION.f_crearpropuesta_reemp';
      v_error                NUMBER;
      vsseguros              VARCHAR2 (50);
      vsseguroscont          NUMBER;
      /*  Nombre de reemplazos*/
      lv_ssegurotemp         NUMBER;
      lv_count               NUMBER;
      vreemplazos            t_iax_reemplazos           := t_iax_reemplazos
                                                                           ();
      vobreemplazo           ob_iax_reemplazos;
      vgenpoliza             ob_iax_genpoliza;
      tomadores              t_iax_tomadores;
      riesgos                t_iax_riesgos;
      gestion                ob_iax_gestion;
      wficticia_sperson      estper_personas.sperson%TYPE;
      ppreguntasesp_riesgo   t_iax_preguntas;
      ggarantiasesp          t_iax_garantias;
      ppreguntasesp          t_iax_preguntas;

      TYPE t_persons IS TABLE OF NUMBER;

      v_persons              t_persons
         := t_persons (NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL
                      );
      wcont_pers             NUMBER                         := 1;
      v_estpersons           t_persons
         := t_persons (NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL,
                       NULL
                      );
      wcont_estpers          NUMBER                         := 1;
      w_traspa               BOOLEAN                        := TRUE;
      w_riesase_traspa       BOOLEAN                        := FALSE;
      w_sperson_est          estper_personas.sperson%TYPE;
      wnpoliza               seguros.npoliza%TYPE;
      vpregun                NUMBER;
      v_i_pers               NUMBER;
   BEGIN
      vpasexec := 1;

      SELECT LENGTH (psseguros) - LENGTH (REPLACE (psseguros, ',', ''))
        INTO vsseguroscont
        FROM DUAL;

      vpasexec := 2;

      IF vsseguroscont = 1
      THEN
         SELECT SUBSTR (psseguros, 1, (INSTR (psseguros, ',') - 1))
           INTO lv_ssegurotemp
           FROM DUAL;

         v_error := f_set_consultapoliza (lv_ssegurotemp, mensajes);

         IF v_error <> 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, v_error);
            RAISE e_object_error;
         END IF;

         tomadores := f_leetomadores (mensajes);
         riesgos := f_leeriesgos (mensajes);
         gestion := f_leedatosgestion (mensajes);
         limpiartemporales;
         poliza := ob_iax_poliza ();
      END IF;

      vpasexec := 3;
      /*poliza*/
      /* Cridrem la funcio PAC_IAX_PRODUCCION.F_INICIALIZA*/
      v_error :=
         pac_iax_produccion.f_inicializa (pmode,
                                          pproducto,
                                          pcagente,
                                          pmodopant,
                                          pssolicit,
                                          purl,
                                          mensajes
                                         );

      IF v_error <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, v_error);
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      vsseguros := psseguros;
      vpasexec := 5;

      /*Recorrem la llista de sseguros*/
      LOOP
         EXIT WHEN NVL (INSTR (vsseguros, ','), -99) < 0;
         lv_ssegurotemp := SUBSTR (vsseguros, 1,
                                   (INSTR (vsseguros, ',') - 1));
         lv_count := INSTR (vsseguros, ',') + 1;
         vsseguros := SUBSTR (vsseguros, lv_count, LENGTH (vsseguros));
         v_error :=
              pac_validaciones.f_valida_reemplazo (lv_ssegurotemp, pproducto);

         IF v_error <> 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, v_error);
            RAISE e_object_error;
         END IF;

         /* Creem el t_iax_reemplazos*/
         vobreemplazo := ob_iax_reemplazos ();
         /*vobreemplazo.sseguro := poliza.det_poliza.sseguro;*/
         vobreemplazo.sseguro := pssolicit;
         vobreemplazo.sreempl := lv_ssegurotemp;
         vobreemplazo.fmovdia := TRUNC (f_sysdate);
         vobreemplazo.cusuario := f_user;
         vobreemplazo.cagente := poliza.det_poliza.cagente;
         vreemplazos.EXTEND;
         vreemplazos (vreemplazos.LAST) := vobreemplazo;
      END LOOP;

      vpasexec := 6;
      /* Introdu¿m els reemplazos*/
      poliza.det_poliza.reemplazos := vreemplazos;
      vpasexec := 7;

      IF vsseguroscont = 1
      THEN
         /*RCL 18/09/2013 - INICIO BUG 25599/153023 - Traspaso asegurados*/
         ppreguntasesp := t_iax_preguntas ();
         ppreguntasesp := t_iax_preguntas ();
         v_error :=
              pac_md_produccion.p_set_pregunprod (1, ppreguntasesp, mensajes);
         ppreguntasesp_riesgo := t_iax_preguntas ();
         v_error :=
            pac_md_produccion.p_set_pregunriesgos (1,
                                                   ppreguntasesp_riesgo,
                                                   mensajes
                                                  );
         ggarantiasesp := t_iax_garantias ();

         /* Se inicializan las preguntas de riesgo existentes desde producto*/
         IF riesgos IS NOT NULL AND riesgos.COUNT > 0
         THEN
            FOR v_indice_riesgos IN riesgos.FIRST .. riesgos.LAST
            LOOP
               IF riesgos.EXISTS (v_indice_riesgos)
               THEN
                  v_error :=
                     pac_md_produccion.p_set_garanprod
                                           (ggarantiasesp,
                                            1,
                                            mensajes,
                                            riesgos (v_indice_riesgos).nriesgo
                                           );
                  riesgos (v_indice_riesgos).garantias := ggarantiasesp;
               END IF;
            END LOOP;
         END IF;

         /*RCL 18/09/2013 - FIN BUG 25599/153023 - Traspaso asegurados*/
         IF tomadores IS NOT NULL AND tomadores.COUNT > 0
         THEN
            FOR v_i_toma IN tomadores.FIRST .. tomadores.LAST
            LOOP
               vpasexec := 8;
               v_persons (wcont_pers) := tomadores (v_i_toma).sperson;
               wcont_pers := wcont_pers + 1;
               pac_persona.traspaso_tablas_per (tomadores (v_i_toma).sperson,
                                                wficticia_sperson
                                               );
               vpasexec := 9;
               tomadores (v_i_toma).sperson := wficticia_sperson;
               v_estpersons (wcont_estpers) := wficticia_sperson;
               wcont_estpers := wcont_estpers + 1;
               v_error :=
                  f_inserttomadores (tomadores (v_i_toma).sperson,
                                     mensajes,
                                     vpregun
                                    );
               vpasexec := 9;

               IF v_error <> 0
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, v_error);
                  RAISE e_object_error;
               END IF;
            END LOOP;
         END IF;

         /*RCL 18/09/2013 - INICIO BUG 25599/153023 - Traspaso asegurados*/
         IF riesgos IS NOT NULL AND riesgos.COUNT > 0
         THEN
            FOR v_i_riesg IN riesgos.FIRST .. riesgos.LAST
            LOOP
               IF riesgos.EXISTS (v_i_riesg)
               THEN
                  IF     riesgos (v_i_riesg).riesgoase IS NOT NULL
                     AND riesgos (v_i_riesg).riesgoase.COUNT > 0
                  THEN
                     FOR v_i_riease IN
                        riesgos (v_i_riesg).riesgoase.FIRST .. riesgos
                                                                   (v_i_riesg).riesgoase.LAST
                     LOOP
                        w_traspa := TRUE;

                        FOR i IN 1 .. (wcont_pers - 1)
                        LOOP
                           IF v_persons (i) =
                                 riesgos (v_i_riesg).riesgoase (v_i_riease).sperson
                           THEN
                              w_traspa := FALSE;
                              /* evita traspaso a las EST la misma persona asegurado-tomador ya traspasada en tomadores*/
                              w_sperson_est := v_estpersons (i);
                           END IF;
                        END LOOP;

                        IF w_traspa
                        THEN
                           w_riesase_traspa := TRUE;
                           v_persons (wcont_pers) :=
                              riesgos (v_i_riesg).riesgoase (v_i_riease).sperson;
                           wcont_pers := wcont_pers + 1;
                           pac_persona.traspaso_tablas_per
                              (riesgos (v_i_riesg).riesgoase (v_i_riease).sperson,
                               wficticia_sperson
                              );
                           riesgos (v_i_riesg).riesgoase (v_i_riease).sperson :=
                                                             wficticia_sperson;
                           v_estpersons (wcont_estpers) := wficticia_sperson;
                           wcont_estpers := wcont_estpers + 1;
                        ELSE
                           riesgos (v_i_riesg).riesgoase (v_i_riease).sperson :=
                                                                w_sperson_est;
                        END IF;
                     END LOOP;
                  END IF;
               END IF;
            END LOOP;
         END IF;

         IF riesgos IS NOT NULL AND riesgos.COUNT > 0
         THEN
            FOR v_i_riesg IN riesgos.FIRST .. riesgos.LAST
            LOOP
               IF riesgos.EXISTS (v_i_riesg)
               THEN
                  IF     riesgos (v_i_riesg).riespersonal IS NOT NULL
                     AND riesgos (v_i_riesg).riespersonal.COUNT > 0
                  THEN
                     FOR v_i_riease IN
                        riesgos (v_i_riesg).riespersonal.FIRST .. riesgos
                                                                    (v_i_riesg
                                                                    ).riespersonal.LAST
                     LOOP
                        w_traspa := TRUE;

                        FOR i IN 1 .. (wcont_pers - 1)
                        LOOP
                           IF v_persons (i) =
                                 riesgos (v_i_riesg).riespersonal (v_i_riesg).sperson
                           THEN
                              w_traspa := FALSE;
                              /* evita traspaso a las EST la misma persona asegurado-tomador ya traspasada en tomadores*/
                              w_sperson_est := v_estpersons (i);
                           END IF;
                        END LOOP;

                        IF w_traspa
                        THEN
                           v_persons (wcont_pers) :=
                              riesgos (v_i_riesg).riespersonal (v_i_riesg).sperson;
                           wcont_pers := wcont_pers + 1;
                           pac_persona.traspaso_tablas_per
                              (riesgos (v_i_riesg).riespersonal (v_i_riesg).sperson,
                               wficticia_sperson
                              );
                           riesgos (v_i_riesg).riespersonal (v_i_riesg).sperson :=
                                                             wficticia_sperson;
                           v_estpersons (wcont_estpers) := wficticia_sperson;
                           wcont_estpers := wcont_estpers + 1;
                        ELSE
                           riesgos (v_i_riesg).riespersonal (v_i_riesg).sperson :=
                                                                w_sperson_est;
                        END IF;
                     END LOOP;
                  END IF;
               END IF;
            END LOOP;
         END IF;

         /*RCL 18/09/2013 - FIN BUG 25599/153023 - Traspaso asegurados*/
         IF poliza.det_poliza.cobjase = 5
         THEN
            /* AUTOS*/
            /* 26343 Autos reemplazos Cargamos la personas de conductores.*/
            /* Si estamos en un producto de autos traspasamos las personas que son conductores a las EST*/
            /* Solo traspasamos si la persona no existe en las EST*/
            IF riesgos IS NOT NULL AND riesgos.COUNT > 0
            THEN
               FOR v_i_riesg IN riesgos.FIRST .. riesgos.LAST
               LOOP
                  IF riesgos.EXISTS (v_i_riesg)
                  THEN
                     IF     riesgos (v_i_riesg).riesautos IS NOT NULL
                        AND riesgos (v_i_riesg).riesautos.COUNT > 0
                     THEN
                        FOR v_i_rieaut IN
                           riesgos (v_i_riesg).riesautos.FIRST .. riesgos
                                                                    (v_i_riesg
                                                                    ).riesautos.LAST
                        LOOP
                           IF     riesgos (v_i_riesg).riesautos (v_i_rieaut).conductores IS NOT NULL
                              AND riesgos (v_i_riesg).riesautos (v_i_rieaut).conductores.COUNT >
                                                                             0
                           THEN
                              FOR v_i_cond IN
                                 riesgos (v_i_riesg).riesautos (v_i_rieaut).conductores.FIRST .. riesgos
                                                                                                   (v_i_riesg
                                                                                                   ).riesautos
                                                                                                   (v_i_rieaut
                                                                                                   ).conductores.LAST
                              LOOP
                                 w_traspa := TRUE;

                                 FOR i IN 1 .. (wcont_pers - 1)
                                 LOOP
                                    IF v_persons (i) =
                                          riesgos (v_i_riesg).riesautos
                                                                  (v_i_rieaut).conductores
                                                                    (v_i_cond).sperson
                                    THEN
                                       w_traspa := FALSE;
                                       /* evita traspaso a las EST la misma persona asegurado-tomador ya traspasada en tomadores*/
                                       w_sperson_est := v_estpersons (i);
                                    END IF;
                                 END LOOP;

                                 IF w_traspa
                                 THEN
                                    v_persons (wcont_pers) :=
                                       riesgos (v_i_riesg).riesautos
                                                                  (v_i_rieaut).conductores
                                                                    (v_i_cond).sperson;
                                    wcont_pers := wcont_pers + 1;
                                    pac_persona.traspaso_tablas_per
                                       (riesgos (v_i_riesg).riesautos
                                                                   (v_i_rieaut).conductores
                                                                     (v_i_cond).sperson,
                                        wficticia_sperson
                                       );
                                    riesgos (v_i_riesg).riesautos (v_i_rieaut).conductores
                                                                     (v_i_cond).sperson :=
                                                             wficticia_sperson;
                                    v_estpersons (wcont_estpers) :=
                                                             wficticia_sperson;
                                    wcont_estpers := wcont_estpers + 1;
                                 ELSE
                                    riesgos (v_i_riesg).riesautos (v_i_rieaut).conductores
                                                                    (v_i_cond).sperson :=
                                                                w_sperson_est;
                                 END IF;
                              END LOOP;
                           END IF;
                        END LOOP;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         /* Fin bug 26343*/
         END IF;
      END IF;

      vpasexec := 10;
      poliza.det_poliza.tomadores := tomadores;
      poliza.det_poliza.gestion.cidioma := gestion.cidioma;
      poliza.det_poliza.gestion.cforpag := gestion.cforpag;
      poliza.det_poliza.gestion.ctipcob := gestion.ctipcob;
      poliza.det_poliza.gestion.cbancar := gestion.cbancar;
      vpasexec := 11;

      /*poliza.det_poliza.riesgos(1).riesautos := riesgos(1).riesautos;*/
      /**TCS-jpaezr-SQL-173**/
      BEGIN
         SELECT /*+ FULL(R) */ MIN(fefecto) 
            INTO poliza.det_poliza.gestion.fefecto 
            FROM movrecibo m, 
                  recibos r 
            WHERE r.nrecibo = m.nrecibo + 0 
               AND m.cestrec = 3 + UID * 0 
               AND m.fmovfin IS NULL 
               AND r.sseguro = lv_ssegurotemp;
         vpasexec := 12;
      EXCEPTION
         WHEN OTHERS
         THEN
            poliza.det_poliza.gestion.fefecto := f_sysdate;
      END;

      IF poliza.det_poliza.gestion.fefecto IS NULL
      THEN
         poliza.det_poliza.gestion.fefecto := f_sysdate;
      END IF;

      vpasexec := 13;
      vpasexec := 14;
      pac_iax_produccion.vproducto := pproducto;
      pac_iax_produccion.vempresa := pac_iax_common.f_get_cxtempresa;
      pac_iax_produccion.gidioma := pac_iax_common.f_get_cxtidioma;
      pac_iax_produccion.poliza.det_poliza.sproduc := pproducto;
      vpasexec := 15;
      /*Inicializamos los objectos con los nuevos valores*/
      pac_md_produccion.inicializaobjetos (poliza.det_poliza,
                                           poliza.det_poliza.gestion,
                                           mensajes
                                          );
      vpasexec := 16;
      pac_md_produccion.inicializaobjetosproduct (poliza.det_poliza, mensajes);
      pac_iax_produccion.vssegpol :=
                                  pac_iax_produccion.poliza.det_poliza.ssegpol;
      pac_iax_produccion.vmodalidad :=
                                  pac_iax_produccion.poliza.det_poliza.cmodali;
      pac_iax_produccion.vccolect :=
                                  pac_iax_produccion.poliza.det_poliza.ccolect;
      pac_iax_produccion.vcramo := pac_iax_produccion.poliza.det_poliza.cramo;
      pac_iax_produccion.vctipseg :=
                                  pac_iax_produccion.poliza.det_poliza.ctipseg;
      pac_iax_produccion.vagente :=
                                  pac_iax_produccion.poliza.det_poliza.cagente;
      vpasexec := 17;

      /* Bug 24272 - RSC - 12/11/2012 - LCOL - REEMPLAZO MASIVO DE CERTIFICADOS DE P?IZAS DE COLECTIVOS*/
      IF NVL
            (pac_parametros.f_parproducto_n
                                (pac_iax_produccion.poliza.det_poliza.sproduc,
                                 'ALTACERO_DESCRIPCION'
                                ),
             0
            ) = 1
      THEN
         IF isaltacol
         THEN
            poliza.det_poliza.cobjase := 3;
         END IF;

         v_error := f_set_isaltacolect (mensajes);

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      vpasexec := 18;

      /* 26343 Autos reemplazos*/
      IF poliza.det_poliza.cobjase = 5 OR w_riesase_traspa
      THEN
         /* AUTOS*/
         poliza.det_poliza.riesgos := t_iax_riesgos ();
         poliza.det_poliza.riesgos.EXTEND;
         vpasexec := 19;
         poliza.det_poliza.riesgos := riesgos;
         vpasexec := 20;

         FOR v_i_rie IN
            poliza.det_poliza.riesgos.FIRST .. poliza.det_poliza.riesgos.LAST
         LOOP
            vpasexec := 21;

            /* inicializamos a nulo*/
            IF poliza.det_poliza.cobjase = 5
            THEN
               poliza.det_poliza.riesgos (v_i_rie).riesgoase :=
                                                          t_iax_asegurados
                                                                          ();
            END IF;

            poliza.det_poliza.riesgos (v_i_rie).preguntas :=
                                                            t_iax_preguntas
                                                                           ();
            poliza.det_poliza.riesgos (v_i_rie).garantias :=
                                                            t_iax_garantias
                                                                           ();
            poliza.det_poliza.riesgos (v_i_rie).primas := ob_iax_primas ();
            /*Primas acumuladas riesgo*/
            poliza.det_poliza.riesgos (v_i_rie).rentirreg := t_iax_rentairr
                                                                           ();
            /*Rentas irregulares*/
            /*CONVENIOS*/
            poliza.det_poliza.riesgos (v_i_rie).aseguradosmes :=
                                                       ob_iax_aseguradosmes
                                                                           ();
            /*CONVENIOS*/
            vpasexec := 22;
            poliza.det_poliza.riesgos (v_i_rie).prestamo :=
                                                          t_iax_prestamoseg
                                                                           ();
            /* colecci¿ de comptes de saldo deutors*/
            poliza.det_poliza.riesgos (v_i_rie).att_garansegcom :=
                                                          t_iax_garansegcom
                                                                           ();
            poliza.det_poliza.riesgos (v_i_rie).bonfranseg :=
                                                           t_iax_bonfranseg
                                                                           ();
            poliza.det_poliza.riesgos (v_i_rie).beneficiario :=
                                                       ob_iax_beneficiarios
                                                                           ();
            /*Beneficiario*/
            vpasexec := 23;
            /*riespersonal   t_iax_personas,   --Personal*/
            /*riesdireccion  ob_iax_sitriesgos,   --Direcciones*/
            /* riesgoase      t_iax_asegurados,   --Asegurados*/
            /*riesdescripcion ob_iax_descripcion,   --Descripci¿n o innominado*/
            /*poliza.det_poliza.riesgos(v_i_rie ).beneficiario :=  ob_iax_beneficiarios,   --Beneficiario*/
            /*mjs            t_iax_mensajes,*/
            vpasexec := 24;
         END LOOP;
      END IF;

      vpasexec := 25;
      /* fin 26343 Autos reemplazos*/
      /* Fin Bug 24272*/
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_crearpropuesta_reemp;

   /* FI BUG 19276, JBN, REEMPLAZOS*/
   /* inif bug 19420*/
   /*************************************************************************
   Recuperar informacion de  las personas del riesgo
   param in pnriesgo  : numero de riesgo
   param out mensajes : mensajes de error
   return             : objeto garantias
   *************************************************************************/
   FUNCTION f_get_detalleriesgopersonal (
      pnriesgo   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_personas
   IS
      rie        ob_iax_riesgos;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200)
                          := 'PAC_IAX_PRODUCCION.f_get_detalleriesgopersonal';
   BEGIN
      rie := f_get_riesgo (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      IF rie.riespersonal IS NULL
      THEN
         RETURN NULL;
      END IF;

      IF rie.riespersonal.COUNT = 0
      THEN
         RETURN NULL;
      END IF;

      RETURN rie.riespersonal;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_detalleriesgopersonal;

   /*************************************************************************
   Valida si se puede anular una propuesta de poliza retenida
   param in psseguro  : codigo de poliza
   param out mensajes : mensajes de error
   return             : 0 -> No se puede anular la propuesta
   1 -> Si se permite anular la propuesta
   *************************************************************************/
   FUNCTION f_crear_facul (
      psseguro   IN       NUMBER,
      pnmovimi   IN       NUMBER,
      /* BUG10464:DRA:16/06/2009*/
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vnumerr    NUMBER (8);
      vcreteni   NUMBER;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (500) := 'psseguro= ' || psseguro;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Crear_Facul';
   BEGIN
      /*Comprovacio de parametres d'entrada*/
      IF psseguro IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 3;
      /*Comprovem l'estat en que es troba la proposta*/
      vnumerr := pac_gestion_retenidas.f_estado_propuesta (psseguro, vcreteni);

      IF vnumerr <> 0
      THEN
         /*Error recuperant el tipus de retencio de la polissa.*/
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, vnumerr);
         RAISE e_object_error;
      END IF;

      vpasexec := 5;

      /*Actuem segons l'estat de la proposta*/
      IF vcreteni IN (3, 4)
      THEN
         /*Proposta anulada o rebutjada => No es pot anul.lar la proposta.*/
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 151177);
         RETURN 0;
      ELSIF vcreteni IN (0, 1, 2)
      THEN
         /* Retencio Normal*/
         vpasexec := 7;
         vnumerr :=
            pac_md_produccion.f_crear_facul (psseguro,
                                             pnmovimi,
                                             /*BUG10464:DRA:16/06/2009*/
                                             vcreteni,
                                             mensajes
                                            );
      END IF;

      p_traza_proceso (24,
                       'TRAZA_CESIONES_REA',
                       777,
                       'PAC_IAX_PRODUCCION',
                       'CREA_FACUL',
                       NULL,
                       2,
                          'Error: '
                       || vnumerr
                       || '-'
                       || psseguro
                       || '-'
                       || pnmovimi
                       || '-'
                       || vcreteni
                      );
      COMMIT;
      RETURN vnumerr;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 0;
   END f_crear_facul;

   /*Ini Bug.: 19152*/
   /*************************************************************************
   Funcion que inicializa el objeto de BENEIDENTIFICADOS riesgo
   param in pnriesgo  : numero de riesgo
   param in psperson  : Codigo de personas
   param out mensajes : mensajes de error
   return             : number
   *************************************************************************/
   FUNCTION f_insert_beneident_r (
      pnriesgo   IN       NUMBER,
      psperson   IN       NUMBER,
      pnorden    OUT      NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec      NUMBER (8)      := 1;
      vparam        VARCHAR2 (1000)
                   := 'pnriesgo : ' || pnriesgo || ' psperson : ' || psperson;
      vobject       VARCHAR2 (200)
                                 := 'PAC_IAX_PRODUCCION.f_insert_beneident_r';
      num_err       NUMBER          := 0;
      rie           ob_iax_riesgos;
      v_norden      NUMBER          := 0;
      vefectsuple   DATE;
      nerrfefec     NUMBER          := 0;
   BEGIN
      IF pnriesgo IS NULL OR psperson IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie := f_get_riesgo (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      vpasexec := 3;
      /*Buscamos el objeto de beneficiario, si es nulo, lo inicializamos*/
      rie.beneficiario :=
                         pac_iobj_prod.f_partriesbeneficiarios (rie, mensajes);
      rie.beneficiario.ctipo := 3;
      vpasexec := 4;

      IF rie.beneficiario.benefesp IS NULL
      THEN
         rie.beneficiario.benefesp := ob_iax_benespeciales ();
      END IF;

      IF issuplem
      THEN
         nerrfefec :=
            pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                   vnmovimi,
                                                   vefectsuple,
                                                   mensajes
                                                  );

         IF (nerrfefec <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001094);
            RAISE e_object_error;
         END IF;
      END IF;

      rie.beneficiario.benefesp.benef_riesgo :=
         pac_md_produccion.f_insert_beneident_r
                                      (rie.beneficiario.benefesp,
                                       psperson,
                                       NVL (vefectsuple,
                                            poliza.det_poliza.gestion.fefecto
                                           ),
                                       vsolicit,
                                       pnorden,
                                       mensajes
                                      );
      vpasexec := 5;
      num_err :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         pnriesgo,
                                         rie,
                                         mensajes
                                        );
      vpasexec := 6;
      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_insert_beneident_r;

   /*************************************************************************
   Funcion que devuelve el objeto de BENEIDENTIFICADOS riesgo
   param in pnriesgo  : numero de riesgo
   param in psperson  :
   param in psperson_tit  :
   param out mensajes : mensajes de error
   return             : ob_iax_beneidentificados
   *************************************************************************/
   FUNCTION f_get_beneident_r (
      pnriesgo   IN       NUMBER,
      pnorden    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN ob_iax_beneidentificados
   IS
      vpasexec       NUMBER (8)               := 1;
      vparam         VARCHAR2 (1000)
                     := 'pnriesgo : ' || pnriesgo || ' pnorden : ' || pnorden;
      vobject        VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_get_beneident_r';
      num_err        NUMBER                   := 0;
      rie            ob_iax_riesgos;
      beneidentifi   ob_iax_beneidentificados;
   BEGIN
      IF pnriesgo IS NULL OR pnorden IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie := f_get_riesgo (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      vpasexec := 3;
      /*Recuperamos el ob_iax_beneidentificados deaseado*/
      beneidentifi :=
         pac_iobj_prod.f_partriesbeneident_r (rie, vsolicit, pnorden,
                                              mensajes);
      vpasexec := 4;
      RETURN beneidentifi;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_beneident_r;

   /*************************************************************************
   Funcion que para actualizar el objeto OB_IAX_BENEIDENTIFICADOS riesgo
   param in pnriesgo  : numero de riesgo
   param in pnorden  : orden dentro del objeto
   param in psperson_tit :
   param in pctipben :
   param in pcparen:
   param in ppparticip :
   param out mensajes : mensajes de error
   return             : number
   *************************************************************************/
   FUNCTION f_set_beneident_r (
      pnriesgo       IN       NUMBER,
      pnorden        IN       NUMBER,
      psperson_tit   IN       NUMBER,
      pctipben       IN       NUMBER,
      pcparen        IN       NUMBER,
      ppparticip     IN       NUMBER,
      pcestado       IN       NUMBER DEFAULT NULL,
      /* Bug 24717 - MDS - 20/12/2012 : A¿adir campo cestado*/
      pctipcon       IN       NUMBER,
      /* Bug 34866/206821 - JAL- 10/06/2015*/
      mensajes       OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1000)
         :=    'pnriesgo : '
            || pnriesgo
            || ' pnorden : '
            || pnorden
            || ' psperson_tit : '
            || psperson_tit
            || ' pctipben : '
            || pctipben
            || ' pcparen : '
            || pcparen
            || ' ppparticip : '
            || ppparticip
            || ' pcestado : '
            || pcestado;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.f_set_beneident_r';
      num_err    NUMBER          := 0;
      rie        ob_iax_riesgos;
   BEGIN
      IF    pnriesgo IS NULL
         OR pnorden IS NULL
         OR pctipben IS NULL
         OR ppparticip IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie := f_get_riesgo (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      vpasexec := 3;

      /*Recuperamos el ob_iax_beneidentificados deaseado*/
      IF rie.beneficiario.benefesp IS NOT NULL
      THEN
         vpasexec := 4;
         rie.beneficiario.benefesp.benef_riesgo :=
            pac_md_produccion.f_set_beneident_r (rie.beneficiario.benefesp,
                                                 pnorden,
                                                 psperson_tit,
                                                 pctipben,
                                                 pcparen,
                                                 ppparticip,
                                                 pcestado,
                                                 pctipcon,
                                                 vsolicit,
                                                 /* Bug 24717 - MDS - 20/12/2012 : A¿adir campo cestado*/
                                                 mensajes
                                                );
      END IF;

      /*p_tab_error(f_sysdate, f_user, 'PAC_IAX_PRODUCCION.f_set_beneident_r', vpasexec, vparam,
      rie.beneficiario.benefesp.benef_riesgo.ctipocon || SQLCODE || ' ' || SQLERRM);*/
      vpasexec := 5;
      num_err :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         pnriesgo,
                                         rie,
                                         mensajes
                                        );

      IF num_err <> 0
      THEN
         RETURN num_err;
      END IF;

      vpasexec := 6;
      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_beneident_r;

   /*************************************************************************
   Funcion que elimina un objeto de la coleccion
   param in pnriesgo  : numero de riesgo
   param in pnorden  :
   param out mensajes : mensajes de error
   return             : number
   *************************************************************************/
   FUNCTION f_eliminar_beneident_r (
      pnriesgo   IN       NUMBER,
      pnorden    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec       NUMBER (8)               := 1;
      vparam         VARCHAR2 (1000)
                     := 'pnriesgo : ' || pnriesgo || ' pnorden : ' || pnorden;
      vobject        VARCHAR2 (200)
                               := 'PAC_IAX_PRODUCCION.f_eliminar_beneident_r';
      num_err        NUMBER                   := 0;
      rie            ob_iax_riesgos;
      beneidentifi   ob_iax_beneidentificados;
      -- INI 5281 CJMR 17/09/2019
      v_benef_ter_afec NUMBER;
      v_spereal  estper_personas.spereal%TYPE;
      -- FIN 5281 CJMR 17/09/2019
   BEGIN
      IF pnriesgo IS NULL OR pnorden IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie := f_get_riesgo (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      vpasexec := 3;

      /*Recuperamos el ob_iax_beneidentificados deaseado*/
      IF rie.beneficiario.benefesp IS NOT NULL
      THEN
         vpasexec := 4;

         IF rie.beneficiario.benefesp.benef_riesgo.COUNT > 0
         THEN
            FOR i IN
               rie.beneficiario.benefesp.benef_riesgo.FIRST .. rie.beneficiario.benefesp.benef_riesgo.LAST
            LOOP
               vpasexec := 5;

               IF rie.beneficiario.benefesp.benef_riesgo.EXISTS (i)
               THEN
                  vpasexec := 6;

                  IF rie.beneficiario.benefesp.benef_riesgo (i).norden =
                                                                      pnorden
                  THEN
                     -- INI 5281 CJMR 17/09/2019
                     BEGIN
                        SELECT spereal
                        INTO v_spereal
                        FROM  estper_personas
                        WHERE sseguro = poliza.det_poliza.sseguro
                        AND sperson = rie.beneficiario.benefesp.benef_riesgo(i).sperson;
                     EXCEPTION 
                        WHEN OTHERS THEN
                           v_spereal := 0;
                     END;
                     v_benef_ter_afec := NVL(pac_parametros.f_parproducto_n(pac_iax_produccion.poliza.det_poliza.sproduc,'BENIDENT_RIES'), 0);
                     IF v_spereal = v_benef_ter_afec THEN
                        pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, NULL, REPLACE(f_axis_literales(89907059, pac_md_common.f_get_cxtidioma), '#1#', rie.beneficiario.benefesp.benef_riesgo(i).nombre_ben));
                        RETURN 1;
                     END IF;
                     -- FIN 5281 CJMR 17/09/2019

                     /* Bug 20672 - RSC - 17/01/2012 - LCOL_T001-LCOL - UAT - TEC: Suplementos*/
                     FOR j IN
                        rie.beneficiario.benefesp.benef_riesgo.FIRST .. rie.beneficiario.benefesp.benef_riesgo.LAST
                     LOOP
                        IF rie.beneficiario.benefesp.benef_riesgo.EXISTS (j)
                        THEN
                           IF     rie.beneficiario.benefesp.benef_riesgo (j).ctipben =
                                                                            3
                              AND rie.beneficiario.benefesp.benef_riesgo (j).sperson_tit =
                                     rie.beneficiario.benefesp.benef_riesgo
                                                                           (i).sperson
                           THEN
                              pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                                    1,
                                                                    9903119
                                                                   );
                              RETURN 1;
                           END IF;
                        END IF;
                     END LOOP;

                     /* Fin Bug 20672*/
                     rie.beneficiario.benefesp.benef_riesgo.DELETE (i);
                  END IF;
               END IF;
            END LOOP;

            vpasexec := 7;
         END IF;
      END IF;

      vpasexec := 8;
      num_err :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         pnriesgo,
                                         rie,
                                         mensajes
                                        );
      vpasexec := 9;
      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_eliminar_beneident_r;

   /*************************************************************************
   Funcion que inicializa el objeto de OB_iax_benespeciales_gar
   param in pnriesgo  : numero de riesgo
   param in pcgarant  : Codigo de garantia
   param out mensajes : mensajes de error
   return             : number
   *************************************************************************/
   FUNCTION f_insert_benesp_gar (
      pnriesgo   IN       NUMBER,
      pcgarant   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec      NUMBER (8)      := 1;
      vparam        VARCHAR2 (1000)
                   := 'pnriesgo : ' || pnriesgo || ' pcgarant : ' || pcgarant;
      vobject       VARCHAR2 (200)
                                  := 'PAC_IAX_PRODUCCION.f_insert_benesp_gar';
      num_err       NUMBER          := 0;
      rie           ob_iax_riesgos;
      v_norden      NUMBER          := 0;
      vefectsuple   DATE;
      nerrfefec     NUMBER          := 0;
   BEGIN
      IF pnriesgo IS NULL OR pcgarant IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie := f_get_riesgo (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      vpasexec := 3;
      /*Buscamos el objeto de beneficiario, si es nulo, lo inicializamos*/
      rie.beneficiario :=
                         pac_iobj_prod.f_partriesbeneficiarios (rie, mensajes);
      rie.beneficiario.ctipo := 3;
      vpasexec := 4;

      IF rie.beneficiario.benefesp IS NULL
      THEN
         rie.beneficiario.benefesp := ob_iax_benespeciales ();
      END IF;

      rie.beneficiario.benefesp.benefesp_gar :=
         pac_md_produccion.f_insert_benesp_gar (rie.beneficiario.benefesp,
                                                pcgarant,
                                                mensajes
                                               );

      IF    rie.beneficiario.benefesp.benefesp_gar IS NULL
         OR rie.beneficiario.benefesp.benefesp_gar.COUNT = 0
      THEN
         RAISE e_object_error;
      END IF;

      vpasexec := 5;
      num_err :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         pnriesgo,
                                         rie,
                                         mensajes
                                        );
      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_insert_benesp_gar;

   /*************************************************************************
   Funcion que inicializa el objeto de OB_iax_beneidentificados Garantia
   param in pnriesgo  : numero de riesgo
   param in pcgarant  : Codigo de garantia
   param in psperson  : Codigo de persona
   param out mensajes : mensajes de error
   return             : number
   *************************************************************************/
   FUNCTION f_insert_beneident_g (
      pnriesgo   IN       NUMBER,
      pcgarant   IN       NUMBER,
      psperson   IN       NUMBER,
      pnorden    OUT      NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec      NUMBER (8)      := 1;
      vparam        VARCHAR2 (1000)
                   := 'pnriesgo : ' || pnriesgo || ' pcgarant : ' || pcgarant;
      vobject       VARCHAR2 (200)
                                  := 'PAC_IAX_PRODUCCION.f_insert_benesp_gar';
      num_err       NUMBER          := 0;
      rie           ob_iax_riesgos;
      v_norden      NUMBER          := 0;
      vefectsuple   DATE;
      nerrfefec     NUMBER          := 0;
   BEGIN
      IF pnriesgo IS NULL OR pcgarant IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie := f_get_riesgo (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      vpasexec := 3;
      /*Buscamos el objeto de beneficiario, si es nulo, lo inicializamos*/
      rie.beneficiario :=
                         pac_iobj_prod.f_partriesbeneficiarios (rie, mensajes);
      rie.beneficiario.ctipo := 3;
      vpasexec := 4;

      /*Buscamos la coleccion por garantia*/
      IF    rie.beneficiario.benefesp.benefesp_gar IS NULL
         OR rie.beneficiario.benefesp.benefesp_gar.COUNT = 0
      THEN
         RETURN NULL;
      END IF;

      IF issuplem
      THEN
         nerrfefec :=
            pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                   vnmovimi,
                                                   vefectsuple,
                                                   mensajes
                                                  );

         IF (nerrfefec <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001094);
            RAISE e_object_error;
         END IF;
      END IF;

      rie.beneficiario.benefesp.benefesp_gar :=
         pac_md_produccion.f_insert_beneident_g
                                      (rie.beneficiario.benefesp,
                                       NVL (vefectsuple,
                                            poliza.det_poliza.gestion.fefecto
                                           ),
                                       pcgarant,
                                       psperson,
                                       vsolicit,
                                       pnorden,
                                       mensajes
                                      );
      vpasexec := 11;
      num_err :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         pnriesgo,
                                         rie,
                                         mensajes
                                        );
      vpasexec := 12;
      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_insert_beneident_g;

   /*************************************************************************
   Funcion que devuelve el objeto de BENEIDENTIFICADOS garantia
   param in pnriesgo  : numero de riesgo
   param in pnorden :
   param out mensajes : mensajes de error
   return             : ob_iax_beneidentificados
   *************************************************************************/
   FUNCTION f_get_beneident_g (
      pnriesgo   IN       NUMBER,
      pnorden    IN       NUMBER,
      pcgarant   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN ob_iax_beneidentificados
   IS
      vpasexec       NUMBER (8)               := 1;
      vparam         VARCHAR2 (1000)
                     := 'pnriesgo : ' || pnriesgo || ' pnorden : ' || pnorden;
      vobject        VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_get_beneident_g';
      num_err        NUMBER                   := 0;
      rie            ob_iax_riesgos;
      beneidentifi   ob_iax_beneidentificados;
   BEGIN
      IF pnriesgo IS NULL OR pnorden IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie := f_get_riesgo (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      vpasexec := 3;
      /*Recuperamos el ob_iax_beneidentificados deaseado*/
      beneidentifi :=
         pac_iobj_prod.f_partriesbeneident_g (rie, pnorden, pcgarant,
                                              mensajes);
      vpasexec := 4;
      RETURN beneidentifi;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_beneident_g;

   /*************************************************************************
   Funcion que para actualizar el objeto OB_IAX_BENEIDENTIFICADOS garantia
   param in pnriesgo  : numero de riesgo
   param in pnorden  : orden dentro del objeto
   param in psperson_tit :
   param in pctipben :
   param in pcparen:
   param in ppparticip :
   param in pcgarant
   param out mensajes : mensajes de error
   return             : number
   *************************************************************************/
   FUNCTION f_set_beneident_g (
      pnriesgo       IN       NUMBER,
      pnorden        IN       NUMBER,
      psperson_tit   IN       NUMBER,
      pctipben       IN       NUMBER,
      pcparen        IN       NUMBER,
      ppparticip     IN       NUMBER,
      pcgarant       IN       NUMBER,
      pcestado       IN       NUMBER DEFAULT NULL,
      /* Bug 24717 - MDS - 20/12/2012 : A¿adir campo cestado*/
      pctipcon       IN       NUMBER,
      /* Bug 34866/206821 - JAL- 10/06/2015*/
      mensajes       OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1000)
         :=    'pnriesgo : '
            || pnriesgo
            || ' pnorden : '
            || pnorden
            || ' psperson_tit : '
            || psperson_tit
            || ' pctipben : '
            || pctipben
            || ' pcparen : '
            || pcparen
            || ' ppparticip : '
            || ppparticip
            || ' pcgarant : '
            || pcgarant
            || ' pcestado : '
            || pcestado
            || ' pctipcon : '
            || pctipcon;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.f_set_beneident_g';
      num_err    NUMBER          := 0;
      rie        ob_iax_riesgos;
   BEGIN
      IF    pnriesgo IS NULL
         OR pnorden IS NULL
         OR pctipben IS NULL
         OR ppparticip IS NULL
         OR pcgarant IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie := f_get_riesgo (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      vpasexec := 3;

      /*Recuperamos el ob_iax_beneidentificados deaseado*/
      IF rie.beneficiario.benefesp IS NOT NULL
      THEN
         rie.beneficiario.benefesp.benefesp_gar :=
            pac_md_produccion.f_set_beneident_g (rie.beneficiario.benefesp,
                                                 pnorden,
                                                 psperson_tit,
                                                 pctipben,
                                                 pcparen,
                                                 ppparticip,
                                                 pcgarant,
                                                 pcestado,
                                                 pctipcon,
                                                 /* Bug 24717 - MDS - 20/12/2012 : A¿adir campo cestado*/
                                                 mensajes
                                                );
      END IF;

      vpasexec := 4;
      num_err :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         pnriesgo,
                                         rie,
                                         mensajes
                                        );

      IF num_err <> 0
      THEN
         RETURN num_err;
      END IF;

      vpasexec := 5;
      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_beneident_g;

   /*************************************************************************
   Funcion que elimina un objeto de la coleccion
   param in pnriesgo  : numero de riesgo
   param in pnorden  :
   pcgarant IN NUMBER :
   param out mensajes : mensajes de error
   return             : number
   *************************************************************************/
   FUNCTION f_eliminar_beneident_g (
      pnriesgo   IN       NUMBER,
      pnorden    IN       NUMBER,
      pcgarant   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec       NUMBER (8)               := 1;
      vparam         VARCHAR2 (1000)
         :=    'pnriesgo : '
            || pnriesgo
            || ' pnorden : '
            || pnorden
            || ' pcgarant : '
            || pcgarant;
      vobject        VARCHAR2 (200)
                                := 'PAC_IAX_PRODUCCION.f_eliminar_beneident_g';
      num_err        NUMBER                   := 0;
      rie            ob_iax_riesgos;
      beneidentifi   ob_iax_beneidentificados;
   BEGIN
      IF pnriesgo IS NULL OR pnorden IS NULL OR pcgarant IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie := f_get_riesgo (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      vpasexec := 3;

      /*Recuperamos el ob_iax_beneidentificados deaseado*/
      IF rie.beneficiario.benefesp IS NOT NULL
      THEN
         vpasexec := 4;

         IF rie.beneficiario.benefesp.benefesp_gar.COUNT > 0
         THEN
            FOR i IN
               rie.beneficiario.benefesp.benefesp_gar.FIRST .. rie.beneficiario.benefesp.benefesp_gar.LAST
            LOOP
               vpasexec := 5;

               IF rie.beneficiario.benefesp.benefesp_gar.EXISTS (i)
               THEN
                  vpasexec := 6;

                  IF rie.beneficiario.benefesp.benefesp_gar (i).cgarant =
                                                                     pcgarant
                  THEN
                     /*Buscamos el beneficiario identificado que queremos borrar*/
                     vpasexec := 7;

                     IF rie.beneficiario.benefesp.benefesp_gar (i).benef_ident.COUNT >
                                                                            0
                     THEN
                        FOR j IN
                           rie.beneficiario.benefesp.benefesp_gar (i).benef_ident.FIRST .. rie.beneficiario.benefesp.benefesp_gar
                                                                                             (i
                                                                                             ).benef_ident.LAST
                        LOOP
                           IF rie.beneficiario.benefesp.benefesp_gar (i).benef_ident.EXISTS
                                                                          (j)
                           THEN
                              vpasexec := 8;

                              IF rie.beneficiario.benefesp.benefesp_gar (i).benef_ident
                                                                          (j).norden =
                                                                      pnorden
                              THEN
                                 rie.beneficiario.benefesp.benefesp_gar (i).benef_ident.DELETE
                                                                          (j);
                                 vpasexec := 9;
                              END IF;
                           END IF;
                        END LOOP;
                     END IF;
                  END IF;
               END IF;
            END LOOP;

            vpasexec := 10;
         END IF;
      END IF;

      vpasexec := 11;
      num_err :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         pnriesgo,
                                         rie,
                                         mensajes
                                        );
      vpasexec := 12;
      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_eliminar_beneident_g;

   /*************************************************************************
   Funcion que elimina un objeto de la coleccion
   param in pnriesgo  : numero de riesgo
   pcgarant IN NUMBER :
   param out mensajes : mensajes de error
   return             : number
   *************************************************************************/
   FUNCTION f_eliminar_gar_beneident (
      pnriesgo   IN       NUMBER,
      pcgarant   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1000)
                   := 'pnriesgo : ' || pnriesgo || ' pcgarant : ' || pcgarant;
      vobject    VARCHAR2 (200)
                               := 'PAC_IAX_PRODUCCION.f_eliminar_beneident_g';
      num_err    NUMBER          := 0;
      rie        ob_iax_riesgos;
   BEGIN
      IF pnriesgo IS NULL OR pcgarant IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie := f_get_riesgo (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      vpasexec := 3;

      /*Recuperamos el ob_iax_beneidentificados deaseado*/
      IF rie.beneficiario.benefesp IS NOT NULL
      THEN
         vpasexec := 4;

         IF rie.beneficiario.benefesp.benefesp_gar.COUNT > 0
         THEN
            FOR i IN
               rie.beneficiario.benefesp.benefesp_gar.FIRST .. rie.beneficiario.benefesp.benefesp_gar.LAST
            LOOP
               vpasexec := 5;

               IF rie.beneficiario.benefesp.benefesp_gar.EXISTS (i)
               THEN
                  vpasexec := 6;

                  IF rie.beneficiario.benefesp.benefesp_gar (i).cgarant =
                                                                     pcgarant
                  THEN
                     /*Buscamos el beneficiario identificado que queremos borrar*/
                     vpasexec := 7;
                     rie.beneficiario.benefesp.benefesp_gar.DELETE (i);
                  END IF;
               END IF;
            END LOOP;

            vpasexec := 8;
         END IF;
      END IF;

      vpasexec := 10;
      num_err :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         pnriesgo,
                                         rie,
                                         mensajes
                                        );
      vpasexec := 11;
      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_eliminar_gar_beneident;

   /*************************************************************************
   Funcion que devuelve una coleccion de T_IAX_BENEIDENTIFICADOS
   param in pnriesgo  : numero de riesgo
   param in pcgarant :
   param out mensajes : mensajes de error
   return             : ob_iax_beneidentificados
   *************************************************************************/
   FUNCTION f_get_beneident_tit (
      pnriesgo   IN       NUMBER,
      psperson   IN       NUMBER,
      pcgarant   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_beneidentificados
   IS
      vpasexec         NUMBER (8)              := 1;
      vparam           VARCHAR2 (1000)
                   := 'pnriesgo : ' || pnriesgo || ' pcgarant : ' || pcgarant;
      vobject          VARCHAR2 (200)
                                  := 'PAC_IAX_PRODUCCION.f_get_beneident_tit';
      num_err          NUMBER                  := 0;
      rie              ob_iax_riesgos;
      t_beneidentifi   t_iax_beneidentificados := t_iax_beneidentificados ();
      v_contin         NUMBER;
   /* t_tomador      t_iax_tomadores := t_iax_tomadores();*/
   BEGIN
      IF pnriesgo IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 1;
      rie := f_get_riesgo (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      vpasexec := 2;

      IF pcgarant IS NULL
      THEN
         IF rie.beneficiario.benefesp IS NOT NULL
         THEN
            vpasexec := 3;

            IF rie.beneficiario.benefesp.benef_riesgo.COUNT > 0
            THEN
               FOR i IN
                  rie.beneficiario.benefesp.benef_riesgo.FIRST .. rie.beneficiario.benefesp.benef_riesgo.LAST
               LOOP
                  vpasexec := 4;

                  IF rie.beneficiario.benefesp.benef_riesgo.EXISTS (i)
                  THEN
                     vpasexec := 6;

                     IF     NVL
                               (rie.beneficiario.benefesp.benef_riesgo (i).sperson_tit,
                                0
                               ) = 0
                        AND rie.beneficiario.benefesp.benef_riesgo (i).ctipben <>
                                                                             3
                        AND rie.beneficiario.benefesp.benef_riesgo (i).sperson <>
                                                                      psperson
                     THEN
                        t_beneidentifi.EXTEND;
                        t_beneidentifi (t_beneidentifi.LAST) :=
                                   rie.beneficiario.benefesp.benef_riesgo (i);
                     END IF;
                  END IF;
               END LOOP;

               vpasexec := 7;
            END IF;
         END IF;
      ELSE
         IF rie.beneficiario.benefesp IS NOT NULL
         THEN
            vpasexec := 8;

            IF rie.beneficiario.benefesp.benefesp_gar.COUNT > 0
            THEN
               /*Nos situamos en la garantia*/
               FOR i IN
                  rie.beneficiario.benefesp.benefesp_gar.FIRST .. rie.beneficiario.benefesp.benefesp_gar.LAST
               LOOP
                  vpasexec := 9;

                  IF rie.beneficiario.benefesp.benefesp_gar.EXISTS (i)
                  THEN
                     vpasexec := 10;

                     IF rie.beneficiario.benefesp.benefesp_gar (i).cgarant =
                                                                     pcgarant
                     THEN
                        /*Ahora nos posibionamos dentro de la coleccion de beneidentificados*/
                        vpasexec := 16;

                        IF rie.beneficiario.benefesp.benefesp_gar (i).benef_ident.COUNT >
                                                                            0
                        THEN
                           vpasexec := 17;

                           FOR j IN
                              rie.beneficiario.benefesp.benefesp_gar (i).benef_ident.FIRST .. rie.beneficiario.benefesp.benefesp_gar
                                                                                                (i
                                                                                                ).benef_ident.LAST
                           LOOP
                              vpasexec := 18;

                              /*Ahora seleccionamos el beneidentificado que buscamos*/
                              IF rie.beneficiario.benefesp.benefesp_gar (i).benef_ident.EXISTS
                                                                          (j)
                              THEN
                                 IF     NVL
                                           (rie.beneficiario.benefesp.benefesp_gar
                                                                           (i).benef_ident
                                                                           (j).sperson_tit,
                                            0
                                           ) = 0
                                    AND rie.beneficiario.benefesp.benefesp_gar
                                                                           (i).benef_ident
                                                                           (j).ctipben <>
                                                                             3
                                    AND rie.beneficiario.benefesp.benefesp_gar
                                                                           (i).benef_ident
                                                                           (j).sperson <>
                                                                      psperson
                                 THEN
                                    t_beneidentifi.EXTEND;
                                    t_beneidentifi (t_beneidentifi.LAST) :=
                                       rie.beneficiario.benefesp.benefesp_gar
                                                                          (i).benef_ident
                                                                          (j);
                                 END IF;
                              END IF;
                           END LOOP;
                        END IF;
                     END IF;
                  END IF;
               END LOOP;

               /* BUG 28455/146711 - RCL - Se comenta p_tratarmensaje ya que producia un mensaje NO esperado.*/
               /* pac_iobj_mensajes.p_tratarmensaje(mensajes, vobject, 1000005, vpasexec, vparam);*/
               vpasexec := 19;
            END IF;
         END IF;
      END IF;

      /* t_tomador := pac_iobj_prod.f_partpoltomadores(poliza.det_poliza, mensajes);
      vpasexec := 11;
      pac_iobj_mensajes.p_tratarmensaje
      (mensajes, vobject, 1000005, vpasexec,
      poliza.det_poliza.tomadores(poliza.det_poliza.tomadores.FIRST).tnombre);
      vpasexec := 12;
      pac_iobj_mensajes.p_tratarmensaje(mensajes, vobject, 1000005, vpasexec,
      poliza.det_poliza.tomadores(t_tomador.FIRST).tnombre);*/
      /* BUG 27305/164088 - DEV - se a¿ade el tomador si el parametro 'ASEG_CONTINGENTE' es 1 , valor defecto 0*/
      v_contin :=
         pac_parametros.f_parproducto_n (poliza.det_poliza.sproduc,
                                         'ASEG_CONTINGENTE'
                                        );

      IF v_contin = 1
      THEN
         vpasexec := 13;
         t_beneidentifi.EXTEND;
         vpasexec := 15;
         t_beneidentifi (t_beneidentifi.LAST) := ob_iax_beneidentificados ();
         vpasexec := 16;
         t_beneidentifi (t_beneidentifi.LAST).sperson :=
            poliza.det_poliza.tomadores (poliza.det_poliza.tomadores.FIRST).sperson;
         t_beneidentifi (t_beneidentifi.LAST).nombre_ben :=
               poliza.det_poliza.tomadores (poliza.det_poliza.tomadores.FIRST).tapelli1
            || ' '
            || poliza.det_poliza.tomadores (poliza.det_poliza.tomadores.FIRST).tapelli2
            || ', '
            || poliza.det_poliza.tomadores (poliza.det_poliza.tomadores.FIRST).tnombre;
      END IF;

      /*BEGIN
      SELECT ff_desvalorfijo(672, pac_md_common.f_get_cxtidioma(), ctipide),
      nnumide,
      ed.tapelli1 || ' ' || ed.tapelli2 || ', ' || ed.tnombre
      INTO ob_benef.benef_riesgo(ob_benef.benef_riesgo.LAST).ttipide,
      ob_benef.benef_riesgo(ob_benef.benef_riesgo.LAST).nnumide,
      ob_benef.benef_riesgo(ob_benef.benef_riesgo.LAST).nombre_ben
      t_beneidentifi.EXTEND;
      vpasexec := 19;
      END IF;
      END IF;
      END IF; */
      vpasexec := 4;
      RETURN t_beneidentifi;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_beneident_tit;

   /*************************************************************************
   Funcion que devuelve una lista de garantias seleccionadas para beneficiario
   param in psseguro  : numero de seguro
   param out mensajes : mensajes de error
   return             : sys_refcursor
   *************************************************************************/
   FUNCTION f_get_garantias_benidgar (
      psseguro   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN sys_refcursor
   IS
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1000) := 'psseguro : ' || psseguro;
      vobject    VARCHAR2 (200)
                             := 'PAC_IAX_PRODUCCION.F_GET_GARANTIAS_BENIDGAR';
      num_err    NUMBER          := 0;
      cur        sys_refcursor;
   BEGIN
      IF psseguro IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      cur := pac_md_produccion.f_get_garantias_benidgar (psseguro, mensajes);
      RETURN cur;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
   END f_get_garantias_benidgar;

   /*************************************************************************
   Funcion que comprueba que la garantia este seleccionada en caso de beneficiario especial por garantia, si no lo esta la borra
   param in psseguro  : numero de seguro
   param out mensajes : mensajes de error
   return             : number
   *************************************************************************/
   FUNCTION f_comprobar_benidgar (
      psseguro   IN       NUMBER,
      pnriesgo   IN       NUMBER,
      pcgarant   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1000)
                   := 'psseguro : ' || psseguro || ' pnriesgo : ' || pnriesgo;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.f_comprobar_benidgar';
      num_err    NUMBER          := 0;
      rie        ob_iax_riesgos;
   BEGIN
      IF pnriesgo IS NULL OR psseguro IS NULL OR pcgarant IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie := f_get_riesgo (pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         RETURN NULL;
      END IF;

      vpasexec := 3;

      /*Recuperamos el ob_iax_beneidentificados deaseado*/
      IF rie.beneficiario.benefesp IS NOT NULL
      THEN
         vpasexec := 4;

         IF rie.beneficiario.benefesp.benefesp_gar IS NOT NULL
         THEN
            num_err :=
               pac_md_produccion.f_comprobar_benidgar
                                     (psseguro,
                                      pnriesgo,
                                      pcgarant,
                                      rie.beneficiario.benefesp.benefesp_gar,
                                      mensajes
                                     );
         END IF;

         IF num_err <> 0
         THEN
            RETURN num_err;
         END IF;
      END IF;

      vpasexec := 5;
      num_err :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         pnriesgo,
                                         rie,
                                         mensajes
                                        );
      vpasexec := 6;
      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_comprobar_benidgar;

   /* BUG19069:DRA:27/09/2011:Inici*/
   -- INI -IAXIS-10627 -21/01/2020
   FUNCTION f_leecorretaje (pnmovimi IN NUMBER DEFAULT NULL,
	 -- FIN -IAXIS-10627 -21/01/2020
		                       mensajes OUT t_iax_mensajes)
      RETURN t_iax_corretaje
   IS
      corret      t_iax_corretaje;
      vpasexec    NUMBER (8)      := 1;
      vparam      VARCHAR2 (1)    := NULL;
      vobject     VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_LeeCorretaje';
      v_ccorret   NUMBER;
      v_pcomisi   NUMBER;
      v_pretenc   NUMBER;
      num_err     NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      -- INI -IAXIS-10627 -21/01/2020
      corret := pac_iobj_prod.f_partpolcorretaje (poliza.det_poliza, pnmovimi, mensajes);
      -- FIN -IAXIS-10627 -21/01/2020
      vpasexec := 3;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      /* BUG22402:DRA:17/10/2012:Inici*/
      IF corret IS NOT NULL
      THEN
         IF corret.COUNT > 0
         THEN
            IF     NVL
                      (pac_mdpar_productos.f_get_parproducto
                                                    ('ADMITE_CERTIFICADOS',
                                                     poliza.det_poliza.sproduc
                                                    ),
                       0
                      ) = 1
               AND NOT isaltacol
            THEN
               num_err :=
                  pac_productos.f_get_herencia_col
                                                  (poliza.det_poliza.sproduc,
                                                   8,
                                                   v_ccorret
                                                  );

               IF NVL (v_ccorret, 0) = 1 AND num_err = 0
               THEN
                  FOR ncorr IN corret.FIRST .. corret.LAST
                  LOOP
                     /* Tambin pondremos esto en el PAC_IAX_PRODUCCION.f_leecorretaje para que calcule los n-certificados*/
                     num_err :=
                        pac_iax_corretaje.f_calcular_comision_corretaje
                                                     (corret (ncorr).cagente,
                                                      NULL,
                                                      corret (ncorr).ppartici,
                                                      v_pcomisi,
                                                      v_pretenc,
                                                      mensajes
                                                     );

                     IF num_err <> 0
                     THEN
                        pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                              1,
                                                              num_err
                                                             );
                        RAISE e_object_error;
                     END IF;

                     corret (ncorr).pcomisi := v_pcomisi;
                  END LOOP;
               END IF;
            END IF;
         END IF;
      END IF;

      /* BUG22402:DRA:17/10/2012:Fi*/
      RETURN corret;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leecorretaje;

   FUNCTION f_existcorr (pcagente IN NUMBER, mensajes IN OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      corret     t_iax_corretaje;
      nerr       NUMBER          := 0;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (100)  := 'pcagente=' || pcagente;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_ExistCorr';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      -- INI -IAXIS-10627 -21/01/2020
      corret := pac_iobj_prod.f_partpolcorretaje (poliza.det_poliza, null,mensajes);
      -- FIN -IAXIS-10627 -21/01/2020
      IF corret IS NULL
      THEN
         RETURN 0;
      ELSE
         IF corret.COUNT = 0
         THEN
            RETURN 0;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            RETURN 0;
         END IF;
      END IF;

      vpasexec := 3;

      FOR vcorr IN corret.FIRST .. corret.LAST
      LOOP
         IF corret.EXISTS (vcorr)
         THEN
            IF corret (vcorr).cagente = pcagente
            THEN
               RETURN 1;
            END IF;
         END IF;
      END LOOP;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 0;
   END f_existcorr;

   FUNCTION f_insertcorretaje (
      pcagente   IN       NUMBER,
      pcomisi    IN       NUMBER,
      ppartici   IN       NUMBER,
      islider    IN       NUMBER,
      pnordage   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      /**/
      dtpoliza   ob_iax_detpoliza;
      corret     t_iax_corretaje;
      ncorr      NUMBER           := 1;
      nerr       NUMBER;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (200)
         :=    'pcagente='
            || pcagente
            || ' pcomisi='
            || pcomisi
            || ' ppartici='
            || ppartici
            || ' islider='
            || islider
            || ' pnordage='
            || pnordage;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_InsertCorretaje';
   BEGIN
      vpasexec := 1;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      ELSE
         dtpoliza := poliza.det_poliza;
      END IF;

      vpasexec := 2;

      IF dtpoliza.corretaje IS NULL
      THEN
         corret := t_iax_corretaje ();
      ELSE
         corret := dtpoliza.corretaje;
      END IF;

      vpasexec := 3;

      IF f_existcorr (pcagente, mensajes) = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9902395);
         RETURN 1;
      END IF;

      vpasexec := 4;
      ncorr := NVL (pnordage, corret.COUNT + 1);
      corret.EXTEND;
      corret (corret.LAST) := ob_iax_corretaje ();
      corret (corret.LAST).cagente := pcagente;
      corret (corret.LAST).nordage := ncorr;
      corret (corret.LAST).pcomisi := pcomisi;
      corret (corret.LAST).ppartici := ppartici;
      corret (corret.LAST).islider := islider;
      vpasexec := 5;
      nerr :=
         pac_iax_produccion.f_get_direc_corretaje (pcagente,
                                                   'POL',
                                                   corret (corret.LAST),
                                                   mensajes
                                                  );

      IF nerr <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, nerr);
         RAISE e_object_error;
      END IF;

      poliza.det_poliza.corretaje := corret;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_insertcorretaje;

   FUNCTION f_grabacorretaje (
      pcagente   IN       NUMBER,
      pcomisi    IN       NUMBER,
      ppartici   IN       NUMBER,
      islider    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      corret     t_iax_corretaje;
      nerr       NUMBER;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (100)
         :=    'pcagente='
            || pcagente
            || ' pcomisi='
            || pcomisi
            || 'ppartici='
            || ppartici
            || ' islider='
            || islider;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_GrabarCorretaje';
      vfound     BOOLEAN         := FALSE;
      ncont      NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      -- INI -IAXIS-10627 -21/01/2020
      corret := pac_iobj_prod.f_partpolcorretaje (poliza.det_poliza, null,mensajes);
      -- FIN -IAXIS-10627 -21/01/2020
      vpasexec := 3;
      ncont := 1;

      IF corret IS NOT NULL
      THEN
         IF corret.COUNT > 0
         THEN
            vpasexec := 4;

            FOR vcorr IN corret.FIRST .. corret.LAST
            LOOP
               vpasexec := 5;

               IF corret.EXISTS (vcorr)
               THEN
                  vpasexec := 6;

                  IF corret (vcorr).cagente = pcagente
                  THEN
                     vpasexec := 7;

                     IF corret (vcorr).islider = 1 AND islider <> 1
                     THEN
                        /* Ahora el lider ser?iempre el agente productor y no se puede desmarcar*/
                        /* Mostramos el error "Este agente ya existe" porque se llega aqui si*/
                        /* a?n el mismo agente, con lo que el check de Lider est? NO.*/
                        pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                              1,
                                                              9902395
                                                             );
                        RAISE e_object_error;
                     END IF;

                     vfound := TRUE;
                     corret (vcorr).pcomisi := pcomisi;
                     corret (vcorr).ppartici := ppartici;
                     corret (vcorr).islider := islider;
                     vpasexec := 8;
                     nerr :=
                        pac_iax_produccion.f_get_direc_corretaje
                                                               (pcagente,
                                                                'POL',
                                                                corret (vcorr),
                                                                mensajes
                                                               );

                     IF nerr <> 0
                     THEN
                        pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                              1,
                                                              nerr
                                                             );
                        RAISE e_object_error;
                     END IF;
                  END IF;

                  IF corret (vcorr).nordage >= ncont
                  THEN
                     ncont := corret (vcorr).nordage + 1;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      IF vfound = FALSE
      THEN
         vpasexec := 9;
         nerr :=
            f_insertcorretaje (pcagente,
                               pcomisi,
                               ppartici,
                               islider,
                               ncont,
                               mensajes
                              );
         vpasexec := 10;

         IF nerr = 1
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9902396);
            RAISE e_object_error;
         END IF;

         vpasexec := 11;
         -- INI -IAXIS-10627 -21/01/2020
         corret :=
                pac_iobj_prod.f_partpolcorretaje (poliza.det_poliza, null,mensajes);
         -- FIN -IAXIS-10627 -21/01/2020
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 12;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 13;
      poliza.det_poliza.corretaje := corret;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabacorretaje;

   FUNCTION f_modifcorretaje (
      pcagente   IN       NUMBER,
      pcomisi    IN       NUMBER,
      ppartici   IN       NUMBER,
      islider    IN       NUMBER,
      pnordage   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      corret     t_iax_corretaje;
      nerr       NUMBER;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (100)
         :=    'pcagente='
            || pcagente
            || ' pcomisi='
            || pcomisi
            || ' ppartici='
            || ppartici
            || ' islider='
            || islider
            || ' pnordage='
            || pnordage;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_ModifCorretaje';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      -- INI -IAXIS-10627 -21/01/2020
      corret := pac_iobj_prod.f_partpolcorretaje (poliza.det_poliza, null,mensajes);
      -- FIN -IAXIS-10627 -21/01/2020

      IF corret IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9902397);
         vpasexec := 4;
         RAISE e_object_error;
      ELSE
         IF corret.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9902397);
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 7;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 8;

      FOR vcorr IN corret.FIRST .. corret.LAST
      LOOP
         vpasexec := 9;

         IF corret.EXISTS (vcorr)
         THEN
            vpasexec := 10;

            IF corret (vcorr).nordage = pnordage
            THEN
               vpasexec := 11;
               corret (vcorr).cagente := pcagente;
               corret (vcorr).pcomisi := pcomisi;
               corret (vcorr).ppartici := ppartici;
               corret (vcorr).islider := islider;
               vpasexec := 12;
               nerr :=
                  pac_iax_produccion.f_get_direc_corretaje (pcagente,
                                                            'POL',
                                                            corret (vcorr),
                                                            mensajes
                                                           );

               IF nerr <> 0
               THEN
                  RAISE e_object_error;
               END IF;
            END IF;
         END IF;
      END LOOP;

      vpasexec := 13;
      poliza.det_poliza.corretaje := corret;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_modifcorretaje;

   FUNCTION f_eliminacorretaje (pnordage IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      corret     t_iax_corretaje;
      ndel       NUMBER          := 0;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (200)  := 'pnordage=' || pnordage;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_EliminaCorretaje';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      -- INI -IAXIS-10627 -21/01/2020
      corret := pac_iobj_prod.f_partpolcorretaje (poliza.det_poliza, null,mensajes);
      -- FIN -IAXIS-10627 -21/01/2020

      IF corret IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9902397);
         vpasexec := 3;
         RAISE e_object_error;
      ELSE
         IF corret.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9902397);
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      FOR vcorr IN corret.FIRST .. corret.LAST
      LOOP
         IF corret.EXISTS (vcorr)
         THEN
            IF corret (vcorr).nordage = pnordage
            THEN
               /* BUG22402:DRA:10/07/2012:Inici*/
               IF corret (vcorr).islider = 1
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903947);
                  RETURN 1;
               END IF;

               /* BUG22402:DRA:10/07/2012:Fi*/
               corret.DELETE (vcorr);
               poliza.det_poliza.corretaje := corret;
               RETURN 0;
            END IF;
         END IF;
      END LOOP;

      vpasexec := 7;
      pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9902396);
      RETURN 1;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_eliminacorretaje;

   /*************************************************************************
   Recuperar informacion de mas datos las garantias (detalle de garantias)
   param in pnriesgo  : numero de riesgo
   param in pcgarant  : codigo garantia
   param out mensajes : mensajes de error
   return             : objeto garantias
   *************************************************************************/
   /* Bug 10101 - RSC - 28/07/2009 - Detalle de garantias (Consulta de poliza)*/
   FUNCTION f_get_corretaje (pcagente IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN ob_iax_corretaje
   IS
      corrt      t_iax_corretaje;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (100)  := 'pcagente=' || pcagente;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_Get_Corretaje';
   BEGIN
      vpasexec := 1;
      -- INI -IAXIS-10627 -21/01/2020
      corrt := f_leecorretaje (null,mensajes);
      -- FIN -IAXIS-10627 -21/01/2020
      vpasexec := 2;

      IF corrt IS NOT NULL
      THEN
         IF corrt.COUNT > 0
         THEN
            FOR vcorr IN corrt.FIRST .. corrt.LAST
            LOOP
               vpasexec := 3;

               IF corrt.EXISTS (vcorr)
               THEN
                  vpasexec := 4;

                  IF corrt (vcorr).cagente = pcagente
                  THEN
                     RETURN corrt (vcorr);
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      RETURN NULL;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_corretaje;

   FUNCTION f_get_direc_corretaje (
      pcagente   IN       NUMBER,
      ptablas    IN       VARCHAR2,
      corret     IN OUT   ob_iax_corretaje,
      mensajes   IN OUT   t_iax_mensajes
   )
      RETURN NUMBER
   IS
      /**/
      vpasexec         NUMBER (8)     := 1;
      vparam           VARCHAR2 (100)
                        := 'pcagente=' || pcagente || ', ptablas=' || ptablas;
      vobject          VARCHAR2 (200)
                                := 'PAC_IAX_PRODUCCION.F_Get_Direc_Corretaje';
      vcagente_padre   NUMBER;
      vsperson         NUMBER;
      vcdomici         NUMBER;
      nerr             NUMBER;
      msj              t_iax_mensajes;
   BEGIN
      vpasexec := 1;

      SELECT sperson, cdomici
        INTO vsperson, vcdomici
        FROM agentes
       WHERE cagente = pcagente;

      vpasexec := 2;

      BEGIN
         SELECT NVL (cpadre, cagente)
           INTO vcagente_padre
           FROM redcomercial
          WHERE cagente = pcagente AND fmovfin IS NULL;

         /*-MCA 27/10/2011*/
         vpasexec := 3;
         corret.tsucursal :=
            pac_redcomercial.ff_desagente (vcagente_padre,
                                           pac_md_common.f_get_cxtidioma
                                          );
         corret.tagente :=
            pac_redcomercial.ff_desagente (pcagente,
                                           pac_md_common.f_get_cxtidioma
                                          );
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            corret.tsucursal := NULL;
      END;

      vpasexec := 4;
      nerr :=
         pac_md_persona.f_get_persona_agente (vsperson,
                                              pcagente,
                                              ptablas,
                                              corret,
                                              mensajes
                                             );
      vpasexec := 5;

      IF nerr <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000503);
         RAISE e_object_error;
      END IF;

      vpasexec := 5;

      IF NVL (vcdomici, 0) > 0
      THEN
         vpasexec := 6;

         IF corret.direcciones IS NULL
         THEN
            corret.direcciones := t_iax_direcciones ();
         END IF;

         vpasexec := 7;

         IF corret.direcciones.COUNT = 0
         THEN
            corret.direcciones.EXTEND;
            corret.direcciones (corret.direcciones.LAST) :=
                                                        ob_iax_direcciones
                                                                          ();
         END IF;

         vpasexec := 8;
         corret.direcciones (corret.direcciones.LAST).cdomici := vcdomici;
         /* a funcio pac_md_listvalores.p_ompledadesdireccions*/
         pac_md_listvalores.p_ompledadesdireccions
                                 (vsperson,
                                  vcdomici,
                                  ptablas,
                                  corret.direcciones (corret.direcciones.LAST),
                                  msj
                                 );

         IF msj IS NOT NULL
         THEN
            IF msj.COUNT > 0
            THEN
               vpasexec := 9;
               pac_iobj_mensajes.p_mergemensaje (mensajes, msj);
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000832);
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_get_direc_corretaje;

   /* BUG19069:DRA:27/09/2011:Fi*/
   /* Ini bug 19303 - JMC - 21/11/2011*/
   /*************************************************************************
   FUNCTION f_crearpropuesta_sp
   Funcion que generara una poliza del producto SALDAR o PRORROGAR, tomando
   los datos de una poliza origen
   psseguro in number: codigo del seguro origen
   piprima_np in number:
   picapfall_np in number: capital fallecimiento de la nueva poliza
   pfvencim_np in date: fecha vencimiento de la nueva poliza
   pmode in number: Modo
   pfecha in date: fecha efecto nueva poliza.
   psolicit out number: Numero solicitud.
   purl out varchar2:
   pmensa in out varchar2: mensajes de error.
   return number: retorno de la funcion f_crearpropuesta_sp
   *************************************************************************/
   FUNCTION f_crearpropuesta_sp (
      psseguro       IN       NUMBER,
      piprima_np     IN       NUMBER,
      picapfall_np   IN       NUMBER,
      pfvencim_np    IN       DATE,
      pmode          IN       VARCHAR2,
      pfecha         IN       DATE,
      pssolicit      OUT      NUMBER,
      purl           OUT      VARCHAR2,
      pmensa         OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1000)
         :=    ' psseguro : '
            || psseguro
            || ' piprima_np : '
            || piprima_np
            || ' picapfall_np : '
            || picapfall_np
            || ' pfvencim_np : '
            || pfvencim_np
            || ' pmode : '
            || pmode
            || ' pfecha : '
            || pfecha;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.f_crearpropuesta_sp';
      num_err    NUMBER          := 0;
      cactivi    NUMBER;
      vind       NUMBER;
   BEGIN
      IF    psseguro IS NULL
         OR pmode IS NULL
         OR (pmode = 'SALDAR'
             AND (piprima_np IS NULL OR picapfall_np IS NULL)
            )
         OR (    pmode = 'PRORROGAR'
             AND (   piprima_np IS NULL
                  OR picapfall_np IS NULL
                  OR pfvencim_np IS NULL
                 )
            )
      THEN
         RAISE e_param_error;
      END IF;

      num_err :=
         pac_md_produccion.f_crearpropuesta_sp (psseguro,
                                                piprima_np,
                                                picapfall_np,
                                                pfvencim_np,
                                                pmode,
                                                pfecha,
                                                pssolicit,
                                                purl,
                                                pmensa
                                               );

      IF num_err <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (pmensa, 1, 9001664);
         RAISE e_object_error;
      END IF;

      vpasexec := 2;
      num_err :=
            pac_iax_produccion.f_set_consultapoliza (pssolicit, pmensa, 'EST');

      IF num_err <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (pmensa, 1, num_err);
         RAISE e_object_error;
      END IF;

      vpasexec := 3;

      IF     poliza.det_poliza.riesgos IS NOT NULL
         AND poliza.det_poliza.riesgos.COUNT > 0
      THEN
         vind := poliza.det_poliza.riesgos.FIRST;

         WHILE vind IS NOT NULL
         LOOP
            num_err :=
               pac_iax_produccion.f_tarificar
                                    (poliza.det_poliza.riesgos (vind).nriesgo,
                                     pmensa
                                    );

            IF num_err <> 0
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (pmensa, 1, num_err);
               RAISE e_object_error;
            END IF;

            vind := poliza.det_poliza.riesgos.NEXT (vind);
         END LOOP;
      END IF;

      IF num_err <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (pmensa, 1, num_err);
         RAISE e_object_error;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (pmensa,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (pmensa,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (pmensa,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_crearpropuesta_sp;

   /* Fi bug 19303 - JMC - 21/11/2011*/
   /***************************************************************************
   -- BUG 0020761 - 03/01/2012 - JMF
   Dado tipo cuenta nos dice si es tarjeta o no.
   param in  pctipban:  numero de la poliza.
   return: NUMBER (0=No, 1=Si).
   ***************************************************************************/
   FUNCTION f_get_tarjeta (pctipban IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      vpasexec    NUMBER (8)     := 1;
      vparam      VARCHAR2 (1)   := NULL;
      vobject     VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_get_tarjeta';
      v_tarjeta   NUMBER;
   BEGIN
      v_tarjeta := pac_md_produccion.f_get_tarjeta (pctipban, mensajes);
      RETURN v_tarjeta;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_tarjeta;

   /* BUG20498:DRA:09/01/2012:Inici*/
   /*************************************************************************
   Grabar informacion de las preguntas a nivel de clausula
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabapreguntasclausula (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      nerr        NUMBER          := 0;
      vpasexec    NUMBER (8)      := 1;
      vparam      VARCHAR2 (1)    := NULL;
      vobject     VARCHAR2 (200)
                             := 'PAC_IAX_PRODUCCION.F_grabapreguntasclausula';
      vfefecto    DATE;
      vtablas     VARCHAR2 (3);
      preg        t_iax_preguntas;
      preg_clau   t_iax_preguntas;
      npos        NUMBER;

      /* comproba que el codigo de pregunta no exista*/
      /* devuelve la posicion del indice o bien -1 sino existe*/
      FUNCTION existpreg (pcpregun IN NUMBER)
         RETURN NUMBER
      IS
      BEGIN
         IF preg IS NULL
         THEN
            RETURN -1;
         END IF;

         IF preg.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vprg IN preg.FIRST .. preg.LAST
         LOOP
            IF preg.EXISTS (vprg)
            THEN
               IF preg (vprg).cpregun = pcpregun
               THEN
                  RETURN vprg;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existpreg;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;

      /*(JAS)22.10.2008 - 7892: Tarificacio dels suplements amb la data d'efecte del suplement.*/
      IF f_get_essuplemento = 1
      THEN
         nerr :=
            pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                   vnmovimi,
                                                   vfefecto,
                                                   mensajes
                                                  );
         vpasexec := 3;

         IF nerr <> 0
         THEN
            RAISE e_object_error;
         END IF;
      ELSE
         vfefecto := poliza.det_poliza.gestion.fefecto;
      END IF;

      vpasexec := 4;

      IF vpmode = 'EST'
      THEN
         vtablas := 'EST';
      ELSIF vpmode = 'SOL'
      THEN
         vtablas := 'SOL';
      ELSE
         vtablas := NULL;
      END IF;

      nerr :=
         pac_md_produccion.f_grabapreguntasclausula (vsolicit,
                                                     vnmovimi,
                                                     vfefecto,
                                                     vtablas,
                                                     preg_clau,
                                                     mensajes
                                                    );

      IF nerr <> 0
      THEN
         RAISE e_object_error;
      END IF;

      vpasexec := 5;
      preg := pac_iobj_prod.f_partpolpreguntas (poliza.det_poliza, mensajes);

      IF preg IS NULL
      THEN
         preg := t_iax_preguntas ();
      END IF;

      vpasexec := 6;

      IF preg_clau IS NOT NULL
      THEN
         vpasexec := 7;

         IF preg_clau.COUNT > 0
         THEN
            vpasexec := 8;

            FOR i IN preg_clau.FIRST .. preg_clau.LAST
            LOOP
               vpasexec := 9;

               IF preg_clau.EXISTS (i)
               THEN
                  npos := existpreg (preg_clau (i).cpregun);

                  IF npos = -1
                  THEN
                     vpasexec := 11;
                     preg.EXTEND;
                     preg (preg.LAST) := ob_iax_preguntas ();
                     preg (preg.LAST).cpregun := preg_clau (i).cpregun;
                     preg (preg.LAST).crespue := preg_clau (i).crespue;
                     preg (preg.LAST).trespue := preg_clau (i).trespue;
                     preg (preg.LAST).nmovimi := vnmovimi;
                     /*BUG 24657-XVM-30/11/2012*/
                     preg (preg.LAST).nmovima := vnmovimi;
                  ELSIF npos > -1
                  THEN
                     vpasexec := 12;
                     preg (npos).crespue := preg_clau (i).crespue;
                     preg (npos).trespue := preg_clau (i).trespue;
                  END IF;
               END IF;
            END LOOP;

            vpasexec := 13;
            poliza.det_poliza.preguntas := preg;
         END IF;
      END IF;

      COMMIT;
      RETURN nerr;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabapreguntasclausula;

   /* BUG20498:DRA:09/01/2012:Fi*/
   /*************************************************************************
   Inserta un nuevo gestor cobros al objeto poliza
   param in sperson   : codigo de personas
   param in cdomici   : codigo de domicilio
   param out mensajes : mensajes de error
   return             : 0 todo ha sido correcto
   1 ha habido un error
   *************************************************************************/
   /* BUG 0021592 - 08/03/2012 - JMF*/
   FUNCTION f_insertgescobro (
      p_sperson   IN       NUMBER,
      p_cdomici   IN       NUMBER,
      mensajes    OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.f_insertgescobro';
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (200)
                   := 'p_sperson=' || p_sperson || ' p_cdomici=' || p_cdomici;
      dtpoliza   ob_iax_detpoliza;
      gesc       t_iax_gescobros;
      nerr       NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      ELSE
         dtpoliza := poliza.det_poliza;
      END IF;

      vpasexec := 2;

      IF dtpoliza.gestorcobro IS NULL
      THEN
         gesc := t_iax_gescobros ();
      ELSE
         gesc := dtpoliza.gestorcobro;
      END IF;

      vpasexec := 7;
      gesc.EXTEND;
      gesc (gesc.LAST) := ob_iax_gescobros ();
      gesc (gesc.LAST).sperson := p_sperson;
      gesc (gesc.LAST).cdomici := p_cdomici;
      vpasexec := 9;
      nerr :=
         pac_md_persona.f_get_persona_agente (p_sperson,
                                              poliza.det_poliza.cagente,
                                              vpmode,
                                              gesc (gesc.LAST),
                                              mensajes
                                             );

      IF nerr <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, nerr);
         RAISE e_object_error;
      END IF;

      vpasexec := 17;
      poliza.det_poliza.gestorcobro := gesc;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_insertgescobro;

   /*************************************************************************
   Graba los datos del gestor al objeto gescobro
   param in sperson   : codigo de personas
   param in cdomici   : codigo de domicilio
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   /* BUG 0021592 - 08/03/2012 - JMF*/
   FUNCTION f_grabargescobro (
      p_sperson   IN       NUMBER,
      p_cdomici   IN       NUMBER,
      mensajes    OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vobject    VARCHAR2 (200)      := 'PAC_IAX_PRODUCCION.f_grabargescobro';
      vpasexec   NUMBER (8)               := 1;
      vparam     VARCHAR2 (100)
                       := 'sperson=' || p_sperson || ' cdomici=' || p_cdomici;
      gesc       t_iax_gescobros;
      nerr       NUMBER;
      msj        t_iax_mensajes;
      vcdomici   gescobros.cdomici%TYPE;
   BEGIN
      vpasexec := 100;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 110;
      gesc := pac_iobj_prod.f_partpolgescobro (poliza.det_poliza, mensajes);

      IF gesc IS NULL OR gesc.COUNT = 0
      THEN
         vpasexec := 120;
         nerr := f_insertgescobro (p_sperson, p_cdomici, mensajes);

         IF nerr = 1
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903391);
            RAISE e_object_error;
         END IF;

         vpasexec := 126;
         gesc := pac_iobj_prod.f_partpolgescobro (poliza.det_poliza, mensajes);
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 128;

      FOR vgesc IN gesc.FIRST .. gesc.LAST
      LOOP
         vpasexec := 132;

         IF gesc.EXISTS (vgesc)
         THEN
            vpasexec := 140;
            gesc (vgesc).sperson := p_sperson;
            gesc (vgesc).cdomici := p_cdomici;
            poliza.det_poliza.gestorcobro := gesc;
            vpasexec := 150;

            IF p_cdomici > 0
            THEN
               vpasexec := 160;

               IF gesc (vgesc).direcciones IS NULL
               THEN
                  vpasexec := 170;
                  gesc (vgesc).direcciones := t_iax_direcciones ();
               END IF;

               vpasexec := 180;

               IF gesc (vgesc).direcciones.COUNT = 0
               THEN
                  vpasexec := 190;
                  gesc (vgesc).direcciones.EXTEND;
                  gesc (vgesc).direcciones (gesc (vgesc).direcciones.LAST) :=
                                                        ob_iax_direcciones
                                                                          ();
               END IF;

               vpasexec := 200;
               gesc (vgesc).direcciones (gesc (vgesc).direcciones.LAST).cdomici :=
                                                                     p_cdomici;
               pac_md_listvalores.p_ompledadesdireccions
                       (p_sperson,
                        p_cdomici,
                        vpmode,
                        gesc (vgesc).direcciones (gesc (vgesc).direcciones.LAST
                                                 ),
                        msj
                       );

               /* FINAL BUG 7624 - 20/04/2009 - SBG*/
               IF msj IS NOT NULL
               THEN
                  IF msj.COUNT > 0
                  THEN
                     vpasexec := 210;
                     pac_iobj_mensajes.p_mergemensaje (mensajes, msj);
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                           1,
                                                           9000832
                                                          );
                     vpasexec := 220;
                     RAISE e_object_error;
                  END IF;
               END IF;
            END IF;
         END IF;
      END LOOP;

      vpasexec := 230;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabargescobro;

   /*************************************************************************
   Elimina el gestor de cobro del objeto gestores de cobro
   param in p_sperson   : codigo de persona
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   /* BUG 0021592 - 08/03/2012 - JMF*/
   FUNCTION f_eliminagescobro (p_sperson IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.f_eliminagescobro';
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (100)  := 'p_sperson=' || p_sperson;
      gesc       t_iax_gescobros;
      ndel       NUMBER          := 0;
   BEGIN
      vpasexec := 100;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 110;
      gesc := pac_iobj_prod.f_partpolgescobro (poliza.det_poliza, mensajes);

      IF gesc IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000784);
         vpasexec := 120;
         RAISE e_object_error;
      ELSE
         IF gesc.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000784);
            vpasexec := 130;
            RAISE e_object_error;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 140;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 150;

      FOR vgesc IN gesc.FIRST .. gesc.LAST
      LOOP
         vpasexec := 152;

         IF gesc.EXISTS (vgesc)
         THEN
            vpasexec := 154;

            IF gesc (vgesc).sperson = p_sperson
            THEN
               vpasexec := 156;
               gesc.DELETE (vgesc);
               vpasexec := 158;
               poliza.det_poliza.gestorcobro := gesc;
               RETURN 0;
            END IF;
         END IF;
      END LOOP;

      vpasexec := 160;
      pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000828);
      RETURN 1;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_eliminagescobro;

   /*************************************************************************
   Lee los datos gestor de cobro de la poliza
   param out mensajes : mensajes de error
   return             : objeto gestor cobro
   *************************************************************************/
   /* BUG 0021592 - 08/03/2012 - JMF*/
   FUNCTION f_leegescobro (mensajes OUT t_iax_mensajes)
      RETURN t_iax_gescobros
   IS
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.f_leegescobro';
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      gesc       t_iax_gescobros;
   BEGIN
      vpasexec := 100;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 110;
      gesc := pac_iobj_prod.f_partpolgescobro (poliza.det_poliza, mensajes);
      vpasexec := 120;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 130;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN gesc;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leegescobro;

   /*  Ini Bug 21907 - MDS - 23/04/2012*/
   /***********************************************************************
   Devuelve los valores de descuentos y recargos de un riesgo
   param in ptablas   : Tablas ('EST' - temporales, 'SEG' - reales)
   param in psseguro  : Numero interno de seguro
   param in pnriesgo  : Numero interno de riesgo
   param out pdtocom  : Porcentaje descuento comercial
   param out precarg  : Porcentaje recargo t¿cnico
   param out pdtotec  : Porcentaje descuento t¿cnico
   param out preccom  : Porcentaje recargo comercial
   mensajes : mensajes de error
   return             : number
   ***********************************************************************/
   FUNCTION f_get_dtorec_riesgo (
      ptablas    IN       VARCHAR2 DEFAULT 'EST',
      psseguro   IN       NUMBER,
      pnriesgo   IN       NUMBER,
      pdtocom    OUT      NUMBER,
      precarg    OUT      NUMBER,
      pdtotec    OUT      NUMBER,
      preccom    OUT      NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (500)
         :=    'PTABLAS: '
            || ptablas
            || ', PSSEGURO: '
            || psseguro
            || ', PNRIESGO: '
            || pnriesgo;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_DtoRec_Riesgo';
      num_err    NUMBER         := 0;
   BEGIN
      IF psseguro IS NULL OR pnriesgo IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      num_err :=
         pac_md_produccion.f_get_dtorec_riesgo (ptablas,
                                                psseguro,
                                                pnriesgo,
                                                pdtocom,
                                                precarg,
                                                pdtotec,
                                                preccom,
                                                mensajes
                                               );
      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN -1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN -1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         ROLLBACK;
         RETURN -1;
   END f_get_dtorec_riesgo;

   /*************************************************************************
   Establece porcentaje descuento comercial a un riesgo, y propaga los cambios a sus garant¿as
   param in psseguro    : Numero interno de seguro
   param in pnriesgo    : Numero interno de riesgo
   param in pdtocom     : Porcentaje descuento comercial
   param in pdiferencia : Diferencia de porcentajes a propagar
   param out mensajes   : mensajes de error
   return               : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_set_pdtocom_riesgogaran (
      psseguro      IN       NUMBER,
      pnriesgo      IN       NUMBER,
      pdtocom       IN       NUMBER,
      pdiferencia   IN       NUMBER DEFAULT NULL,
      mensajes      OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      rie             ob_iax_riesgos;
      gars            t_iax_garantias;
      v_pdtocom_ant   FLOAT;
      v_error         NUMBER;
      vpasexec        NUMBER (8)      := 0;
      vparam          VARCHAR2 (3200)
         :=    'PSSEGURO: '
            || psseguro
            || ', PNRIESGO: '
            || pnriesgo
            || ', PDTOCOM: '
            || pdtocom
            || ', PDIFERENCIA: '
            || pdiferencia;
      vobject         VARCHAR2 (200)
                             := 'PAC_IAX_PRODUCCION.F_Set_Pdtocom_Riesgogaran';
      vdiferencia     NUMBER;
      cobjase         NUMBER;
      v_triesgo       ob_iax_riesgos;
   BEGIN
      /* validar par¿metros de entrada*/
      IF psseguro IS NULL OR pnriesgo IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 1;

      IF NVL (pdtocom, 0) < 0 OR NVL (pdtocom, 0) > 100
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9901044);
         RAISE e_param_error;
      END IF;

      /* obtener detalle p¿liza : poliza.det_poliza*/
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /* obtener el riesgo de la p¿liza : poliza.det_poliza.riesgos[pnriesgo]*/
      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         vpasexec := 3;
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         RAISE e_object_error;
      END IF;

      /* obtener las primas del riesgo de la p¿liza : poliza.det_poliza.riesgos[pnriesgo].primas.pdtocom*/
      /* guardando previamente el valor anterior de pdtocom*/
      /* y ACTUALIZAR EN EL RIESGO*/
      vpasexec := 4;

      IF rie.primas IS NOT NULL
      THEN
         /*v_pdtocom_ant := NVL(rie.primas.pdtocom, 0);*/
         IF pdiferencia IS NULL
         THEN
            v_error :=
               pac_md_obtenerdatos.f_inicializa (vpmode,
                                                 vsolicit,
                                                 vnmovimi,
                                                 mensajes
                                                );

            IF v_error = 1
            THEN
               vpasexec := 1;
               RAISE e_object_error;
            END IF;

            v_triesgo := pac_md_obtenerdatos.f_lee_riesgo (mensajes, pnriesgo);
            v_pdtocom_ant := v_triesgo.primas.pdtocom;

            IF v_triesgo.primas.precarg IS NOT NULL
            THEN
               rie.primas.precarg := v_triesgo.primas.precarg;
            END IF;

            IF v_triesgo.primas.pdtotec IS NOT NULL
            THEN
               rie.primas.pdtotec := v_triesgo.primas.pdtotec;
            END IF;

            IF v_triesgo.primas.preccom IS NOT NULL
            THEN
               rie.primas.preccom := v_triesgo.primas.preccom;
            END IF;
         END IF;

         /* actualizar el valor de pdtocom del riesgo*/
         vpasexec := 5;

         IF pdiferencia IS NULL
         THEN
            /* actualizar directamente el porcentaje*/
            rie.primas.pdtocom := NVL (pdtocom, 0);
         ELSE
            /* Bug 21907 - RSC - 25/05/2012*/
            IF rie.primas.pdtocom IS NULL
            THEN
               rie.primas.pdtocom := NVL (pdtocom, 0);
            ELSE
               /* Fin Bug 21907*/
               /* propagar la diferencia (si queda en negativo --> 0)*/
               IF (NVL (rie.primas.pdtocom, 0) + pdiferencia) >= 0
               THEN
                  rie.primas.pdtocom :=
                                     NVL (rie.primas.pdtocom, 0)
                                     + pdiferencia;
               ELSE
                  rie.primas.pdtocom := 0;
               END IF;
            /* Bug 21907 - RSC - 25/05/2012*/
            END IF;
         /* Fin Bug 21907*/
         END IF;

         IF poliza.det_poliza.primas IS NOT NULL
         THEN
            IF poliza.det_poliza.primas.COUNT > 0
            THEN
               FOR vpri IN
                  poliza.det_poliza.primas.FIRST .. poliza.det_poliza.primas.LAST
               LOOP
                  IF poliza.det_poliza.primas.EXISTS (vpri)
                  THEN
                     IF    poliza.det_poliza.primas (vpri).pdtocom <>
                                                           rie.primas.pdtocom
                        OR poliza.det_poliza.primas (vpri).precarg <>
                                                            rie.primas.precarg
                        OR poliza.det_poliza.primas (vpri).pdtotec <>
                                                            rie.primas.pdtotec
                        OR poliza.det_poliza.primas (vpri).preccom <>
                                                            rie.primas.preccom
                     THEN
                        poliza.det_poliza.gestion.crggardif := 1;
                     ELSE
                        poliza.det_poliza.gestion.crggardif := 0;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;

         v_error :=
            pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                            pnriesgo,
                                            rie,
                                            mensajes
                                           );

         IF (v_error <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001099);
            vpasexec := 6;
            RAISE e_object_error;
         END IF;

         /* Bug 21907 - RSC - 25/05/2012*/
         v_error :=
            pac_md_grabardatos.f_inicializa (vpmode,
                                             vsolicit,
                                             vnmovimi,
                                             mensajes
                                            );

         IF v_error = 1
         THEN
            vpasexec := 1;
            RAISE e_object_error;
         END IF;

         vpasexec := 2;
         cobjase := poliza.det_poliza.cobjase;

         IF NOT pac_iax_produccion.isaltacol
         THEN
            /* Fin Bug 19513*/
            IF cobjase = 1
            THEN
               /* PERSONAL*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgopersonal
                                                           (rie.riespersonal,
                                                            rie,
                                                            mensajes
                                                           );
            ELSIF cobjase = 2
            THEN
               /* DIRECCION*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgodireccion
                                                          (rie.riesdireccion,
                                                           rie,
                                                           mensajes
                                                          );
            ELSIF cobjase IN (3, 4)
            THEN
               /* DESCRIPCIO*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgodescripcion
                                                        (rie.riesdescripcion,
                                                         rie,
                                                         mensajes
                                                        );
            ELSIF cobjase = 5
            THEN
               /* AUTOS*/
               vpasexec := 4;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgoauto (rie.riesautos,
                                                         rie,
                                                         mensajes
                                                        );
            END IF;
         ELSE
            IF cobjase IN (3, 4)
            THEN
               /* DESCRIPCIO*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgodescripcion
                                                        (rie.riesdescripcion,
                                                         rie,
                                                         mensajes
                                                        );
            ELSE
               /* Fi bug 22094*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgopersonal
                                                           (rie.riespersonal,
                                                            rie,
                                                            mensajes
                                                           );
            END IF;
         END IF;
      /* Fin Bug 21907*/
      END IF;

      /* PROPAGAR A SUS GARANTIAS*/
      /* obtener las garant¿as del riesgo : poliza.det_poliza.riesgos[pnriesgo].garantias*/
      vpasexec := 7;
      gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF gars IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001100);
         vpasexec := 8;
         RAISE e_object_error;
      ELSE
         IF pdiferencia IS NULL
         THEN
            IF gars.COUNT = 0
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001100);
               vpasexec := 9;
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      /* recorrido de las garant¿as*/
      poliza.det_poliza.riesgos (pnriesgo).crggardif := 0;

      IF gars IS NOT NULL
      THEN
         IF gars.COUNT > 0
         THEN
            FOR vgar IN gars.FIRST .. gars.LAST
            LOOP
               vpasexec := 10;

               IF gars.EXISTS (vgar)
               THEN
                  IF NVL
                        (pac_parametros.f_pargaranpro_n
                                           (poliza.det_poliza.sproduc,
                                            poliza.det_poliza.gestion.cactivi,
                                            gars (vgar).cgarant,
                                            'PROPAGA_DTOREC'
                                           ),
                         1
                        ) = 1
                  THEN
                     /* propagar la diferencia (si queda en negativo --> 0)*/
                     vdiferencia :=
                         NVL (pdiferencia,
                              (NVL (pdtocom, 0) - v_pdtocom_ant));

                     IF    gars (vgar).primas.pdtocom IS NULL
                        OR gars (vgar).cobliga = 0
                     THEN
                        gars (vgar).primas.pdtocom := NVL (pdtocom, 0);
                     ELSE
                        IF (NVL (gars (vgar).primas.pdtocom, 0) + vdiferencia
                           ) >= 0
                        THEN
                           gars (vgar).primas.pdtocom :=
                                NVL (gars (vgar).primas.pdtocom, 0)
                              + vdiferencia;
                        ELSE
                           gars (vgar).primas.pdtocom := 0;
                        END IF;
                     END IF;

                     /* actualizar CRGGARDIF = 1*/
                     /* en el caso de que alguna garant¿a del riesgo tenga alg¿n descuento o recargo diferente al del propio riesgo*/
                     IF    NVL (rie.primas.pdtocom, 0) <>
                                           NVL (gars (vgar).primas.pdtocom, 0)
                        OR NVL (rie.primas.precarg, 0) <>
                                           NVL (gars (vgar).primas.precarg, 0)
                        OR NVL (rie.primas.pdtotec, 0) <>
                                           NVL (gars (vgar).primas.pdtotec, 0)
                        OR NVL (rie.primas.preccom, 0) <>
                                           NVL (gars (vgar).primas.preccom, 0)
                     THEN
                        poliza.det_poliza.riesgos (pnriesgo).crggardif := 1;
                     END IF;

                     /* guarda la garant¿a en la base de datos*/
                     v_error :=
                        pac_md_grabardatos.f_grabargarantia (gars (vgar),
                                                             pnriesgo,
                                                             mensajes
                                                            );

                     IF v_error = 1
                     THEN
                        vpasexec := 101;
                        RAISE e_object_error;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      /* actualiza las garant¿as en el objeto*/
      vpasexec := 11;
      v_error :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                pnriesgo,
                                                gars,
                                                mensajes
                                               );

      IF (v_error <> 0)
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001098);
         vpasexec := 12;
         RAISE e_object_error;
      END IF;

      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_pdtocom_riesgogaran;

   /*************************************************************************
   Establece porcentaje a: 1.descuento comercial a un riesgo.
   2.recargo t¿cnico a un riesgo.
   3.descuento t¿cnico a un riesgo.
   4.recargo comercial a un riesgo.
   y propaga los cambios a sus garant¿as en cada caso.
   param in psseguro    : Numero interno de seguro
   param in pnriesgo    : Numero interno de riesgo
   param in pdtocom     : Porcentaje descuento comercial (1)
   param in precarg     : Porcentaje recargo t¿cnico (2)
   param in pdtotec     : Porcentaje descuento t¿cnico (3)
   param in preccom     : Porcentaje recargo comercial (4)
   param in pdiferencia : Diferencia de porcentajes a propagar
   param out mensajes   : mensajes de error
   return               : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_set_porcrecarg_riesgogar (
      psseguro      IN       NUMBER,
      pnriesgo      IN       NUMBER,
      pdtocom       IN       NUMBER,
      precarg       IN       NUMBER,
      pdtotec       IN       NUMBER,
      preccom       IN       NUMBER,
      pdiferencia   IN       NUMBER DEFAULT NULL,
      mensajes      OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      rie             ob_iax_riesgos;
      gars            t_iax_garantias;
      v_pdtocom_ant   FLOAT;
      v_precarg_ant   FLOAT;
      v_pdtotec_ant   FLOAT;
      v_preccom_ant   FLOAT;
      v_error         NUMBER;
      vpasexec        NUMBER (8)      := 0;
      vparam          VARCHAR2 (3200)
         :=    'PSSEGURO: '
            || psseguro
            || ', PNRIESGO: '
            || pnriesgo
            || ', PDTOCOM: '
            || pdtocom
            || ', PRECARG: '
            || precarg
            || ', PDTOTEC: '
            || pdtotec
            || ', PRECCOM: '
            || preccom
            || ', PDIFERENCIA: '
            || pdiferencia;
      vobject         VARCHAR2 (200)
                            := 'PAC_IAX_PRODUCCION.f_set_porcrecarg_riesgogar';
      vdiferencia     NUMBER;
      cobjase         NUMBER;
      v_triesgo       ob_iax_riesgos;
   BEGIN
      /* validar par¿metros de entrada*/
      IF psseguro IS NULL OR pnriesgo IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 1;

      IF NVL (pdtocom, 0) < 0 OR NVL (pdtocom, 0) > 100
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9901044);
         RAISE e_param_error;
      ELSIF NVL (precarg, 0) < 0 OR NVL (precarg, 0) > 100
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9901044);
         RAISE e_param_error;
      ELSIF NVL (pdtotec, 0) < 0 OR NVL (pdtotec, 0) > 100
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9901044);
         RAISE e_param_error;
      ELSIF NVL (preccom, 0) < 0 OR NVL (preccom, 0) > 100
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9901044);
         RAISE e_param_error;
      END IF;

      /* obtener detalle p¿liza : poliza.det_poliza*/
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /* obtener el riesgo de la p¿liza : poliza.det_poliza.riesgos[pnriesgo]*/
      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         vpasexec := 3;
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         RAISE e_object_error;
      END IF;

/*Se hacen las operaciones siguientes:*/
/*---------------------------------------------------------------------------------------------------*/
/* 1.Descuento comercial a un riesgo.*/
/*     obtener las primas del riesgo de la p¿liza : poliza.det_poliza.riesgos[pnriesgo].primas.pdtocom*/
/*     guardando previamente el valor anterior de pdtocom*/
/*---------------------------------------------------------------------------------------------------*/
/* 2.Recargo t¿cnico a un riesgo.*/
/*     obtener las primas del riesgo de la p¿liza : poliza.det_poliza.riesgos[pnriesgo].primas.precarg*/
/*     guardando previamente el valor anterior de precarg*/
/*---------------------------------------------------------------------------------------------------*/
/* 3.Descuento t¿cnico a un riesgo.*/
/*     obtener las primas del riesgo de la p¿liza : poliza.det_poliza.riesgos[pnriesgo].primas.pdtotec*/
/*     guardando previamente el valor anterior de pdtotec*/
/*---------------------------------------------------------------------------------------------------*/
/* 4. Recargo comercial a un riesgo.*/
/*     obtener las primas del riesgo de la p¿liza : poliza.det_poliza.riesgos[pnriesgo].primas.preccom*/
/*     guardando previamente el valor anterior de preccom*/
/*---------------------------------------------------------------------------------------------------*/
/* y ACTUALIZAR EN EL RIESGO en todos los casos anteriores.*/
      vpasexec := 4;

      IF rie.primas IS NOT NULL
      THEN
         IF pdiferencia IS NULL
         THEN
            v_error :=
               pac_md_obtenerdatos.f_inicializa (vpmode,
                                                 vsolicit,
                                                 vnmovimi,
                                                 mensajes
                                                );

            IF v_error = 1
            THEN
               vpasexec := 1;
               RAISE e_object_error;
            END IF;

            v_triesgo := pac_md_obtenerdatos.f_lee_riesgo (mensajes, pnriesgo);
            v_pdtocom_ant := v_triesgo.primas.pdtocom;
            v_precarg_ant := v_triesgo.primas.precarg;
            v_pdtotec_ant := v_triesgo.primas.pdtotec;
            v_preccom_ant := v_triesgo.primas.preccom;
         END IF;

         /* actualizar los valores 1.pdtocom, 2.precarg, 3.pdtotec, 4.preccom del riesgo*/
         vpasexec := 5;

         IF pdiferencia IS NULL
         THEN
            /* actualizar directamente el porcentaje*/
            rie.primas.pdtocom := NVL (pdtocom, 0);
            rie.primas.precarg := NVL (precarg, 0);
            rie.primas.pdtotec := NVL (pdtotec, 0);
            rie.primas.preccom := NVL (preccom, 0);
         ELSE
            IF rie.primas.pdtocom IS NULL
            THEN
               rie.primas.pdtocom := NVL (pdtocom, 0);
            ELSE
               /* propagar la diferencia (si queda en negativo --> 0)*/
               IF (NVL (rie.primas.pdtocom, 0) + pdiferencia) >= 0
               THEN
                  rie.primas.pdtocom :=
                                     NVL (rie.primas.pdtocom, 0)
                                     + pdiferencia;
               ELSE
                  rie.primas.pdtocom := 0;
               END IF;
            END IF;

            IF rie.primas.precarg IS NULL
            THEN
               rie.primas.precarg := NVL (precarg, 0);
            ELSE
               /* propagar la diferencia (si queda en negativo --> 0)*/
               IF (NVL (rie.primas.precarg, 0) + pdiferencia) >= 0
               THEN
                  rie.primas.precarg :=
                                     NVL (rie.primas.precarg, 0)
                                     + pdiferencia;
               ELSE
                  rie.primas.precarg := 0;
               END IF;
            END IF;

            IF rie.primas.pdtotec IS NULL
            THEN
               rie.primas.pdtotec := NVL (pdtotec, 0);
            ELSE
               /* propagar la diferencia (si queda en negativo --> 0)*/
               IF (NVL (rie.primas.pdtotec, 0) + pdiferencia) >= 0
               THEN
                  rie.primas.pdtotec :=
                                     NVL (rie.primas.pdtotec, 0)
                                     + pdiferencia;
               ELSE
                  rie.primas.pdtotec := 0;
               END IF;
            END IF;

            IF rie.primas.preccom IS NULL
            THEN
               rie.primas.preccom := NVL (preccom, 0);
            ELSE
               /* propagar la diferencia (si queda en negativo --> 0)*/
               IF (NVL (rie.primas.preccom, 0) + pdiferencia) >= 0
               THEN
                  rie.primas.preccom :=
                                     NVL (rie.primas.preccom, 0)
                                     + pdiferencia;
               ELSE
                  rie.primas.preccom := 0;
               END IF;
            END IF;
         END IF;

         IF poliza.det_poliza.primas IS NOT NULL
         THEN
            IF poliza.det_poliza.primas.COUNT > 0
            THEN
               FOR vpri IN
                  poliza.det_poliza.primas.FIRST .. poliza.det_poliza.primas.LAST
               LOOP
                  IF poliza.det_poliza.primas.EXISTS (vpri)
                  THEN
                     IF    poliza.det_poliza.primas (vpri).pdtocom <>
                                                           rie.primas.pdtocom
                        OR poliza.det_poliza.primas (vpri).precarg <>
                                                            rie.primas.precarg
                        OR poliza.det_poliza.primas (vpri).pdtotec <>
                                                            rie.primas.pdtotec
                        OR poliza.det_poliza.primas (vpri).preccom <>
                                                            rie.primas.preccom
                     THEN
                        poliza.det_poliza.gestion.crggardif := 1;
                     ELSE
                        poliza.det_poliza.gestion.crggardif := 0;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;

         v_error :=
            pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                            pnriesgo,
                                            rie,
                                            mensajes
                                           );

         IF (v_error <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001099);
            vpasexec := 6;
            RAISE e_object_error;
         END IF;

         v_error :=
            pac_md_grabardatos.f_inicializa (vpmode,
                                             vsolicit,
                                             vnmovimi,
                                             mensajes
                                            );

         IF v_error = 1
         THEN
            vpasexec := 1;
            RAISE e_object_error;
         END IF;

         vpasexec := 2;
         cobjase := poliza.det_poliza.cobjase;

         IF NOT pac_iax_produccion.isaltacol
         THEN
            IF cobjase = 1
            THEN
               /* PERSONAL*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgopersonal
                                                           (rie.riespersonal,
                                                            rie,
                                                            mensajes
                                                           );
            ELSIF cobjase = 2
            THEN
               /* DIRECCION*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgodireccion
                                                          (rie.riesdireccion,
                                                           rie,
                                                           mensajes
                                                          );
            ELSIF cobjase IN (3, 4)
            THEN
               /* DESCRIPCIO*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgodescripcion
                                                        (rie.riesdescripcion,
                                                         rie,
                                                         mensajes
                                                        );
            ELSIF cobjase = 5
            THEN
               /* AUTOS*/
               vpasexec := 4;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgoauto (rie.riesautos,
                                                         rie,
                                                         mensajes
                                                        );
            END IF;
         ELSE
            IF cobjase IN (3, 4)
            THEN
               /* DESCRIPCIO*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgodescripcion
                                                        (rie.riesdescripcion,
                                                         rie,
                                                         mensajes
                                                        );
            ELSE
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgopersonal
                                                           (rie.riespersonal,
                                                            rie,
                                                            mensajes
                                                           );
            END IF;
         END IF;
      END IF;

      /* PROPAGAR A SUS GARANTIAS*/
      /* obtener las garant¿as del riesgo : poliza.det_poliza.riesgos[pnriesgo].garantias*/
      vpasexec := 7;
      gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF gars IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001100);
         vpasexec := 8;
         RAISE e_object_error;
      ELSE
         IF pdiferencia IS NULL
         THEN
            IF gars.COUNT = 0
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001100);
               vpasexec := 9;
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      /* recorrido de las garant¿as*/
      poliza.det_poliza.riesgos (pnriesgo).crggardif := 0;

      IF gars IS NOT NULL
      THEN
         IF gars.COUNT > 0
         THEN
            FOR vgar IN gars.FIRST .. gars.LAST
            LOOP
               vpasexec := 10;

               IF gars.EXISTS (vgar)
               THEN
                  IF NVL
                        (pac_parametros.f_pargaranpro_n
                                           (poliza.det_poliza.sproduc,
                                            poliza.det_poliza.gestion.cactivi,
                                            gars (vgar).cgarant,
                                            'PROPAGA_DTOREC'
                                           ),
                         1
                        ) = 1
                  THEN
                     /* propagar la diferencia (si queda en negativo --> 0)*/
                     vdiferencia :=
                         NVL (pdiferencia,
                              (NVL (pdtocom, 0) - v_pdtocom_ant));

                     IF    gars (vgar).primas.pdtocom IS NULL
                        OR gars (vgar).cobliga = 0
                     THEN
                        gars (vgar).primas.pdtocom := NVL (pdtocom, 0);
                     ELSE
                        IF (NVL (gars (vgar).primas.pdtocom, 0) + vdiferencia
                           ) >= 0
                        THEN
                           gars (vgar).primas.pdtocom :=
                                NVL (gars (vgar).primas.pdtocom, 0)
                              + vdiferencia;
                        ELSE
                           gars (vgar).primas.pdtocom := 0;
                        END IF;
                     END IF;

                     vdiferencia :=
                          NVL (pdiferencia,
                               (NVL (precarg, 0) - v_precarg_ant));

                     IF    gars (vgar).primas.precarg IS NULL
                        OR gars (vgar).cobliga = 0
                     THEN
                        gars (vgar).primas.precarg := NVL (precarg, 0);
                     ELSE
                        IF (NVL (gars (vgar).primas.precarg, 0) + vdiferencia
                           ) >= 0
                        THEN
                           gars (vgar).primas.precarg :=
                                NVL (gars (vgar).primas.precarg, 0)
                              + vdiferencia;
                        ELSE
                           gars (vgar).primas.precarg := 0;
                        END IF;
                     END IF;

                     vdiferencia :=
                          NVL (pdiferencia,
                               (NVL (pdtotec, 0) - v_pdtotec_ant));

                     IF    gars (vgar).primas.pdtotec IS NULL
                        OR gars (vgar).cobliga = 0
                     THEN
                        gars (vgar).primas.pdtotec := NVL (pdtotec, 0);
                     ELSE
                        IF (NVL (gars (vgar).primas.pdtotec, 0) + vdiferencia
                           ) >= 0
                        THEN
                           gars (vgar).primas.pdtotec :=
                                NVL (gars (vgar).primas.pdtotec, 0)
                              + vdiferencia;
                        ELSE
                           gars (vgar).primas.pdtotec := 0;
                        END IF;
                     END IF;

                     vdiferencia :=
                          NVL (pdiferencia,
                               (NVL (preccom, 0) - v_preccom_ant));

                     IF    gars (vgar).primas.preccom IS NULL
                        OR gars (vgar).cobliga = 0
                     THEN
                        gars (vgar).primas.preccom := NVL (preccom, 0);
                     ELSE
                        IF (NVL (gars (vgar).primas.preccom, 0) + vdiferencia
                           ) >= 0
                        THEN
                           gars (vgar).primas.preccom :=
                                NVL (gars (vgar).primas.preccom, 0)
                              + vdiferencia;
                        ELSE
                           gars (vgar).primas.preccom := 0;
                        END IF;
                     END IF;

                     /* actualizar CRGGARDIF = 1*/
                     /* en el caso de que alguna garant¿a del riesgo tenga alg¿n descuento o recargo diferente al del propio riesgo*/
                     IF    NVL (rie.primas.pdtocom, 0) <>
                                           NVL (gars (vgar).primas.pdtocom, 0)
                        OR NVL (rie.primas.precarg, 0) <>
                                           NVL (gars (vgar).primas.precarg, 0)
                        OR NVL (rie.primas.pdtotec, 0) <>
                                           NVL (gars (vgar).primas.pdtotec, 0)
                        OR NVL (rie.primas.preccom, 0) <>
                                           NVL (gars (vgar).primas.preccom, 0)
                     THEN
                        poliza.det_poliza.riesgos (pnriesgo).crggardif := 1;
                     END IF;

                     /* guarda la garant¿a en la base de datos*/

                     /*IF gars(vgar).excontractual = 0
                            THEN
                               --
                               gars(vgar).finivig := NVL(vfefecto, gars(vgar).finivig);
                               gars(vgar).ffinvig := NVL(vfvencim, gars(vgar).ffinvig);
                               --
                            ELSIF gars(vgar).excontractual = 1
                            THEN
                               --
                               gars(vgar).finivig := NVL(vfefecto, gars(vgar).finivig);
                               gars(vgar).ffinvig := NVL(vfvencplazo, gars(vgar).ffinvig);
                               --
                            ELSE
                               --
                               gars(vgar).finivig := NVL(vfvencplazo, gars(vgar).finivig);
                               gars(vgar).ffinvig := NVL(vfvencim, gars(vgar).ffinvig);
                               --
                            END IF; */
                     v_error :=
                        pac_md_grabardatos.f_grabargarantia (gars (vgar),
                                                             pnriesgo,
                                                             mensajes
                                                            );

                     IF v_error = 1
                     THEN
                        vpasexec := 101;
                        RAISE e_object_error;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      /* actualiza las garant¿as en el objeto*/
      vpasexec := 11;
      v_error :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                pnriesgo,
                                                gars,
                                                mensajes
                                               );

      IF (v_error <> 0)
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001098);
         vpasexec := 12;
         RAISE e_object_error;
      END IF;

      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_porcrecarg_riesgogar;

   /*************************************************************************
   Establece porcentaje recargo t¿cnico a un riesgo, y propaga los cambios a sus garant¿as
   param in psseguro    : Numero interno de seguro
   param in pnriesgo    : Numero interno de riesgo
   param in precarg     : Porcentaje recargo t¿cnico
   param in pdiferencia : Diferencia de porcentajes a propagar
   param out mensajes   : mensajes de error
   return               : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_set_precarg_riesgogaran (
      psseguro      IN       NUMBER,
      pnriesgo      IN       NUMBER,
      precarg       IN       NUMBER,
      pdiferencia   IN       NUMBER DEFAULT NULL,
      mensajes      OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      rie             ob_iax_riesgos;
      gars            t_iax_garantias;
      v_precarg_ant   FLOAT;
      v_error         NUMBER;
      vpasexec        NUMBER (8)       := 0;
      vparam          VARCHAR2 (32000)
         :=    'PSSEGURO: '
            || psseguro
            || ', PNRIESGO: '
            || pnriesgo
            || ', PRECARG: '
            || precarg
            || ', PDIFERENCIA: '
            || pdiferencia;
      vobject         VARCHAR2 (200)
                             := 'PAC_IAX_PRODUCCION.F_Set_Precarg_Riesgogaran';
      vdiferencia     NUMBER;
      cobjase         NUMBER;
      v_triesgo       ob_iax_riesgos;
   BEGIN
      /* validar par¿metros de entrada*/
      IF psseguro IS NULL OR pnriesgo IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 1;

      IF NVL (precarg, 0) < 0 OR NVL (precarg, 0) > 100
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9901044);
         RAISE e_param_error;
      END IF;

      /* obtener detalle p¿liza : poliza.det_poliza*/
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /* obtener el riesgo de la p¿liza : poliza.det_poliza.riesgos[pnriesgo]*/
      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         vpasexec := 3;
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         RAISE e_object_error;
      END IF;

      /* obtener las primas del riesgo de la p¿liza : poliza.det_poliza.riesgos[pnriesgo].primas.precarg*/
      /* guardando previamente el valor anterior de precarg*/
      /* y ACTUALIZAR EN EL RIESGO*/
      vpasexec := 4;

      IF rie.primas IS NOT NULL
      THEN
         /*v_precarg_ant := NVL(rie.primas.precarg, 0);*/
         IF pdiferencia IS NULL
         THEN
            v_error :=
               pac_md_obtenerdatos.f_inicializa (vpmode,
                                                 vsolicit,
                                                 vnmovimi,
                                                 mensajes
                                                );

            IF v_error = 1
            THEN
               vpasexec := 1;
               RAISE e_object_error;
            END IF;

            v_triesgo := pac_md_obtenerdatos.f_lee_riesgo (mensajes, pnriesgo);
            v_precarg_ant := v_triesgo.primas.precarg;

            IF v_triesgo.primas.pdtocom IS NOT NULL
            THEN
               rie.primas.pdtocom := v_triesgo.primas.pdtocom;
            END IF;

            IF v_triesgo.primas.pdtotec IS NOT NULL
            THEN
               rie.primas.pdtotec := v_triesgo.primas.pdtotec;
            END IF;

            IF v_triesgo.primas.preccom IS NOT NULL
            THEN
               rie.primas.preccom := v_triesgo.primas.preccom;
            END IF;
         END IF;

         /* actualizar el valor de pdtocom del riesgo*/
         vpasexec := 5;

         IF pdiferencia IS NULL
         THEN
            /* actualizar directamente el porcentaje*/
            rie.primas.precarg := NVL (precarg, 0);
         ELSE
            /* Bug 21907 - RSC - 25/05/2012*/
            IF rie.primas.precarg IS NULL
            THEN
               rie.primas.precarg := NVL (precarg, 0);
            ELSE
               /* Fin Bug 21907*/
               /* propagar la diferencia (si queda en negativo --> 0)*/
               IF (NVL (rie.primas.precarg, 0) + pdiferencia) >= 0
               THEN
                  rie.primas.precarg :=
                                     NVL (rie.primas.precarg, 0)
                                     + pdiferencia;
               ELSE
                  rie.primas.precarg := 0;
               END IF;
            /* Bug 21907 - RSC - 25/05/2012*/
            END IF;
         /* Fin Bug 21907*/
         END IF;

         IF poliza.det_poliza.primas IS NOT NULL
         THEN
            IF poliza.det_poliza.primas.COUNT > 0
            THEN
               FOR vpri IN
                  poliza.det_poliza.primas.FIRST .. poliza.det_poliza.primas.LAST
               LOOP
                  IF poliza.det_poliza.primas.EXISTS (vpri)
                  THEN
                     IF    poliza.det_poliza.primas (vpri).pdtocom <>
                                                           rie.primas.pdtocom
                        OR poliza.det_poliza.primas (vpri).precarg <>
                                                            rie.primas.precarg
                        OR poliza.det_poliza.primas (vpri).pdtotec <>
                                                            rie.primas.pdtotec
                        OR poliza.det_poliza.primas (vpri).preccom <>
                                                            rie.primas.preccom
                     THEN
                        poliza.det_poliza.gestion.crggardif := 1;
                     ELSE
                        poliza.det_poliza.gestion.crggardif := 0;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;

         v_error :=
            pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                            pnriesgo,
                                            rie,
                                            mensajes
                                           );

         IF (v_error <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001099);
            vpasexec := 6;
            RAISE e_object_error;
         END IF;

         /* Bug 21907 - RSC - 25/05/2012*/
         v_error :=
            pac_md_grabardatos.f_inicializa (vpmode,
                                             vsolicit,
                                             vnmovimi,
                                             mensajes
                                            );

         IF v_error = 1
         THEN
            vpasexec := 1;
            RAISE e_object_error;
         END IF;

         vpasexec := 2;
         /*cobjase := pac_md_obtenerdatos.f_getobjase(vsolicit, vpmode, mensajes);*/
         cobjase := poliza.det_poliza.cobjase;

         IF NOT pac_iax_produccion.isaltacol
         THEN
            /* Fin Bug 19513*/
            IF cobjase = 1
            THEN
               /* PERSONAL*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgopersonal
                                                           (rie.riespersonal,
                                                            rie,
                                                            mensajes
                                                           );
            ELSIF cobjase = 2
            THEN
               /* DIRECCION*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgodireccion
                                                          (rie.riesdireccion,
                                                           rie,
                                                           mensajes
                                                          );
            ELSIF cobjase IN (3, 4)
            THEN
               /* DESCRIPCIO*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgodescripcion
                                                        (rie.riesdescripcion,
                                                         rie,
                                                         mensajes
                                                        );
            ELSIF cobjase = 5
            THEN
               /* AUTOS*/
               vpasexec := 4;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgoauto (rie.riesautos,
                                                         rie,
                                                         mensajes
                                                        );
            END IF;
         ELSE
            IF cobjase IN (3, 4)
            THEN
               /* DESCRIPCIO*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgodescripcion
                                                        (rie.riesdescripcion,
                                                         rie,
                                                         mensajes
                                                        );
            ELSE
               /* Fi bug 22094*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgopersonal
                                                           (rie.riespersonal,
                                                            rie,
                                                            mensajes
                                                           );
            END IF;
         END IF;
      /* Fin Bug 21907*/
      END IF;

      /* PROPAGAR A SUS GARANTIAS*/
      /* obtener las garant¿as del riesgo : poliza.det_poliza.riesgos[pnriesgo].garantias*/
      vpasexec := 7;
      gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF gars IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001100);
         vpasexec := 8;
         RAISE e_object_error;
      ELSE
         IF pdiferencia IS NULL
         THEN
            IF gars.COUNT = 0
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001100);
               vpasexec := 9;
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      /* recorrido de las garant¿as*/
      poliza.det_poliza.riesgos (pnriesgo).crggardif := 0;

      IF gars IS NOT NULL
      THEN
         IF gars.COUNT > 0
         THEN
            FOR vgar IN gars.FIRST .. gars.LAST
            LOOP
               vpasexec := 10;

               IF gars.EXISTS (vgar)
               THEN
                  IF NVL
                        (pac_parametros.f_pargaranpro_n
                                           (poliza.det_poliza.sproduc,
                                            poliza.det_poliza.gestion.cactivi,
                                            gars (vgar).cgarant,
                                            'PROPAGA_DTOREC'
                                           ),
                         1
                        ) = 1
                  THEN
                     /* propagar la diferencia (si queda en negativo --> 0)*/
                     vdiferencia :=
                         NVL (pdiferencia,
                              (NVL (precarg, 0) - v_precarg_ant));

                     IF    gars (vgar).primas.precarg IS NULL
                        OR gars (vgar).cobliga = 0
                     THEN
                        gars (vgar).primas.precarg := NVL (precarg, 0);
                     ELSE
                        IF (NVL (gars (vgar).primas.precarg, 0) + vdiferencia
                           ) >= 0
                        THEN
                           gars (vgar).primas.precarg :=
                                NVL (gars (vgar).primas.precarg, 0)
                              + vdiferencia;
                        ELSE
                           gars (vgar).primas.precarg := 0;
                        END IF;
                     END IF;

                     /* actualizar CRGGARDIF = 1*/
                     /* en el caso de que alguna garant¿a del riesgo tenga alg¿n descuento o recargo diferente al del propio riesgo*/
                     IF    NVL (rie.primas.pdtocom, 0) <>
                                           NVL (gars (vgar).primas.pdtocom, 0)
                        OR NVL (rie.primas.precarg, 0) <>
                                           NVL (gars (vgar).primas.precarg, 0)
                        OR NVL (rie.primas.pdtotec, 0) <>
                                           NVL (gars (vgar).primas.pdtotec, 0)
                        OR NVL (rie.primas.preccom, 0) <>
                                           NVL (gars (vgar).primas.preccom, 0)
                     THEN
                        poliza.det_poliza.riesgos (pnriesgo).crggardif := 1;
                     END IF;

                     /* guarda la garant¿a en la base de datos*/
                     v_error :=
                        pac_md_grabardatos.f_grabargarantia (gars (vgar),
                                                             pnriesgo,
                                                             mensajes
                                                            );

                     IF v_error = 1
                     THEN
                        vpasexec := 101;
                        RAISE e_object_error;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      /* actualiza las garant¿as*/
      vpasexec := 11;
      v_error :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                pnriesgo,
                                                gars,
                                                mensajes
                                               );

      IF (v_error <> 0)
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001098);
         vpasexec := 12;
         RAISE e_object_error;
      END IF;

      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_precarg_riesgogaran;

   /*************************************************************************
   Establece porcentaje descuento t¿cnico a un riesgo, y propaga los cambios a sus garant¿as
   param in psseguro    : Numero interno de seguro
   param in pnriesgo    : Numero interno de riesgo
   param in pdtotec     : Porcentaje descuento t¿cnico
   param in pdiferencia : Diferencia de porcentajes a propagar
   param out mensajes   : mensajes de error
   return               : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_set_pdtotec_riesgogaran (
      psseguro      IN       NUMBER,
      pnriesgo      IN       NUMBER,
      pdtotec       IN       NUMBER,
      pdiferencia   IN       NUMBER DEFAULT NULL,
      mensajes      OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      rie             ob_iax_riesgos;
      gars            t_iax_garantias;
      v_pdtotec_ant   FLOAT;
      v_error         NUMBER;
      vpasexec        NUMBER (8)       := 0;
      vparam          VARCHAR2 (32000)
         :=    'PSSEGURO: '
            || psseguro
            || ', PNRIESGO: '
            || pnriesgo
            || ', PDTOTEC: '
            || pdtotec
            || ', PDIFERENCIA: '
            || pdiferencia;
      vobject         VARCHAR2 (200)
                             := 'PAC_IAX_PRODUCCION.F_Set_Pdtotec_Riesgogaran';
      vdiferencia     NUMBER;
      cobjase         NUMBER;
      v_triesgo       ob_iax_riesgos;
   BEGIN
      /* validar par¿metros de entrada*/
      IF psseguro IS NULL OR pnriesgo IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 1;

      IF NVL (pdtotec, 0) < 0 OR NVL (pdtotec, 0) > 100
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9901044);
         RAISE e_param_error;
      END IF;

      /* obtener detalle p¿liza : poliza.det_poliza*/
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /* obtener el riesgo de la p¿liza : poliza.det_poliza.riesgos[pnriesgo]*/
      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         vpasexec := 3;
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         RAISE e_object_error;
      END IF;

      /* obtener las primas del riesgo de la p¿liza : poliza.det_poliza.riesgos[pnriesgo].primas.pdtotec*/
      /* guardando previamente el valor anterior de pdtotec*/
      /* y ACTUALIZAR EN EL RIESGO*/
      vpasexec := 4;

      IF rie.primas IS NOT NULL
      THEN
         /*v_pdtotec_ant := NVL(rie.primas.pdtotec, 0);*/
         IF pdiferencia IS NULL
         THEN
            v_error :=
               pac_md_obtenerdatos.f_inicializa (vpmode,
                                                 vsolicit,
                                                 vnmovimi,
                                                 mensajes
                                                );

            IF v_error = 1
            THEN
               vpasexec := 1;
               RAISE e_object_error;
            END IF;

            v_triesgo := pac_md_obtenerdatos.f_lee_riesgo (mensajes, pnriesgo);
            v_pdtotec_ant := v_triesgo.primas.pdtotec;

            IF v_triesgo.primas.pdtocom IS NOT NULL
            THEN
               rie.primas.pdtocom := v_triesgo.primas.pdtocom;
            END IF;

            IF v_triesgo.primas.precarg IS NOT NULL
            THEN
               rie.primas.precarg := v_triesgo.primas.precarg;
            END IF;

            IF v_triesgo.primas.preccom IS NOT NULL
            THEN
               rie.primas.preccom := v_triesgo.primas.preccom;
            END IF;
         END IF;

         /* actualizar el valor de pdtotec del riesgo*/
         vpasexec := 5;

         IF pdiferencia IS NULL
         THEN
            /* actualizar directamente el porcentaje*/
            rie.primas.pdtotec := NVL (pdtotec, 0);
         ELSE
            /* Bug 21907 - RSC - 25/05/2012*/
            IF rie.primas.pdtotec IS NULL
            THEN
               rie.primas.pdtotec := NVL (pdtotec, 0);
            ELSE
               /* Fin Bug 21907*/
               /* propagar la diferencia (si queda en negativo --> 0)*/
               IF (NVL (rie.primas.pdtotec, 0) + pdiferencia) >= 0
               THEN
                  rie.primas.pdtotec :=
                                     NVL (rie.primas.pdtotec, 0)
                                     + pdiferencia;
               ELSE
                  rie.primas.pdtotec := 0;
               END IF;
            /* Bug 21907 - RSC - 25/05/2012*/
            END IF;
         /* Fin Bug 21907*/
         END IF;

         IF poliza.det_poliza.primas IS NOT NULL
         THEN
            IF poliza.det_poliza.primas.COUNT > 0
            THEN
               FOR vpri IN
                  poliza.det_poliza.primas.FIRST .. poliza.det_poliza.primas.LAST
               LOOP
                  IF poliza.det_poliza.primas.EXISTS (vpri)
                  THEN
                     IF    poliza.det_poliza.primas (vpri).pdtocom <>
                                                           rie.primas.pdtocom
                        OR poliza.det_poliza.primas (vpri).precarg <>
                                                            rie.primas.precarg
                        OR poliza.det_poliza.primas (vpri).pdtotec <>
                                                            rie.primas.pdtotec
                        OR poliza.det_poliza.primas (vpri).preccom <>
                                                            rie.primas.preccom
                     THEN
                        poliza.det_poliza.gestion.crggardif := 1;
                     ELSE
                        poliza.det_poliza.gestion.crggardif := 0;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;

         v_error :=
            pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                            pnriesgo,
                                            rie,
                                            mensajes
                                           );

         IF (v_error <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001099);
            vpasexec := 6;
            RAISE e_object_error;
         END IF;

         /* Bug 21907 - RSC - 25/05/2012*/
         v_error :=
            pac_md_grabardatos.f_inicializa (vpmode,
                                             vsolicit,
                                             vnmovimi,
                                             mensajes
                                            );

         IF v_error = 1
         THEN
            vpasexec := 1;
            RAISE e_object_error;
         END IF;

         vpasexec := 2;
         cobjase := poliza.det_poliza.cobjase;

         IF NOT pac_iax_produccion.isaltacol
         THEN
            /* Fin Bug 19513*/
            IF cobjase = 1
            THEN
               /* PERSONAL*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgopersonal
                                                           (rie.riespersonal,
                                                            rie,
                                                            mensajes
                                                           );
            ELSIF cobjase = 2
            THEN
               /* DIRECCION*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgodireccion
                                                          (rie.riesdireccion,
                                                           rie,
                                                           mensajes
                                                          );
            ELSIF cobjase IN (3, 4)
            THEN
               /* DESCRIPCIO*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgodescripcion
                                                        (rie.riesdescripcion,
                                                         rie,
                                                         mensajes
                                                        );
            ELSIF cobjase = 5
            THEN
               /* AUTOS*/
               vpasexec := 4;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgoauto (rie.riesautos,
                                                         rie,
                                                         mensajes
                                                        );
            END IF;
         ELSE
            IF cobjase IN (3, 4)
            THEN
               /* DESCRIPCIO*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgodescripcion
                                                        (rie.riesdescripcion,
                                                         rie,
                                                         mensajes
                                                        );
            ELSE
               /* Fi bug 22094*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgopersonal
                                                           (rie.riespersonal,
                                                            rie,
                                                            mensajes
                                                           );
            END IF;
         END IF;
      /* Fin Bug 21907*/
      END IF;

      /* PROPAGAR A SUS GARANTIAS*/
      /* obtener las garant¿as del riesgo : poliza.det_poliza.riesgos[pnriesgo].garantias*/
      vpasexec := 7;
      gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF gars IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001100);
         vpasexec := 8;
         RAISE e_object_error;
      ELSE
         IF pdiferencia IS NULL
         THEN
            IF gars.COUNT = 0
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001100);
               vpasexec := 9;
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      /* recorrido de las garant¿as*/
      poliza.det_poliza.riesgos (pnriesgo).crggardif := 0;

      IF gars IS NOT NULL
      THEN
         IF gars.COUNT > 0
         THEN
            FOR vgar IN gars.FIRST .. gars.LAST
            LOOP
               vpasexec := 10;

               IF gars.EXISTS (vgar)
               THEN
                  IF NVL
                        (pac_parametros.f_pargaranpro_n
                                           (poliza.det_poliza.sproduc,
                                            poliza.det_poliza.gestion.cactivi,
                                            gars (vgar).cgarant,
                                            'PROPAGA_DTOREC'
                                           ),
                         1
                        ) = 1
                  THEN
                     /* propagar la diferencia (si queda en negativo --> 0)*/
                     vdiferencia :=
                         NVL (pdiferencia,
                              (NVL (pdtotec, 0) - v_pdtotec_ant));

                     IF    gars (vgar).primas.pdtotec IS NULL
                        OR gars (vgar).cobliga = 0
                     THEN
                        gars (vgar).primas.pdtotec := NVL (pdtotec, 0);
                     ELSE
                        IF (NVL (gars (vgar).primas.pdtotec, 0) + vdiferencia
                           ) >= 0
                        THEN
                           gars (vgar).primas.pdtotec :=
                                NVL (gars (vgar).primas.pdtotec, 0)
                              + vdiferencia;
                        ELSE
                           gars (vgar).primas.pdtotec := 0;
                        END IF;
                     END IF;

                     /* actualizar CRGGARDIF = 1*/
                     /* en el caso de que alguna garant¿a del riesgo tenga alg¿n descuento o recargo diferente al del propio riesgo*/
                     IF    NVL (rie.primas.pdtocom, 0) <>
                                           NVL (gars (vgar).primas.pdtocom, 0)
                        OR NVL (rie.primas.precarg, 0) <>
                                           NVL (gars (vgar).primas.precarg, 0)
                        OR NVL (rie.primas.pdtotec, 0) <>
                                           NVL (gars (vgar).primas.pdtotec, 0)
                        OR NVL (rie.primas.preccom, 0) <>
                                           NVL (gars (vgar).primas.preccom, 0)
                     THEN
                        poliza.det_poliza.riesgos (pnriesgo).crggardif := 1;
                     END IF;

                     /* guarda la garant¿a en la base de datos*/
                     v_error :=
                        pac_md_grabardatos.f_grabargarantia (gars (vgar),
                                                             pnriesgo,
                                                             mensajes
                                                            );

                     IF v_error = 1
                     THEN
                        vpasexec := 101;
                        RAISE e_object_error;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      /* actualiza las garant¿as*/
      vpasexec := 11;
      v_error :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                pnriesgo,
                                                gars,
                                                mensajes
                                               );

      IF (v_error <> 0)
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001098);
         vpasexec := 12;
         RAISE e_object_error;
      END IF;

      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_pdtotec_riesgogaran;

   /*************************************************************************
   Establece porcentaje recargo comercial a un riesgo, y propaga los cambios a sus garant¿as
   param in psseguro    : Numero interno de seguro
   param in pnriesgo    : Numero interno de riesgo
   param in preccom     : Porcentaje recargo comercial
   param in pdiferencia : Diferencia de porcentajes a propagar
   param out mensajes   : mensajes de error
   return               : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_set_preccom_riesgogaran (
      psseguro      IN       NUMBER,
      pnriesgo      IN       NUMBER,
      preccom       IN       NUMBER,
      pdiferencia   IN       NUMBER DEFAULT NULL,
      mensajes      OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      rie             ob_iax_riesgos;
      gars            t_iax_garantias;
      v_preccom_ant   FLOAT;
      v_error         NUMBER;
      vpasexec        NUMBER (8)       := 0;
      vparam          VARCHAR2 (32000)
         :=    'PSSEGURO: '
            || psseguro
            || ', PNRIESGO: '
            || pnriesgo
            || ', PRECCOM: '
            || preccom
            || ', PDIFERENCIA: '
            || pdiferencia;
      vobject         VARCHAR2 (200)
                             := 'PAC_IAX_PRODUCCION.F_Set_Preccom_Riesgogaran';
      vdiferencia     NUMBER;
      cobjase         NUMBER;
      v_triesgo       ob_iax_riesgos;
   BEGIN
      /* validar par¿metros de entrada*/
      IF psseguro IS NULL OR pnriesgo IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 1;

      IF NVL (preccom, 0) < 0 OR NVL (preccom, 0) > 100
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9901044);
         RAISE e_param_error;
      END IF;

      /* obtener detalle p¿liza : poliza.det_poliza*/
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /* obtener el riesgo de la p¿liza : poliza.det_poliza.riesgos[pnriesgo]*/
      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         vpasexec := 3;
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         RAISE e_object_error;
      END IF;

      /* obtener las primas del riesgo de la p�liza : poliza.det_poliza.riesgos[pnriesgo].primas.preccom*/
      /* guardando previamente el valor anterior de preccom*/
      /* y ACTUALIZAR EN EL RIESGO*/
      vpasexec := 4;

      IF rie.primas IS NOT NULL
      THEN
         /*v_preccom_ant := NVL(rie.primas.preccom, 0);*/
         IF pdiferencia IS NULL
         THEN
            v_error :=
               pac_md_obtenerdatos.f_inicializa (vpmode,
                                                 vsolicit,
                                                 vnmovimi,
                                                 mensajes
                                                );

            IF v_error = 1
            THEN
               vpasexec := 1;
               RAISE e_object_error;
            END IF;

            v_triesgo := pac_md_obtenerdatos.f_lee_riesgo (mensajes, pnriesgo);
            v_preccom_ant := v_triesgo.primas.preccom;

            IF v_triesgo.primas.pdtocom IS NOT NULL
            THEN
               rie.primas.pdtocom := v_triesgo.primas.pdtocom;
            END IF;

            IF v_triesgo.primas.precarg IS NOT NULL
            THEN
               rie.primas.precarg := v_triesgo.primas.precarg;
            END IF;

            IF v_triesgo.primas.pdtotec IS NOT NULL
            THEN
               rie.primas.pdtotec := v_triesgo.primas.pdtotec;
            END IF;
         END IF;

         /* actualizar el valor de preccom del riesgo*/
         vpasexec := 5;

         IF pdiferencia IS NULL
         THEN
            /* actualizar directamente el porcentaje*/
            rie.primas.preccom := NVL (preccom, 0);
         ELSE
            /* Bug 21907 - RSC - 25/05/2012*/
            IF rie.primas.preccom IS NULL
            THEN
               rie.primas.preccom := NVL (preccom, 0);
            ELSE
               /* Fin Bug 21907*/
               /* propagar la diferencia (si queda en negativo --> 0)*/
               IF (NVL (rie.primas.preccom, 0) + pdiferencia) >= 0
               THEN
                  rie.primas.preccom :=
                                     NVL (rie.primas.preccom, 0)
                                     + pdiferencia;
               ELSE
                  rie.primas.preccom := 0;
               END IF;
            /* Bug 21907 - RSC - 25/05/2012*/
            END IF;
         /* Fin Bug 21907*/
         END IF;

         IF poliza.det_poliza.primas IS NOT NULL
         THEN
            IF poliza.det_poliza.primas.COUNT > 0
            THEN
               FOR vpri IN
                  poliza.det_poliza.primas.FIRST .. poliza.det_poliza.primas.LAST
               LOOP
                  IF poliza.det_poliza.primas.EXISTS (vpri)
                  THEN
                     IF    poliza.det_poliza.primas (vpri).pdtocom <>
                                                           rie.primas.pdtocom
                        OR poliza.det_poliza.primas (vpri).precarg <>
                                                            rie.primas.precarg
                        OR poliza.det_poliza.primas (vpri).pdtotec <>
                                                            rie.primas.pdtotec
                        OR poliza.det_poliza.primas (vpri).preccom <>
                                                            rie.primas.preccom
                     THEN
                        poliza.det_poliza.gestion.crggardif := 1;
                     ELSE
                        poliza.det_poliza.gestion.crggardif := 0;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;

         v_error :=
            pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                            pnriesgo,
                                            rie,
                                            mensajes
                                           );

         IF (v_error <> 0)
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001099);
            vpasexec := 6;
            RAISE e_object_error;
         END IF;

         /* Bug 21907 - RSC - 25/05/2012*/
         v_error :=
            pac_md_grabardatos.f_inicializa (vpmode,
                                             vsolicit,
                                             vnmovimi,
                                             mensajes
                                            );

         IF v_error = 1
         THEN
            vpasexec := 1;
            RAISE e_object_error;
         END IF;

         vpasexec := 2;
         cobjase := poliza.det_poliza.cobjase;

         IF NOT pac_iax_produccion.isaltacol
         THEN
            /* Fin Bug 19513*/
            IF cobjase = 1
            THEN
               /* PERSONAL*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgopersonal
                                                           (rie.riespersonal,
                                                            rie,
                                                            mensajes
                                                           );
            ELSIF cobjase = 2
            THEN
               /* DIRECCION*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgodireccion
                                                          (rie.riesdireccion,
                                                           rie,
                                                           mensajes
                                                          );
            ELSIF cobjase IN (3, 4)
            THEN
               /* DESCRIPCIO*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgodescripcion
                                                        (rie.riesdescripcion,
                                                         rie,
                                                         mensajes
                                                        );
            ELSIF cobjase = 5
            THEN
               /* AUTOS*/
               vpasexec := 4;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgoauto (rie.riesautos,
                                                         rie,
                                                         mensajes
                                                        );
            END IF;
         ELSE
            IF cobjase IN (3, 4)
            THEN
               /* DESCRIPCIO*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgodescripcion
                                                        (rie.riesdescripcion,
                                                         rie,
                                                         mensajes
                                                        );
            ELSE
               /* Fi bug 22094*/
               vpasexec := 3;
               v_error :=
                  pac_md_grabardatos.f_grabarriesgopersonal
                                                           (rie.riespersonal,
                                                            rie,
                                                            mensajes
                                                           );
            END IF;
         END IF;
      /* Fin Bug 21907*/
      END IF;

      /* PROPAGAR A SUS GARANTIAS*/
      /* obtener las garant�as del riesgo : poliza.det_poliza.riesgos[pnriesgo].garantias*/
      vpasexec := 7;
      gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF gars IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001100);
         vpasexec := 8;
         RAISE e_object_error;
      ELSE
         IF pdiferencia IS NULL
         THEN
            IF gars.COUNT = 0
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001100);
               vpasexec := 9;
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      /* recorrido de las garant�as*/
      poliza.det_poliza.riesgos (pnriesgo).crggardif := 0;

      IF gars IS NOT NULL
      THEN
         IF gars.COUNT > 0
         THEN
            FOR vgar IN gars.FIRST .. gars.LAST
            LOOP
               vpasexec := 10;

               IF gars.EXISTS (vgar)
               THEN
                  IF NVL
                        (pac_parametros.f_pargaranpro_n
                                           (poliza.det_poliza.sproduc,
                                            poliza.det_poliza.gestion.cactivi,
                                            gars (vgar).cgarant,
                                            'PROPAGA_DTOREC'
                                           ),
                         1
                        ) = 1
                  THEN
                     /* propagar la diferencia (si queda en negativo --> 0)*/
                     vdiferencia :=
                         NVL (pdiferencia,
                              (NVL (preccom, 0) - v_preccom_ant));

                     IF    gars (vgar).primas.preccom IS NULL
                        OR gars (vgar).cobliga = 0
                     THEN
                        gars (vgar).primas.preccom := NVL (preccom, 0);
                     ELSE
                        IF (NVL (gars (vgar).primas.preccom, 0) + vdiferencia
                           ) >= 0
                        THEN
                           gars (vgar).primas.preccom :=
                                NVL (gars (vgar).primas.preccom, 0)
                              + vdiferencia;
                        ELSE
                           gars (vgar).primas.preccom := 0;
                        END IF;
                     END IF;

                     /* actualizar CRGGARDIF = 1*/
                     /* en el caso de que alguna garant�a del riesgo tenga alg�n descuento o recargo diferente al del propio riesgo*/
                     IF    NVL (rie.primas.pdtocom, 0) <>
                                           NVL (gars (vgar).primas.pdtocom, 0)
                        OR NVL (rie.primas.precarg, 0) <>
                                           NVL (gars (vgar).primas.precarg, 0)
                        OR NVL (rie.primas.pdtotec, 0) <>
                                           NVL (gars (vgar).primas.pdtotec, 0)
                        OR NVL (rie.primas.preccom, 0) <>
                                           NVL (gars (vgar).primas.preccom, 0)
                     THEN
                        poliza.det_poliza.riesgos (pnriesgo).crggardif := 1;
                     END IF;

                     /* guarda la garant�a en la base de datos*/
                     v_error :=
                        pac_md_grabardatos.f_grabargarantia (gars (vgar),
                                                             pnriesgo,
                                                             mensajes
                                                            );

                     IF v_error = 1
                     THEN
                        vpasexec := 101;
                        RAISE e_object_error;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      /* actualiza las garant�as*/
      vpasexec := 11;
      v_error :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                pnriesgo,
                                                gars,
                                                mensajes
                                               );

      IF (v_error <> 0)
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001098);
         vpasexec := 12;
         RAISE e_object_error;
      END IF;

      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_preccom_riesgogaran;

   /*  Fin Bug 21907 - MDS - 23/04/2012*/
   /*************************************************************************
   Recuperar informacion de las preguntas
   param in nriesgo  : numero de riesgo
   param out mensajes : mensajes de error
   return             : objeto preguntas
   *************************************************************************/
   FUNCTION f_get_preguntab_riesgo (
      pnriesgo   IN       NUMBER,
      pcpregun   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_preguntastab
   IS
      preg       t_iax_preguntas;
      rie        ob_iax_riesgos;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)
                               := 'PAC_IAX_PRODUCCION.f_get_preguntab_riesgo';
      /* Bug 9109 - 12/02/2008 - RSC - APR: Preguntas semiautomaticas*/
      v_nerr     NUMBER;
      vindex     NUMBER;
   /* Fin Bug 9109*/
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 8;
      preg := pac_iobj_prod.f_partriespreguntas (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 9;
            RAISE e_object_error;
         END IF;
      END IF;

      FOR i IN preg.FIRST .. preg.LAST
      LOOP
         IF preg (i).cpregun = pcpregun
         THEN
            RETURN preg (i).tpreguntastab;
         END IF;
      END LOOP;

      RETURN NULL;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_preguntab_riesgo;

   /*   Recupera la informacion de las preguntas de garantia
   param in nriesgo   : numero de riesgo
   param in cgarant   : codigo de garantia
   param out mensajes : mensajes de error
   return             : objeto preguntas
   *************************************************************************/
   FUNCTION f_get_preguntab_gar (
      pcpregun   IN       NUMBER,
      nriesgo    IN       NUMBER,
      cgarant    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_preguntastab
   IS
      preg       t_iax_preguntas;
      rie        ob_iax_riesgos;
      gar        ob_iax_garantias;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.f_get_preguntab_gar';
      /* Bug 9109 - 12/02/2009 - RSC - APR - Preguntas semiautomaticas*/
      v_nerr     NUMBER;
      vcgarant   NUMBER;
   /* Fin Bug 9109*/
   BEGIN
      vcgarant := cgarant;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001105);
         vpasexec := 5;
         RAISE e_object_error;
      END IF;

      vpasexec := 6;
      gar := pac_iobj_prod.f_partriesgarantia (rie, cgarant, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 7;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 8;

      IF gar IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001106);
         vpasexec := 9;
         RAISE e_object_error;
      END IF;

      vpasexec := 13;
      preg := gar.preguntas;

      /*Bug 31686/177658 - 19/06/2014 - AMC*/
      IF preg IS NOT NULL
      THEN
         IF preg.COUNT > 0
         THEN
            FOR i IN preg.FIRST .. preg.LAST
            LOOP
               IF preg (i).cpregun = pcpregun
               THEN
                  RETURN preg (i).tpreguntastab;
               END IF;
            END LOOP;
         END IF;
      END IF;

      /*Fi Bug 31686/177658 - 19/06/2014 - AMC*/
      RETURN NULL;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_preguntab_gar;

   /*************************************************************************
   Lee los datos de la poliza (preguntas)
   param out mensajes : mensajes de error
   return             : objeto preguntas
   *************************************************************************/
   FUNCTION f_get_preguntab_pol (
      pcpregun   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_preguntastab
   IS
      preg       t_iax_preguntas;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.f_get_preguntab_pol';
      v_nerr     NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /* Bug 9109 - 12/02/2009 - RSC - APR: Preguntas semiautomaticas*/
      vpasexec := 2;
      preg := pac_iobj_prod.f_partpolpreguntas (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      /*- Fin Bug 9109*/
      vpasexec := 8;
      preg := pac_iobj_prod.f_partpolpreguntas (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      FOR i IN preg.FIRST .. preg.LAST
      LOOP
         IF preg (i).cpregun = pcpregun
         THEN
            RETURN preg (i).tpreguntastab;
         END IF;
      END LOOP;

      RETURN NULL;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_preguntab_pol;

   /*************************************************************************
   Recuperar informacion de las preguntas
   param in nriesgo  : numero de riesgo
   param out mensajes : mensajes de error
   return             : objeto preguntas
   *************************************************************************/
   FUNCTION f_get_preguntab (
      ptipo      IN       VARCHAR2,
      pnriesgo   IN       NUMBER,
      pcgarant   IN       NUMBER,
      pcpregun   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_preguntastab
   IS
      preg         t_iax_preguntas;
      rie          ob_iax_riesgos;
      vpasexec     NUMBER (8)         := 1;
      vparam       VARCHAR2 (1)       := NULL;
      vobject      VARCHAR2 (200)     := 'PAC_IAX_PRODUCCION.f_get_preguntab';
      /* Bug 9109 - 12/02/2008 - RSC - APR: Preguntas semiautomaticas*/
      v_nerr       NUMBER;
      vindex       NUMBER;
      tpreguntas   t_iax_preguntastab;
   /* Fin Bug 9109*/
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF ptipo = 'P'
      THEN
         tpreguntas := f_get_preguntab_pol (pcpregun, mensajes);
      ELSIF ptipo = 'R'
      THEN
         tpreguntas := f_get_preguntab_riesgo (pnriesgo, pcpregun, mensajes);
      ELSIF ptipo = 'G'
      THEN
         tpreguntas :=
                 f_get_preguntab_gar (pcpregun, pnriesgo, pcgarant, mensajes);
      END IF;

      RETURN tpreguntas;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_preguntab;

   /*************************************************************************
   Grabar informacion de las preguntas
   param in nriesgo  : numero de riesgo
   param in cpregun  : Codigo de la pregunta
   param in crespue  : codigo de la respuesta
   param in trespue   : texto de la respuesta
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabarpreguntastab (
      ptipo        IN       VARCHAR2,
      pnriesgo     IN       NUMBER,
      pcpregun     IN       NUMBER,
      pcgarant     IN       NUMBER,
      ptcolumnas   IN       t_iax_info,
      mensajes     OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      preg             t_iax_preguntas  := t_iax_preguntas ();
      pregunta         ob_iax_preguntas;
      rie              ob_iax_riesgos;
      gar              ob_iax_garantias;
      npos             NUMBER;
      nerr             NUMBER           := 0;
      vpasexec         NUMBER (8)       := 1;
      vparam           VARCHAR2 (1)     := NULL;
      vobject          VARCHAR2 (200)
                                 := 'PAC_IAX_PRODUCCION.F_grabarpreguntastab';
      trobat           BOOLEAN          := FALSE;
      vindex           NUMBER;
      vnlinea          NUMBER;
      vcolumna         VARCHAR2 (200);
      vvalor           VARCHAR2 (2000);
      vpartido         VARCHAR2 (400);
      vpos             NUMBER;
      vvalor_entero    NUMBER;
      vvalor_decimal   NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      IF ptipo = 'R'
      THEN
         preg := pac_iobj_prod.f_partriespreguntas (rie, mensajes);
      ELSIF ptipo = 'P'
      THEN
         preg :=
               pac_iobj_prod.f_partpolpreguntas (poliza.det_poliza, mensajes);
      ELSIF ptipo = 'G'
      THEN
         gar := pac_iobj_prod.f_partriesgarantia (rie, pcgarant, mensajes);
         preg := gar.preguntas;
      END IF;

      vpasexec := 4;

      IF preg IS NOT NULL AND preg.COUNT > 0
      THEN
         FOR i IN preg.FIRST .. preg.LAST
         LOOP
            IF preg (i).cpregun = pcpregun
            THEN
               pregunta := preg (i);
            END IF;
         END LOOP;
      END IF;

      vpasexec := 5;

      IF ptcolumnas IS NOT NULL AND ptcolumnas.COUNT > 0
      THEN
         vpasexec := 6;

         FOR x IN ptcolumnas.FIRST .. ptcolumnas.LAST
         LOOP
            trobat := FALSE;
            vpos := INSTR (ptcolumnas (x).nombre_columna, '#', 1, 1);
            vcolumna := SUBSTR (ptcolumnas (x).nombre_columna, vpos + 1);
            vpartido := SUBSTR (ptcolumnas (x).nombre_columna, 1, vpos - 1);
            vpos := INSTR (vpartido, '_', 1, 1);
            vnlinea := TO_NUMBER (SUBSTR (vpartido, vpos + 1));
            vvalor := ptcolumnas (x).valor_columna;
            vpasexec := 7;

            /*vnmovimi*/
            IF     pregunta.tpreguntastab IS NOT NULL
               AND pregunta.tpreguntastab.COUNT > 0
            THEN
               FOR i IN
                  pregunta.tpreguntastab.FIRST .. pregunta.tpreguntastab.LAST
               LOOP
                  IF     pregunta.tpreguntastab (i).cpregun =
                                                             pregunta.cpregun
                     AND pregunta.tpreguntastab (i).nlinea = vnlinea
                     AND pregunta.tpreguntastab (i).nmovimi = vnmovimi
                  THEN
                     IF     pregunta.tpreguntastab (i).tcolumnas IS NOT NULL
                        AND pregunta.tpreguntastab (i).tcolumnas.COUNT > 0
                     THEN
                        FOR j IN
                           pregunta.tpreguntastab (i).tcolumnas.FIRST .. pregunta.tpreguntastab
                                                                           (i).tcolumnas.LAST
                        LOOP
                           trobat := TRUE;

                           IF pregunta.tpreguntastab (i).tcolumnas (j).ccolumna =
                                                                     vcolumna
                           THEN
                              /* IF pregunta.tpreguntastab(i).tcolumnas(j).ctipcol IN(1) THEN
                              IF NVL
                              (pac_parametros.f_parempresa_t
                              (pac_md_common.f_get_cxtempresa(),
                              'SISTEMA_NUMERICO_BD'),
                              ',.') = '.,' THEN
                              vvalor_entero :=
                              REPLACE(pac_util.splitt(vvalor, 1, ','), '.', '');
                              vvalor_decimal := pac_util.splitt(vvalor, 2, ',');
                              IF vvalor_decimal IS NOT NULL THEN
                              vvalor := vvalor_entero || '.' || vvalor_decimal;
                              ELSE
                              vvalor := vvalor_entero;
                              END IF;
                              ELSE
                              --vvalor := REPLACE(vvalor, '.', ',');
                              --vvalor := REPLACE(vvalor, '.', '');
                              NULL;
                              END IF;
                              END IF;*/
                              IF pregunta.tpreguntastab (i).tcolumnas (j).ctipcol =
                                                                            1
                              THEN
                                 BEGIN
                                    pregunta.tpreguntastab (i).tcolumnas (j).nvalor :=
                                                                       vvalor;
                                 EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                       pregunta.tpreguntastab (i).tcolumnas
                                                                          (j).nvalor :=
                                                           TO_NUMBER (vvalor);
                                 END;
                              ELSIF pregunta.tpreguntastab (i).tcolumnas (j).ctipcol =
                                                                             2
                              THEN
                                 pregunta.tpreguntastab (i).tcolumnas (j).tvalor :=
                                                                       vvalor;
                              ELSIF pregunta.tpreguntastab (i).tcolumnas (j).ctipcol =
                                                                             3
                              THEN
                                 BEGIN
                                    pregunta.tpreguntastab (i).tcolumnas (j).fvalor :=
                                                                       vvalor;
                                 EXCEPTION
                                    WHEN OTHERS
                                    THEN
                                       pregunta.tpreguntastab (i).tcolumnas
                                                                          (j).fvalor :=
                                               TO_DATE (vvalor, 'DD/MM/YYYY');
                                 END;
                              ELSIF pregunta.tpreguntastab (i).tcolumnas (j).ctipcol IN
                                                                       (4, 5)
                              THEN
                                 pregunta.tpreguntastab (i).tcolumnas (j).nvalor :=
                                                                       vvalor;
                              END IF;
                           END IF;
                        END LOOP;
                     END IF;
                  END IF;
               END LOOP;
            END IF;

            vpasexec := 8;

            IF NOT trobat
            THEN
               /* Bug 31686/179403 - 15/07/2014 - AMC*/
               IF pregunta IS NULL
               THEN
                  pregunta := ob_iax_preguntas ();
               END IF;

               IF pregunta.tpreguntastab IS NULL
               THEN
                  pregunta.tpreguntastab := t_iax_preguntastab ();
               END IF;

               IF pregunta.tpreguntastab.COUNT = 0
               THEN
                  pregunta.tpreguntastab := t_iax_preguntastab ();
               END IF;

               /* Fi Bug 31686/179403 - 15/07/2014 - AMC*/
               pregunta.tpreguntastab.EXTEND;
               vindex := pregunta.tpreguntastab.LAST;
               pregunta.tpreguntastab (vindex) := ob_iax_preguntastab ();
               pregunta.cpregun := pcpregun;
               /* Bug 31686/179403 - 15/07/2014 - AMC*/
               pregunta.tpreguntastab (vindex).cpregun := pregunta.cpregun;
               pregunta.tpreguntastab (vindex).nmovimi := vnmovimi;
               pregunta.tpreguntastab (vindex).nlinea := vnlinea;
               /*BUG 24657-XVM-30/11/2012*/
               pregunta.nmovima := vnmovimi;
               pregunta.tpreguntastab (vindex).tcolumnas :=
                  pac_iaxpar_productos.f_get_cabecera_preguntab (ptipo,
                                                                 pcpregun,
                                                                 pcgarant,
                                                                 mensajes
                                                                );

               IF     pregunta.tpreguntastab (vindex).tcolumnas IS NOT NULL
                  AND pregunta.tpreguntastab (vindex).tcolumnas.COUNT > 0
               THEN
                  FOR j IN
                     pregunta.tpreguntastab (vindex).tcolumnas.FIRST .. pregunta.tpreguntastab
                                                                          (vindex
                                                                          ).tcolumnas.LAST
                  LOOP
                     IF pregunta.tpreguntastab (vindex).tcolumnas (j).ccolumna =
                                                                     vcolumna
                     THEN
                        /*  IF pregunta.tpreguntastab(vindex).tcolumnas(j).ctipcol IN(1) THEN
                        IF NVL
                        (pac_parametros.f_parempresa_t
                        (pac_md_common.f_get_cxtempresa(),
                        'SISTEMA_NUMERICO_BD'),
                        ',.') = '.,' THEN
                        vvalor_entero := REPLACE(pac_util.splitt(vvalor, 1, ','), '.',
                        '');
                        vvalor_decimal := pac_util.splitt(vvalor, 2, ',');
                        IF vvalor_decimal IS NOT NULL THEN
                        vvalor := vvalor_entero || '.' || vvalor_decimal;
                        ELSE
                        vvalor := vvalor_entero;
                        END IF;
                        ELSE
                        --vvalor := REPLACE(vvalor, '.', '');
                        --vvalor := REPLACE(vvalor, '.', '');
                        NULL;
                        END IF;
                        END IF;*/
                        IF pregunta.tpreguntastab (vindex).tcolumnas (j).ctipcol =
                                                                            1
                        THEN
                           BEGIN
                              pregunta.tpreguntastab (vindex).tcolumnas (j).nvalor :=
                                                                       vvalor;
                           EXCEPTION
                              WHEN OTHERS
                              THEN
                                 pregunta.tpreguntastab (vindex).tcolumnas
                                                                          (j).nvalor :=
                                                           TO_NUMBER (vvalor);
                           END;
                        ELSIF pregunta.tpreguntastab (vindex).tcolumnas (j).ctipcol =
                                                                             2
                        THEN
                           pregunta.tpreguntastab (vindex).tcolumnas (j).tvalor :=
                                                                       vvalor;
                        ELSIF pregunta.tpreguntastab (vindex).tcolumnas (j).ctipcol =
                                                                             3
                        THEN
                           BEGIN
                              pregunta.tpreguntastab (vindex).tcolumnas (j).fvalor :=
                                                                       vvalor;
                           EXCEPTION
                              WHEN OTHERS
                              THEN
                                 pregunta.tpreguntastab (vindex).tcolumnas
                                                                          (j).fvalor :=
                                               TO_DATE (vvalor, 'DD/MM/YYYY');
                           END;
                        ELSIF pregunta.tpreguntastab (vindex).tcolumnas (j).ctipcol IN
                                                                       (4, 5)
                        THEN
                           pregunta.tpreguntastab (vindex).tcolumnas (j).nvalor :=
                                                                       vvalor;
                        END IF;
                     END IF;
                  END LOOP;
               END IF;
            /*   IF pregunta.tpreguntastab(i).tcolumnas(j).ctipcol = 1 THEN
            pregunta.tpreguntastab(i).tcolumnas(j).nvalor := vvalor;
            ELSIF pregunta.tpreguntastab(i).tcolumnas(j).ctipcol = 2 THEN
            pregunta.tpreguntastab(i).tcolumnas(j).tvalor := vvalor;
            ELSIF pregunta.tpreguntastab(i).tcolumnas(j).ctipcol = 3 THEN
            pregunta.tpreguntastab(i).tcolumnas(j).fvalor := vvalor;
            ELSIF pregunta.tpreguntastab(i).tcolumnas(j).ctipcol IN(4, 5) THEN
            pregunta.tpreguntastab(i).tcolumnas(j).nvalor := vvalor;
            END IF;*/
            END IF;
         END LOOP;
      END IF;

      IF preg IS NOT NULL AND preg.COUNT > 0
      THEN
         trobat := FALSE;

         /* Bug 31686/179403 - 15/07/2014 - AMC*/
         FOR i IN preg.FIRST .. preg.LAST
         LOOP
            IF preg (i).cpregun = pcpregun
            THEN
               /*preg(i).tpreguntastab := ptpreguntastab;*/
               preg (i) := pregunta;
               trobat := TRUE;
            END IF;
         END LOOP;

         /* Bug 31686/179403 - 15/07/2014 - AMC*/
         IF trobat = FALSE
         THEN
            preg.EXTEND;
            preg (preg.LAST) := pregunta;
         END IF;
      /* Fi Bug 31686/179403 - 15/07/2014 - AMC*/
      END IF;

      IF ptipo = 'R'
      THEN
         nerr :=
            pac_iobj_prod.f_set_partriespreguntas (poliza.det_poliza,
                                                   pnriesgo,
                                                   preg,
                                                   mensajes
                                                  );
      ELSIF ptipo = 'P'
      THEN
         poliza.det_poliza.preguntas := preg;
      ELSIF ptipo = 'G'
      THEN
         nerr :=
            pac_iobj_prod.f_set_partgarpreguntas (poliza.det_poliza,
                                                  pnriesgo,
                                                  pcgarant,
                                                  preg,
                                                  mensajes
                                                 );
      END IF;

      vpasexec := 12;

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001096);
         vpasexec := 10;
         RAISE e_object_error;
      END IF;

      RETURN nerr;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabarpreguntastab;

   /*************************************************************************
   Grabar informacion de las preguntas
   param in nriesgo  : numero de riesgo
   param in cpregun  : Codigo de la pregunta
   param in crespue  : codigo de la respuesta
   param in trespue   : texto de la respuesta
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_del_preguntastab (
      ptipo      IN       VARCHAR2,
      pnriesgo   IN       NUMBER,
      pcpregun   IN       NUMBER,
      pcgarant   IN       NUMBER,
      pnlinea    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      preg       t_iax_preguntas  := t_iax_preguntas ();
      pregunta   ob_iax_preguntas;
      rie        ob_iax_riesgos;
      npos       NUMBER;
      nerr       NUMBER;
      gar        ob_iax_garantias;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_del_preguntastab';
      vindex     NUMBER;
      vnlinea    NUMBER;
      vcolumna   VARCHAR2 (200);
      vvalor     VARCHAR2 (2000);
      vpartido   VARCHAR2 (400);
      vpos       NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      IF ptipo = 'R'
      THEN
         preg := pac_iobj_prod.f_partriespreguntas (rie, mensajes);
      ELSIF ptipo = 'P'
      THEN
         preg :=
               pac_iobj_prod.f_partpolpreguntas (poliza.det_poliza, mensajes);
      ELSIF ptipo = 'G'
      THEN
         gar := pac_iobj_prod.f_partriesgarantia (rie, pcgarant, mensajes);
         preg := gar.preguntas;
      END IF;

      IF preg IS NOT NULL AND preg.COUNT > 0
      THEN
         FOR i IN preg.FIRST .. preg.LAST
         LOOP
            IF preg (i).cpregun = pcpregun
            THEN
               pregunta := preg (i);
            END IF;
         END LOOP;
      END IF;

      IF     pregunta.tpreguntastab IS NOT NULL
         AND pregunta.tpreguntastab.COUNT > 0
      THEN
         FOR i IN pregunta.tpreguntastab.FIRST .. pregunta.tpreguntastab.LAST
         LOOP
            IF     pregunta.tpreguntastab (i).cpregun = pregunta.cpregun
               AND pregunta.tpreguntastab (i).nlinea =
                              NVL (pnlinea, pregunta.tpreguntastab (i).nlinea)
               AND pregunta.tpreguntastab (i).nmovimi = vnmovimi
            THEN
               pregunta.tpreguntastab.DELETE (i);
            END IF;
         END LOOP;
      END IF;

      IF preg IS NOT NULL AND preg.COUNT > 0
      THEN
         FOR i IN preg.FIRST .. preg.LAST
         LOOP
            IF preg (i).cpregun = pcpregun
            THEN
               /*preg(i).tpreguntastab := ptpreguntastab;*/
               preg (i) := pregunta;
            END IF;
         END LOOP;
      END IF;

      IF ptipo = 'R'
      THEN
         nerr :=
            pac_iobj_prod.f_set_partriespreguntas (poliza.det_poliza,
                                                   pnriesgo,
                                                   preg,
                                                   mensajes
                                                  );
      ELSIF ptipo = 'P'
      THEN
         poliza.det_poliza.preguntas := preg;
      ELSIF ptipo = 'G'
      THEN
         nerr :=
            pac_iobj_prod.f_set_partgarpreguntas (poliza.det_poliza,
                                                  pnriesgo,
                                                  pcgarant,
                                                  preg,
                                                  mensajes
                                                 );
      END IF;

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001096);
         vpasexec := 10;
         RAISE e_object_error;
      END IF;

      RETURN nerr;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_del_preguntastab;

   /*************************************************************************
   Grabar el capital recomendado para cada garantia
   param in nriesgo  : numero de riesgo
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_act_cap_recomend (pnriesgo IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      gar        t_iax_garantias;
      tgr        ob_iax_garantias;
      rie        ob_iax_riesgos;
      npos       NUMBER;
      nerr       NUMBER;
      vmensaje   VARCHAR2 (1000);
      tgarant    VARCHAR2 (1000);
      desmsj     VARCHAR2 (1000);
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.f_act_cap_recomend';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                                       (mensajes,
                                        1,
                                        -456,
                                        'No se ha inicializado correctamente'
                                       );
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                                             (mensajes,
                                              1,
                                              49773,
                                              'No se ha encontrado el riesgo'
                                             );
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      gar := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      IF gar IS NOT NULL
      THEN
         IF gar.COUNT > 0
         THEN
            FOR vgar IN gar.FIRST .. gar.LAST
            LOOP
               IF gar.EXISTS (vgar)
               THEN
                  IF gar (vgar).cobliga = 1
                  THEN
                     nerr :=
                        pac_mdobj_prod.f_act_cap_recomend
                                          (pnriesgo,
                                           gar (vgar),
                                           poliza.det_poliza.sproduc,
                                           poliza.det_poliza.gestion.cactivi,
                                           mensajes
                                          );

                     IF nerr > 0
                     THEN
                        vpasexec := 10;
                        RAISE e_object_error;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      nerr :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                pnriesgo,
                                                gar,
                                                mensajes
                                               );

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                               (mensajes,
                                1,
                                45532,
                                'Error al inserto en el riesgo las garantias'
                               );
         vpasexec := 20;
         RAISE e_object_error;
      END IF;

      IF gar IS NOT NULL
      THEN
         IF gar.COUNT > 0
         THEN
            FOR vgar IN gar.FIRST .. gar.LAST
            LOOP
               IF gar.EXISTS (vgar)
               THEN
                  IF gar (vgar).cobliga = 1
                  THEN
                     nerr :=
                         f_grabarobjetodbgar (gar (vgar), pnriesgo, mensajes);

                     IF nerr > 0
                     THEN
                        vpasexec := 10;
                        RAISE e_object_error;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      COMMIT;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                                             (mensajes,
                                              1,
                                              49773,
                                              'No se ha encontrado el riesgo'
                                             );
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      gar := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;
      rie.p_set_needtarifar (0);
      /* t.7817 ob_iax_riesgos*/
      vpasexec := 25;
      rie.p_calc_primas (vsolicit, vnmovimi, vpmode);
      /* recupera les primes*/
      vpasexec := 26;
      rie.p_get_pregauto (vsolicit, vnmovimi, vpmode);
      /* per recuperar les preguntes automatiques*/
      vpasexec := 27;
      rie.p_get_garaftertar (vsolicit, vnmovimi, vpmode);
      /* per recuperar les noves garantias despres de tarificar*/
      vpasexec := 28;
      rie.p_get_pregautoriegar (vsolicit, vnmovimi, vpmode);
      /* Preguntes autom? tiques*/
      rie.p_set_needtarifar (0);
      /* bug 7535 ACC 170209*/
      vpasexec := 29;
      npos :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         pnriesgo,
                                         rie,
                                         mensajes
                                        );
      vpasexec := 30;
      poliza.det_poliza.p_check_needtarificarpol;
      COMMIT;
      RETURN nerr;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         ROLLBACK;
         RETURN 1;
   END f_act_cap_recomend;

   /*bfp bug 21947 ini*/
   FUNCTION f_grabagestioncomisiongar (
      nriesgo    IN       NUMBER,
      pcgarant   IN       NUMBER,
      pfiniefe   IN       DATE,
      pcmodcom   IN       NUMBER,
      pcomisi    IN       NUMBER,
      pninialt   IN       NUMBER DEFAULT NULL,
      /* Inicio de la altura*/
      pnfinalt   IN       NUMBER DEFAULT NULL,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      risc         ob_iax_riesgos;
      rgaranties   t_iax_garansegcom;
      npos         NUMBER;
      vpasexec     NUMBER (8)                 := 1;
      vparam       VARCHAR2 (1)               := NULL;
      vobject      VARCHAR2 (200)
                            := 'PAC_IAX_PRODUCCION.F_grabagestioncomisiongar';
      v_ninialt    garansegcom.ninialt%TYPE;
      v_nfinalt    garansegcom.nfinalt%TYPE;
      num_err      NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      risc :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF risc IS NULL
      THEN
         risc := ob_iax_riesgos ();
      END IF;

      rgaranties := risc.att_garansegcom;
      npos := -1;

      FOR vgaranties IN rgaranties.FIRST .. rgaranties.LAST
      LOOP
         IF     rgaranties (vgaranties).cgarant = pcgarant
            AND rgaranties (vgaranties).cmodcom = pcmodcom
            AND rgaranties (vgaranties).finiefe = pfiniefe
            AND rgaranties (vgaranties).ninialt = pninialt
            AND rgaranties (vgaranties).nmovimi = vnmovimi
         THEN
            rgaranties (vgaranties).pcomisi := pcomisi;
            /*rgaranties(vgaranties).ninialt := NVL(pninialt, v_ninialt);*/
            rgaranties (vgaranties).nfinalt := NVL (pnfinalt, v_nfinalt);
         END IF;
      END LOOP;

      vpasexec := 7;
      risc.att_garansegcom := rgaranties;
      num_err :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         nriesgo,
                                         risc,
                                         mensajes
                                        );

      IF num_err <> 0
      THEN
         RAISE e_object_error;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabagestioncomisiongar;

   FUNCTION f_leegaransegcom (nriesgo IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN t_iax_garansegcom
   IS
      gsc        t_iax_garansegcom;
      risc       ob_iax_riesgos;
      vpasexec   NUMBER (8)        := 1;
      vparam     VARCHAR2 (1)      := NULL;
      num_err    NUMBER            := 0;
      vobject    VARCHAR2 (200)    := 'PAC_IAX_PRODUCCION.F_leegaransegcom ';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      risc :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF risc IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 3;

      IF     (risc.att_garansegcom IS NOT NULL)
         AND (risc.att_garansegcom.COUNT > 0)
      THEN
         gsc := risc.att_garansegcom;
      ELSE
         /*  risc.att_garansegcom := t_iax_garansegcom();
         gsc := risc.att_garansegcom;*/
         num_err :=
            pac_md_obtenerdatos.f_inicializa ('EST',
                                              poliza.det_poliza.sseguro,
                                              pac_iax_produccion.vnmovimi,
                                              mensajes
                                             );

         IF num_err <> 0
         THEN
            RAISE e_object_error;
         END IF;

         gsc :=
            pac_md_obtenerdatos.f_leergaransegcom (poliza.det_poliza.sseguro,
                                                   nriesgo,
                                                   mensajes
                                                  );
      END IF;

      risc.att_garansegcom := gsc;
      num_err :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         nriesgo,
                                         risc,
                                         mensajes
                                        );

      IF num_err <> 0
      THEN
         RAISE e_object_error;
      END IF;

      RETURN gsc;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leegaransegcom;

   /*bfp bug 21947 fi*/
   /*bfp bug 21947 fi*/
   /*BUG 21657--ETM--04/06/2012 --*/
   FUNCTION f_leeinquiaval (pctipfig IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN t_iax_inquiaval
   IS
      vinquiaval    t_iax_inquiaval;
      vinquiaval2   t_iax_inquiaval;
      vpasexec      NUMBER (8)      := 1;
      vparam        VARCHAR2 (100)  := 'pctipfig=' || pctipfig;
      vobject       VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_leeinquiaval';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      vinquiaval :=
                pac_iobj_prod.f_partpolinquiaval (poliza.det_poliza, mensajes);
      vpasexec := 3;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      IF vinquiaval IS NOT NULL
      THEN
         IF vinquiaval.COUNT > 0
         THEN
            vinquiaval2 := t_iax_inquiaval ();

            FOR vinqui IN vinquiaval.FIRST .. vinquiaval.LAST
            LOOP
               IF vinquiaval.EXISTS (vinqui)
               THEN
                  IF vinquiaval (vinqui).ctipfig = pctipfig
                  THEN
                     vinquiaval2.EXTEND;
                     vinquiaval2 (vinquiaval2.LAST) := vinquiaval (vinqui);
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      RETURN vinquiaval2;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leeinquiaval;

   FUNCTION f_existeinquiaval (
      psperson   IN       NUMBER,
      pctipfig   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vobject      VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.f_existeinquiaval';
      vpasexec     NUMBER (8)      := 1;
      vparam       VARCHAR2 (100)
                   := 'p_sperson= ' || psperson || ' ,pctipfig= ' || pctipfig;
      vinquiaval   t_iax_inquiaval;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      vinquiaval :=
                pac_iobj_prod.f_partpolinquiaval (poliza.det_poliza, mensajes);

      IF vinquiaval IS NULL
      THEN
         RETURN 0;
      ELSE
         IF vinquiaval.COUNT = 0
         THEN
            RETURN 0;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            RETURN 0;
         END IF;
      END IF;

      vpasexec := 3;

      FOR vinqui IN vinquiaval.FIRST .. vinquiaval.LAST
      LOOP
         IF vinquiaval.EXISTS (vinqui)
         THEN
            IF     vinquiaval (vinqui).sperson = psperson
               AND vinquiaval (vinqui).ctipfig = pctipfig
            THEN
               RETURN 1;
            END IF;
         END IF;
      END LOOP;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 0;
   END f_existeinquiaval;

   FUNCTION f_insertinquiaval (
      psseguro        IN       NUMBER,
      psperson        IN       NUMBER,
      pnmovimi        IN       NUMBER,
      pnriesgo        IN       NUMBER,
      pctipfig        IN       NUMBER,
      pcdomici        IN       NUMBER,
      piingrmen       IN       NUMBER,
      piingranual     IN       NUMBER,
      pffecini        IN       DATE,
      pffecfin        IN       DATE,
      pctipcontrato   IN       NUMBER,
      pcsitlaboral    IN       NUMBER,
      pcsupfiltro     IN       NUMBER,
      mensajes        OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      num_err     NUMBER           := 0;
      vobject     VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.f_insertinquiaval';
      vpasexec    NUMBER           := 0;
      dtpoliza    ob_iax_detpoliza;
      pinquival   t_iax_inquiaval;
      vparam      VARCHAR2 (1000)
         :=    'psseguro= '
            || psseguro
            || ' ,psperson= '
            || psperson
            || ' ,pnmovimi= '
            || pnmovimi
            || ' ,pnriesgo= '
            || pnriesgo
            || ' ,pctipfig= '
            || pctipfig
            || ' ,pcdomici = '
            || pcdomici
            || ' ,piingrmen= '
            || piingrmen
            || ' ,piingranual= '
            || piingranual
            || ' ,pffecini= '
            || pffecini
            || ' ,pffecfin= '
            || pffecfin
            || ' ,pctipcontrato= '
            || pctipcontrato
            || ' ,pcsitlaboral= '
            || pcsitlaboral
            || ' ,pcsupfiltro= '
            || pcsupfiltro;
   BEGIN
      vpasexec := 1;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      ELSE
         dtpoliza := poliza.det_poliza;
      END IF;

      vpasexec := 2;

      IF dtpoliza.inquiaval IS NULL
      THEN
         pinquival := t_iax_inquiaval ();
      ELSE
         pinquival := dtpoliza.inquiaval;
      END IF;

      vpasexec := 3;

      IF f_existeinquiaval (psperson, pctipfig, mensajes) = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903794);
         RETURN 1;
      END IF;

      vpasexec := 4;
      pinquival.EXTEND;
      pinquival (pinquival.LAST) := ob_iax_inquiaval ();
      pinquival (pinquival.LAST).sseguro := psseguro;
      pinquival (pinquival.LAST).sperson := psperson;
      pinquival (pinquival.LAST).nmovimi := pnmovimi;
      pinquival (pinquival.LAST).nriesgo := pnriesgo;
      pinquival (pinquival.LAST).ctipfig := pctipfig;
      pinquival (pinquival.LAST).cdomici := pcdomici;
      pinquival (pinquival.LAST).iingrmen := piingrmen;
      pinquival (pinquival.LAST).iingranual := piingranual;
      pinquival (pinquival.LAST).ffecini := pffecini;
      pinquival (pinquival.LAST).ffecfin := pffecfin;
      pinquival (pinquival.LAST).ctipcontrato := pctipcontrato;
      pinquival (pinquival.LAST).csitlaboral := pcsitlaboral;
      pinquival (pinquival.LAST).csupfiltro := NVL (pcsupfiltro, 0);
      vpasexec := 5;
      num_err :=
         pac_md_persona.f_get_persona_agente (psperson,
                                              poliza.det_poliza.cagente,
                                              vpmode,
                                              pinquival (pinquival.LAST),
                                              mensajes
                                             );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      END IF;

      IF pcdomici IS NOT NULL
      THEN
         IF pinquival (pinquival.LAST).direcciones IS NULL
         THEN
            pinquival (pinquival.LAST).direcciones := t_iax_direcciones ();
         END IF;

         vpasexec := 19;

         IF pinquival (pinquival.LAST).direcciones.COUNT = 0
         THEN
            pinquival (pinquival.LAST).direcciones.EXTEND;
            pinquival (pinquival.LAST).direcciones
                                  (pinquival (pinquival.LAST).direcciones.LAST
                                  ) := ob_iax_direcciones ();
         END IF;

         vpasexec := 20;
         pinquival (pinquival.LAST).direcciones
                                   (pinquival (pinquival.LAST).direcciones.LAST
                                   ).cdomici := pcdomici;
         pac_md_listvalores.p_ompledadesdireccions
            (psperson,
             pcdomici,
             vpmode,
             pinquival (pinquival.LAST).direcciones
                                   (pinquival (pinquival.LAST).direcciones.LAST
                                   ),
             mensajes
            );
      END IF;

      poliza.det_poliza.inquiaval := pinquival;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_insertinquiaval;

   FUNCTION f_eliminainquiaval (
      psperson   IN       NUMBER,
      pctipfig   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vinquival   t_iax_inquiaval;
      ndel        NUMBER          := 0;
      vpasexec    NUMBER (8)      := 1;
      vparam      VARCHAR2 (200)
                     := 'psperson= ' || psperson || ',pctipfig= ' || pctipfig;
      vobject     VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_EliminaInquiaval';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      vinquival :=
                pac_iobj_prod.f_partpolinquiaval (poliza.det_poliza, mensajes);

      IF vinquival IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903764);
         vpasexec := 3;
         RAISE e_object_error;
      ELSE
         IF vinquival.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903764);
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      FOR vinq IN vinquival.FIRST .. vinquival.LAST
      LOOP
         IF vinquival.EXISTS (vinq)
         THEN
            IF     vinquival (vinq).sperson = psperson
               AND vinquival (vinq).ctipfig = pctipfig
            THEN
               vinquival.DELETE (vinq);
               poliza.det_poliza.inquiaval := vinquival;
               RETURN 0;
            END IF;
         END IF;
      END LOOP;

      vpasexec := 7;
      pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 22222);
      RETURN 1;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_eliminainquiaval;

   FUNCTION f_grabarinquiaval (
      psseguro        IN       NUMBER,
      psperson        IN       NUMBER,
      pnmovimi        IN       NUMBER,
      pnriesgo        IN       NUMBER,
      pctipfig        IN       NUMBER,
      pcdomici        IN       NUMBER,
      piingrmen       IN       NUMBER,
      piingranual     IN       NUMBER,
      pffecini        IN       DATE,
      pffecfin        IN       DATE,
      pctipcontrato   IN       NUMBER,
      pcsitlaboral    IN       NUMBER,
      pcsupfiltro     IN       NUMBER,
      mensajes        OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vinquival     t_iax_inquiaval;
      nerr          NUMBER;
      vpasexec      NUMBER (8)      := 1;
      vobject       VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.f_grabarinquiaval';
      vfound        BOOLEAN         := FALSE;
      vefectsuple   DATE            := NULL;
      vparam        VARCHAR2 (1000)
         :=    'psseguro= '
            || psseguro
            || ' ,psperson= '
            || psperson
            || ' ,pnmovimi= '
            || pnmovimi
            || ' ,pnriesgo= '
            || pnriesgo
            || ' ,pctipfig= '
            || pctipfig
            || ' ,pcdomici = '
            || pcdomici
            || ' ,piingrmen= '
            || piingrmen
            || ' ,piingranual= '
            || piingranual
            || ' ,pffecini= '
            || pffecini
            || ' ,pffecfin= '
            || pffecfin
            || ' ,pctipcontrato= '
            || pctipcontrato
            || ' ,pcsitlaboral= '
            || pcsitlaboral
            || ' ,pcsupfiltro= '
            || pcsupfiltro;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      vinquival :=
                pac_iobj_prod.f_partpolinquiaval (poliza.det_poliza, mensajes);
      vpasexec := 3;

      IF vinquival IS NOT NULL
      THEN
         IF vinquival.COUNT > 0
         THEN
            vpasexec := 4;

            FOR vinq IN vinquival.FIRST .. vinquival.LAST
            LOOP
               vpasexec := 5;

               IF vinquival.EXISTS (vinq)
               THEN
                  vpasexec := 6;

                  IF     vinquival (vinq).sperson = psperson
                     AND vinquival (vinq).ctipfig = pctipfig
                  THEN
                     IF issuplem
                     THEN
                        nerr :=
                           pac_md_suplementos.f_get_fefecto_supl
                                                                (vsolicit,
                                                                 vnmovimi,
                                                                 vefectsuple,
                                                                 mensajes
                                                                );

                        IF (nerr <> 0)
                        THEN
                           pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                                 1,
                                                                 9001094
                                                                );
                           RAISE e_object_error;
                        END IF;
                     END IF;

                     vpasexec := 7;
                     vfound := TRUE;
                     vinquival (vinq).sseguro := psseguro;
                     /* vinquival(vinq).sperson := psperson;*/
                     vinquival (vinq).nmovimi :=
                                     NVL (pnmovimi, poliza.det_poliza.nmovimi);
                     vinquival (vinq).nriesgo := NVL (pnriesgo, 1);
                     /*  vinquival(vinq).ctipfig := pctipfig;*/
                     vinquival (vinq).cdomici := pcdomici;
                     vinquival (vinq).iingrmen := piingrmen;
                     vinquival (vinq).iingranual := piingranual;
                     vinquival (vinq).ffecini :=
                          NVL (vefectsuple, poliza.det_poliza.gestion.fefecto);
                     vinquival (vinq).ffecfin := pffecfin;
                     vinquival (vinq).ctipcontrato := pctipcontrato;
                     vinquival (vinq).csitlaboral := pcsitlaboral;
                     vinquival (vinq).csupfiltro := NVL (pcsupfiltro, 0);
                     vpasexec := 8;

                     IF pcdomici IS NOT NULL
                     THEN
                        IF vinquival (vinq).direcciones IS NULL
                        THEN
                           vinquival (vinq).direcciones :=
                                                         t_iax_direcciones
                                                                          ();
                        END IF;

                        vpasexec := 19;

                        IF vinquival (vinq).direcciones.COUNT = 0
                        THEN
                           vinquival (vinq).direcciones.EXTEND;
                           vinquival (vinq).direcciones
                                            (vinquival (vinq).direcciones.LAST
                                            ) := ob_iax_direcciones ();
                        END IF;

                        vpasexec := 20;
                        vinquival (vinq).direcciones
                                             (vinquival (vinq).direcciones.LAST
                                             ).cdomici := pcdomici;
                        pac_md_listvalores.p_ompledadesdireccions
                           (psperson,
                            pcdomici,
                            vpmode,
                            vinquival (vinq).direcciones
                                             (vinquival (vinq).direcciones.LAST
                                             ),
                            mensajes
                           );
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      IF vfound = FALSE
      THEN
         IF issuplem
         THEN
            nerr :=
               pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                      vnmovimi,
                                                      vefectsuple,
                                                      mensajes
                                                     );

            IF (nerr <> 0)
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001094);
               RAISE e_object_error;
            END IF;
         END IF;

         vpasexec := 9;

         IF pctipfig IS NOT NULL
         THEN
            nerr :=
               f_insertinquiaval (psseguro,
                                  psperson,
                                  NVL (pnmovimi, poliza.det_poliza.nmovimi),
                                  NVL (pnriesgo, 1),
                                  pctipfig,
                                  pcdomici,
                                  piingrmen,
                                  piingranual,
                                  NVL (vefectsuple,
                                       poliza.det_poliza.gestion.fefecto
                                      ),
                                  pffecfin,
                                  pctipcontrato,
                                  pcsitlaboral,
                                  NVL (pcsupfiltro, 0),
                                  mensajes
                                 );
            vpasexec := 10;
         END IF;

         IF nerr = 1
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 22222);
            RAISE e_object_error;
         END IF;

         vpasexec := 11;
         vinquival :=
                pac_iobj_prod.f_partpolinquiaval (poliza.det_poliza, mensajes);
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 12;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 13;
      poliza.det_poliza.inquiaval := vinquival;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabarinquiaval;

   FUNCTION f_get_inquiaval (
      psperson   IN       NUMBER,
      pctipfig   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN ob_iax_inquiaval
   IS
      vinquival   t_iax_inquiaval;
      vpasexec    NUMBER (8)      := 1;
      vparam      VARCHAR2 (100)
                    := 'psperson= ' || psperson || ' ,pctipfig= ' || pctipfig;
      vobject     VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_Get_inquiaval';
      num_err     NUMBER;
      v_cdomici   NUMBER;
   BEGIN
      vpasexec := 1;
      vinquival := f_leeinquiaval (pctipfig, mensajes);
      vpasexec := 2;

      IF vinquival IS NOT NULL
      THEN
         IF vinquival.COUNT > 0
         THEN
            FOR vinq IN vinquival.FIRST .. vinquival.LAST
            LOOP
               vpasexec := 3;

               IF vinquival.EXISTS (vinq)
               THEN
                  vpasexec := 4;

                  IF     vinquival (vinq).sperson = psperson
                     AND vinquival (vinq).ctipfig = pctipfig
                  THEN
                     num_err :=
                        pac_md_persona.f_get_persona_agente
                                                  (vinquival (vinq).sperson,
                                                   poliza.det_poliza.cagente,
                                                   vpmode,
                                                   vinquival (vinq),
                                                   mensajes
                                                  );

                     IF mensajes IS NOT NULL
                     THEN
                        IF mensajes.COUNT > 0
                        THEN
                           vpasexec := 6;
                           RAISE e_object_error;
                        END IF;
                     END IF;

                     num_err :=
                        pac_seguros.f_get_cdomici_tom
                                                   (poliza.det_poliza.sseguro,
                                                    vinquival (vinq).sperson,
                                                    vpmode,
                                                    v_cdomici
                                                   );

                     IF num_err <> 0
                     THEN
                        pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                              1,
                                                              num_err
                                                             );
                        RAISE e_object_error;
                     END IF;

                     /* Si v_cdomici es NULL, es que estamos en contratacion*/
                     IF v_cdomici IS NOT NULL
                     THEN
                        vpasexec := 12;
                        vinquival (vinq).direcciones.EXTEND;
                        num_err :=
                           pac_md_persona.f_get_direccion
                              (vinquival (vinq).sperson,
                               v_cdomici,
                               vinquival (vinq).direcciones
                                             (vinquival (vinq).direcciones.LAST
                                             ),
                               mensajes,
                               vpmode
                              );

                        IF num_err <> 0
                        THEN
                           pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                                 1,
                                                                 num_err
                                                                );
                           RAISE e_object_error;
                        END IF;
                     END IF;

                     vpasexec := 13;
                     num_err :=
                        pac_iobj_prod.f_set_partpolinquiaval
                                                           (poliza.det_poliza,
                                                            vinquival,
                                                            mensajes
                                                           );

                     IF num_err <> 0
                     THEN
                        pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                              1,
                                                              num_err
                                                             );
                        RAISE e_object_error;
                     END IF;

                     RETURN vinquival (vinq);
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      RETURN NULL;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_inquiaval;

   /*FIN --BUG 21657--ETM--04/06/2012*/
   /* 18/07/2012 - MDS - 0022824: LCOL_T010-Duplicado de propuestas*/
   FUNCTION f_dup_seguro (
      psseguroorig     IN       NUMBER,
      pfefecto         IN       DATE,
      pobservaciones   IN       VARCHAR2,
      pssegurodest     OUT      NUMBER,
      pnsolicidest     OUT      NUMBER,
      pnpolizadest     OUT      NUMBER,
      pncertifdest     OUT      NUMBER,
      ptipotablas      IN       NUMBER DEFAULT NULL,
      pcagente         IN       NUMBER DEFAULT NULL,                  --RAMIRO
      mensajes         OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (500)
         :=    'psseguroorig: '
            || psseguroorig
            || ' pfefecto: '
            || pfefecto
            || ' pobservaciones: '
            || pobservaciones
            || ' ptipotablas: '
            || ptipotablas;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.f_dup_seguro';
      nerror     NUMBER;
      vmensa     VARCHAR2 (2000);
   BEGIN
      nerror :=
         pac_md_produccion.f_dup_seguro (psseguroorig,
                                         pfefecto,
                                         pobservaciones,
                                         pssegurodest,
                                         pnsolicidest,
                                         pnpolizadest,
                                         pncertifdest,
                                         ptipotablas,
                                         pcagente
                                                 --ramiro
         ,
                                         mensajes
                                        );

      IF nerror = 1
      THEN
         /* error*/
         RAISE e_object_error;
      END IF;

      IF nerror = 0
      THEN
         /* retorna como mensaje la nueva solicitud creada*/
         vmensa :=
            pac_iobj_mensajes.f_get_descmensaje
                                               (9903995,
                                                pac_md_common.f_get_cxtidioma
                                               );
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                               2,
                                               0,
                                               vmensa || pnsolicidest
                                              );
      END IF;

      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         ROLLBACK;
         RETURN 1;
   END f_dup_seguro;

   FUNCTION f_set_frenova (
      pfefecto   IN       DATE,
      pcduraci   IN       NUMBER,
      pfrenova   OUT      DATE,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec     NUMBER (8)     := 1;
      vparam       VARCHAR2 (200)
                             := 'pfecha=' || TO_CHAR (pfefecto, 'dd/mm/yyyy');
      vobject      VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_SET_FRENOVA';
      num          NUMBER         := 0;
      v_sproduc    NUMBER;
      v_result     NUMBER;
      v_hfrenova   NUMBER;
      vnumerr      NUMBER;
      v_vigencia   NUMBER;
   BEGIN
      v_sproduc := poliza.det_poliza.sproduc;

      IF pcduraci = 6
      THEN
         IF     pac_mdpar_productos.f_get_parproducto ('ADMITE_CERTIFICADOS',
                                                       v_sproduc
                                                      ) = 1
            AND NOT pac_iax_produccion.isaltacol
         THEN
            vnumerr :=
               pac_seguros.f_get_tipo_vigencia (NULL,
                                                poliza.det_poliza.npoliza,
                                                'SEG',
                                                v_vigencia
                                               );

            IF vnumerr <> 0
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, vnumerr);
               RETURN 1;
            END IF;

            IF v_vigencia = 1
            THEN
               /* Vigencia cerrada*/
               vnumerr :=
                  pac_productos.f_get_herencia_col (v_sproduc, 6, v_hfrenova);

               IF NVL (v_hfrenova, 0) = 1 AND vnumerr = 0
               THEN
                  vnumerr :=
                     pac_productos.f_get_frenova_col
                                           (poliza.det_poliza.npoliza,
                                            poliza.det_poliza.gestion.frenova
                                           );

                  IF vnumerr <> 0
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                           1,
                                                           vnumerr
                                                          );
                     RETURN 1;
                  END IF;
               ELSE
                  poliza.det_poliza.gestion.frenova :=
                     ADD_MONTHS
                        (pfefecto,
                         NVL
                            (pac_parametros.f_parproducto_n
                                                        (v_sproduc,
                                                         'PERIODO_POR_DEFECTO'
                                                        ),
                             12
                            )
                        );
               END IF;
            ELSE
               poliza.det_poliza.gestion.frenova :=
                  ADD_MONTHS
                     (pfefecto,
                      NVL
                         (pac_parametros.f_parproducto_n
                                                        (v_sproduc,
                                                         'PERIODO_POR_DEFECTO'
                                                        ),
                          12
                         )
                     );
            END IF;
         ELSE
            poliza.det_poliza.gestion.frenova :=
               ADD_MONTHS
                  (pfefecto,
                   NVL (pac_parametros.f_parproducto_n (v_sproduc,
                                                        'PERIODO_POR_DEFECTO'
                                                       ),
                        12
                       )
                  );
         END IF;
      ELSE
         vnumerr :=
            pac_seguros.f_get_tipo_vigencia (NULL,
                                             poliza.det_poliza.npoliza,
                                             'SEG',
                                             v_vigencia
                                            );

         IF vnumerr <> 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, vnumerr);
            RETURN 1;
         END IF;

         IF v_vigencia = 1
         THEN
            /* Vigencia cerrada*/
            vnumerr :=
                  pac_productos.f_get_herencia_col (v_sproduc, 6, v_hfrenova);

            IF NVL (v_hfrenova, 0) = 1 AND vnumerr = 0
            THEN
               vnumerr :=
                  pac_productos.f_get_frenova_col
                                           (poliza.det_poliza.npoliza,
                                            poliza.det_poliza.gestion.frenova
                                           );

               IF vnumerr <> 0
               THEN
                  pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, vnumerr);
                  RETURN 1;
               END IF;
            ELSE
               poliza.det_poliza.gestion.frenova := NULL;
            END IF;
         ELSE
            poliza.det_poliza.gestion.frenova := NULL;
         END IF;
      END IF;

      /* BUG 26820 - 28/04/2013 - FAL*/
      IF     NVL (pac_parametros.f_parproducto_n (v_sproduc, 'FRENOVA-1'), 0) =
                                                                             1
         AND NVL (pac_parametros.f_parproducto_n (v_sproduc,
                                                  'PERIODO_POR_DEFECTO'
                                                 ),
                  0
                 ) <> 0
      THEN
         poliza.det_poliza.gestion.frenova :=
                                        poliza.det_poliza.gestion.frenova - 1;
      END IF;

      /* FI BUG 26820*/
      pfrenova := poliza.det_poliza.gestion.frenova;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_frenova;

   /* Bug 0023183 - DCG - 14/08/2012 - LCOL_T020-COA-Circuit d'alta de propostes amb coasseguran*/
   FUNCTION f_grabacuadrocoaseguro (
      ptipocoa    IN       NUMBER,
      /*JRH nuevo. El tipo de coaseguro.*/
      pctlocal    IN       NUMBER,
      pccompan    IN       NUMBER,
      polizaori   IN       VARCHAR2,
      pendoso     IN       NUMBER DEFAULT NULL,             --RAMIRO COASEGURO
      mensajes    OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (500)
         :=    'pctlocal: '
            || pctlocal
            || ' pccompan: '
            || pccompan
            || ' polizaori: '
            || polizaori;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_grabaCuadroCoaseguro';
      nerror     NUMBER;
      vcoa       ob_iax_coacuadro;
   BEGIN
      /*No haria falta pac_md_produccion*/
      /*      nerror := pac_md_produccion.f_grabacuadrocoaseguro(pctlocal, pccompan, polizaori,*/
      /*                                                         mensajes);*/
      /*      IF nerror = 1 THEN*/
      /*         -- error*/
      /*         RAISE e_object_error;*/
      /*      END IF;*/
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      vcoa := pac_iobj_prod.f_partcoacuadro (poliza.det_poliza, mensajes);

      /*> obtener e cuadro*/
      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      IF vcoa IS NULL
      THEN
         vcoa := ob_iax_coacuadro ();
      END IF;

      /*JRH Borrar objeto si no hay coaseguro*/
      vcoa.ncuacoa := vnmovimi;
      vcoa.ploccoa := pctlocal;
      vcoa.finicoa := f_sysdate;
      /*JRH IMP*/
      vcoa.fcuacoa := f_sysdate;
      /*JRH IMP*/
      vcoa.ffincoa := NULL;
      vcoa.ccompan := pccompan;
      vcoa.tcompan := ff_descompania (pccompan);
      /*JRH*/
      vcoa.npoliza := polizaori;
      vcoa.endoso := pendoso;                               --RAMIRO COASEGURO

      IF ptipocoa = 0 OR ptipocoa = 8
      THEN
         vcoa.coacedido := NULL;
      END IF;

      poliza.det_poliza.ctipcoa := ptipocoa;
      poliza.det_poliza.ncuacoa := vcoa.ncuacoa;

      IF ptipocoa IS NOT NULL
      THEN
         poliza.det_poliza.ttipcoa :=
            ff_desvalorfijo (800109,
                             pac_md_common.f_get_cxtidioma (),
                             ptipocoa
                            );
      END IF;

      /*BUG: 27048/148299 - INICIO - DCT - 05/07/2013*/
      IF NVL (ptipocoa, 0) = 0
      THEN
         poliza.det_poliza.coacuadro := NULL;
         poliza.det_poliza.ncuacoa := NULL;
      ELSE
         poliza.det_poliza.coacuadro := vcoa;
      END IF;

      /*BUG: 27048/148299 - FIN - DCT - 05/07/2013*/
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         ROLLBACK;
         RETURN 1;
   END f_grabacuadrocoaseguro;

   FUNCTION f_grabadetcuadrocoaseguro (
      pccompan   IN       NUMBER,
      pcescoa    IN       NUMBER,
      pcomcoa    IN       NUMBER,
      pcomcon    IN       NUMBER,
      pcomgas    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec     NUMBER (8)       := 1;
      vparam       VARCHAR2 (500);
      vobject      VARCHAR2 (200)
                            := 'PAC_IAX_PRODUCCION.f_grabaDetCuadroCoaseguro';
      nerror       NUMBER;
      vcoa         ob_iax_coacuadro;
      vcoacedido   t_iax_coacedido;
      npos         NUMBER;
      vploccoa     NUMBER;
      vtotal       NUMBER;
   BEGIN
      /* No hara falta pac_md_para esto*/
      /*      nerror := pac_md_produccion.f_grabadetcuadrocoaseguro(ccompan, pcescoa, pcomcoa,*/
      /*                                                            pcomcon, pcomgas, pcesion,*/
      /*                                                            mensajes);*/
      /*      IF nerror = 1 THEN*/
      /*         -- error*/
      /*         RAISE e_object_error;*/
      /*      END IF;*/
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      vcoa := pac_iobj_prod.f_partcoacuadro (poliza.det_poliza, mensajes);

      /*> obtener e cuadro*/
      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      IF vcoa IS NOT NULL
      THEN
         vploccoa := vcoa.ploccoa;
      END IF;

      vpasexec := 4;
      vcoacedido := vcoa.coacedido;

      /*lalista*/
      IF vcoacedido IS NULL
      THEN
         vcoacedido := t_iax_coacedido ();
      END IF;

      npos := -1;

      /*Buixa*/
      IF vcoacedido IS NOT NULL
      THEN
         IF vcoacedido.COUNT > 0
         THEN
            FOR vgst IN vcoacedido.FIRST .. vcoacedido.LAST
            LOOP
               /* IF vcoacedido.EXISTS (vgst)
               THEN
               IF vcoacedido(vgst).ccompan = 1
               --JRH Si l encontramos por la PK lo modificamos con los paametro
               -- Bug 21629 - FAL - 18/04/2012
               --AND gst(vgst).ninialt = pninialt
               --AND gst(vgst).nfinalt = pnfinalt
               THEN
               -- Fi Bug 21629
               npos := vgst;
               END IF;
               END IF;*/
               IF vcoacedido (vgst).ccompan = pccompan
               THEN
                  vcoacedido (vgst).ccompan := pccompan;
                  vcoacedido (vgst).tcompan := ff_descompania (pccompan);
                  vcoacedido (vgst).pcomcoa := pcomcoa;
                  vcoacedido (vgst).pcomgas := pcomgas;
                  vcoacedido (vgst).pcomcon := pcomcon;
                  vcoacedido (vgst).pcescoa := pcescoa;
                  npos := vgst;

                  IF vploccoa IS NOT NULL
                  THEN
                     vtotal := 100 - vploccoa;

                     /* BUG 0026341 - 12/03/2013 - JMF: divisor cero*/
                     IF vtotal = 0
                     THEN
                        vcoacedido (vgst).pcesion := 0;
                     ELSE
                        vcoacedido (vgst).pcesion := (pcescoa * 100) / vtotal;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      IF npos = -1
      THEN
         vcoacedido.EXTEND;
         vcoacedido (vcoacedido.LAST) := ob_iax_coacedido ();
         /*npos := vcoacedido.LAST;*/
         vcoacedido (vcoacedido.LAST).ccompan := pccompan;
         vcoacedido (vcoacedido.LAST).tcompan := ff_descompania (pccompan);
         vcoacedido (vcoacedido.LAST).pcomcoa := pcomcoa;
         vcoacedido (vcoacedido.LAST).pcomgas := pcomgas;
         vcoacedido (vcoacedido.LAST).pcomcon := pcomcon;
         vcoacedido (vcoacedido.LAST).pcescoa := pcescoa;

         IF vploccoa IS NOT NULL
         THEN
            vtotal := 100 - vploccoa;

            /* BUG 0026341 - 12/03/2013 - JMF: divisor cero*/
            IF vtotal = 0
            THEN
               vcoacedido (vcoacedido.LAST).pcesion := 0;
            ELSE
               vcoacedido (vcoacedido.LAST).pcesion :=
                                                     (pcescoa * 100) / vtotal;
            END IF;
         END IF;
      END IF;

      vpasexec := 7;
      /*vcoacedido(npos).pcomisi := pcomisi;--> JRH Sin no lo damos de alta*/
      /*vcoacedido(npos).cmodcom := pcmodcom;*/
      /*   actualizamos el coacedido de l coacuadro de la pliza con el anterior--jrh*/
      vcoa.coacedido := vcoacedido;
      poliza.det_poliza.coacuadro := vcoa;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabadetcuadrocoaseguro;

   FUNCTION f_borrardetcuadrocoaseguro (
      pccompan   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec     NUMBER (8)       := 1;
      vparam       VARCHAR2 (500);
      vobject      VARCHAR2 (200)
                            := 'PAC_IAX_PRODUCCION.f_grabaDetCuadroCoaseguro';
      nerror       NUMBER;
      vcoa         ob_iax_coacuadro;
      vcoacedido   t_iax_coacedido;
      npos         NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      vcoa := pac_iobj_prod.f_partcoacuadro (poliza.det_poliza, mensajes);

      /*> obtener e cuadro*/
      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;
      vcoacedido := vcoa.coacedido;

      /*lalista*/
      IF vcoacedido IS NULL
      THEN
         vcoacedido := t_iax_coacedido ();
      END IF;

      npos := -1;

      IF vcoacedido IS NOT NULL
      THEN
         IF vcoacedido.COUNT > 0
         THEN
            FOR vgst IN vcoacedido.FIRST .. vcoacedido.LAST
            LOOP
               IF vcoacedido (vgst).ccompan = pccompan
               THEN
                  vcoacedido.DELETE (vgst);
               END IF;
            END LOOP;
         END IF;
      END IF;

      vpasexec := 7;
      vcoa.coacedido := vcoacedido;
      poliza.det_poliza.coacuadro := vcoa;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_borrardetcuadrocoaseguro;

   /*************************************************************************
   Lee los datos del cuadro del coaseguro
   param out mensajes : mensajes de error
   return             : objeto coacuadro
   *************************************************************************/
   FUNCTION f_leedetcoaseguro (mensajes OUT t_iax_mensajes)
      RETURN ob_iax_coacuadro
   IS
      tcoa       ob_iax_coacuadro;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_leedetcoaseguro';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      tcoa := pac_iobj_prod.f_partcoacuadro (poliza.det_poliza, mensajes);
      vpasexec := 3;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN tcoa;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leedetcoaseguro;

   /* Fin Bug 0023183*/
   /* Bug 0022701 - 03/09/2012 - JMF*/
   FUNCTION f_leeretorno (mensajes OUT t_iax_mensajes)
      RETURN t_iax_retorno
   IS
      retrn      t_iax_retorno;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_LeeRetorno';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      retrn := pac_iobj_prod.f_partpolretorno (poliza.det_poliza, mensajes);
      vpasexec := 3;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN retrn;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leeretorno;

   /* Bug 0022701 - 03/09/2012 - JMF*/
   FUNCTION f_existbenefretn (
      psperson   IN       NUMBER,
      mensajes   IN OUT   t_iax_mensajes
   )
      RETURN NUMBER
   IS
      retrn      t_iax_retorno;
      nerr       NUMBER         := 0;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (200) := 'psperson=' || psperson;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_ExistBenefRetn';
   BEGIN
      vpasexec := 10;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 20;
      retrn := pac_iobj_prod.f_partpolretorno (poliza.det_poliza, mensajes);

      IF retrn IS NULL
      THEN
         RETURN 0;
      ELSE
         IF retrn.COUNT = 0
         THEN
            RETURN 0;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            RETURN 0;
         END IF;
      END IF;

      vpasexec := 40;

      FOR vretrn IN retrn.FIRST .. retrn.LAST
      LOOP
         vpasexec := 50;

         IF retrn.EXISTS (vretrn)
         THEN
            vpasexec := 60;

            IF retrn (vretrn).sperson = psperson
            THEN
               RETURN 1;
            END IF;
         END IF;
      END LOOP;

      vpasexec := 70;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 0;
   END f_existbenefretn;

   /* Bug 0022701 - 03/09/2012 - JMF*/
   FUNCTION f_get_direc_retorno (
      psperson   IN       NUMBER,
      pcagente   IN       NUMBER,
      ptablas    IN       VARCHAR2,
      retrn      IN OUT   ob_iax_retorno,
      mensajes   IN OUT   t_iax_mensajes
   )
      RETURN NUMBER
   IS
      /**/
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (200)
         :=    'psperson='
            || psperson
            || ', pcagente='
            || pcagente
            || ', ptablas='
            || ptablas;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_Direc_Retorno';
      nerr       NUMBER;
      msj        t_iax_mensajes;
   BEGIN
      vpasexec := 1;
      nerr :=
         pac_md_persona.f_get_persona_agente (psperson,
                                              pcagente,
                                              ptablas,
                                              retrn,
                                              mensajes
                                             );
      vpasexec := 2;

      IF nerr <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000503);
         RAISE e_object_error;
      END IF;

      vpasexec := 3;

      IF retrn.direcciones IS NULL
      THEN
         retrn.direcciones := t_iax_direcciones ();
      END IF;

      vpasexec := 4;

      IF retrn.direcciones.COUNT = 0
      THEN
         retrn.direcciones.EXTEND;
         retrn.direcciones (retrn.direcciones.LAST) := ob_iax_direcciones ();
      END IF;

      vpasexec := 5;
      retrn.direcciones (retrn.direcciones.LAST).cdomici := 1;
      /* a funcio pac_md_listvalores.p_ompledadesdireccions*/
      pac_md_listvalores.p_ompledadesdireccions
                                   (psperson,
                                    1,
                                    ptablas,
                                    retrn.direcciones (retrn.direcciones.LAST),
                                    msj
                                   );

      IF msj IS NOT NULL
      THEN
         IF msj.COUNT > 0
         THEN
            vpasexec := 6;
            pac_iobj_mensajes.p_mergemensaje (mensajes, msj);
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000832);
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_get_direc_retorno;

   /* Bug 0022701 - 03/09/2012 - JMF*/
   /* BUG 0023965 - 15/10/2012 - JMF*/
   FUNCTION f_insertretorno (
      psperson      IN       NUMBER,
      pretorno      IN       NUMBER,
      pidconvenio   IN       NUMBER,
      mensajes      OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      dtpoliza   ob_iax_detpoliza;
      retrn      t_iax_retorno;
      nretrn     NUMBER           := 1;
      nerr       NUMBER;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (200)
         :=    'psperson='
            || psperson
            || ' pretorno='
            || pretorno
            || ' pidconvenio='
            || pidconvenio;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_InsertRetorno';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      ELSE
         dtpoliza := poliza.det_poliza;
      END IF;

      vpasexec := 2;

      IF dtpoliza.retorno IS NULL
      THEN
         retrn := t_iax_retorno ();
      ELSE
         retrn := dtpoliza.retorno;
      END IF;

      vpasexec := 4;

      IF f_existbenefretn (psperson, mensajes) = 1
      THEN
         /* El beneficiario ya existe en el convenio*/
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9904172);
         RETURN 1;
      END IF;

      vpasexec := 5;
      nretrn := retrn.COUNT + 1;
      retrn.EXTEND;
      retrn (retrn.LAST) := ob_iax_retorno ();
      retrn (retrn.LAST).sperson := psperson;
      retrn (retrn.LAST).pretorno := pretorno;
      retrn (retrn.LAST).idconvenio := pidconvenio;
      retrn (retrn.LAST).direcciones := t_iax_direcciones ();
      vpasexec := 9;
      nerr :=
         pac_iax_produccion.f_get_direc_retorno (psperson,
                                                 dtpoliza.cagente,
                                                 'EST',
                                                 retrn (retrn.LAST),
                                                 mensajes
                                                );

      IF nerr <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, nerr);
         RAISE e_object_error;
      END IF;

      vpasexec := 11;
      /*   actualizamos*/
      poliza.det_poliza.retorno := retrn;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_insertretorno;

   /* Bug 0022701 - 03/09/2012 - JMF*/
   FUNCTION f_grabaretorno (
      psperson      IN       NUMBER,
      pretorno      IN       NUMBER,
      pidconvenio   IN       NUMBER,
      mensajes      OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      retrn      t_iax_retorno;
      nerr       NUMBER;
      msj        t_iax_mensajes;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (200)
         :=    'psperson='
            || psperson
            || ' pretorno='
            || pretorno
            || ' pidconvenio='
            || pidconvenio;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_GrabarRetorno';
      vsperson   NUMBER;
      vcdomici   NUMBER;
      vfound     BOOLEAN;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /* ini Bug 0024132 - 25/10/2012 - JMF*/
      IF psperson IS NULL
      THEN
         /*Es obligatorio informar la persona*/
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 111066);
         RAISE e_object_error;
      END IF;

      /* fin Bug 0024132 - 25/10/2012 - JMF*/
      vpasexec := 2;
      retrn := pac_iobj_prod.f_partpolretorno (poliza.det_poliza, mensajes);
      vpasexec := 3;
      vfound := FALSE;

      IF retrn IS NOT NULL
      THEN
         IF retrn.COUNT > 0
         THEN
            vpasexec := 4;

            FOR vretrn IN retrn.FIRST .. retrn.LAST
            LOOP
               vpasexec := 5;

               IF retrn.EXISTS (vretrn)
               THEN
                  vpasexec := 6;

                  IF retrn (vretrn).sperson = psperson
                  THEN
                     vpasexec := 7;
                     vfound := TRUE;
                     retrn (vretrn).pretorno := pretorno;
                     /* Bug 0022701 - 03/09/2012 - JMF*/
                     retrn (vretrn).idconvenio := pidconvenio;
                     vpasexec := 8;
                     nerr :=
                        pac_iax_produccion.f_get_direc_retorno
                                                  (psperson,
                                                   poliza.det_poliza.cagente,
                                                   'EST',
                                                   retrn (vretrn),
                                                   mensajes
                                                  );

                     IF nerr <> 0
                     THEN
                        pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                              1,
                                                              nerr
                                                             );
                        RAISE e_object_error;
                     END IF;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      IF vfound = FALSE
      THEN
         vpasexec := 9;
         nerr :=
            pac_iax_produccion.f_insertretorno (psperson,
                                                pretorno,
                                                pidconvenio,
                                                mensajes
                                               );
         vpasexec := 10;

         IF nerr = 1
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9902396);
            RAISE e_object_error;
         END IF;

         COMMIT;
         vpasexec := 11;
         retrn := pac_iobj_prod.f_partpolretorno (poliza.det_poliza, mensajes);
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 12;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 13;
      poliza.det_poliza.retorno := retrn;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabaretorno;

   /* Bug 0022701 - 03/09/2012 - JMF*/
   FUNCTION f_modifretorno (
      psperson   IN       NUMBER,
      pretorno   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      retrn      t_iax_retorno;
      rip        t_iax_personas;
      msj        t_iax_mensajes;
      nerr       NUMBER;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (200)
                       := 'psperson=' || psperson || ' pretorno=' || pretorno;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_ModifRetorno';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      retrn := pac_iobj_prod.f_partpolretorno (poliza.det_poliza, mensajes);

      IF retrn IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9902397);
         vpasexec := 4;
         RAISE e_object_error;
      ELSE
         IF retrn.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9902397);
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 7;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 8;

      FOR vretrn IN retrn.FIRST .. retrn.LAST
      LOOP
         vpasexec := 9;

         IF retrn.EXISTS (vretrn)
         THEN
            vpasexec := 10;

            IF retrn (vretrn).sperson = psperson
            THEN
               vpasexec := 11;
               retrn (vretrn).pretorno := pretorno;
            END IF;
         END IF;
      END LOOP;

      vpasexec := 13;
      poliza.det_poliza.retorno := retrn;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_modifretorno;

   /* Bug 0022701 - 03/09/2012 - JMF*/
   FUNCTION f_eliminaretorno (psperson IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      retrn      t_iax_retorno;
      ndel       NUMBER         := 0;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (200) := 'psperson=' || psperson;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_EliminaRetorno';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      retrn := pac_iobj_prod.f_partpolretorno (poliza.det_poliza, mensajes);

      IF retrn IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9904175);
         vpasexec := 3;
         RAISE e_object_error;
      ELSE
         IF retrn.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9904175);
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      FOR vretrn IN retrn.FIRST .. retrn.LAST
      LOOP
         IF retrn.EXISTS (vretrn)
         THEN
            IF retrn (vretrn).sperson = psperson
            THEN
               /* BUG 0023965 - 15/10/2012 - JMF*/
               retrn.DELETE (vretrn);
               /* retrn(vretrn).pretorno := 0;*/
               poliza.det_poliza.retorno := retrn;
               RETURN 0;
            END IF;
         END IF;
      END LOOP;

      vpasexec := 7;
      pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9904175);
      RETURN 1;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_eliminaretorno;

   /* Bug 0022701 - 03/09/2012 - JMF*/
   FUNCTION f_inicializa_retorno (mensajes OUT t_iax_mensajes)
      RETURN t_iax_retorno
   IS
      retrn      t_iax_retorno;
      vpasexec   NUMBER (8)                     := 1;
      vparam     VARCHAR2 (1)                   := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.F_Inicializa_Retorno';
      nerr       NUMBER;
      vestper    estper_personas.sperson%TYPE;
      vexiste    NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /* Bug 0025862 - 29/01/2013 - JMF*/
      IF issuplem
      THEN
         vpasexec := 2;
         retrn :=
                 pac_md_retorno.f_suple_retorno (poliza.det_poliza, mensajes);
      ELSE
         vpasexec := 3;
         retrn :=
            pac_md_retorno.f_inicializa_retorno (poliza.det_poliza, mensajes);
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      IF retrn IS NOT NULL
      THEN
         IF retrn.COUNT > 0
         THEN
            FOR vretrn IN retrn.FIRST .. retrn.LAST
            LOOP
               IF retrn.EXISTS (vretrn)
               THEN
                  IF issuplem = FALSE
                  THEN
                     /*JLV bug 27267/146274 31/07/2013. No se puede eliminar los datos todav�a*/
                     /* ya que existe el tomador y al eliminarlo despu�s no lo puede insertar.*/
                     /*pac_persona.borrar_tablas_estpereal(retrn(vretrn).sperson,
                     poliza.det_poliza.sseguro);*/
                     pac_persona.traspaso_tablas_per
                                                  (retrn (vretrn).sperson,
                                                   vestper,
                                                   poliza.det_poliza.sseguro,
                                                   poliza.det_poliza.cagente
                                                  );
                  ELSE
                     /*Bug 29324/166247 - 21/12/2014- AMC*/
                     nerr :=
                        pac_persona.f_existe_estpersona
                                                  (retrn (vretrn).sperson,
                                                   poliza.det_poliza.sseguro,
                                                   vexiste
                                                  );

                     IF vexiste = 0
                     THEN
                        pac_persona.traspaso_tablas_per
                                                  (retrn (vretrn).sperson,
                                                   vestper,
                                                   poliza.det_poliza.sseguro,
                                                   poliza.det_poliza.cagente
                                                  );
                     END IF;

                     /*Fi Bug 29324/166247 - 21/12/2014- AMC*/
                     vestper :=
                        pac_persona.f_spereal_sperson
                                                    (retrn (vretrn).sperson,
                                                     poliza.det_poliza.sseguro
                                                    );
                  END IF;

                  nerr :=
                     pac_iax_produccion.f_get_direc_retorno
                                                   (vestper,
                                                    poliza.det_poliza.cagente,
                                                    'EST',
                                                    retrn (vretrn),
                                                    mensajes
                                                   );

                  IF nerr <> 0
                  THEN
                     pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, nerr);
                     RAISE e_object_error;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      poliza.det_poliza.retorno := retrn;
      COMMIT;
      RETURN retrn;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         ROLLBACK;
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         ROLLBACK;
         RETURN NULL;
   END f_inicializa_retorno;

   FUNCTION f_get_franquicias (
      pnriesgo    IN       NUMBER,
      pcpartida   IN       NUMBER,
      pcgarant    IN       NUMBER,
      pselgar     IN       NUMBER,
      mensajes    OUT      t_iax_mensajes
   )
      RETURN t_iax_bf_proactgrup
   IS
      gars              t_iax_garantias;
      gar               ob_iax_garantias;
      pargar            t_iaxpar_garantias;
      rie               ob_iax_riesgos;
      nerr              NUMBER;
      vpasexec          NUMBER (8)          := 1;
      vparam            VARCHAR2 (1)        := NULL;
      vobject           VARCHAR2 (200)
                                    := 'PAC_IAX_PRODUCCION.f_get_franquicias';
      /*ACC 1312008*/
      vefectsuple       DATE                := NULL;
      nerrfefec         NUMBER;
      garsret           t_iax_garantias     := t_iax_garantias ();
      /*ACC 1312008*/
      /* Bug 22839 - RSC - 25/07/2012 - LCOL - Funcionalidad Certificado 0*/
      vplan             NUMBER;
      vconta            NUMBER;
      pregpar           t_iaxpar_preguntas;
      v_crespue         NUMBER;
      v_trespue         VARCHAR2 (2000);
      v_resp            NUMBER;
      vtprefor          VARCHAR2 (100);
      v_cplan           NUMBER;
      v_cambio          BOOLEAN;
      franq             t_iax_bf_proactgrup;
      franqcontrat      t_iax_bf_proactgrup;
      marcar            BOOLEAN;
      vindex            NUMBER;
      trobat            BOOLEAN;
      vtbonfranseg      t_iax_bonfranseg;
      vtbonfranseg2     t_iax_bonfranseg;
      vtbonfranseggar   t_iax_bonfranseg;
      vnumerr           NUMBER;
      lvalor2           NUMBER;
      limpmin           NUMBER;
      limpmax           NUMBER;
      vvalor            NUMBER;
      /* Fin Bug 22839*/
      vcont             NUMBER              := 0;
      vcgarant          NUMBER;
   BEGIN
      /*ob_iax_riesgos*/
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      IF pcgarant IS NOT NULL
      THEN
         SELECT COUNT (1)
           INTO vcont
           FROM bf_progarangrup
          WHERE cempres = pac_md_common.f_get_cxtempresa
            AND sproduc = vproducto
            AND cactivi = poliza.det_poliza.gestion.cactivi
            AND cgarant = pcgarant;
      END IF;

      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      IF vcont > 0 OR (pcgarant IS NULL)
      THEN
         SELECT DECODE (pselgar, 1, pcgarant, NULL)
           INTO vcgarant
           FROM DUAL;

         /*   nerr := pac_iax_produccion.f_grabarobjetodb(mensajes);*/
         franq :=
            pac_mdpar_productos.f_get_franquicias
                                           (vproducto,
                                            poliza.det_poliza.gestion.cactivi,
                                            pnriesgo,
                                            poliza.det_poliza.sseguro,
                                            poliza.det_poliza.nmovimi,
                                            poliza.det_poliza.gestion.fefecto,
                                            poliza.det_poliza.ssegpol,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            NULL,
                                            pac_iax_produccion.issuplem,
                                            pac_iax_produccion.issimul,
                                            vcgarant,
                                            mensajes
                                           );
         vpasexec := 2;
         vpasexec := 4;
         gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

         IF gars IS NULL
         THEN
            gars :=
               pac_iax_produccion.f_leegarantias (pnriesgo,
                                                  pcpartida,
                                                  mensajes
                                                 );
         END IF;

         vpasexec := 6;

         IF rie.bonfranseg IS NULL
         THEN
            IF franq IS NOT NULL AND franq.COUNT > 0
            THEN
               FOR vfranq IN franq.FIRST .. franq.LAST
               LOOP
                  marcar := FALSE;

                  IF     franq (vfranq).garantias IS NOT NULL
                     AND franq (vfranq).garantias.COUNT > 0
                  THEN
                     marcar := FALSE;

                     /*     t_iax_bf_progarangrup*/
                     FOR vfranqgar IN
                        franq (vfranq).garantias.FIRST .. franq (vfranq).garantias.LAST
                     LOOP
                        IF gars IS NOT NULL
                        THEN
                           vpasexec := 7;

                           IF gars.COUNT > 0
                           THEN
                              vpasexec := 8;

                              FOR vgar IN gars.FIRST .. gars.LAST
                              LOOP
                                 vpasexec := 9;

                                 IF gars.EXISTS (vgar)
                                 THEN
                                    vpasexec := 101;
                                    vpasexec := 111;
                                    vpasexec := 121;
                                    vpasexec := 131;

                                    IF     gars (vgar).cobliga = 1
                                       AND gars (vgar).cgarant =
                                              franq (vfranq).garantias
                                                                    (vfranqgar).cgarant
                                    THEN
                                       marcar := TRUE;
                                    END IF;
                                 END IF;
                              END LOOP;
                           END IF;
                        END IF;
                     END LOOP;

                     IF marcar
                     THEN
                        IF franqcontrat IS NULL
                        THEN
                           franqcontrat := t_iax_bf_proactgrup ();
                        END IF;

                        franqcontrat.EXTEND;
                        vindex := franqcontrat.LAST;
                        franqcontrat (vindex) := ob_iax_bf_proactgrup ();
                        franqcontrat (vindex) := franq (vfranq);

                        IF rie.bonfranseg IS NULL
                        THEN
                           rie.bonfranseg := t_iax_bonfranseg ();
                        END IF;

                        rie.bonfranseg.EXTEND;
                        vindex := rie.bonfranseg.LAST;
                        rie.bonfranseg (vindex) := ob_iax_bonfranseg ();
                        rie.bonfranseg (vindex).cgrup := franq (vfranq).cgrup;
                        rie.bonfranseg (vindex).csubgrup :=
                                                   franq (vfranq).csubgrupunic;
                        rie.bonfranseg (vindex).cversion :=
                                                 franq (vfranq).grupo.cversion;
                        rie.bonfranseg (vindex).finiefe := f_sysdate;
                        rie.bonfranseg (vindex).ctipgrup :=
                                                 franq (vfranq).grupo.ctipgrup;
                        rie.bonfranseg (vindex).tgrup :=
                                                    franq (vfranq).grupo.tgrup;
                        rie.bonfranseg (vindex).ctipvisgrup :=
                                              franq (vfranq).grupo.ctipvisgrup;
                        rie.bonfranseg (vindex).ttipvisgrup :=
                                              franq (vfranq).grupo.ttipvisgrup;
                        rie.bonfranseg (vindex).ctipgrupsubgrup :=
                           franq (vfranq).grupo.lsubgrupos
                                         (franq (vfranq).grupo.lsubgrupos.FIRST
                                         ).ctipgrupsubgrup;

                        IF     franq (vfranq).lniveles IS NOT NULL
                           AND franq (vfranq).lniveles.COUNT > 0
                        THEN
                           IF     franq (vfranq).lniveles.COUNT = 1
                              AND franq (vfranq).grupo.lsubgrupos
                                         (franq (vfranq).grupo.lsubgrupos.FIRST
                                         ).ctipgrupsubgrup = 1
                           THEN
                              rie.bonfranseg (vindex).cnivel :=
                                 franq (vfranq).lniveles
                                                (franq (vfranq).lniveles.FIRST
                                                ).cnivel;
                              rie.bonfranseg (vindex).tnivel :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).tnivel;
                              rie.bonfranseg (vindex).cvalor1 :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).cvalor1;
                              rie.bonfranseg (vindex).tvalor1 :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).tvalor1;
                              rie.bonfranseg (vindex).impvalor1 :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).impvalor1;
                              rie.bonfranseg (vindex).cvalor2 :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).cvalor2;
                              rie.bonfranseg (vindex).tvalor2 :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).tvalor2;
                              rie.bonfranseg (vindex).impvalor2 :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).impvalor2;
                              rie.bonfranseg (vindex).cimpmin :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).cimpmin;
                              rie.bonfranseg (vindex).timpmin :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).timpmin;
                              rie.bonfranseg (vindex).impmin :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).impmin;
                              rie.bonfranseg (vindex).cimpmax :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).cimpmax;
                              rie.bonfranseg (vindex).timpmax :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).timpmax;
                              rie.bonfranseg (vindex).impmax :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).impmax;
                              rie.bonfranseg (vindex).cniveldefecto :=
                                                 franq (vfranq).formuladefecto;
                           END IF;

                           FOR vlstniveles IN
                              franq (vfranq).lniveles.FIRST .. franq (vfranq).lniveles.LAST
                           LOOP
                              IF     franq (vfranq).lniveles (vlstniveles).cdefecto =
                                                                          'S'
                                 AND franq (vfranq).grupo.lsubgrupos
                                         (franq (vfranq).grupo.lsubgrupos.FIRST
                                         ).ctipgrupsubgrup = 1
                              THEN
                                 rie.bonfranseg (vindex).cnivel :=
                                    franq (vfranq).lniveles (vlstniveles).cnivel;
                                 rie.bonfranseg (vindex).tnivel :=
                                    franq (vfranq).lniveles (vlstniveles).tnivel;
                                 rie.bonfranseg (vindex).cvalor1 :=
                                    franq (vfranq).lniveles (vlstniveles).cvalor1;
                                 rie.bonfranseg (vindex).tvalor1 :=
                                    franq (vfranq).lniveles (vlstniveles).tvalor1;
                                 rie.bonfranseg (vindex).impvalor1 :=
                                    franq (vfranq).lniveles (vlstniveles).impvalor1;
                                 rie.bonfranseg (vindex).cvalor2 :=
                                    franq (vfranq).lniveles (vlstniveles).cvalor2;
                                 rie.bonfranseg (vindex).tvalor2 :=
                                    franq (vfranq).lniveles (vlstniveles).tvalor2;
                                 rie.bonfranseg (vindex).impvalor2 :=
                                    franq (vfranq).lniveles (vlstniveles).impvalor2;
                                 rie.bonfranseg (vindex).cimpmin :=
                                    franq (vfranq).lniveles (vlstniveles).cimpmin;
                                 rie.bonfranseg (vindex).timpmin :=
                                    franq (vfranq).lniveles (vlstniveles).timpmin;
                                 rie.bonfranseg (vindex).impmin :=
                                    franq (vfranq).lniveles (vlstniveles).impmin;
                                 rie.bonfranseg (vindex).cimpmax :=
                                    franq (vfranq).lniveles (vlstniveles).cimpmax;
                                 rie.bonfranseg (vindex).timpmax :=
                                    franq (vfranq).lniveles (vlstniveles).timpmax;
                                 rie.bonfranseg (vindex).impmax :=
                                    franq (vfranq).lniveles (vlstniveles).impmax;
                                 rie.bonfranseg (vindex).cniveldefecto :=
                                                franq (vfranq).formuladefecto;
                              END IF;

                              /* rie.bonfranseg(vindex)*/
                              IF     franq (vfranq).lniveles (vlstniveles).listacvalor1 IS NOT NULL
                                 AND franq (vfranq).lniveles (vlstniveles).listacvalor1.COUNT =
                                                                             1
                              THEN
                                 rie.bonfranseg (vindex).cvalor1 :=
                                    franq (vfranq).lniveles (vlstniveles).listacvalor1
                                       (franq (vfranq).lniveles (vlstniveles).listacvalor1.FIRST
                                       ).catribu;
                              END IF;

                              IF     franq (vfranq).lniveles (vlstniveles).listacvalor2 IS NOT NULL
                                 AND franq (vfranq).lniveles (vlstniveles).listacvalor2.COUNT =
                                                                             1
                              THEN
                                 rie.bonfranseg (vindex).cvalor2 :=
                                    franq (vfranq).lniveles (vlstniveles).listacvalor2
                                       (franq (vfranq).lniveles (vlstniveles).listacvalor2.FIRST
                                       ).catribu;
                              END IF;

                              IF     franq (vfranq).lniveles (vlstniveles).listacimpmin IS NOT NULL
                                 AND franq (vfranq).lniveles (vlstniveles).listacimpmin.COUNT =
                                                                             1
                              THEN
                                 rie.bonfranseg (vindex).cimpmin :=
                                    franq (vfranq).lniveles (vlstniveles).listacimpmin
                                       (franq (vfranq).lniveles (vlstniveles).listacimpmin.FIRST
                                       ).catribu;
                              END IF;

                              IF     franq (vfranq).lniveles (vlstniveles).listacimpmax IS NOT NULL
                                 AND franq (vfranq).lniveles (vlstniveles).listacimpmax.COUNT =
                                                                             1
                              THEN
                                 rie.bonfranseg (vindex).cimpmax :=
                                    franq (vfranq).lniveles (vlstniveles).listacimpmax
                                       (franq (vfranq).lniveles (vlstniveles).listacimpmax.FIRST
                                       ).catribu;
                              END IF;
                           /*listacvalor2   t_iax_bf_listlibre,
                           listacimpmin   t_iax_bf_listlibre,
                           listacimpmax   t_iax_bf_listlibre,*/
                           END LOOP;
                        END IF;

                        /* rie.bonfranseg(vindex).ffinefe := franq(vfranq).ffinefe;*/
                        franqcontrat (vindex).franqcontratada :=
                                                       rie.bonfranseg (vindex);
                     END IF;

                     marcar := FALSE;
                  END IF;
               END LOOP;
            END IF;

            vpasexec := 7;
            nerr :=
               pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                               pnriesgo,
                                               rie,
                                               mensajes
                                              );

            IF nerr <> 0
            THEN
               RAISE e_object_error;
            END IF;
         ELSE
            vtbonfranseg := rie.bonfranseg;
            vtbonfranseg2 := rie.bonfranseg;

            IF franq IS NOT NULL AND franq.COUNT > 0
            THEN
               rie.bonfranseg := t_iax_bonfranseg ();

               FOR vfranq IN franq.FIRST .. franq.LAST
               LOOP
                  trobat := FALSE;
                  marcar := FALSE;

                  /*    IF NOT trobat THEN*/
                  IF     franq (vfranq).garantias IS NOT NULL
                     AND franq (vfranq).garantias.COUNT > 0
                  THEN
                     marcar := FALSE;

                     FOR vfranqgar IN
                        franq (vfranq).garantias.FIRST .. franq (vfranq).garantias.LAST
                     LOOP
                        IF gars IS NOT NULL
                        THEN
                           vpasexec := 7;

                           IF gars.COUNT > 0
                           THEN
                              vpasexec := 8;

                              FOR vgar IN gars.FIRST .. gars.LAST
                              LOOP
                                 vpasexec := 9;

                                 IF gars.EXISTS (vgar)
                                 THEN
                                    vpasexec := 10;

                                    IF     gars (vgar).cobliga = 1
                                       AND gars (vgar).cgarant =
                                              franq (vfranq).garantias
                                                                    (vfranqgar).cgarant
                                    THEN
                                       marcar := TRUE;
                                    END IF;
                                 END IF;
                              END LOOP;
                           END IF;
                        /*  ELSIF pargar IS NOT NULL THEN
                        vpasexec := 7;
                        IF pargar.COUNT > 0 THEN
                        vpasexec := 8;
                        FOR vgar IN pargar.FIRST .. pargar.LAST LOOP
                        vpasexec := 9;
                        IF pargar.EXISTS(vgar) THEN
                        vpasexec := 10;
                        IF pargar(vgar).cgarant =
                        franq(vfranq).garantias(vfranqgar).cgarant THEN
                        marcar := TRUE;
                        END IF;
                        END IF;
                        END LOOP;
                        END IF;*/
                        END IF;
                     END LOOP;

                     vpasexec := 13;

                     IF marcar
                     THEN
                        IF franqcontrat IS NULL
                        THEN
                           franqcontrat := t_iax_bf_proactgrup ();
                        END IF;

                        vpasexec := 14;
                        franqcontrat.EXTEND;
                        vindex := franqcontrat.LAST;
                        franqcontrat (vindex) := ob_iax_bf_proactgrup ();
                        franqcontrat (vindex) := franq (vfranq);
                        vpasexec := 15;

                        IF rie.bonfranseg IS NULL
                        THEN
                           rie.bonfranseg := t_iax_bonfranseg ();
                        END IF;

                        vpasexec := 16;
                        rie.bonfranseg.EXTEND;
                        vindex := rie.bonfranseg.LAST;
                        rie.bonfranseg (vindex) := ob_iax_bonfranseg ();
                        rie.bonfranseg (vindex).cgrup := franq (vfranq).cgrup;
                        rie.bonfranseg (vindex).csubgrup :=
                                                   franq (vfranq).csubgrupunic;
                        rie.bonfranseg (vindex).cversion :=
                                                 franq (vfranq).grupo.cversion;
                        rie.bonfranseg (vindex).finiefe := f_sysdate;
                        rie.bonfranseg (vindex).ctipgrup :=
                                                 franq (vfranq).grupo.ctipgrup;
                        rie.bonfranseg (vindex).tsubgrup := '';
                        rie.bonfranseg (vindex).tgrup :=
                                                    franq (vfranq).grupo.tgrup;
                        rie.bonfranseg (vindex).ctipvisgrup :=
                                              franq (vfranq).grupo.ctipvisgrup;
                        rie.bonfranseg (vindex).ttipvisgrup :=
                                              franq (vfranq).grupo.ttipvisgrup;
                        vpasexec := 17;
                        rie.bonfranseg (vindex).ctipgrupsubgrup :=
                           franq (vfranq).grupo.lsubgrupos
                                         (franq (vfranq).grupo.lsubgrupos.FIRST
                                         ).ctipgrupsubgrup;

                        IF     franq (vfranq).lniveles IS NOT NULL
                           AND franq (vfranq).lniveles.COUNT > 0
                        THEN
                           IF     franq (vfranq).lniveles.COUNT = 1
                              AND franq (vfranq).grupo.lsubgrupos
                                         (franq (vfranq).grupo.lsubgrupos.FIRST
                                         ).ctipgrupsubgrup = 1
                           THEN
                              rie.bonfranseg (vindex).cnivel :=
                                 franq (vfranq).lniveles
                                                (franq (vfranq).lniveles.FIRST
                                                ).cnivel;
                              rie.bonfranseg (vindex).tnivel :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).tnivel;
                              rie.bonfranseg (vindex).cvalor1 :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).cvalor1;
                              rie.bonfranseg (vindex).tvalor1 :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).tvalor1;
                              rie.bonfranseg (vindex).impvalor1 :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).impvalor1;
                              rie.bonfranseg (vindex).cvalor2 :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).cvalor2;
                              rie.bonfranseg (vindex).tvalor2 :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).tvalor2;
                              rie.bonfranseg (vindex).impvalor2 :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).impvalor2;
                              rie.bonfranseg (vindex).cimpmin :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).cimpmin;
                              rie.bonfranseg (vindex).timpmin :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).timpmin;
                              rie.bonfranseg (vindex).impmin :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).impmin;
                              rie.bonfranseg (vindex).cimpmax :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).cimpmax;
                              rie.bonfranseg (vindex).timpmax :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).timpmax;
                              rie.bonfranseg (vindex).impmax :=
                                 franq (vfranq).lniveles
                                                 (franq (vfranq).lniveles.FIRST
                                                 ).impmax;
                              rie.bonfranseg (vindex).cniveldefecto :=
                                                 franq (vfranq).formuladefecto;
                           END IF;

                           FOR vlstniveles IN
                              franq (vfranq).lniveles.FIRST .. franq (vfranq).lniveles.LAST
                           LOOP
                              IF     franq (vfranq).lniveles (vlstniveles).cdefecto =
                                                                          'S'
                                 AND franq (vfranq).grupo.lsubgrupos
                                         (franq (vfranq).grupo.lsubgrupos.FIRST
                                         ).ctipgrupsubgrup = 1
                              THEN
                                 rie.bonfranseg (vindex).cnivel :=
                                    franq (vfranq).lniveles (vlstniveles).cnivel;
                                 rie.bonfranseg (vindex).tnivel :=
                                    franq (vfranq).lniveles (vlstniveles).tnivel;
                                 rie.bonfranseg (vindex).cvalor1 :=
                                    franq (vfranq).lniveles (vlstniveles).cvalor1;
                                 rie.bonfranseg (vindex).tvalor1 :=
                                    franq (vfranq).lniveles (vlstniveles).tvalor1;
                                 rie.bonfranseg (vindex).impvalor1 :=
                                    franq (vfranq).lniveles (vlstniveles).impvalor1;
                                 rie.bonfranseg (vindex).cvalor2 :=
                                    franq (vfranq).lniveles (vlstniveles).cvalor2;
                                 rie.bonfranseg (vindex).tvalor2 :=
                                    franq (vfranq).lniveles (vlstniveles).tvalor2;
                                 rie.bonfranseg (vindex).impvalor2 :=
                                    franq (vfranq).lniveles (vlstniveles).impvalor2;
                                 rie.bonfranseg (vindex).cimpmin :=
                                    franq (vfranq).lniveles (vlstniveles).cimpmin;
                                 rie.bonfranseg (vindex).timpmin :=
                                    franq (vfranq).lniveles (vlstniveles).timpmin;
                                 rie.bonfranseg (vindex).impmin :=
                                    franq (vfranq).lniveles (vlstniveles).impmin;
                                 rie.bonfranseg (vindex).cimpmax :=
                                    franq (vfranq).lniveles (vlstniveles).cimpmax;
                                 rie.bonfranseg (vindex).timpmax :=
                                    franq (vfranq).lniveles (vlstniveles).timpmax;
                                 rie.bonfranseg (vindex).impmax :=
                                    franq (vfranq).lniveles (vlstniveles).impmax;
                                 rie.bonfranseg (vindex).cniveldefecto :=
                                                franq (vfranq).formuladefecto;
                              END IF;

                              IF     franq (vfranq).lniveles (vlstniveles).listacvalor1 IS NOT NULL
                                 AND franq (vfranq).lniveles (vlstniveles).listacvalor1.COUNT =
                                                                             1
                              THEN
                                 rie.bonfranseg (vindex).cvalor1 :=
                                    franq (vfranq).lniveles (vlstniveles).listacvalor1
                                       (franq (vfranq).lniveles (vlstniveles).listacvalor1.FIRST
                                       ).catribu;
                              END IF;

                              IF     franq (vfranq).lniveles (vlstniveles).listacvalor2 IS NOT NULL
                                 AND franq (vfranq).lniveles (vlstniveles).listacvalor2.COUNT =
                                                                             1
                              THEN
                                 rie.bonfranseg (vindex).cvalor2 :=
                                    franq (vfranq).lniveles (vlstniveles).listacvalor2
                                       (franq (vfranq).lniveles (vlstniveles).listacvalor2.FIRST
                                       ).catribu;
                              END IF;

                              IF     franq (vfranq).lniveles (vlstniveles).listacimpmin IS NOT NULL
                                 AND franq (vfranq).lniveles (vlstniveles).listacimpmin.COUNT =
                                                                             1
                              THEN
                                 rie.bonfranseg (vindex).cimpmin :=
                                    franq (vfranq).lniveles (vlstniveles).listacimpmin
                                       (franq (vfranq).lniveles (vlstniveles).listacimpmin.FIRST
                                       ).catribu;
                              END IF;

                              IF     franq (vfranq).lniveles (vlstniveles).listacimpmax IS NOT NULL
                                 AND franq (vfranq).lniveles (vlstniveles).listacimpmax.COUNT =
                                                                             1
                              THEN
                                 rie.bonfranseg (vindex).cimpmax :=
                                    franq (vfranq).lniveles (vlstniveles).listacimpmax
                                       (franq (vfranq).lniveles (vlstniveles).listacimpmax.FIRST
                                       ).catribu;
                              END IF;
                           END LOOP;
                        END IF;

                        vpasexec := 18;
                        franqcontrat (vindex).franqcontratada :=
                                                       rie.bonfranseg (vindex);

                        IF vtbonfranseg IS NOT NULL AND vtbonfranseg.COUNT > 0
                        THEN
                           FOR vriefranq IN
                              vtbonfranseg.FIRST .. vtbonfranseg.LAST
                           LOOP
                              IF     vtbonfranseg (vriefranq).cgrup =
                                                         franq (vfranq).cgrup
                                 AND vtbonfranseg (vriefranq).csubgrup =
                                                   franq (vfranq).csubgrupunic
                              THEN
                                 rie.bonfranseg (vindex).ctipgrupsubgrup :=
                                    franq (vfranq).grupo.lsubgrupos
                                        (franq (vfranq).grupo.lsubgrupos.FIRST
                                        ).ctipgrupsubgrup;

                                 IF franq (vfranq).grupo.lsubgrupos
                                         (franq (vfranq).grupo.lsubgrupos.FIRST
                                         ).ctipgrupsubgrup IN (3, 4)
                                 THEN
                                    IF vtbonfranseg (vriefranq).cvalor1 IS NOT NULL
                                    THEN
                                       IF     franqcontrat (vindex).lniveles IS NOT NULL
                                          AND franqcontrat (vindex).lniveles.COUNT >
                                                                             0
                                       THEN
                                          FOR vlstniveles IN
                                             franqcontrat (vindex).lniveles.FIRST .. franqcontrat
                                                                                       (vindex
                                                                                       ).lniveles.LAST
                                          LOOP
                                             IF     franqcontrat (vindex).lniveles
                                                                 (vlstniveles).cvalor1 =
                                                                           99
                                                AND franqcontrat (vindex).lniveles
                                                                  (vlstniveles).id_listlibre IS NOT NULL
                                             THEN
                                                franqcontrat (vindex).lniveles
                                                                 (vlstniveles).listacvalor1 :=
                                                   pac_mdpar_productos.f_get_bf_listalibre
                                                      (franqcontrat (vindex).lniveles
                                                                  (vlstniveles).id_listlibre,
                                                       mensajes
                                                      );

                                                IF vtbonfranseg (vriefranq).cvalor1 IS NOT NULL
                                                THEN
                                                   SELECT id_listlibre_2,
                                                          id_listlibre_min,
                                                          id_listlibre_max,
                                                          cvalor
                                                     INTO lvalor2,
                                                          limpmin,
                                                          limpmax,
                                                          vvalor
                                                     FROM bf_listlibre
                                                    WHERE cempres =
                                                             pac_md_common.f_get_cxtempresa
                                                      AND id_listlibre =
                                                             franqcontrat
                                                                       (vindex).lniveles
                                                                  (vlstniveles).id_listlibre
                                                      AND catribu =
                                                             vtbonfranseg
                                                                    (vriefranq).cvalor1;

                                                   vtbonfranseg (vriefranq).tvalor1 :=
                                                      ff_desvalorfijo
                                                         (vvalor,
                                                          pac_md_common.f_get_cxtidioma,
                                                          vtbonfranseg
                                                                    (vriefranq).cvalor1
                                                         );
                                                ELSIF     franqcontrat (vindex).lniveles
                                                                  (vlstniveles).listacvalor1 IS NOT NULL
                                                      AND franqcontrat (vindex).lniveles
                                                                  (vlstniveles).listacvalor1.COUNT =
                                                                             1
                                                THEN
                                                   vtbonfranseg (vriefranq).cvalor1 :=
                                                      franqcontrat (vindex).lniveles
                                                                 (vlstniveles).listacvalor1
                                                         (franqcontrat (vindex).lniveles
                                                                  (vlstniveles).listacvalor1.FIRST
                                                         ).catribu;
                                                   vtbonfranseg (vriefranq).tvalor1 :=
                                                      ff_desvalorfijo
                                                         (vvalor,
                                                          pac_md_common.f_get_cxtidioma,
                                                          vtbonfranseg
                                                                    (vriefranq).cvalor1
                                                         );
                                                END IF;

                                                IF lvalor2 IS NOT NULL
                                                THEN
                                                   franqcontrat (vindex).lniveles
                                                                 (vlstniveles).listacvalor2 :=
                                                      pac_mdpar_productos.f_get_bf_listalibre
                                                                    (lvalor2,
                                                                     mensajes
                                                                    );

                                                   IF vtbonfranseg (vriefranq).cvalor2 IS NOT NULL
                                                   THEN
                                                      SELECT cvalor
                                                        INTO vvalor
                                                        FROM bf_listlibre
                                                       WHERE cempres =
                                                                pac_md_common.f_get_cxtempresa
                                                         AND id_listlibre =
                                                                       lvalor2
                                                         AND catribu =
                                                                vtbonfranseg
                                                                    (vriefranq).cvalor2;

                                                      vtbonfranseg (vriefranq).tvalor2 :=
                                                         ff_desvalorfijo
                                                            (vvalor,
                                                             pac_md_common.f_get_cxtidioma,
                                                             vtbonfranseg
                                                                    (vriefranq).cvalor2
                                                            );
                                                   ELSIF     franqcontrat
                                                                       (vindex).lniveles
                                                                  (vlstniveles).listacvalor2 IS NOT NULL
                                                         AND franqcontrat
                                                                       (vindex).lniveles
                                                                  (vlstniveles).listacvalor2.COUNT =
                                                                             1
                                                   THEN
                                                      vtbonfranseg (vriefranq).cvalor2 :=
                                                         franqcontrat (vindex).lniveles
                                                                 (vlstniveles).listacvalor2
                                                            (franqcontrat
                                                                       (vindex).lniveles
                                                                  (vlstniveles).listacvalor2.FIRST
                                                            ).catribu;
                                                      vtbonfranseg (vriefranq).tvalor2 :=
                                                         ff_desvalorfijo
                                                            (vvalor,
                                                             pac_md_common.f_get_cxtidioma,
                                                             vtbonfranseg
                                                                    (vriefranq).cvalor2
                                                            );
                                                   END IF;
                                                END IF;

                                                IF limpmin IS NOT NULL
                                                THEN
                                                   franqcontrat (vindex).lniveles
                                                                 (vlstniveles).listacimpmin :=
                                                      pac_mdpar_productos.f_get_bf_listalibre
                                                                    (limpmin,
                                                                     mensajes
                                                                    );

                                                   IF vtbonfranseg (vriefranq).cimpmin IS NOT NULL
                                                   THEN
                                                      SELECT cvalor
                                                        INTO vvalor
                                                        FROM bf_listlibre
                                                       WHERE cempres =
                                                                pac_md_common.f_get_cxtempresa
                                                         AND id_listlibre =
                                                                       limpmin
                                                         AND catribu =
                                                                vtbonfranseg
                                                                    (vriefranq).cimpmin;

                                                      vtbonfranseg (vriefranq).timpmin :=
                                                         ff_desvalorfijo
                                                            (vvalor,
                                                             pac_md_common.f_get_cxtidioma,
                                                             vtbonfranseg
                                                                    (vriefranq).cimpmin
                                                            );
                                                   ELSIF     franqcontrat
                                                                       (vindex).lniveles
                                                                  (vlstniveles).listacimpmin IS NOT NULL
                                                         AND franqcontrat
                                                                       (vindex).lniveles
                                                                  (vlstniveles).listacimpmin.COUNT =
                                                                             1
                                                   THEN
                                                      vtbonfranseg (vriefranq).cimpmin :=
                                                         franqcontrat (vindex).lniveles
                                                                 (vlstniveles).listacimpmin
                                                            (franqcontrat
                                                                       (vindex).lniveles
                                                                  (vlstniveles).listacimpmin.FIRST
                                                            ).catribu;
                                                      vtbonfranseg (vriefranq).timpmin :=
                                                         ff_desvalorfijo
                                                            (vvalor,
                                                             pac_md_common.f_get_cxtidioma,
                                                             vtbonfranseg
                                                                    (vriefranq).cimpmin
                                                            );
                                                   END IF;
                                                END IF;

                                                IF limpmax IS NOT NULL
                                                THEN
                                                   franqcontrat (vindex).lniveles
                                                                 (vlstniveles).listacimpmax :=
                                                      pac_mdpar_productos.f_get_bf_listalibre
                                                                    (limpmax,
                                                                     mensajes
                                                                    );

                                                   IF vtbonfranseg (vriefranq).cimpmax IS NOT NULL
                                                   THEN
                                                      SELECT cvalor
                                                        INTO vvalor
                                                        FROM bf_listlibre
                                                       WHERE cempres =
                                                                pac_md_common.f_get_cxtempresa
                                                         AND id_listlibre =
                                                                       limpmax
                                                         AND catribu =
                                                                vtbonfranseg
                                                                    (vriefranq).cimpmax;

                                                      vtbonfranseg (vriefranq).timpmax :=
                                                         ff_desvalorfijo
                                                            (vvalor,
                                                             pac_md_common.f_get_cxtidioma,
                                                             vtbonfranseg
                                                                    (vriefranq).cimpmax
                                                            );
                                                   ELSIF     franqcontrat
                                                                       (vindex).lniveles
                                                                  (vlstniveles).listacimpmax IS NOT NULL
                                                         AND franqcontrat
                                                                       (vindex).lniveles
                                                                  (vlstniveles).listacimpmax.COUNT =
                                                                             1
                                                   THEN
                                                      vtbonfranseg (vriefranq).cimpmax :=
                                                         franqcontrat (vindex).lniveles
                                                                 (vlstniveles).listacimpmax
                                                            (franqcontrat
                                                                       (vindex).lniveles
                                                                  (vlstniveles).listacimpmax.FIRST
                                                            ).catribu;
                                                      vtbonfranseg (vriefranq).timpmax :=
                                                         ff_desvalorfijo
                                                            (vvalor,
                                                             pac_md_common.f_get_cxtidioma,
                                                             vtbonfranseg
                                                                    (vriefranq).cimpmax
                                                            );
                                                   END IF;
                                                END IF;
                                             END IF;
                                          END LOOP;
                                       END IF;
                                    END IF;
                                 ELSE
                                    IF franq (vfranq).grupo.lsubgrupos
                                          (franq (vfranq).grupo.lsubgrupos.FIRST
                                          ).ctipgrupsubgrup IN (1)
                                    THEN
                                       FOR vlstniveles IN
                                          franqcontrat (vindex).lniveles.FIRST .. franqcontrat
                                                                                    (vindex
                                                                                    ).lniveles.LAST
                                       LOOP
                                          IF     franq (vfranq).formuladefecto IS NOT NULL
                                             AND franq (vfranq).formuladefecto =
                                                    franqcontrat (vindex).lniveles
                                                                  (vlstniveles).cnivel
                                             AND (   vtbonfranseg (vriefranq).cnivel IS NULL
                                                  OR (    vtbonfranseg
                                                                    (vriefranq).cnivel =
                                                             vtbonfranseg
                                                                    (vriefranq).cniveldefecto
                                                      AND franq (vfranq).formuladefecto =
                                                             franqcontrat
                                                                       (vindex).lniveles
                                                                  (vlstniveles).cnivel
                                                     )
                                                 )
                                          THEN
                                             vtbonfranseg (vriefranq).cnivel :=
                                                franqcontrat (vindex).lniveles
                                                                 (vlstniveles).cnivel;
                                             vtbonfranseg (vriefranq).tnivel :=
                                                franqcontrat (vindex).lniveles
                                                                 (vlstniveles).tnivel;
                                             vtbonfranseg (vriefranq).cvalor1 :=
                                                franqcontrat (vindex).lniveles
                                                                 (vlstniveles).cvalor1;
                                             vtbonfranseg (vriefranq).tvalor1 :=
                                                franqcontrat (vindex).lniveles
                                                                 (vlstniveles).tvalor1;
                                             vtbonfranseg (vriefranq).impvalor1 :=
                                                franqcontrat (vindex).lniveles
                                                                 (vlstniveles).impvalor1;
                                             vtbonfranseg (vriefranq).cvalor2 :=
                                                franqcontrat (vindex).lniveles
                                                                 (vlstniveles).cvalor2;
                                             vtbonfranseg (vriefranq).tvalor2 :=
                                                franqcontrat (vindex).lniveles
                                                                 (vlstniveles).tvalor2;
                                             vtbonfranseg (vriefranq).impvalor2 :=
                                                franqcontrat (vindex).lniveles
                                                                 (vlstniveles).impvalor2;
                                             vtbonfranseg (vriefranq).cimpmin :=
                                                franqcontrat (vindex).lniveles
                                                                 (vlstniveles).cimpmin;
                                             vtbonfranseg (vriefranq).timpmin :=
                                                franqcontrat (vindex).lniveles
                                                                 (vlstniveles).timpmin;
                                             vtbonfranseg (vriefranq).impmin :=
                                                franqcontrat (vindex).lniveles
                                                                 (vlstniveles).impmin;
                                             vtbonfranseg (vriefranq).cimpmax :=
                                                franqcontrat (vindex).lniveles
                                                                 (vlstniveles).cimpmax;
                                             vtbonfranseg (vriefranq).timpmax :=
                                                franqcontrat (vindex).lniveles
                                                                 (vlstniveles).timpmax;
                                             vtbonfranseg (vriefranq).impmax :=
                                                franqcontrat (vindex).lniveles
                                                                 (vlstniveles).impmax;
                                             vtbonfranseg (vriefranq).cniveldefecto :=
                                                franqcontrat (vindex).formuladefecto;
                                          ELSIF     franq (vfranq).formuladefecto IS NOT NULL
                                                AND franq (vfranq).formuladefecto =
                                                       franqcontrat (vindex).lniveles
                                                                  (vlstniveles).cnivel
                                          THEN
                                             vtbonfranseg (vriefranq).cniveldefecto :=
                                                franqcontrat (vindex).formuladefecto;
                                          END IF;
                                       END LOOP;
                                    END IF;
                                 END IF;

                                 franqcontrat (vindex).franqcontratada :=
                                                      vtbonfranseg (vriefranq);
                                 rie.bonfranseg (vindex) :=
                                                      vtbonfranseg (vriefranq);
                              END IF;
                           END LOOP;
                        END IF;
                     END IF;

                     marcar := FALSE;
                  END IF;
               END LOOP;
            END IF;
         /*   franqcontrat(vindex).franqcontratada := rie.bonfranseg(vindex);*/
         END IF;

         vpasexec := 7;

         IF     pcgarant IS NOT NULL
            AND pselgar = 1
            AND (vtbonfranseg2 IS NOT NULL AND vtbonfranseg2.COUNT > 0)
         THEN
            IF rie.bonfranseg IS NOT NULL AND rie.bonfranseg.COUNT > 0
            THEN
               FOR vriefranq IN rie.bonfranseg.FIRST .. rie.bonfranseg.LAST
               LOOP
                  marcar := FALSE;

                  FOR vfranq IN vtbonfranseg2.FIRST .. vtbonfranseg2.LAST
                  LOOP
                     IF     rie.bonfranseg (vriefranq).cgrup =
                                                 vtbonfranseg2 (vfranq).cgrup
                        AND rie.bonfranseg (vriefranq).csubgrup =
                                               vtbonfranseg2 (vfranq).csubgrup
                     THEN
                        marcar := TRUE;
                     END IF;
                  END LOOP;

                  IF NOT marcar
                  THEN
                     vtbonfranseg2.EXTEND;
                     vindex := vtbonfranseg2.LAST;
                     vtbonfranseg2 (vindex) := rie.bonfranseg (vriefranq);
                  END IF;
               END LOOP;

               rie.bonfranseg := vtbonfranseg2;
            END IF;
         END IF;

         nerr :=
            pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                            pnriesgo,
                                            rie,
                                            mensajes
                                           );

         IF nerr <> 0
         THEN
            RAISE e_object_error;
         END IF;

         RETURN franqcontrat;
      ELSE
         RETURN NULL;
      END IF;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_franquicias;

   FUNCTION f_get_franquicias_consulta (
      pnriesgo    IN       NUMBER,
      pcpartida   IN       NUMBER,
      mensajes    OUT      t_iax_mensajes
   )
      RETURN t_iax_bf_proactgrup
   IS
      gars           t_iax_garantias;
      gar            ob_iax_garantias;
      pargar         t_iaxpar_garantias;
      rie            ob_iax_riesgos;
      nerr           NUMBER;
      vpasexec       NUMBER (8)          := 1;
      vparam         VARCHAR2 (1)        := NULL;
      vobject        VARCHAR2 (200)
                           := 'PAC_IAX_PRODUCCION.f_get_franquicias_consulta';
      /*ACC 1312008*/
      vefectsuple    DATE                := NULL;
      nerrfefec      NUMBER;
      garsret        t_iax_garantias     := t_iax_garantias ();
      /*ACC 1312008*/
      /* Bug 22839 - RSC - 25/07/2012 - LCOL - Funcionalidad Certificado 0*/
      vplan          NUMBER;
      vconta         NUMBER;
      pregpar        t_iaxpar_preguntas;
      v_crespue      NUMBER;
      v_trespue      VARCHAR2 (2000);
      v_resp         NUMBER;
      vtprefor       VARCHAR2 (100);
      v_cplan        NUMBER;
      v_cambio       BOOLEAN;
      franq          t_iax_bf_proactgrup;
      franqcontrat   t_iax_bf_proactgrup;
      marcar         BOOLEAN;
      vindex         NUMBER;
      trobat         BOOLEAN;
      vtbonfranseg   t_iax_bonfranseg;
   /* Fin Bug 22839*/
   BEGIN
      /*ob_iax_riesgos*/
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF gars IS NULL
      THEN
         gars :=
            pac_iax_produccion.f_leegarantias (pnriesgo, pcpartida, mensajes);
      END IF;

      vpasexec := 6;
      franqcontrat := t_iax_bf_proactgrup ();

      IF rie.bonfranseg IS NOT NULL AND rie.bonfranseg.COUNT > 0
      THEN
         FOR vriefranq IN rie.bonfranseg.FIRST .. rie.bonfranseg.LAST
         LOOP
            franq :=
               pac_mdpar_productos.f_get_franquicias
                                        (vproducto,
                                         poliza.det_poliza.gestion.cactivi,
                                         pnriesgo,
                                         poliza.det_poliza.sseguro,
                                         poliza.det_poliza.nmovimi,
                                         poliza.det_poliza.gestion.fefecto,
                                         poliza.det_poliza.ssegpol,
                                         rie.bonfranseg (vriefranq).cgrup,
                                         rie.bonfranseg (vriefranq).csubgrup,
                                         rie.bonfranseg (vriefranq).cversion,
                                         rie.bonfranseg (vriefranq).cnivel,
                                         rie.bonfranseg (vriefranq).cvalor1,
                                         rie.bonfranseg (vriefranq).impvalor1,
                                         rie.bonfranseg (vriefranq).cvalor2,
                                         rie.bonfranseg (vriefranq).impvalor2,
                                         rie.bonfranseg (vriefranq).cimpmin,
                                         rie.bonfranseg (vriefranq).impmin,
                                         rie.bonfranseg (vriefranq).cimpmax,
                                         rie.bonfranseg (vriefranq).impmax,
                                         pac_iax_produccion.issuplem,
                                         pac_iax_produccion.issimul,
                                         NULL,
                                         mensajes
                                        );

            IF franq IS NOT NULL AND franq.COUNT > 0
            THEN
               marcar := FALSE;
               franqcontrat.EXTEND;
               vindex := franqcontrat.LAST;
               franqcontrat (vindex) := ob_iax_bf_proactgrup ();
               franqcontrat (vindex) := franq (franq.FIRST);
               franqcontrat (vindex).franqcontratada :=
                                                   rie.bonfranseg (vriefranq);
            END IF;
         END LOOP;
      END IF;

      RETURN franqcontrat;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_franquicias_consulta;

   FUNCTION f_set_franquicia (
      nriesgo      IN       NUMBER,
      pcgrup       IN       NUMBER,
      pcsubgrup    IN       NUMBER,
      pcversion    IN       NUMBER,
      pcnivel      IN       NUMBER,
      pcvalor1     IN       NUMBER,
      pimpvalor1   IN       NUMBER,
      pcvalor2     IN       NUMBER,
      pimpvalor2   IN       NUMBER,
      pcimpmin     IN       NUMBER,
      pimpmin      IN       NUMBER,
      pcimpmax     IN       NUMBER,
      pimpmax      IN       NUMBER,
      mensajes     OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      risc               ob_iax_riesgos;
      npos               NUMBER;
      vpasexec           NUMBER (8)          := 1;
      vparam             VARCHAR2 (1)        := NULL;
      vobject            VARCHAR2 (200)
                                     := 'PAC_IAX_PRODUCCION.f_set_franquicia';
      franq              t_iax_bf_proactgrup;
      franqcontrat       t_iax_bf_proactgrup;
      num_err            NUMBER;
      vindex             NUMBER;
      vformulavalida     NUMBER;
      vnumerr            NUMBER;
      vformula           NUMBER;
      vctipgrupsubgrup   NUMBER;
	  -- INI SPV IAXIS-5247 Deducibles para Suplementos (Endosos)
	  -- Control deducibles en endosos 
	  v_cambio_importe NUMBER(3) := 0;
	  v_cambio_tipimporte NUMBER(3) := 0;
	  -- FIN SPV IAXIS-5247 Deducibles para Suplementos (Endosos)
	  
	  --28/04/2020 Bartolo Herrera IAXIS-6547 INICIO
      v_impmin NUMBER := 0;
      --28/04/2020 Bartolo Herrera IAXIS-6547 FIN
	  
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      risc :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF risc IS NULL
      THEN
         risc := ob_iax_riesgos ();
      END IF;

      IF risc.bonfranseg IS NOT NULL AND risc.bonfranseg.COUNT > 0
      THEN
         FOR vfranq IN risc.bonfranseg.FIRST .. risc.bonfranseg.LAST
         LOOP
		 -- INI SPV IAXIS-5247 Deducibles para Suplementos (Endosos)
		 -- Si encuentra el valor quiere decir que no hubo cambio de importe
		 /*IF pimpmin = risc.bonfranseg (vfranq).impmin THEN  IAXIS-5423  CJMR 23/09/2019
		   --
		   v_cambio_importe := 1;
		   --
		 END IF;
		 --
		 IF pcimpmin = risc.bonfranseg (vfranq).cimpmin THEN -- Se hace esto para los tipos de importe
		   --
		   v_cambio_tipimporte := 1;
		   --
		 END IF;*/  -- IAXIS-5423  CJMR 23/09/2019
		 --
		 -- FIN SPV IAXIS-5247 Deducibles para Suplementos (Endosos)
            IF     risc.bonfranseg (vfranq).cgrup = pcgrup
               AND risc.bonfranseg (vfranq).csubgrup = pcsubgrup
               AND risc.bonfranseg (vfranq).cversion = pcversion
            THEN
               --risc.bonfranseg (vfranq).cnivel := pcnivel;  -- IAXIS-5423  CJMR 23/09/2019
               --risc.bonfranseg (vfranq).tnivel := '';       -- IAXIS-5423  CJMR 23/09/2019

               --IF pcnivel IS NOT NULL  -- IAXIS-5423  CJMR 23/09/2019
               --THEN                    -- IAXIS-5423  CJMR 23/09/2019
                  BEGIN
                    SELECT impvalor1,
                           cimpmin,
                           impmin,
                           cnivel
                      INTO risc.bonfranseg (vfranq).impvalor1,
                           risc.bonfranseg (vfranq).cimpmin,
                           risc.bonfranseg (vfranq).impmin,
                           risc.bonfranseg (vfranq).cnivel
                      FROM estbf_bonfranseg bf
                     WHERE bf.sseguro = poliza.det_poliza.sseguro
                       AND bf.nriesgo = nriesgo
                       AND bf.cgrup = risc.bonfranseg(vfranq).cgrup
                       AND bf.csubgrup = risc.bonfranseg (vfranq).csubgrup
                       AND bf.cversion = risc.bonfranseg (vfranq).cversion
                       AND bf.nmovimi = (SELECT MAX(bf2.nmovimi)
                                           FROM estbf_bonfranseg bf2
                                          WHERE bf2.sseguro = bf.sseguro
                                            AND bf2.nriesgo = bf.nriesgo);
                  EXCEPTION WHEN NO_DATA_FOUND THEN
                    BEGIN
                        SELECT impvalor1,
                               cimpmin,
                               impmin,
                               cnivel
                          INTO risc.bonfranseg (vfranq).impvalor1,
                               risc.bonfranseg (vfranq).cimpmin,
                               risc.bonfranseg (vfranq).impmin,
                               risc.bonfranseg (vfranq).cnivel
                          FROM bf_bonfranseg bf
                         WHERE bf.sseguro = poliza.det_poliza.ssegpol
                           AND bf.nriesgo = nriesgo
                           AND bf.cgrup = risc.bonfranseg(vfranq).cgrup
                           AND bf.csubgrup = risc.bonfranseg (vfranq).csubgrup
                           AND bf.cversion = risc.bonfranseg (vfranq).cversion
                           AND bf.nmovimi = (SELECT MAX(bf2.nmovimi)
                                               FROM bf_bonfranseg bf2
                                              WHERE bf2.sseguro = bf.sseguro
                                                AND bf2.nriesgo = bf.nriesgo);
                    EXCEPTION WHEN NO_DATA_FOUND THEN
                       IF pcnivel IS NOT NULL THEN
                         SELECT cvalor1, impvalor1
                           INTO risc.bonfranseg (vfranq).cvalor1, risc.bonfranseg (vfranq).impvalor1
                           FROM bf_detnivel
                          WHERE cgrup = risc.bonfranseg(vfranq).cgrup
                            AND csubgrup = risc.bonfranseg (vfranq).csubgrup
                            AND cnivel = pcnivel;
                       END IF;
                    END;
                  END;

                  IF pcnivel IS NOT NULL THEN
                     risc.bonfranseg (vfranq).cnivel := pcnivel;
                  END IF;

                  SELECT tnivel, impvalor1
                    INTO risc.bonfranseg (vfranq).tnivel, risc.bonfranseg (vfranq).impvalor1
                    FROM bf_desnivel bd, bf_detnivel bfd
                   WHERE bd.cempres = bfd.cempres
                     AND bfd.cgrup = bd.cgrup
                     AND bfd.csubgrup = bd.csubgrup
                     AND bd.cversion = bfd.cversion
                     AND bd.cnivel = bfd.cnivel
                     AND bd.cgrup = risc.bonfranseg (vfranq).cgrup
                     AND bd.csubgrup = risc.bonfranseg (vfranq).csubgrup
                     AND bd.cversion = risc.bonfranseg (vfranq).cversion
                     AND bd.cempres = pac_md_common.f_get_cxtempresa
                     AND bd.cidioma = pac_md_common.f_get_cxtidioma
                     AND bd.cnivel = risc.bonfranseg (vfranq).cnivel;

                  IF pimpvalor1 IS NOT NULL
                  THEN
                     IF pcvalor1 IS NOT NULL AND pcvalor1 IN (1, 54)
                     THEN
                        /*percentatge*/
                        IF pimpvalor1 > 100
                        THEN
                           pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                                 1,
                                                                 9904542
                                                                );
                           RAISE e_object_error;
                        END IF;
                     END IF;

                     risc.bonfranseg (vfranq).impvalor1 := pimpvalor1;
                  END IF;

                  IF pimpvalor2 IS NOT NULL
                  THEN
                     IF pcvalor1 IS NOT NULL AND pcvalor1 IN (1, 54)
                     THEN
                        /*percentatge*/
                        IF pimpvalor1 > 100
                        THEN
                           pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                                 1,
                                                                 9904542
                                                                );
                           RAISE e_object_error;
                        END IF;
                     END IF;

                     risc.bonfranseg (vfranq).impvalor2 := pimpvalor2;
                  END IF;
				  
				  num_err := pac_productos.f_get_pargarantia ('IMP_DEF_DEDUC', poliza.det_poliza.sproduc, 7050, v_impmin, poliza.det_poliza.gestion.cactivi);
                  
                  IF pcimpmin = 4 or (risc.bonfranseg (vfranq).cimpmin = 4 and pcimpmin IS NULL) then
                            v_impmin := 1; 
                  END IF;

                  IF pimpmin IS NOT NULL
                  THEN
                     IF pcimpmin IS NOT NULL AND pcimpmin IN (1, 54)
                     THEN
                        /*percentatge*/
                        IF pimpmin > 100
                        THEN
                           pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                                 1,
                                                                 9904542
                                                                );
                           RAISE e_object_error;
                        END IF;
                     ELSIF     pcimpmin IS NOT NULL
                           AND pcimpmin IN (2)
                           AND pimpmax IS NOT NULL
                           AND pimpmin > pimpmax
                     THEN
                        /*import*/
                        pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                              1,
                                                              9904543
                                                             );
                        RAISE e_object_error;
                     END IF;
					 
		--28/04/2020 Bartolo Herrera IAXIS-6547 INICIO	
		
					IF pimpmin < v_impmin THEN
                        if not issuplem then
                            risc.bonfranseg (vfranq).impmin := v_impmin;
                        end if;
                    ELSE
                        risc.bonfranseg (vfranq).impmin := pimpmin;
                    END IF;
					
		--28/04/2020 Bartolo Herrera IAXIS-6547 FIN			

                  END IF;

                  IF pimpmax IS NOT NULL
                  THEN
                     IF pcimpmax IS NOT NULL AND pcimpmax IN (1, 54)
                     THEN
                        /*percentatge*/
                        IF pimpmax > 100
                        THEN
                           pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                                 1,
                                                                 9904542
                                                                );
                           RAISE e_object_error;
                        END IF;
                     ELSIF     pcimpmax IS NOT NULL
                           AND pcimpmax IN (2)
                           AND pimpmin IS NOT NULL
                           AND pimpmin > pimpmax
                     THEN
                        /*import*/
                        pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                              1,
                                                              9904543
                                                             );
                        RAISE e_object_error;
                     END IF;

                     risc.bonfranseg (vfranq).impmax := pimpmax;
                  END IF;

                  IF pcvalor1 IS NOT NULL
                  THEN
                     risc.bonfranseg (vfranq).cvalor1 := pcvalor1;
                  END IF;

                  IF pcvalor2 IS NOT NULL
                  THEN
                     risc.bonfranseg (vfranq).cvalor2 := pcvalor2;
                  END IF;

                  IF pcimpmin IS NOT NULL
                  THEN
                     risc.bonfranseg (vfranq).cimpmin := pcimpmin;
					 
					 IF risc.bonfranseg (vfranq).impmin < v_impmin THEN
                        if not issuplem then
                            risc.bonfranseg (vfranq).impmin := v_impmin; 
                        end if;
                    END IF;
					
                  END IF;

                  IF pcimpmax IS NOT NULL
                  THEN
                     risc.bonfranseg (vfranq).cimpmax := pcimpmax;
                  END IF;

                  IF vformulavalida IS NOT NULL
                  THEN
                     vnumerr :=
                        pac_bonfran.f_resuelve_formula
                                          (1,
                                           poliza.det_poliza.sseguro,
                                           poliza.det_poliza.gestion.cactivi,
                                           poliza.det_poliza.sproduc,
                                           risc.bonfranseg (vfranq).cgrup,
                                           poliza.det_poliza.gestion.fefecto,
                                           nriesgo,
                                           vformulavalida,
                                           poliza.det_poliza.nmovimi,
                                           vformula
                                          );

                     IF vnumerr <> 0
                     THEN
                        RAISE e_object_error;
                     END IF;

                     IF vformula <> 0
                     THEN
                        pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                                              1,
                                                              vformula
                                                             );
                        RAISE e_object_error;
                     END IF;
                  /*Mirem vformula i actualitzem la franqu?a del qual depengui...*/
                  END IF;

                  IF risc.bonfranseg (vfranq).cvalor1 = 99
                     AND pcvalor1 IS NULL
                  THEN
                     risc.bonfranseg (vfranq).impvalor1 := NULL;
                     risc.bonfranseg (vfranq).impvalor2 := NULL;
                     risc.bonfranseg (vfranq).impmin := NULL;
                     risc.bonfranseg (vfranq).impmax := NULL;
                     risc.bonfranseg (vfranq).cvalor1 := NULL;
                     risc.bonfranseg (vfranq).cvalor2 := NULL;
                     risc.bonfranseg (vfranq).cimpmin := NULL;
                     risc.bonfranseg (vfranq).cimpmax := NULL;
                  END IF;
               --END IF;  -- IAXIS-5423  CJMR 23/09/2019

               IF pimpvalor1 IS NOT NULL
               THEN
                  risc.bonfranseg (vfranq).impvalor1 := pimpvalor1;
                  --risc.bonfranseg (vfranq).tnivel := pimpvalor1;  -- IAXIS-5423  CJMR 23/09/2019
               ELSE
                  /*  franq(vfranq).grupo.lsubgrupos(franq(vfranq).grupo.lsubgrupos.FIRST).ctipgrupsubgrup);*/
                  SELECT ctipgrupsubgrup
                    INTO vctipgrupsubgrup
                    FROM bf_grupsubgrup
                   WHERE cgrup = risc.bonfranseg (vfranq).cgrup
                     AND csubgrup = risc.bonfranseg (vfranq).csubgrup
                     AND cversion = risc.bonfranseg (vfranq).cversion
                     AND cempres = pac_md_common.f_get_cxtempresa;

                  IF vctipgrupsubgrup = 2
                  THEN
                     risc.bonfranseg (vfranq).tnivel := NULL;
                     risc.bonfranseg (vfranq).cnivel := NULL;
                  END IF;
               END IF;
            END IF;
         END LOOP;
      END IF;

      vpasexec := 7;
      num_err :=
         pac_iobj_prod.f_set_partriesgo (poliza.det_poliza,
                                         nriesgo,
                                         risc,
                                         mensajes
                                        );

      IF num_err <> 0
      THEN
         RAISE e_object_error;
      END IF;

      -- INI IAXIS-5423  CJMR 23/09/2019
      vpasexec := 8; 
      num_err := pac_md_grabardatos.f_grabarfranquicias(risc.bonfranseg, nriesgo, mensajes);

      IF num_err <> 0
      THEN
         RAISE e_object_error;
      END IF;
      -- FIN IAXIS-5423  CJMR 23/09/2019

      /*  franq := pac_mdpar_productos.f_get_franquicias(vproducto,
      poliza.det_poliza.gestion.cactivi,
      pac_iax_produccion.issimul, mensajes);
      IF franq IS NOT NULL
      AND franq.COUNT > 0 THEN
      FOR vfranq IN franq.FIRST .. franq.LAST LOOP
      FOR vriefranq IN risc.bonfranseg.FIRST .. risc.bonfranseg.LAST LOOP
      IF risc.bonfranseg(vriefranq).cgrup = franq(vfranq).cgrup
      AND risc.bonfranseg(vriefranq).csubgrup = franq(vfranq).csubgrupunic
      AND risc.bonfranseg(vriefranq).cversion = franq(vfranq).grupo.cversion THEN
      IF franqcontrat IS NULL THEN
      franqcontrat := t_iax_bf_proactgrup();
      END IF;
      franqcontrat.EXTEND;
      vindex := franqcontrat.LAST;
      franqcontrat(vindex) := ob_iax_bf_proactgrup();
      franqcontrat(vindex) := franq(vfranq);
      franqcontrat(vindex).franqcontratada := risc.bonfranseg(vriefranq);
      END IF;
      END LOOP;
      END LOOP;
      END IF;*/
      -- INI IAXIS-4201 Deducibles
      -- Se pone por defecto cuando se setea el deducible desde pantalla de amparos
	                      --INI SPV IAXIS-5247 Deducibles para Suplementos (Endosos)
      /*IF pcnivel <> 3 AND v_cambio_importe = 1  IAXIS-5423  CJMR 23/09/2019
	                  AND v_cambio_tipimporte = 1 THEN -- Si estan en cero es porque si hubo cambio 
         --               --FIN SPV IAXIS-5247 Deducibles para Suplementos (Endosos)
         UPDATE bf_detnivel
           SET cdefecto = 'N'
          WHERE cgrup = pcgrup
            AND csubgrup = pcsubgrup
            AND cversion = pcversion
            AND cdefecto ='S';
         --
          UPDATE bf_detnivel
           SET cdefecto = 'S'
          WHERE cgrup = pcgrup
            AND csubgrup = pcsubgrup
            AND cversion = pcversion
            AND cnivel = pcnivel;
        --
      END IF;*/  -- IAXIS-5423  CJMR 23/09/2019
      --
      COMMIT;
      -- FIN IAXIS-4201 Deducibles
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_franquicia;

   FUNCTION f_get_franquicias_garantia (
      pnriesgo    IN       NUMBER,
      pcpartida   IN       NUMBER,
      pcgarant    IN       NUMBER,
      mensajes    OUT      t_iax_mensajes
   )
      RETURN t_iax_bf_proactgrup
   IS
      gars           t_iax_garantias;
      gar            ob_iax_garantias;
      pargar         t_iaxpar_garantias;
      rie            ob_iax_riesgos;
      nerr           NUMBER;
      vpasexec       NUMBER (8)          := 1;
      vparam         VARCHAR2 (1)        := NULL;
      vobject        VARCHAR2 (200)
                           := 'PAC_IAX_PRODUCCION.f_get_franquicias_garantia';
      /*ACC 1312008*/
      vefectsuple    DATE                := NULL;
      nerrfefec      NUMBER;
      garsret        t_iax_garantias     := t_iax_garantias ();
      /*ACC 1312008*/
      /* Bug 22839 - RSC - 25/07/2012 - LCOL - Funcionalidad Certificado 0*/
      vplan          NUMBER;
      vconta         NUMBER;
      pregpar        t_iaxpar_preguntas;
      v_crespue      NUMBER;
      v_trespue      VARCHAR2 (2000);
      v_resp         NUMBER;
      vtprefor       VARCHAR2 (100);
      v_cplan        NUMBER;
      v_cambio       BOOLEAN;
      franq          t_iax_bf_proactgrup;
      franqcontrat   t_iax_bf_proactgrup;
      marcar         BOOLEAN;
      vindex         NUMBER;
      trobat         BOOLEAN;
      vtbonfranseg   t_iax_bonfranseg;
      vnumerr        NUMBER;
      lvalor2        NUMBER;
      limpmin        NUMBER;
      limpmax        NUMBER;
      vvalor         NUMBER;
   /* Fin Bug 22839*/
   BEGIN
      /*ob_iax_riesgos*/
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      franq :=
         pac_iax_produccion.f_get_franquicias_consulta (pnriesgo,
                                                        NULL,
                                                        mensajes
                                                       );
      /*franq := pac_mdpar_productos.f_get_franquicias(vproducto,
      poliza.det_poliza.gestion.cactivi,
      pnriesgo, poliza.det_poliza.sseguro,
      poliza.det_poliza.nmovimi,
      poliza.det_poliza.gestion.fefecto,
      poliza.det_poliza.ssegpol, NULL, NULL,
      NULL, NULL, NULL, NULL, NULL, NULL, NULL,
      NULL, NULL, NULL,
      pac_iax_produccion.issuplem,
      pac_iax_produccion.issimul, mensajes);*/
      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      IF rie.bonfranseg IS NOT NULL AND rie.bonfranseg.COUNT > 0
      THEN
         vtbonfranseg := rie.bonfranseg;

         IF franq IS NOT NULL AND franq.COUNT > 0
         THEN
            FOR vfranq IN franq.FIRST .. franq.LAST
            LOOP
               trobat := FALSE;
               marcar := FALSE;

               IF     franq (vfranq).garantias IS NOT NULL
                  AND franq (vfranq).garantias.COUNT > 0
               THEN
                  marcar := FALSE;

                  FOR vfranqgar IN
                     franq (vfranq).garantias.FIRST .. franq (vfranq).garantias.LAST
                  LOOP
                     IF franq (vfranq).garantias (vfranqgar).cgarant =
                                                                     pcgarant
                     THEN
                        marcar := TRUE;
                     END IF;
                  END LOOP;
               END IF;

               IF marcar
               THEN
                  IF franqcontrat IS NULL
                  THEN
                     franqcontrat := t_iax_bf_proactgrup ();
                  END IF;

                  franqcontrat.EXTEND;
                  vindex := franqcontrat.LAST;
                  franqcontrat (vindex) := ob_iax_bf_proactgrup ();
                  franqcontrat (vindex) := franq (vfranq);
                  trobat := FALSE;

                  FOR vriefranq IN vtbonfranseg.FIRST .. vtbonfranseg.LAST
                  LOOP
                     IF vtbonfranseg (vriefranq).cgrup = franq (vfranq).cgrup
                     THEN
                        /*    AND vtbonfranseg(vriefranq).csubgrup = franq(vfranq).csubgrupunic*/
                        /*   AND vtbonfranseg(vriefranq).cnivel IS NOT NULL THEN*/
                        trobat := TRUE;

                        IF vtbonfranseg (vriefranq).cvalor1 IS NOT NULL
                        THEN
                           IF     franqcontrat (vindex).lniveles IS NOT NULL
                              AND franqcontrat (vindex).lniveles.COUNT > 0
                           THEN
                              FOR vlstniveles IN
                                 franqcontrat (vindex).lniveles.FIRST .. franqcontrat
                                                                           (vindex
                                                                           ).lniveles.LAST
                              LOOP
                                 IF     franqcontrat (vindex).lniveles
                                                                 (vlstniveles).cvalor1 =
                                                                           99
                                    AND franqcontrat (vindex).lniveles
                                                                  (vlstniveles).id_listlibre IS NOT NULL
                                 THEN
                                    franqcontrat (vindex).lniveles
                                                                 (vlstniveles).listacvalor1 :=
                                       pac_mdpar_productos.f_get_bf_listalibre
                                          (franqcontrat (vindex).lniveles
                                                                  (vlstniveles).id_listlibre,
                                           mensajes
                                          );

                                    IF vtbonfranseg (vriefranq).cvalor1 IS NOT NULL
                                    THEN
                                       SELECT id_listlibre_2,
                                              id_listlibre_min,
                                              id_listlibre_max, cvalor
                                         INTO lvalor2,
                                              limpmin,
                                              limpmax, vvalor
                                         FROM bf_listlibre
                                        WHERE cempres =
                                                 pac_md_common.f_get_cxtempresa
                                          AND id_listlibre =
                                                 franqcontrat (vindex).lniveles
                                                                  (vlstniveles).id_listlibre
                                          AND catribu =
                                                 vtbonfranseg (vriefranq).cvalor1;

                                       vtbonfranseg (vriefranq).tvalor1 :=
                                          ff_desvalorfijo
                                              (vvalor,
                                               pac_md_common.f_get_cxtidioma,
                                               vtbonfranseg (vriefranq).cvalor1
                                              );
                                    END IF;

                                    IF lvalor2 IS NOT NULL
                                    THEN
                                       franqcontrat (vindex).lniveles
                                                                 (vlstniveles).listacvalor2 :=
                                          pac_mdpar_productos.f_get_bf_listalibre
                                                                    (lvalor2,
                                                                     mensajes
                                                                    );

                                       IF vtbonfranseg (vriefranq).cvalor2 IS NOT NULL
                                       THEN
                                          SELECT cvalor
                                            INTO vvalor
                                            FROM bf_listlibre
                                           WHERE cempres =
                                                    pac_md_common.f_get_cxtempresa
                                             AND id_listlibre = lvalor2
                                             AND catribu =
                                                    vtbonfranseg (vriefranq).cvalor2;

                                          vtbonfranseg (vriefranq).tvalor2 :=
                                             ff_desvalorfijo
                                                (vvalor,
                                                 pac_md_common.f_get_cxtidioma,
                                                 vtbonfranseg (vriefranq).cvalor2
                                                );
                                       END IF;
                                    END IF;

                                    IF limpmin IS NOT NULL
                                    THEN
                                       franqcontrat (vindex).lniveles
                                                                 (vlstniveles).listacimpmin :=
                                          pac_mdpar_productos.f_get_bf_listalibre
                                                                    (limpmin,
                                                                     mensajes
                                                                    );

                                       IF vtbonfranseg (vriefranq).cimpmin IS NOT NULL
                                       THEN
                                          SELECT cvalor
                                            INTO vvalor
                                            FROM bf_listlibre
                                           WHERE cempres =
                                                    pac_md_common.f_get_cxtempresa
                                             AND id_listlibre = limpmin
                                             AND catribu =
                                                    vtbonfranseg (vriefranq).cimpmin;

                                          vtbonfranseg (vriefranq).timpmin :=
                                             ff_desvalorfijo
                                                (vvalor,
                                                 pac_md_common.f_get_cxtidioma,
                                                 vtbonfranseg (vriefranq).cimpmin
                                                );
                                       END IF;
                                    END IF;

                                    IF limpmax IS NOT NULL
                                    THEN
                                       franqcontrat (vindex).lniveles
                                                                 (vlstniveles).listacimpmax :=
                                          pac_mdpar_productos.f_get_bf_listalibre
                                                                    (limpmax,
                                                                     mensajes
                                                                    );

                                       IF vtbonfranseg (vriefranq).cimpmax IS NOT NULL
                                       THEN
                                          SELECT cvalor
                                            INTO vvalor
                                            FROM bf_listlibre
                                           WHERE cempres =
                                                    pac_md_common.f_get_cxtempresa
                                             AND id_listlibre = limpmax
                                             AND catribu =
                                                    vtbonfranseg (vriefranq).cimpmax;

                                          vtbonfranseg (vriefranq).timpmax :=
                                             ff_desvalorfijo
                                                (vvalor,
                                                 pac_md_common.f_get_cxtidioma,
                                                 vtbonfranseg (vriefranq).cimpmax
                                                );
                                       END IF;
                                    END IF;
                                 END IF;
                              END LOOP;
                           END IF;
                        END IF;

                        franqcontrat (vindex).franqcontratada :=
                                                      vtbonfranseg (vriefranq);
                     END IF;
                  END LOOP;

                  IF NOT trobat
                  THEN
                     franqcontrat.DELETE (vindex);
                  END IF;
               END IF;

               marcar := FALSE;
            END LOOP;
         END IF;
      END IF;

      RETURN franqcontrat;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_franquicias_garantia;

   FUNCTION f_set_franqgar_manual (
      nriesgo    IN       NUMBER,
      cgarant    IN       NUMBER,
      pctipfra   IN       NUMBER,
      pifranq    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      gar                t_iax_garantias;
      tgr                ob_iax_garantias;
      rie                ob_iax_riesgos;
      npos               NUMBER;
      nerr               NUMBER;
      vmensaje           VARCHAR2 (1000);
      tgarant            VARCHAR2 (1000);
      desmsj             VARCHAR2 (1000);
      vpasexec           NUMBER (8)          := 1;
      vparam             VARCHAR2 (1)        := NULL;
      vobject            VARCHAR2 (200)
                                := 'PAC_IAX_PRODUCCION.f_set_franqgar_manual';
      /*ACC 13122008*/
      nerrfefec          NUMBER;
      vefectsuple        DATE                := NULL;
      /*ACC 13122008*/
      v_irevali          NUMBER (13, 2);
      v_prevali          NUMBER (5, 2);
      franq              t_iax_bf_proactgrup;
      valorfranquicias   NUMBER              := 0;

      /* comproba que el codigo de garantia no exista*/
      /* devuelve la posicion del indice o bien -1 sino existe*/
      FUNCTION existgar (cgarant IN NUMBER)
         RETURN NUMBER
      IS
      BEGIN
         IF gar IS NULL
         THEN
            RETURN -1;
         END IF;

         IF gar.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vgar IN gar.FIRST .. gar.LAST
         LOOP
            IF gar.EXISTS (vgar)
            THEN
               IF gar (vgar).cgarant = cgarant
               THEN
                  RETURN vgar;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existgar;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                                       (mensajes,
                                        1,
                                        -456,
                                        'No se ha inicializado correctamente'
                                       );
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                                             (mensajes,
                                              1,
                                              49773,
                                              'No se ha encontrado el riesgo'
                                             );
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      IF pifranq < 0
      THEN
         /*Validem que la suma de les garanties on participia la franquicia no sigui negatiu*/
         /*si el IFRANQ ¿s negatiu*/
         franq :=
            pac_iax_produccion.f_get_franquicias_garantia (nriesgo,
                                                           NULL,
                                                           cgarant,
                                                           mensajes
                                                          );

         /*ob_iax_bf_proactgrup*/
         IF franq IS NOT NULL AND franq.COUNT > 0
         THEN
            FOR vfranq IN franq.FIRST .. franq.LAST
            LOOP
               /*   IF franq(vfranq).garantias IS NOT NULL
               AND franq(vfranq).garantias.COUNT > 0 THEN   -- ob_iax_bf_progarangrup,
               FOR vfranqgar IN
               franq(vfranq).garantias.FIRST .. franq(vfranq).garantias.LAST LOOP
               IF franq(vfranq).garantias(vfranqgar).cgarant = cgarant THEN*/
               IF rie.bonfranseg IS NOT NULL AND rie.bonfranseg.COUNT > 0
               THEN
                  FOR vbonfranq IN
                     rie.bonfranseg.FIRST .. rie.bonfranseg.LAST
                  LOOP
                     IF rie.bonfranseg (vbonfranq).cgrup =
                                                   franq (vfranq).grupo.cgrup
                     THEN
                        IF rie.bonfranseg (vbonfranq).cvalor1 = 2
                        THEN
                           /*importe fijo*/
                           valorfranquicias :=
                                valorfranquicias
                              + rie.bonfranseg (vbonfranq).impvalor1;
                        END IF;
                     END IF;
                  END LOOP;
               END IF;
            /*END IF;
            END LOOP;
            END IF;*/
            END LOOP;
         END IF;

         IF valorfranquicias + (pifranq) < 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje
                             (mensajes,
                              1,
                              45532,
                              f_axis_literales (9904365,
                                                pac_md_common.f_get_cxtidioma
                                               )
                             );
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;
      gar := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;
      /* elimina una garantia previament seleccionada*/
      npos := existgar (cgarant);
      vpasexec := 8;

      IF gar (npos).cobliga = 1
      THEN
         gar (npos).ifranqu := pifranq;
      ELSE
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                               1,
                                               45532,
                                               'Garantia no contratada'
                                              );
      END IF;

      vpasexec := 19;
      nerr :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                nriesgo,
                                                gar,
                                                mensajes
                                               );

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                               (mensajes,
                                1,
                                45532,
                                'Error al inserto en el riesgo las garantias'
                               );
         vpasexec := 20;
         RAISE e_object_error;
      END IF;

      IF gar IS NOT NULL
      THEN
         IF gar.COUNT > 0
         THEN
            FOR vgar IN gar.FIRST .. gar.LAST
            LOOP
               IF gar.EXISTS (vgar)
               THEN
                  nerr := f_grabarobjetodbgar (gar (vgar), nriesgo, mensajes);

                  IF nerr > 0
                  THEN
                     vpasexec := 10;
                     RAISE e_object_error;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_franqgar_manual;

   /* BUG22839:DRA:26/09/2012:Inici*/
   FUNCTION f_es_col_admin (
      psseguro         IN       NUMBER,
      ptablas          IN       VARCHAR2 DEFAULT 'SEG',
      es_col_admin     OUT      NUMBER,
      es_certif_cero   OUT      NUMBER,
      mensajes         OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vobjectname   VARCHAR2 (100)  := 'PAC_IAX_PRODUCCION.f_es_col_admin';
      vparam        VARCHAR2 (2000)
         := 'parmetros - psseguro: ' || psseguro || ' - ptablas: ' || ptablas;
      vnumerr       NUMBER;
      vpasexec      NUMBER          := 0;
   BEGIN
      IF psseguro IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 1;
      vnumerr :=
         pac_md_produccion.f_es_col_admin (psseguro,
                                           ptablas,
                                           es_col_admin,
                                           es_certif_cero,
                                           mensajes
                                          );

      IF vnumerr <> 0
      THEN
         RAISE e_object_error;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_es_col_admin;

   FUNCTION f_emitir_col_admin (
      psseguro          IN       NUMBER,
      pcontinuaemitir   OUT      NUMBER,
      mensajes          OUT      t_iax_mensajes,
      ppasapsu          IN       NUMBER DEFAULT 1,
      pskipfusion       IN       NUMBER DEFAULT 0
   )
      RETURN NUMBER
   IS
      vobjectname        VARCHAR2 (100)
                                   := 'PAC_IAX_PRODUCCION.f_emitir_col_admin';
      vparam             VARCHAR2 (2000)
                                      := 'parmetros - psseguro: ' || psseguro;
      vnumerr            NUMBER;
      vpasexec           NUMBER                      := 0;
      vsproces           NUMBER;
      vcestadocol        movseguro.cestadocol%TYPE;
      /* Bug 24278 - APD - 05/12/2012*/
      vnmovimi           NUMBER;
      v_certifs_tratar   NUMBER;
      /*Bug 29665/163095 - 14/01/2014 - AMC*/
      v_npoliza          NUMBER;
      v_sproduc          NUMBER;
      vcempres           NUMBER;
   BEGIN
      vpasexec := 1;

      IF psseguro IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;

      /* Bug 24278 - APD - 03/12/2012*/
      /* por si quedan suplementos diferidos programados por ejecutar*/
      IF     pac_seguros.f_get_escertifcero (NULL, psseguro) = 1
         AND pac_seguros.f_es_col_admin (psseguro, 'SEG') = 1
      THEN
         vcestadocol := pac_movseguro.f_get_cestadocol (psseguro);
      END IF;

      vpasexec := 3;

      /* Si hay error (algun suplemento diferido de algun certificado no se ha podido*/
      /* ejecutar) no se puede terminar de emitir el colectivo*/
      IF NVL (vcestadocol, 0) = 2
      THEN
         /* Inicializamos los mensajes para mostrar otro ms especfico*/
         mensajes := NULL;
         /*Bug 24655 -- ECP -- 27/12/2012 Se agraga al mensaje  el n�mero de p�liza*/
         /*pac_iobj_mensajes.crea_nuevo_mensaje
         (mensajes, 2, 0,
         f_axis_literales(9904606,
         pac_md_common.f_get_cxtidioma)
         || ': ' || vsproces);*/
         pac_iobj_mensajes.crea_nuevo_mensaje
                           (mensajes,
                            1,
                            0,
                               f_axis_literales (9904606,
                                                 /* Bug 27417/161505 - 20/12/2013 - HRE*/
                                                 pac_md_common.f_get_cxtidioma
                                                )
                            || ' '
                            || f_axis_literales (800242,
                                                 pac_md_common.f_get_cxtidioma
                                                )
                            || ': '
                            || pac_iax_produccion.poliza.det_poliza.npoliza
                            || '. '
                           );
         RAISE e_object_error;
      END IF;

      /* fin Bug 24278 - APD - 03/12/2012*/
      vpasexec := 4;
      vsproces := NULL;
      vnumerr :=
         pac_md_produccion.f_emitir_col_admin (psseguro,
                                               vsproces,
                                               pcontinuaemitir,
                                               mensajes,
                                               ppasapsu,
                                               pskipfusion
                                              );

      IF vnumerr <> 0
      THEN
         RAISE e_object_error;
      END IF;

      SELECT npoliza, sproduc
        INTO v_npoliza, v_sproduc
        FROM seguros
       WHERE sseguro = psseguro;

      vpasexec := 5;
      /*Bug 29665/163095 - 14/01/2014 - AMC*/
      vnumerr :=
         pac_md_produccion.f_num_certif (v_npoliza,
                                         psseguro,
                                         1,
                                         v_certifs_tratar,
                                         mensajes
                                        );

      IF NOT (    NVL
                     (pac_md_param.f_get_parproducto_n
                                                      (v_sproduc,
                                                       'DIFIERE_EMITECOL_JOB',
                                                       mensajes
                                                      ),
                      0
                     ) = 1
              AND NVL
                     (pac_md_param.f_get_parproducto_n
                                                      (v_sproduc,
                                                       'NUM_DIFIERE_EMITECOL',
                                                       mensajes
                                                      ),
                      0
                     ) < v_certifs_tratar
             )
      THEN
         IF pcontinuaemitir <> 1
         THEN
            /* Bug 24278 - APD - 03/12/2012*/
            /* Si es el certificado 0 y es una poliza administrada*/
            IF     pac_seguros.f_get_escertifcero (NULL, psseguro) = 1
               AND pac_seguros.f_es_col_admin (psseguro, 'SEG') = 1
            THEN
               vcestadocol := pac_movseguro.f_get_cestadocol (psseguro);

               IF NVL (vcestadocol, 0) = 0
               THEN
                  vnumerr := pac_movseguro.f_set_cestadocol (psseguro, 1);

                  IF vnumerr <> 0
                  THEN
                     RAISE e_object_error;
                  END IF;
               END IF;
            END IF;

            /* fin Bug 24278 - APD - 03/12/2012*/
            vpasexec := 6;
            /* Inicializamos los mensajes para mostrar otro ms especfico*/
            mensajes := NULL;
            pac_iobj_mensajes.crea_nuevo_mensaje
                            (mensajes,
                             2,
                             0,
                                f_axis_literales
                                                (9904272,
                                                 pac_md_common.f_get_cxtidioma
                                                )
                             || ' '
                             || f_axis_literales
                                                (9000493,
                                                 pac_md_common.f_get_cxtidioma
                                                )
                             || ': '
                             || vsproces
                            );
         END IF;

         COMMIT;
         pac_seguros.p_modificar_seguro (psseguro, 0);

         IF pcontinuaemitir <> 1
         THEN
            /* BUG 28263 - 05/11/2013 - FPG - inicio*/
            SELECT NVL (MAX (nmovimi), 1)
              INTO vnmovimi
              FROM movseguro
             WHERE sseguro = psseguro;

            IF vnumerr = 0
            THEN
               vnumerr :=
                  pac_md_bpm.f_lanzar_proceso (psseguro,
                                               vnmovimi,
                                               NULL,
                                               '*',
                                               'EMITIDA',
                                               mensajes
                                              );
               COMMIT;

               IF vnumerr <> 0
               THEN
                  /*pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, nerror);*/
                  /*RAISE e_object_error;*/
                  NULL;
               /*continuo*/
               END IF;
            END IF;
         /* BUG 28263 - 05/11/2013 - FPG - final*/
         END IF;
      END IF;

      vcempres :=
         NVL (pac_md_common.f_get_cxtempresa,
              f_parinstalacion_n ('EMPRESADEF')
             );

      --si es colectivo administrado viene por aqui
      IF     NVL (pac_parametros.f_parempresa_n (vcempres, 'ENVIO_SRI'), 0) =
                                                                             1
         AND vnumerr = 0
      THEN
         vnumerr :=
               pac_sri.p_envio_sri (vcempres, psseguro, NVL (vnmovimi, 1), 1);

         --Si ha dado error
         IF vnumerr <> 0
         THEN
            p_tab_error (f_sysdate,
                         f_user,
                         'f_emitir_col_admin',
                         30,
                         'vcempres = ' || vcempres || ' psseguro = '
                         || psseguro,
                         vnumerr
                        );
         END IF;
      END IF;

      /*Fi Bug 29665/163095 - 14/01/2014 - AMC*/
      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;

         DECLARE
            v_creteni   NUMBER;
         BEGIN
            SELECT creteni
              INTO v_creteni
              FROM seguros
             WHERE sseguro = psseguro;

            IF v_creteni <> 2
            THEN
               pac_seguros.p_modificar_seguro (psseguro, 0);
            END IF;
         END;

         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;

         DECLARE
            v_creteni   NUMBER;
         BEGIN
            SELECT creteni
              INTO v_creteni
              FROM seguros
             WHERE sseguro = psseguro;

            IF vnumerr = -1
            THEN
               IF v_creteni NOT IN (2, 21)
               THEN
                  pac_seguros.p_modificar_seguro (psseguro, 0);
               END IF;
            ELSE
               IF v_creteni <> 2
               THEN
                  pac_seguros.p_modificar_seguro (psseguro, 0);
               END IF;
            END IF;
         END;

         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;

         DECLARE
            v_creteni   NUMBER;
         BEGIN
            SELECT creteni
              INTO v_creteni
              FROM seguros
             WHERE sseguro = psseguro;

            IF v_creteni <> 2
            THEN
               pac_seguros.p_modificar_seguro (psseguro, 0);
            END IF;
         END;

         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_emitir_col_admin;

   FUNCTION f_abrir_suplemento (psseguro IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      vobjectname   VARCHAR2 (100) := 'PAC_IAX_PRODUCCION.f_abrir_suplemento';
      vparam        VARCHAR2 (2000) := 'parmetros - psseguro: ' || psseguro;
      vnumerr       NUMBER          := 0;
      vpasexec      NUMBER          := 0;
      vcempres      NUMBER;
   BEGIN
      IF psseguro IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 1;
      vcempres :=
         NVL (pac_md_common.f_get_cxtempresa,
              f_parinstalacion_n ('EMPRESADEF')
             );
      vpasexec := 2;

      IF NVL (pac_parametros.f_parempresa_n (vcempres, 'ENVIO_SRI'), 0) = 1
      THEN
         vnumerr := pac_sri.f_comprobar_sri (psseguro);
      END IF;

      IF vnumerr = 0
      THEN
         vpasexec := 3;
         vnumerr := pac_md_produccion.f_abrir_suplemento (psseguro, mensajes);

         IF vnumerr <> 0
         THEN
            RAISE e_object_error;
         END IF;
      ELSE
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, vnumerr);
         RETURN vnumerr;
      END IF;

      COMMIT;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_abrir_suplemento;

   /* BUG22839:DRA:26/09/2012:Fi*/
   FUNCTION f_validar_franquicias (
      pnriesgo   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      gars               t_iax_garantias;
      tgr                ob_iax_garantias;
      rie                ob_iax_riesgos;
      npos               NUMBER;
      nerr               NUMBER;
      vmensaje           VARCHAR2 (1000);
      tgarant            VARCHAR2 (1000);
      desmsj             VARCHAR2 (1000);
      vpasexec           NUMBER (8)          := 1;
      vparam             VARCHAR2 (1)        := NULL;
      vobjectname        VARCHAR2 (200)
                                := 'PAC_IAX_PRODUCCION.f_validar_franquicias';
      franq              t_iax_bf_proactgrup;
      valorfranquicias   NUMBER              := 0;
      vformula           NUMBER;
      vformulavalida     NUMBER;
      vnumerr            NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                                       (mensajes,
                                        1,
                                        -456,
                                        'No se ha inicializado correctamente'
                                       );
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                                             (mensajes,
                                              1,
                                              49773,
                                              'No se ha encontrado el riesgo'
                                             );
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF gars IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                                         (mensajes,
                                          1,
                                          49773,
                                          'No se ha encontrado las garantias'
                                         );
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      IF gars IS NOT NULL AND gars.COUNT > 0
      THEN
         FOR vgar IN gars.FIRST .. gars.LAST
         LOOP
            IF NVL (gars (vgar).ifranqu, 0) < 0 AND gars (vgar).cobliga = 1
            THEN
               franq :=
                  pac_iax_produccion.f_get_franquicias_garantia
                                                         (pnriesgo,
                                                          NULL,
                                                          gars (vgar).cgarant,
                                                          mensajes
                                                         );
               vnumerr :=
                  pac_md_validaciones.f_valida_importefijo_franq
                                                          (pnriesgo,
                                                           gars (vgar).cgarant,
                                                           franq,
                                                           rie.bonfranseg,
                                                           gars (vgar).ifranqu,
                                                           valorfranquicias,
                                                           mensajes
                                                          );

               IF vnumerr <> 0
               THEN
                  RAISE e_object_error;
               END IF;

               valorfranquicias := 0;
            END IF;
         END LOOP;
      END IF;

      vnumerr :=
         pac_md_validaciones.f_valida_franquicias_libres (pnriesgo,
                                                          rie.bonfranseg,
                                                          mensajes
                                                         );

      IF vnumerr <> 0
      THEN
         RAISE e_object_error;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         ROLLBACK;
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_validar_franquicias;

   /* BUG24793:DRA:17/12/2012:Inici*/
   FUNCTION f_leeinquiaval_rie (
      pnriesgo   IN       NUMBER,
      pctipfig   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_inquiaval
   IS
      vinquiaval    t_iax_inquiaval;
      vinquiaval2   t_iax_inquiaval;
      vpasexec      NUMBER (8)      := 1;
      vparam        VARCHAR2 (200)
                     := 'pnriesgo=' || pnriesgo || ' - pctipfig=' || pctipfig;
      vobject       VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_leeinquiaval_rie';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      vinquiaval :=
                pac_iobj_prod.f_partpolinquiaval (poliza.det_poliza, mensajes);
      vpasexec := 3;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      IF vinquiaval IS NOT NULL
      THEN
         IF vinquiaval.COUNT > 0
         THEN
            vinquiaval2 := t_iax_inquiaval ();

            FOR vinqui IN vinquiaval.FIRST .. vinquiaval.LAST
            LOOP
               IF vinquiaval.EXISTS (vinqui)
               THEN
                  IF     vinquiaval (vinqui).ctipfig = pctipfig
                     AND vinquiaval (vinqui).nriesgo = NVL (pnriesgo, 1)
                  THEN
                     vinquiaval2.EXTEND;
                     vinquiaval2 (vinquiaval2.LAST) := vinquiaval (vinqui);
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      RETURN vinquiaval2;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leeinquiaval_rie;

   /* BUG24793:DRA:17/12/2012:Inici*/
   FUNCTION f_isaltacertificero (
      psseguro   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec      NUMBER (8)     := 1;
      vparam        VARCHAR2 (500);
      vobject       VARCHAR2 (200)
                                  := 'PAC_IAX_PRODUCCION.f_isaltacertificero';
      /*poliza         OB_IAX_DETPOLIZA;*/
      num_err       NUMBER;
      v_npoliza     NUMBER;
      v_existe      NUMBER;
      v_escertif0   NUMBER;
   BEGIN
      vpasexec := 2;
      num_err := 0;

      BEGIN
         SELECT npoliza
           INTO v_npoliza
           FROM seguros
          WHERE sseguro = psseguro;
      EXCEPTION
         WHEN OTHERS
         THEN
            v_npoliza := NULL;
      END;

      IF v_npoliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      IF NVL (f_parproductos_v (vproducto, 'ADMITE_CERTIFICADOS'), 0) = 1
      THEN
         /* vsseguro: en modificaci??e propuestas en el sseguro del certificado 0 en las reales.*/
         v_existe := pac_seguros.f_get_escertifcero (v_npoliza);
         v_escertif0 := pac_seguros.f_get_escertifcero (NULL, psseguro);

         IF v_escertif0 > 0
         THEN
            num_err := 1;
         ELSE
            IF v_existe > 0
            THEN
               num_err := 0;
            ELSE
               num_err := 1;
            END IF;
         END IF;
      ELSE
         num_err := 0;
      END IF;

      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN -1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN -1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN -1;
   END f_isaltacertificero;

   /* BUG 26253 - FAL - 05/03/2013*/
   FUNCTION f_es_age_lider (
      psseguro       IN       NUMBER,
      pnmovimi       IN       NUMBER,
      es_age_lider   OUT      NUMBER,
      mensajes       OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vobjectname   VARCHAR2 (100)  := 'PAC_IAX_PRODUCCION.f_es_age_lider';
      vparam        VARCHAR2 (2000)
         := 'parmetros - psseguro: ' || psseguro || ' - pnmovimi: '
            || pnmovimi;
      vnumerr       NUMBER;
      vpasexec      NUMBER          := 0;
   BEGIN
      IF psseguro IS NULL OR pnmovimi IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 1;
      es_age_lider :=
         pac_corretaje.f_esagelider (psseguro,
                                     pnmovimi,
                                     pac_md_common.f_get_cxtagente
                                    );
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_es_age_lider;

   /* FI BUG 26253*/
   FUNCTION f_hay_franq_bonusmalus (
      pfranquicias   OUT   NUMBER,
      pbonusmalus    OUT   NUMBER,
      mensajes       OUT   t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec      NUMBER (8)     := 1;
      vparam        VARCHAR2 (1)   := NULL;
      vobjectname   VARCHAR2 (200)
                               := 'PAC_IAX_PRODUCCION.f_hay_franq_bonusmalus';
      vnumerr       NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje
                                       (mensajes,
                                        1,
                                        -456,
                                        'No se ha inicializado correctamente'
                                       );
         RAISE e_param_error;
      END IF;

      vnumerr :=
         pac_mdpar_productos.f_hay_franq_bonusmalus
                                           (poliza.det_poliza.sproduc,
                                            poliza.det_poliza.gestion.cactivi,
                                            pfranquicias,
                                            pbonusmalus,
                                            mensajes
                                           );
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobjectname,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_hay_franq_bonusmalus;

   /*************************************************************************
   Recuperar informacion del  primer asegurado
   param out mensajes : mensajes de error
   param in  pnriesgo : numero riesgo
   return             : objeto asegurados
   *************************************************************************/
   FUNCTION f_leeprimasegurado (
      mensajes   OUT      t_iax_mensajes,
      pnriesgo   IN       NUMBER DEFAULT 1
   )
      RETURN ob_iax_asegurados
   IS
      aseg       t_iax_asegurados;
      rie        ob_iax_riesgos;
      num_err    NUMBER;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.F_LeePrimAsegurado';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      /* vigilar amb el 1 fitxe a riscos per asegurats acc*/
      /*// ACC he canviat el 1 per un parametre d'entrada 25022008*/
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001040);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      aseg := pac_iobj_prod.f_partriesasegurado (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;

      IF aseg IS NULL
      THEN
         RETURN NULL;
      END IF;

      IF aseg.COUNT = 0
      THEN
         RETURN NULL;
      END IF;

      /*// TEMPORAL TROBAR MILLOR OPCIO --//ACC 05052008*/
      num_err :=
         pac_md_persona.f_get_persona_agente (aseg (aseg.FIRST).sperson,
                                              poliza.det_poliza.cagente,
                                              vpmode,
                                              aseg (aseg.FIRST),
                                              mensajes
                                             );

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 17;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN aseg (aseg.FIRST);
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leeprimasegurado;

   /*************************************************************************
   Comprueba si hay un cambio de plan
   param out mensajes : mensajes de error
   return             : 0-Ok,1-Error
   -- Bug 27505/148735 - 19/08/2013 - AMC
   *************************************************************************/
   FUNCTION f_haycambioplan (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      v_cplan    NUMBER;
      vplan      NUMBER;
      num_err    NUMBER;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_haycambioplan';
   BEGIN
      IF     pac_iax_produccion.poliza.det_poliza.preguntas IS NOT NULL
         AND pac_iax_produccion.poliza.det_poliza.preguntas.COUNT > 0
      THEN
         FOR i IN
            pac_iax_produccion.poliza.det_poliza.preguntas.FIRST .. pac_iax_produccion.poliza.det_poliza.preguntas.LAST
         LOOP
            IF pac_iax_produccion.poliza.det_poliza.preguntas (i).cpregun =
                                                                         4089
            THEN
               vplan :=
                   pac_iax_produccion.poliza.det_poliza.preguntas (i).crespue;
               num_err :=
                  pac_preguntas.f_get_pregunpolseg
                               (pac_iax_produccion.poliza.det_poliza.sseguro,
                                4089,
                                'EST',
                                v_cplan
                               );

               IF num_err = 120135
               THEN
                  v_cplan := vplan;
               END IF;

               IF v_cplan <> vplan
               THEN
                  pac_iax_produccion.iscambioplan := TRUE;
               END IF;
            END IF;
         END LOOP;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_haycambioplan;

   /***********************************************************************
   Funcion que inicializa el caso de bpm en la p�liza
   param in pnnumcaso  : numero de caso
   param in pncaso_bpm: Numero de caso BPM
   param in pnsolici_bpm: Numero de solicitud BPM
   param out mensajes : mensajes de error
   return             : number  0 -> Ok  1 --> Error
   Bug 28263/153355 - 01/10/2013 - AMC
   ***********************************************************************/
   FUNCTION f_set_casobpm (
      pnnumcaso      IN       NUMBER,
      pncaso_bpm     IN       NUMBER,
      pnsolici_bpm   IN       NUMBER,
      mensajes       OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1000)
         :=    'Parametros: pnnumcaso= '
            || pnnumcaso
            || ' pncaso_bpm='
            || pncaso_bpm
            || ' pnsolici_bpm:'
            || pnsolici_bpm;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.f_set_casobpm';
      num_err    NUMBER;
   BEGIN
      IF pnnumcaso IS NULL AND pncaso_bpm IS NULL AND pnsolici_bpm IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;

      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      pac_iax_produccion.poliza.det_poliza.datos_bpm :=
         pac_iax_gestionbpm.f_lee_caso_bpm (pnnumcaso,
                                            pncaso_bpm,
                                            pnsolici_bpm,
                                            mensajes
                                           );
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_casobpm;

   /*************************************************************************
   Recupera el objeto ob_iax_bpm (casos bpm) de la poliza
   param out mensajes : mensajes de error
   return             : objeto casos  BPM
   *************************************************************************/
   FUNCTION f_get_casosbmp (mensajes OUT t_iax_mensajes)
      RETURN ob_iax_bpm
   IS
      casos_bpm   ob_iax_bpm;
      vpasexec    NUMBER (8)     := 1;
      vparam      VARCHAR2 (1)   := NULL;
      vobject     VARCHAR2 (200) := 'PAC_IOBJ_PROD.f_get_casosbmp';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      RETURN poliza.det_poliza.datos_bpm;
   EXCEPTION
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_casosbmp;

   /*************************************************************************
   Recupera el historico de riesgos por movimientos
   param out mensajes : mensajes de error
   return             : ref cursor
   *************************************************************************/
   FUNCTION f_get_histriesgos (
      psseguro   IN       NUMBER,
      pnriesgo   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN sys_refcursor
   IS
      cur        sys_refcursor;
      vpasexec   NUMBER (8)      := 1;
      vparam     VARCHAR2 (1)    := NULL;
      vobject    VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.f_get_histriesgos';
      num_err    NUMBER;
      squery     VARCHAR2 (4000);
   BEGIN
      squery :=
            'SELECT  '
         || pnriesgo
         || ' NRIESGO,f_desriesgo_t('
         || psseguro
         || ','
         || pnriesgo
         || ', f_sysdate, pac_md_common.f_Get_cxtidioma, nmovimi) TRIESGO,fmovimi,
(select tatribu from detvalores where cvalor=16
and catribu=cmovseg
and cidioma= pac_md_common.f_Get_cxtidioma) as ttipmov,
(select tmotmov from motmovseg motmov
where motmov.CMOTMOV= movseguro.CMOTMOV
and cidioma= pac_md_common.f_Get_cxtidioma and not exists(select 1
from pds_supl_grup
where cempres =  pac_md_common.f_Get_cxtempresa
and cmotmov = motmov.cmotmov
and slitera IS NOT NULL)
UNION
SELECT f_axis_literales(slitera, pac_md_common.f_Get_cxtidioma)
from pds_supl_grup
where cempres = pac_md_common.f_Get_cxtempresa
and cmotmov = movseguro.CMOTMOV and slitera IS NOT NULL) as tmotmov,
fefecto,femisio,NMOVIMI,CMOTMOV
FROM movseguro
WHERE sseguro = '
         || psseguro
         || '
AND (EXISTS(SELECT cmotmov
FROM detmovseguro
WHERE sseguro = '
         || psseguro
         || '
AND movseguro.nmovimi = nmovimi
AND cmotmov IN(SELECT cmotmov
FROM pds_supl_grup
WHERE tgrupdades = ''RIESGOS'' AND CMOTMOV not in( 424,425)))
OR cmotmov = 100)
ORDER BY nmovimi desc';
      cur := pac_iax_listvalores.f_opencursor (squery, mensajes);
      RETURN cur;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
   END f_get_histriesgos;

   /*************************************************************************
   Recupera el numfolio, fecha mandato y sucursal
   param out mensajes : mensajes de error
   return             : number
   *************************************************************************/
   FUNCTION f_get_folio (
      pcbancar        IN       mandatos.cbancar%TYPE,
      pnumfolio       OUT      mandatos_seguros.numfolio%TYPE,
      pfechamandato   OUT      mandatos_seguros.fechamandato%TYPE,
      psucursal       OUT      mandatos_seguros.sucursal%TYPE,
      mensajes        OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      psperson_man   mandatos.sperson%TYPE;
      psperson_tom   tomadores.sseguro%TYPE;
      psperson_ase   asegurados.sseguro%TYPE;
      toma           t_iax_tomadores;
      tom            ob_iax_tomadores;
      t_gesc         t_iax_gescobros;
      gesc           ob_iax_gescobros;
      t_aseg         t_iax_asegurados;
      aseg           ob_iax_asegurados;
      t_riesgos      t_iax_riesgos;
      riesgo         ob_iax_riesgos;
      num_err        NUMBER;
      vpasexec       NUMBER (8)                := 1;
      vparam         VARCHAR2 (1)              := NULL;
      vobject        VARCHAR2 (200)       := 'PAC_IAX_PRODUCCION.F_get_folio';
   BEGIN
      IF poliza.det_poliza IS NULL OR pcbancar IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      /* Recuperar primer asegurado*/
      t_riesgos :=
                  pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

      IF t_riesgos IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001041);
         /* NO EXISTEN ASEGURADOS*/
         vpasexec := 2;
         RAISE e_object_error;
      ELSE
         vpasexec := 3;

         IF t_riesgos.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001041);
            /*'No existen asegurados'*/
            RAISE e_object_error;
         END IF;
      END IF;

      riesgo := t_riesgos (t_riesgos.FIRST);
      vpasexec := 4;
      t_aseg := pac_iobj_prod.f_partriesasegurado (riesgo, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000736);
            RAISE e_object_error;
         END IF;
      END IF;

      IF t_aseg IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000736);
         vpasexec := 6;
         RAISE e_object_error;
      ELSE
         IF t_aseg.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000736);
            vpasexec := 7;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;
      aseg := t_aseg (t_aseg.FIRST);
      psperson_ase := aseg.sperson;
      /* SE MIRA TOMADOR*/
      vpasexec := 7;
      toma := pac_iobj_prod.f_partpoltomadores (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 4;

      IF toma IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001089);
         vpasexec := 5;
         RAISE e_object_error;
      ELSE
         IF toma.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001089);
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 7;
      tom := toma (toma.FIRST);

      IF tom IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001089);
         vpasexec := 8;
         RAISE e_object_error;
      END IF;

      psperson_tom := tom.sperson;

      IF tom.cexistepagador = 1
      THEN
         t_gesc :=
                pac_iobj_prod.f_partpolgescobro (poliza.det_poliza, mensajes);

         IF t_gesc IS NULL
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903392);
            vpasexec := 9;
            RAISE e_object_error;
         ELSE
            IF t_gesc.COUNT = 0
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903392);
               vpasexec := 10;
               RAISE e_object_error;
            END IF;
         END IF;

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 11;
               RAISE e_object_error;
            END IF;
         END IF;

         vpasexec := 12;
         gesc := t_gesc (t_gesc.FIRST);

         IF gesc IS NULL
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9903392);
            vpasexec := 13;
            RAISE e_object_error;
         END IF;

         psperson_man := gesc.sperson;
      ELSE
         psperson_man := psperson_tom;
      END IF;

      num_err :=
         pac_md_mandatos.f_get_folio (psperson_man,
                                      psperson_ase,
                                      pcbancar,
                                      pnumfolio,
                                      pfechamandato,
                                      psucursal,
                                      mensajes
                                     );

      IF num_err <> 0
      THEN
         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 20;
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_get_folio;

   /* Bug 30365/167876*/
   FUNCTION f_inibeneficiarios (pnriesgo IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      num_err        NUMBER;
      vpasexec       NUMBER (8)              := 1;
      vparam         VARCHAR2 (100)          := 'pnriesgo:' || pnriesgo;
      vobject        VARCHAR2 (200)
                                   := 'PAC_IAX_PRODUCCION.f_inibeneficiarios';
      riesgo         ob_iax_riesgos;
      spersonbene0   NUMBER;
      vnorden        NUMBER;
      v_sseguro      NUMBER;
      ob_benef       ob_iax_benespeciales    := ob_iax_benespeciales ();
      benef_riesgo   t_iax_beneidentificados;
      v_chereda      NUMBER;
   BEGIN
      num_err :=
         pac_productos.f_get_herencia_col (poliza.det_poliza.sproduc,
                                           19,
                                           v_chereda
                                          );

      IF     pac_mdpar_productos.f_get_parproducto ('ADMITE_CERTIFICADOS',
                                                    poliza.det_poliza.sproduc
                                                   ) = 1
         AND NOT pac_iax_produccion.isaltacol
         AND v_chereda = 1
      THEN
         num_err :=
            pac_seguros.f_get_sseguro (poliza.det_poliza.npoliza,
                                       0,
                                       'POL',
                                       v_sseguro
                                      );

         IF num_err <> 0
         THEN
            RAISE e_object_error;
         END IF;

         num_err :=
            pac_md_obtenerdatos.f_inicializa ('POL', v_sseguro, NULL,
                                              mensajes);

         IF num_err <> 0
         THEN
            RAISE e_object_error;
         END IF;

         riesgo := pac_md_obtenerdatos.f_lee_riesgo (mensajes, pnriesgo);
         vpasexec := 2;
         benef_riesgo := t_iax_beneidentificados ();

         IF riesgo.beneficiario.benefesp.benef_riesgo IS NOT NULL
         THEN
            vpasexec := 3;

            IF riesgo.beneficiario.benefesp.benef_riesgo.COUNT > 0
            THEN
               vpasexec := 4;

               FOR i IN
                  riesgo.beneficiario.benefesp.benef_riesgo.FIRST .. riesgo.beneficiario.benefesp.benef_riesgo.LAST
               LOOP
                  vpasexec := 5;
                  spersonbene0 :=
                        riesgo.beneficiario.benefesp.benef_riesgo (i).sperson;
                  num_err :=
                     f_insert_beneident_r (riesgo.nriesgo,
                                           spersonbene0,
                                           vnorden,
                                           mensajes
                                          );

                  IF num_err <> 0
                  THEN
                     RAISE e_object_error;
                  END IF;

                  vpasexec := 6;
                  num_err :=
                     f_set_beneident_r
                        (riesgo.nriesgo,
                         riesgo.beneficiario.benefesp.benef_riesgo (i).norden,
                         0,
                         riesgo.beneficiario.benefesp.benef_riesgo (i).ctipben,
                         riesgo.beneficiario.benefesp.benef_riesgo (i).cparen,
                         riesgo.beneficiario.benefesp.benef_riesgo (i).pparticip,
                         riesgo.beneficiario.benefesp.benef_riesgo (i).cestado,
                         riesgo.beneficiario.benefesp.benef_riesgo (i).ctipocon,
                         mensajes
                        );

                  IF num_err <> 0
                  THEN
                     RAISE e_object_error;
                  END IF;
               END LOOP;
            END IF;
         END IF;

         vpasexec := 7;

         FOR j IN
            poliza.det_poliza.riesgos.FIRST .. poliza.det_poliza.riesgos.LAST
         LOOP
            vpasexec := 8;

            IF poliza.det_poliza.riesgos (j).beneficiario.benefesp.benef_riesgo IS NOT NULL
            THEN
               IF poliza.det_poliza.riesgos (j).beneficiario.benefesp.benef_riesgo.COUNT >
                                                                            0
               THEN
                  FOR i IN
                     poliza.det_poliza.riesgos (j).beneficiario.benefesp.benef_riesgo.FIRST .. poliza.det_poliza.riesgos
                                                                                                 (j
                                                                                                 ).beneficiario.benefesp.benef_riesgo.LAST
                  LOOP
                     vpasexec := 9;
                     poliza.det_poliza.riesgos (j).beneficiario.benefesp.benef_riesgo
                                                                          (i).cheredado :=
                                                                            1;
                  END LOOP;
               END IF;
            END IF;
         END LOOP;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_inibeneficiarios;

   /*************************************************************************
   Informa un fondo inv al modelo libre.
   param in pmodelo
   param in pccodfon
   param in pcmodabo
   param in ppinv
   param out mensajes : mensajes de error
   return             : objeto casos  BPM
   *************************************************************************/
   FUNCTION f_set_modeloinv_fondo (
      pnmodelo   IN       NUMBER,
      pccodfon   IN       NUMBER,
      pcmodabo   IN       NUMBER,
      ppinvers   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      nerror      NUMBER;
      distr       ob_iax_produlkmodelosinv;
      vobject     VARCHAR2 (100)
                                := 'PAC_IAX_PRODUCCION.f_set_modeloinv_fondo';
      vpasexec    NUMBER                   := 1;
      vparam      VARCHAR2 (200)
         :=    'nmodelo:'
            || pnmodelo
            || ' ccodfon:'
            || pccodfon
            || ' pcmodabo:'
            || pcmodabo
            || ' pinvers:'
            || ppinvers;
      mensajes2   t_iax_mensajes           := t_iax_mensajes ();
      vtfondo     VARCHAR2 (100);
      vexistf     BOOLEAN                  := FALSE;
   BEGIN
      SELECT f.tfonabv
        INTO vtfondo
        FROM fondos f
       WHERE ccodfon = pccodfon;

      distr := ob_iax_produlkmodelosinv ();
      vpasexec := 1;
      vpasexec := 3;

      IF NVL (f_parproductos_v (pac_iax_produccion.vproducto, 'PERFIL_LIBRE'),
              0
             ) = pnmodelo
      THEN
         IF poliza.det_poliza.modeloinv IS NULL
         THEN
            poliza.det_poliza.modeloinv := ob_iax_produlkmodelosinv ();
         ELSE
            IF poliza.det_poliza.modeloinv.cmodinv <> pnmodelo
            THEN
               poliza.det_poliza.modeloinv := ob_iax_produlkmodelosinv ();
            END IF;

            distr := poliza.det_poliza.modeloinv;
         END IF;

         IF distr.cmodinv IS NULL
         THEN
            vpasexec := 4;
            distr.cmodinv := pnmodelo;
            distr.modinvfondo := t_iax_produlkmodinvfondo ();
         ELSE
            /* distr.modinvfondo := t_iax_produlkmodinvfondo();*/
            vpasexec := 5;

            FOR i IN distr.modinvfondo.FIRST .. distr.modinvfondo.LAST
            LOOP
               vpasexec := 6;

               IF distr.modinvfondo (i).ccodfon = pccodfon
               THEN
                  IF ppinvers IS NOT NULL
                  THEN
                     distr.modinvfondo (i).pinvers := ppinvers;
                  END IF;

                  distr.modinvfondo (i).cmodabo := pcmodabo;
                  distr.modinvfondo (i).cobliga := 1;
                  vexistf := TRUE;
                  EXIT;
               END IF;
            END LOOP;
         END IF;

         IF NOT vexistf
         THEN
            vpasexec := 7;
            distr.modinvfondo.EXTEND;
            distr.modinvfondo (distr.modinvfondo.LAST) :=
                                                 ob_iax_produlkmodinvfondo
                                                                          ();
            distr.modinvfondo (distr.modinvfondo.LAST).ccodfon := pccodfon;
            distr.modinvfondo (distr.modinvfondo.LAST).pinvers := ppinvers;
            distr.modinvfondo (distr.modinvfondo.LAST).cmodabo := pcmodabo;
            distr.modinvfondo (distr.modinvfondo.LAST).tcodfon := vtfondo;
            distr.modinvfondo (distr.modinvfondo.LAST).cobliga := 1;
         END IF;
      ELSE
         vpasexec := 8;

         IF poliza.det_poliza.modeloinv IS NULL
         THEN
            /*poliza.det_poliza.modeloinv := ob_iax_produlkmodelosinv();*/
            distr := f_leemodeloinversionfinv (pnmodelo, mensajes);
         ELSE
            IF poliza.det_poliza.modeloinv.cmodinv <> pnmodelo
            THEN
               poliza.det_poliza.modeloinv := ob_iax_produlkmodelosinv ();
               distr := f_leemodeloinversionfinv (pnmodelo, mensajes);
            ELSE
               distr := poliza.det_poliza.modeloinv;
            END IF;
         END IF;

         FOR i IN distr.modinvfondo.FIRST .. distr.modinvfondo.LAST
         LOOP
            vpasexec := 10;

            IF distr.modinvfondo (i).ccodfon = pccodfon
            THEN
               distr.modinvfondo (i).cmodabo := pcmodabo;
               distr.modinvfondo (i).cobliga := 1;
               EXIT;
            END IF;
         END LOOP;
      END IF;

      poliza.det_poliza.modeloinv := distr;
      RETURN 0;
   EXCEPTION
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_modeloinv_fondo;

   /*************************************************************************
   elimina un fondo inv al modelo libre.
   param in pmodelo
   param in pccodfon
   param in pcmodabo
   param in ppinv
   param out mensajes : mensajes de error
   return             : objeto casos  BPM
   *************************************************************************/
   FUNCTION f_elimina_modeloinv_fondo (
      pnmodelo   IN       NUMBER,
      pccodfon   IN       NUMBER,
      pcmodabo   IN       NUMBER,
      ppinvers   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      nerror     NUMBER;
      distr      ob_iax_produlkmodelosinv;
      vobject    VARCHAR2 (100) := 'PAC_IAX_PRODUCCION.f_set_modeloinv_fondo';
      vpasexec   NUMBER                   := 1;
      vparam     VARCHAR2 (200)
         :=    'nmodelo:'
            || pnmodelo
            || ' ccodfon:'
            || pccodfon
            || ' pcmodabo:'
            || pcmodabo
            || ' pinvers:'
            || ppinvers;
   BEGIN
      IF NVL (f_parproductos_v (pac_iax_produccion.vproducto, 'PERFIL_LIBRE'),
              0
             ) = pnmodelo
      THEN
         IF poliza.det_poliza.modeloinv IS NOT NULL
         THEN
            FOR i IN
               poliza.det_poliza.modeloinv.modinvfondo.FIRST .. poliza.det_poliza.modeloinv.modinvfondo.LAST
            LOOP
               IF poliza.det_poliza.modeloinv.modinvfondo (i).ccodfon =
                                                                     pccodfon
               THEN
                  poliza.det_poliza.modeloinv.modinvfondo.DELETE (i);
               END IF;
            END LOOP;
         END IF;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_elimina_modeloinv_fondo;

   /* BUG 0033510 - FAL - 19/11/2014*/
   /*************************************************************************
   Tarifica todos los riesgos
   (para ello se debe guardar toda la informaci�n a la base de datos)
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_tarificar_todos_riesgos (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      ries       t_iax_riesgos;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200)
                            := 'PAC_IAX_PRODUCCION.F_Tarificar_todos_riesgos';
      num_err    NUMBER;
   BEGIN
      IF NVL (f_parproductos_v (vproducto, 'TARIFA_TODOS_RIESGOS'), 0) = 1
      THEN
         IF NVL (f_parproductos_v (vproducto, 'VALIDA_TITULAR_SALUD'), 0) = 1
         THEN
            num_err :=
                      pac_iax_validaciones.f_validar_titular_salud (mensajes);

            IF num_err <> 0
            THEN
               RAISE e_object_error;
            END IF;
         END IF;

         ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

         IF ries IS NOT NULL
         THEN
            IF ries.COUNT > 0
            THEN
               FOR vrie IN ries.FIRST .. ries.LAST
               LOOP
                  IF ries.EXISTS (vrie)
                  THEN
                     IF ries (vrie).fanulac IS NULL
                     THEN
                        num_err :=
                           pac_iax_produccion.f_tarificar
                                                         (ries (vrie).nriesgo,
                                                          mensajes
                                                         );
                     END IF;

                     IF num_err <> 0
                     THEN
                        RETURN num_err;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_tarificar_todos_riesgos;

   /* BUG 0033510 - FAL - 19/11/2014*/
   /*CONVENIOS*/
   /*JRH 03/2008*/
   /*************************************************************************
   Lee los datos del riesgo (asegurados mes para el movimiento de regularizaci�n)
   param out mensajes : mensajes de error
   return             : objeto preguntas
   *************************************************************************/
   FUNCTION f_lee_aseguradosmes (nriesgo IN NUMBER, mensajes OUT t_iax_mensajes)
      RETURN ob_iax_aseguradosmes
   IS
      asm        ob_iax_aseguradosmes;
      rie        ob_iax_riesgos;
      vpasexec   NUMBER (8)           := 1;
      vparam     VARCHAR2 (1)         := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.f_lee_aseguradosmes';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
          pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, nriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 3;
      asm := pac_iobj_prod.f_partaseguradosmes (rie, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN asm;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_lee_aseguradosmes;

   /*************************************************************************
   Grabar informacion de un registro de aseguradosmes para un suplemento de regularizaci�n
   param in nriesgo   : numero de riesgo
   param in anyo    : a�o
   iy los importes de cada mes
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabaraseguradosmes (
      pnriesgo   IN       NUMBER,
      pmes1      IN       NUMBER,
      pmes2      IN       NUMBER,
      pmes3      IN       NUMBER,
      pmes4      IN       NUMBER,
      pmes5      IN       NUMBER,
      pmes6      IN       NUMBER,
      pmes7      IN       NUMBER,
      pmes8      IN       NUMBER,
      pmes9      IN       NUMBER,
      pmes10     IN       NUMBER,
      pmes11     IN       NUMBER,
      pmes12     IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      asm        ob_iax_aseguradosmes;
      rie        ob_iax_riesgos;
      nerr       NUMBER;
      vmensaje   VARCHAR2 (1000);
      tgarant    VARCHAR2 (1000);
      desmsj     VARCHAR2 (1000);
      vpasexec   NUMBER (8)           := 1;
      vparam     VARCHAR2 (1)         := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_grabaraseguradosmes';
      gars       t_iax_garantias;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 4;
      asm := pac_iobj_prod.f_partaseguradosmes (rie, mensajes);

      IF asm IS NULL
      THEN
         asm := ob_iax_aseguradosmes ();
      END IF;

      vpasexec := 5;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 7;
      asm.nriesgo := pnriesgo;
      asm.nmes1 := pmes1;
      asm.nmes2 := pmes2;
      asm.nmes3 := pmes3;
      asm.nmes4 := pmes4;
      asm.nmes5 := pmes5;
      asm.nmes6 := pmes6;
      asm.nmes7 := pmes7;
      asm.nmes8 := pmes8;
      asm.nmes9 := pmes9;
      asm.nmes10 := pmes10;
      asm.nmes11 := pmes11;
      asm.nmes12 := pmes12;
      vpasexec := 8;
      nerr :=
         pac_iobj_prod.f_set_partaseguradosmes (poliza.det_poliza,
                                                pnriesgo,
                                                asm,
                                                mensajes
                                               );
      vpasexec := 9;

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9907548);
         vpasexec := 20;
         RAISE e_object_error;
      END IF;

      /*JRH Nuevo , que obligue a tarifar.*/
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

      IF gars IS NOT NULL
      THEN
         FOR v_gars IN gars.FIRST .. gars.LAST
         LOOP
            IF gars.EXISTS (v_gars)
            THEN
               /*ob_iax_garantias*/
               gars (v_gars).primas := ob_iax_primas ();
            END IF;
         END LOOP;
      END IF;

      nerr :=
         pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                rie.nriesgo,
                                                gars,
                                                mensajes
                                               );

      IF nerr <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9901941);
         RAISE e_object_error;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabaraseguradosmes;

   /*************************************************************************
   Incializa a null los asegurados por mes de un riesgo
   param out mensajes : mensajes de error
   return             : error
   *************************************************************************/
   FUNCTION f_iniciaseguradosmes (
      pnriesgo   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      asm        ob_iax_aseguradosmes;
      rie        ob_iax_riesgos;
      vpasexec   NUMBER (8)           := 1;
      vparam     VARCHAR2 (1)         := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_iniciaseguradosmes ';
      numerr     NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      vpasexec := 3;
      numerr :=
         pac_iobj_prod.f_set_partaseguradosmes (poliza.det_poliza,
                                                pnriesgo,
                                                NULL,
                                                mensajes
                                               );

      IF numerr <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9907549);
         vpasexec := 20;
         RAISE e_object_error;
      END IF;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_iniciaseguradosmes;

   /*CONVENIOS*/
   /***********************************************************************
   Graba el convenio y valida en la propuesta (pantalla de datos de gesti�n o simulaci�n).
   param in pversion  :  Versi�n
   param out  mensajes : mensajes de error
   return             : number
   ***********************************************************************/
   FUNCTION f_set_grabarconvempvers (
      pidversion      IN       NUMBER,
      pidconv         IN       NUMBER,
      ptcodconv       IN       VARCHAR2,
      pcestado        IN       NUMBER,
      pcperfil        IN       NUMBER,
      ptdescri        IN       VARCHAR2,
      pcorganismo     IN       NUMBER,
      pcvida          IN       NUMBER,
      pnversion       IN       NUMBER,
      pcestadovers    IN       NUMBER,
      pnversion_ant   IN       NUMBER,
      ptestado        IN       VARCHAR2,
      ptperfil        IN       VARCHAR2,
      ptorganismo     IN       VARCHAR2,
      ptestadovers    IN       VARCHAR2,
      ptvida          IN       VARCHAR2,
      ptobserv        IN       VARCHAR2,
      mensajes        OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec      NUMBER (8)                       := 1;
      vparam        VARCHAR2 (500)                   := '';
      vobject       VARCHAR2 (200)
                           := 'PAC_IAX_CONVENIOS_EMP.F_SET_GRABARCONVEMPVERS';
      vers          ob_iax_convempvers;
      vvers         t_iax_convempvers;
      vdet_poliza   ob_iax_detpoliza;
      numerr        NUMBER;
      vtmsg         VARCHAR2 (1000);
      w_observ      cnv_conv_emp_vers.tobserv%TYPE;
      /* BUG 0038192 - FAL - 18/11/2015*/
      v_comisinp    NUMBER;
      v_comisic     NUMBER;
      gst           t_iax_gstcomision;
   /* FI BUG 0038192 - FAL - 18/11/2015*/
   BEGIN
      IF pidconv IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      /*llenar vers a partir de los datos que traigo*/
      /*  PAC_CONVENIOS_EMP.F_GET_CONVCONTRATABLE (pversion);*/
      vers := ob_iax_convempvers ();
      vers.idversion := pidversion;
      vers.idconv := pidconv;
      vers.tcodconv := ptcodconv;
      vers.cestado := pcestado;
      vers.cperfil := pcperfil;
      vers.tdescri := ptdescri;
      vers.corganismo := pcorganismo;
      vers.cvida := pcvida;
      vers.nversion := pnversion;
      vers.cestadovers := pcestadovers;
      vers.nversion_ant := pnversion_ant;
      vers.testado := ptestado;
      vers.tperfil := ptperfil;
      vers.torganismo := ptorganismo;
      vers.testadovers := ptestadovers;
      vers.tvida := ptvida;
      vers.tobserv := ptobserv;
      /*vdet_poliza := pac_iobj_prod.f_getpoliza(mensajes);*/
      /*vdet_poliza.convempvers := vers;*/
      numerr := pac_md_convenios_emp.f_get_convcontratable (vers, mensajes);

      IF numerr <> 0
      THEN
         RETURN numerr;
      END IF;

      numerr :=
         pac_iobj_prod.f_set_partconvempvers (poliza.det_poliza,
                                              vers,
                                              mensajes,
                                              NULL
                                             );
      vpasexec := 2;

      IF     poliza.det_poliza.riesgos IS NOT NULL
         /*dejamos preparado para la pantalla de garant�as*/
         AND poliza.det_poliza.riesgos.COUNT > 0
      THEN
         FOR v_indice_riesgos IN
            poliza.det_poliza.riesgos.FIRST .. poliza.det_poliza.riesgos.LAST
         LOOP
            IF poliza.det_poliza.riesgos.EXISTS (v_indice_riesgos)
            THEN
               /*ACC corregit 29122008*/
               poliza.det_poliza.riesgos (v_indice_riesgos).garantias :=
                                                           t_iax_garantias
                                                                          ();

               IF poliza.det_poliza.cobjase IN (5)
               THEN
                  /*autos*/
                  poliza.det_poliza.riesgos (v_indice_riesgos).riesautos :=
                                                          t_iax_autriesgos
                                                                          ();
               END IF;

               pac_md_produccion.p_limpiar_tablas
                         (pac_iax_produccion.poliza.det_poliza.sseguro,
                          poliza.det_poliza.riesgos (v_indice_riesgos).nriesgo,
                          pac_iax_produccion.poliza.det_poliza.nmovimi,
                          pac_iax_produccion.poliza.det_poliza.cobjase,
                          pac_iax_produccion.vpmode,
                          mensajes
                         );
               pac_iax_produccion.poliza.det_poliza.p_set_needtarificar (1);
            END IF;
         END LOOP;
      END IF;

      /*JRH IMP Falta la validaci�n pendiente de CROSS*/
      /* BUG 34462 - FAL - 31/03/2015 - Mostrar observaci�n del convenio*/
      w_observ := NULL;
      w_observ := REPLACE (vers.tobserv, 'null', '##');

      IF w_observ <> '##'
      THEN
         vtmsg :=
            pac_iobj_mensajes.f_get_descmensaje
                                               (101162,
                                                pac_md_common.f_get_cxtidioma
                                               );
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes,
                                               2,
                                               0,
                                               vtmsg || ': ' || vers.tobserv
                                              );
      END IF;

      /* FI BUG 34462*/
      /* BUG 0038192 - FAL - 18/11/2015*/
      IF NVL (pac_parametros.f_parempresa_n (pac_md_common.f_get_cxtempresa,
                                             'SUBTAB_COMISI_CONV'
                                            ),
              0
             ) <> 0
      THEN
         v_comisinp :=
            NVL
               (pac_subtablas.f_vsubtabla
                   (-1,
                    pac_parametros.f_parempresa_n
                                              (pac_md_common.f_get_cxtempresa,
                                               'SUBTAB_COMISI_CONV'
                                              ),
                    3332,
                    2,
                    poliza.det_poliza.sproduc,
                    vers.idconv,
                    poliza.det_poliza.cagente,
                    TO_NUMBER (TO_CHAR (poliza.det_poliza.gestion.fefecto,
                                        'YYYYMMDD'
                                       )
                              )
                   ),
                0
               );
         v_comisic :=
            NVL
               (pac_subtablas.f_vsubtabla
                   (-1,
                    pac_parametros.f_parempresa_n
                                              (pac_md_common.f_get_cxtempresa,
                                               'SUBTAB_COMISI_CONV'
                                              ),
                    3332,
                    3,
                    poliza.det_poliza.sproduc,
                    vers.idconv,
                    poliza.det_poliza.cagente,
                    TO_NUMBER (TO_CHAR (poliza.det_poliza.gestion.fefecto,
                                        'YYYYMMDD'
                                       )
                              )
                   ),
                0
               );

         IF v_comisinp <> 0 AND v_comisic <> 0
         THEN
            poliza.det_poliza.gestion.ctipcom := 90;
            gst := pac_iax_produccion.f_leegestioncomision (90, mensajes);
            numerr :=
               pac_iax_produccion.f_grabagestioncomision (1,
                                                          v_comisinp,
                                                          1,
                                                          1,
                                                          mensajes
                                                         );
            numerr :=
               pac_iax_produccion.f_grabagestioncomision (2,
                                                          v_comisic,
                                                          2,
                                                          99,
                                                          mensajes
                                                         );
         ELSE
            poliza.det_poliza.gestion.ctipcom := 0;
            numerr :=
               pac_iax_produccion.f_grabagestioncomision (1,
                                                          NULL,
                                                          1,
                                                          1,
                                                          mensajes
                                                         );
            numerr :=
               pac_iax_produccion.f_grabagestioncomision (2,
                                                          NULL,
                                                          2,
                                                          99,
                                                          mensajes
                                                         );
         END IF;
      END IF;

      /* FI BUG 0038192 - FAL - 18/11/2015*/
      /* vvers := pac_md_convenios_emp.f_get_lstconvempvers(psproduc, psproduc, pdescri, mensajes);*/
      vpasexec := 3;
      RETURN 0;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_grabarconvempvers;

   /*************************************************************************
   Grabar informacion de las preguntas
   param in nriesgo  : numero de riesgo
   param in cpregun  : Codigo de la pregunta
   param in cgarant  : codigo de la garantia
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabarpreguntastab_carga (
      ptipo      IN       VARCHAR2,
      pnriesgo   IN       NUMBER,
      pcpregun   IN       NUMBER,
      pcgarant   IN       NUMBER,
      pnmovimi   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      preg             t_iax_preguntas     := t_iax_preguntas ();
      pregunta         ob_iax_preguntas;
      preguntab        t_iax_preguntastab;
      rie              ob_iax_riesgos;
      gar              ob_iax_garantias;
      npos             NUMBER;
      nerr             NUMBER              := 0;
      vpasexec         NUMBER (8)          := 1;
      vparam           VARCHAR2 (1)        := NULL;
      vobject          VARCHAR2 (200)
                                 := 'PAC_IAX_PRODUCCION.F_grabarpreguntastab';
      trobat           BOOLEAN             := FALSE;
      vindex           NUMBER;
      vnlinea          NUMBER;
      vcolumna         VARCHAR2 (200);
      vvalor           VARCHAR2 (2000);
      vpartido         VARCHAR2 (400);
      vpos             NUMBER;
      vvalor_entero    NUMBER;
      vvalor_decimal   NUMBER;
      pregun           ob_iax_preguntastab;
      vsproces         NUMBER;
   BEGIN
      preguntab :=
         pac_md_carga_preguntab.f_get_preguntab_rie
                                                  ('EST',
                                                   poliza.det_poliza.sseguro,
                                                   pnriesgo,
                                                   pcpregun,
                                                   pcgarant,
                                                   pnmovimi,
                                                   ptipo,
                                                   poliza.det_poliza.sproduc,
                                                   vsproces,
                                                   mensajes
                                                  );

      IF preguntab IS NOT NULL
      THEN
         IF preguntab.COUNT > 0
         THEN
            IF poliza.det_poliza IS NULL
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
               RAISE e_param_error;
            END IF;

            vpasexec := 2;
            rie :=
               pac_iobj_prod.f_partpolriesgo (poliza.det_poliza,
                                              pnriesgo,
                                              mensajes
                                             );

            IF rie IS NULL
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
               vpasexec := 3;
               RAISE e_object_error;
            END IF;

            IF ptipo = 'R'
            THEN
               preg := pac_iobj_prod.f_partriespreguntas (rie, mensajes);
            ELSIF ptipo = 'P'
            THEN
               preg :=
                  pac_iobj_prod.f_partpolpreguntas (poliza.det_poliza,
                                                    mensajes
                                                   );
            ELSIF ptipo = 'G'
            THEN
               gar :=
                   pac_iobj_prod.f_partriesgarantia (rie, pcgarant, mensajes);
               preg := gar.preguntas;
            END IF;

            vpasexec := 4;

            IF preg IS NOT NULL AND preg.COUNT > 0
            THEN
               FOR i IN preg.FIRST .. preg.LAST
               LOOP
                  IF preg (i).cpregun = pcpregun
                  THEN
                     pregunta := preg (i);
                  END IF;
               END LOOP;
            END IF;

            vpasexec := 5;
            pregunta.tpreguntastab := preguntab;

            IF preg IS NOT NULL AND preg.COUNT > 0
            THEN
               trobat := FALSE;

               FOR i IN preg.FIRST .. preg.LAST
               LOOP
                  IF preg (i).cpregun = pcpregun
                  THEN
                     preg (i) := pregunta;
                     trobat := TRUE;
                  END IF;
               END LOOP;

               IF trobat = FALSE
               THEN
                  preg.EXTEND;
                  preg (preg.LAST) := pregunta;
               END IF;
            END IF;

            IF ptipo = 'R'
            THEN
               nerr :=
                  pac_iobj_prod.f_set_partriespreguntas (poliza.det_poliza,
                                                         pnriesgo,
                                                         preg,
                                                         mensajes
                                                        );
            ELSIF ptipo = 'P'
            THEN
               poliza.det_poliza.preguntas := preg;
            ELSIF ptipo = 'G'
            THEN
               nerr :=
                  pac_iobj_prod.f_set_partgarpreguntas (poliza.det_poliza,
                                                        pnriesgo,
                                                        pcgarant,
                                                        preg,
                                                        mensajes
                                                       );
            END IF;

            vpasexec := 12;

            IF nerr = 1
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001096);
               vpasexec := 10;
               RAISE e_object_error;
            END IF;
         END IF;
      END IF;

      RETURN nerr;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabarpreguntastab_carga;

   /*************************************************************************
   Borrar informacion de las preguntas
   param in nriesgo  : numero de riesgo
   param in cpregun  : Codigo de la pregunta
   param in cgarant  : codigo de la garantia
   param out mensajes : mensajes de error
   return             : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_borrarpreguntastab_carga (
      ptipo      IN       VARCHAR2,
      pnriesgo   IN       NUMBER,
      pcpregun   IN       NUMBER,
      pcgarant   IN       NUMBER,
      pnmovimi   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      preg             t_iax_preguntas    := t_iax_preguntas ();
      pregunta         ob_iax_preguntas;
      preguntab        t_iax_preguntastab;
      rie              ob_iax_riesgos;
      gar              ob_iax_garantias;
      npos             NUMBER;
      nerr             NUMBER             := 0;
      vpasexec         NUMBER (8)         := 1;
      vparam           VARCHAR2 (1)       := NULL;
      vobject          VARCHAR2 (200)
                           := 'PAC_IAX_PRODUCCION.f_borrarpreguntastab_carga';
      trobat           BOOLEAN            := FALSE;
      vindex           NUMBER;
      vnlinea          NUMBER;
      vcolumna         VARCHAR2 (200);
      vvalor           VARCHAR2 (2000);
      vpartido         VARCHAR2 (400);
      vpos             NUMBER;
      vvalor_entero    NUMBER;
      vvalor_decimal   NUMBER;
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza.det_poliza, pnriesgo, mensajes);

      IF rie IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         vpasexec := 3;
         RAISE e_object_error;
      END IF;

      IF ptipo = 'R'
      THEN
         preg := pac_iobj_prod.f_partriespreguntas (rie, mensajes);
      ELSIF ptipo = 'P'
      THEN
         preg :=
               pac_iobj_prod.f_partpolpreguntas (poliza.det_poliza, mensajes);
      ELSIF ptipo = 'G'
      THEN
         gar := pac_iobj_prod.f_partriesgarantia (rie, pcgarant, mensajes);
         preg := gar.preguntas;
      END IF;

      vpasexec := 4;

      IF preg IS NOT NULL AND preg.COUNT > 0
      THEN
         FOR i IN preg.FIRST .. preg.LAST
         LOOP
            IF preg (i).cpregun = pcpregun
            THEN
               pregunta := preg (i);
            END IF;
         END LOOP;
      END IF;

      vpasexec := 5;
      pregunta.tpreguntastab := t_iax_preguntastab ();

      IF preg IS NOT NULL AND preg.COUNT > 0
      THEN
         trobat := FALSE;

         FOR i IN preg.FIRST .. preg.LAST
         LOOP
            IF preg (i).cpregun = pcpregun
            THEN
               preg (i) := pregunta;
               trobat := TRUE;
            END IF;
         END LOOP;

         IF trobat = FALSE
         THEN
            preg.EXTEND;
            preg (preg.LAST) := pregunta;
         END IF;
      END IF;

      IF ptipo = 'R'
      THEN
         nerr :=
            pac_iobj_prod.f_set_partriespreguntas (poliza.det_poliza,
                                                   pnriesgo,
                                                   preg,
                                                   mensajes
                                                  );
      ELSIF ptipo = 'P'
      THEN
         poliza.det_poliza.preguntas := preg;
      ELSIF ptipo = 'G'
      THEN
         nerr :=
            pac_iobj_prod.f_set_partgarpreguntas (poliza.det_poliza,
                                                  pnriesgo,
                                                  pcgarant,
                                                  preg,
                                                  mensajes
                                                 );
      END IF;

      vpasexec := 12;

      IF nerr = 1
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001096);
         vpasexec := 10;
         RAISE e_object_error;
      END IF;

      RETURN nerr;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_borrarpreguntastab_carga;

   FUNCTION f_connect_undw_if01 (
      pnriesgo   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN ob_iax_underwrt_if01
   IS
      vicapital   NUMBER;
      ssql        VARCHAR2 (200);
      vpasexec    NUMBER (8)           := 1;
      vparam      VARCHAR2 (100)       := 'pnriesgo=' || pnriesgo;
      vobject     VARCHAR2 (200)  := 'PAC_IAX_PRODUCCION.f_connect_undw_if01';
      vurl        ob_iax_underwrt_if01;
      nerror      NUMBER;
      gars        t_iax_garantias;
      pregpar     t_iaxpar_preguntas;
      v_crespue   NUMBER;
      v_trespue   VARCHAR2 (2000);
      v_resp      NUMBER;
      vtprefor    VARCHAR2 (100);
      rie         ob_iax_riesgos;
      gar         t_iax_garantias;
      nerr        NUMBER;
      v_cuenta    NUMBER;

      FUNCTION existpreg (cpregun IN NUMBER, pvgar IN NUMBER)
         RETURN NUMBER
      IS
         preg   t_iax_preguntas;
      BEGIN
         preg :=
             poliza.det_poliza.riesgos (pnriesgo).garantias (pvgar).preguntas;

         IF preg IS NULL
         THEN
            RETURN -1;
         END IF;

         IF preg.COUNT = 0
         THEN
            RETURN -1;
         END IF;

         FOR vprg IN preg.FIRST .. preg.LAST
         LOOP
            IF preg.EXISTS (vprg)
            THEN
               IF preg (vprg).cpregun = cpregun
               THEN
                  IF preg (vprg).crespue IS NOT NULL
                  THEN
                     RETURN vprg;
                  END IF;
               END IF;
            END IF;
         END LOOP;

         RETURN -1;
      END existpreg;
   BEGIN
      /* toda la informacio s'ha de baixar a la base de dades*/
      nerror := f_grabarobjetodb (mensajes);

      IF nerror <> 0
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9000773);
         RAISE e_object_error;
      END IF;

      IF pac_parametros.f_parproducto_n (vproducto, 'GRABAR_PREGGARAN_DEF') =
                                                                             1
      THEN
         vpasexec := 1000;
         rie :=
            pac_iobj_prod.f_partpolriesgo (poliza.det_poliza,
                                           pnriesgo,
                                           mensajes
                                          );

         IF rie IS NULL
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
            vpasexec := 1010;
            RAISE e_object_error;
         END IF;

         vpasexec := 1020;
         gars := pac_iobj_prod.f_partriesgarantias (rie, mensajes);

         IF mensajes IS NOT NULL
         THEN
            IF mensajes.COUNT > 0
            THEN
               vpasexec := 1030;
               RAISE e_object_error;
            END IF;
         END IF;

         vpasexec := 1040;

         IF gars IS NOT NULL
         THEN
            vpasexec := 1050;

            IF gars.COUNT > 0
            THEN
               vpasexec := 1060;

               FOR vgar IN gars.FIRST .. gars.LAST
               LOOP
                  vpasexec := 1070;

                  IF gars.EXISTS (vgar)
                  THEN
                     vpasexec := 1080;
                     pregpar :=
                        pac_iaxpar_productos.f_get_preggarant
                                                         (gars (vgar).cgarant,
                                                          mensajes
                                                         );

                     IF mensajes IS NOT NULL
                     THEN
                        IF mensajes.COUNT > 0
                        THEN
                           RAISE e_object_error;
                        END IF;
                     END IF;

                     vpasexec := 1090;

                     IF pregpar IS NOT NULL
                     THEN
                        IF pregpar.COUNT > 0
                        THEN
                           FOR i IN pregpar.FIRST .. pregpar.LAST
                           LOOP
                              IF pregpar.EXISTS (i)
                              THEN
                                 /* Si es una pregunta manual*/
                                 vpasexec := 1145;

                                 IF pregpar (i).cpretip = 1
                                 THEN
                                    vpasexec := 1146;

                                    /* Dependiendo del tipo de respuesta*/
                                    IF pregpar (i).crestip IN (1, 2)
                                    THEN
                                       v_crespue := pregpar (i).cresdef;
                                       v_trespue := NULL;
                                    ELSE
                                       v_crespue := NULL;
                                       v_trespue := pregpar (i).cresdef;
                                    END IF;
                                 ELSIF (   pregpar (i).cpretip = 3
                                        OR (    pregpar (i).cpretip = 2
                                            AND pregpar (i).esccero = 1
                                           )
                                       )
                                 THEN
                                    vpasexec := 1147;
                                    vtprefor :=
                                       pac_mdpar_productos.f_get_tpreforsemi
                                                         (vproducto,
                                                          pregpar (i).cpregun,
                                                          'G',
                                                          mensajes,
                                                          gars (vgar).cgarant
                                                         );
                                    vpasexec := 1148;

                                    IF pac_iax_produccion.issuplem
                                    THEN
                                       NULL;
                                    ELSE
                                       vpasexec := 1149;
                                       /* Bug 16768 - RSC - 26/11/2010 - APR - Implementacion y parametrizacion del producto GROUPLIFE (II)*/
                                       /* (a�adimos gar(npos).cgarant a la funcion; antes se le pasaba un 0 !!)*/
                                       nerr :=
                                          pac_albsgt.f_tprefor
                                                         (vtprefor,
                                                          'EST',
                                                          vsolicit,
                                                          pnriesgo,
                                                          gars (vgar).finiefe,
                                                          vnmovimi,
                                                          gars (vgar).cgarant,
                                                          v_resp,
                                                          1
                                                         );
                                    END IF;

                                    vpasexec := 1150;

                                    /* Dependiendo del tipo de respuesta*/
                                    IF pregpar (i).crestip IN (1, 2)
                                    THEN
                                       v_crespue :=
                                            NVL (v_resp, pregpar (i).cresdef);
                                       v_trespue := NULL;
                                    ELSE
                                       v_crespue := NULL;
                                       v_trespue := v_resp;
                                    END IF;
                                 END IF;

                                 IF existpreg (pregpar (i).cpregun, vgar) = -1
                                 THEN
                                    vpasexec := 1151;
                                    nerr :=
                                       f_grabapreguntasgarantia
                                                         (pnriesgo,
                                                          gars (vgar).cgarant,
                                                          pregpar (i).cpregun,
                                                          v_crespue,
                                                          v_trespue,
                                                          mensajes
                                                         );
                                    vpasexec := 1152;
                                    gars (vgar).preguntas :=
                                       poliza.det_poliza.riesgos (pnriesgo).garantias
                                                                         (vgar).preguntas;
                                 END IF;
                              END IF;
                           END LOOP;
                        END IF;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;

         vpasexec := 1153;
         nerror :=
            pac_iobj_prod.f_set_partriesgarantias (poliza.det_poliza,
                                                   pnriesgo,
                                                   gars,
                                                   mensajes
                                                  );

         IF nerror <> 0
         THEN
            RAISE e_object_error;
         END IF;
      END IF;

      IF f_get_essuplemento = 1
      THEN
         nerror :=
            pac_md_suplementos.f_get_fefecto_supl (vsolicit,
                                                   vnmovimi,
                                                   vfefecto,
                                                   mensajes
                                                  );

         IF nerror <> 0
         THEN
            RAISE e_object_error;
         END IF;
      ELSE
         vfefecto := poliza.det_poliza.gestion.fefecto;
      END IF;

      BEGIN
         SELECT rio.sorden
           INTO pac_iax_produccion.vcaseid
           FROM estseguros estseg,
                estriesgos_ir rir,
                estriesgos_ir_ordenes rio
          WHERE estseg.sseguro = pac_iax_produccion.vsolicit
            AND estseg.sseguro = rio.sseguro
            AND rir.sseguro = estseg.sseguro
            AND rir.nmovimi = vnmovimi
            AND rir.nriesgo = pnriesgo
            AND rir.nmovimi = rio.nmovimi
            AND estseg.cempres = pac_iax_produccion.poliza.det_poliza.cempres
            AND rio.cempres = estseg.cempres
            AND rir.nriesgo = rio.nriesgo;

         SELECT COUNT (*)
           INTO v_cuenta
           FROM estseguros estseg,
                estriesgos_ir rir,
                estriesgos_ir_ordenes rio
          WHERE estseg.sseguro <> pac_iax_produccion.vsolicit
            AND estseg.sseguro = rio.sseguro
            AND rir.sseguro = estseg.sseguro
            AND rir.nmovimi = vnmovimi
            AND rir.nriesgo = pnriesgo
            AND rir.nmovimi = rio.nmovimi
            AND estseg.cempres = pac_iax_produccion.poliza.det_poliza.cempres
            AND rio.cempres = estseg.cempres
            AND rio.sorden = pac_iax_produccion.vcaseid
            AND rir.nriesgo = rio.nriesgo;

         IF v_cuenta <> 0
         THEN
            FOR regs IN
               /**TCS-jpaezr-SQL-133**/
               (SELECT /*+ FULL(RIO) */ rio.* 
                     FROM estseguros estseg, 
                           estriesgos_ir rir, 
                           estriesgos_ir_ordenes rio 
                     WHERE estseg.sseguro <> pac_iax_produccion.vsolicit 
                        AND estseg.sseguro = rio.sseguro 
                        AND rir.sseguro = estseg.sseguro 
                        AND rir.nmovimi = vnmovimi 
                        AND rir.nriesgo = pnriesgo 
                        AND rir.nmovimi = rio.nmovimi 
                        AND estseg.cempres = pac_iax_produccion.poliza.det_poliza.cempres 
                        AND rio.cempres = estseg.cempres 
                        AND rio.sorden = pac_iax_produccion.vcaseid 
                        AND rir.nriesgo = rio.nriesgo)
            LOOP
               p_tab_error (f_sysdate,
                            f_user,
                            vobject || ' - Guru meditation: caseid collision',
                            vpasexec,
                               vparam
                            || ' regs.sseguro = '
                            || regs.sseguro
                            || ' regs.nmovimi = '
                            || regs.nmovimi
                            || ' regs.nriesgo = '
                            || regs.nriesgo
                            || ' regs.sorden = '
                            || regs.sorden,
                            f_axis_literales (1000455,
                                              pac_md_common.f_get_cxtidioma
                                             )
                           );
            END LOOP;
         END IF;
      EXCEPTION
         WHEN NO_DATA_FOUND
         THEN
            pac_iax_produccion.vcaseid := NULL;
      END;

      vurl :=
         pac_md_underwriting.f_connect_undw_if01
                                (pac_iax_produccion.vcaseid,
                                 pac_iax_produccion.poliza.det_poliza.cempres,
                                 vsolicit,
                                 pnriesgo,
                                 vnmovimi,
                                 vfefecto,
                                 'EST',
                                 mensajes
                                );
      /* Almacenamos el caseId en memoria, para la siguiente llamada a la IF02 la cual se debe hacer*/
      /* con este caseId.*/
      pac_iax_produccion.vcaseid := vurl.caseid;
      RETURN vurl;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_connect_undw_if01;

   FUNCTION f_connect_undw_if02 (
      pnriesgo   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (100) := 'pnriesgo=' || pnriesgo;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_connect_undw_if02';
      nerror     NUMBER;
      vres       NUMBER;
   BEGIN
      /* toda la informacio s'ha de baixar a la base de dades*/
      /* VER SI ESTO ES NECESARIO. A PRIORI NO !!!!*/
      /*nerror := f_grabarobjetodb(mensajes);
      IF nerror <> 0 THEN
      pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 9000773);
      RAISE e_object_error;
      END IF;*/
      IF pac_iax_produccion.vcaseid IS NULL
      THEN
         SELECT rio.sorden
           INTO pac_iax_produccion.vcaseid
           FROM estseguros estseg,
                estriesgos_ir rir,
                estriesgos_ir_ordenes rio
          WHERE estseg.sseguro = pac_iax_produccion.vsolicit
            AND estseg.sseguro = rio.sseguro
            AND rir.sseguro = estseg.sseguro
            AND rir.nmovimi = vnmovimi
            AND rir.nriesgo = pnriesgo
            AND rir.nmovimi = rio.nmovimi
            AND estseg.cempres = pac_iax_produccion.poliza.det_poliza.cempres
            AND rio.cempres = estseg.cempres
            AND rir.nriesgo = rio.nriesgo;
      END IF;

      vres :=
         pac_md_underwriting.f_connect_undw_if02
                                (pac_iax_produccion.vcaseid,
                                 pac_iax_produccion.poliza.det_poliza.cempres,
                                 vsolicit,
                                 pnriesgo,
                                 vnmovimi,
                                 vfefecto,
                                 'EST',
                                 mensajes
                                );
      RETURN vres;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_connect_undw_if02;

   /*************************************************************************
   Devuelve el objeto asegurado segun su sperson
   param in sperson   : codigo de persona
   param out mensajes : mensajes de error
   return             : objeto tomador
   *************************************************************************/
   FUNCTION f_get_citasmedicas (mensajes OUT t_iax_mensajes)
      RETURN t_iax_citamedica
   IS
      aseg       t_iax_asegurados;
      citamedi   t_iax_citamedica;
      num_err    NUMBER;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (100)   := '';
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.f_get_citasmedicas';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      citamedi := pac_iobj_prod.f_partpolcitamed (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 5;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 6;
      RETURN citamedi;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_citasmedicas;

   /*************************************************************************
   Devuelve el objeto asegurado segun su sperson
   param in sperson   : codigo de persona
   param out mensajes : mensajes de error
   return             : objeto tomador
   *************************************************************************/
   FUNCTION f_insert_citasmedicas (
      psseguro    IN       NUMBER,
      pnriesgo    IN       NUMBER,
      pnmovimi    IN       NUMBER,
      pnomaseg    IN       VARCHAR2,
      psperaseg   IN       NUMBER,
      pspermed    IN       NUMBER,
      pnommedi    IN       VARCHAR2,
      pceviden    IN       NUMBER,
      pteviden    IN       VARCHAR2,
      pcodevid    IN       VARCHAR2,
      pfeviden    IN       VARCHAR2,
      pcestado    IN       NUMBER,
      ptestado    IN       VARCHAR2,
      pieviden    IN       NUMBER,
      pcpago      IN       NUMBER,
      pctipevi    IN       NUMBER,
      pcais       IN       NUMBER,
      mensajes    OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      citasmedi   t_iax_citamedica;
      num_err     NUMBER;
      vpasexec    NUMBER (8)       := 1;
      vorden      NUMBER;
      vnorden_r   NUMBER;
      vparam      VARCHAR2 (2000)
         :=    'psseguro='
            || psseguro
            || ' pnriesgo='
            || pnriesgo
            || ' pnmovimi='
            || pnmovimi
            || ' pnomaseg='
            || pnomaseg
            || ' psperaseg='
            || psperaseg
            || ' pspermed='
            || pspermed
            || ' pnommedi='
            || pnommedi
            || ' pceviden='
            || pceviden
            || ' pteviden='
            || pteviden
            || ' pcodevid='
            || pcodevid
            || ' pfeviden='
            || pfeviden
            || ' pcestado='
            || pcestado
            || ' ptestado='
            || ptestado
            || ' pieviden='
            || pieviden
            || ' pcpago='
            || pcpago
            || ' pctipevi='
            || pctipevi;
      vobject     VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_insert_citasmedicas';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      citasmedi :=
                  pac_iobj_prod.f_partpolcitamed (poliza.det_poliza, mensajes);

      IF citasmedi.COUNT > 0
      THEN
         vorden := NVL (citasmedi (citasmedi.LAST).norden, 0);
      ELSE
         vorden := 0;
      END IF;

      num_err :=
         pac_md_underwriting.f_insert_citasmedicas
            (poliza.det_poliza.sseguro,
             NVL (pnriesgo, 1),
             NVL
                (pnmovimi,
                 NVL (  pac_movseguro.f_nmovimi_ult (poliza.det_poliza.ssegpol)
                      + 1,
                      1
                     )
                ),
             NVL (pac_persona.f_sperson_spereal (psperaseg), psperaseg),
             NVL (pac_persona.f_sperson_spereal (pspermed), pspermed),
             pceviden,
             TO_DATE (pfeviden, 'dd/MM/yyyy HH24:mi:ss'),
             pcestado,
             'EST',
             pieviden,
             pcpago,
             vnorden_r,
             pcais,
             mensajes
            );
      vpasexec := 3;

      IF num_err = 0
      THEN
         vorden := vorden + 1;
         citasmedi.EXTEND;
         vpasexec := 4;
         citasmedi (citasmedi.LAST) := ob_iax_citamedica ();
         citasmedi (citasmedi.LAST).norden := vorden;
         citasmedi (citasmedi.LAST).sseguro := poliza.det_poliza.sseguro;
         vpasexec := 5;
         citasmedi (citasmedi.LAST).nriesgo := NVL (pnriesgo, 1);
         vpasexec := 6;
         citasmedi (citasmedi.LAST).nmovimi :=
            NVL
               (citasmedi (citasmedi.LAST).nmovimi,
                NVL
                   (pnmovimi,
                    NVL
                       (  pac_movseguro.f_nmovimi_ult
                                                    (poliza.det_poliza.ssegpol)
                        + 1,
                        1
                       )
                   )
               );
         vpasexec := 7;
         citasmedi (citasmedi.LAST).nomaseg := pnomaseg;
         vpasexec := 8;
         citasmedi (citasmedi.LAST).sperson :=
                    NVL (pac_persona.f_sperson_spereal (psperaseg), psperaseg);
         vpasexec := 9;
         citasmedi (citasmedi.LAST).sperson_med :=
                      NVL (pac_persona.f_sperson_spereal (pspermed), pspermed);
         vpasexec := 10;
         citasmedi (citasmedi.LAST).nommedi := pnommedi;
         vpasexec := 11;
         citasmedi (citasmedi.LAST).ceviden := pceviden;
         vpasexec := 12;
         citasmedi (citasmedi.LAST).teviden := pteviden;
         citasmedi (citasmedi.LAST).codevid := pcodevid;
         vpasexec := 13;
         citasmedi (citasmedi.LAST).feviden := pfeviden;
         vpasexec := 14;
         citasmedi (citasmedi.LAST).cestado := pcestado;
         vpasexec := 15;
         citasmedi (citasmedi.LAST).testado := ptestado;
         vpasexec := 16;
         citasmedi (citasmedi.LAST).ieviden := pieviden;
         vpasexec := 17;
         citasmedi (citasmedi.LAST).cpago := pcpago;
         vpasexec := 18;
         citasmedi (citasmedi.LAST).tpago :=
            pac_md_listvalores.f_getdescripvalores (8001028, pcpago, mensajes);
         citasmedi (citasmedi.LAST).norden_r := vnorden_r;
         citasmedi (citasmedi.LAST).ctipevi := pctipevi;
         citasmedi (citasmedi.LAST).cais := pcais;
         num_err :=
            pac_iobj_prod.f_set_partpolcitamed (poliza.det_poliza,
                                                citasmedi,
                                                mensajes
                                               );
         vpasexec := 19;
      END IF;

      IF num_err = 0
      THEN
         COMMIT;
      END IF;

      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_insert_citasmedicas;

   /*************************************************************************
   Devuelve el objeto asegurado segun su sperson
   param in sperson   : codigo de persona
   param out mensajes : mensajes de error
   return             : objeto tomador
   *************************************************************************/
   FUNCTION f_editar_citasmedicas (
      psseguro    IN       NUMBER,
      pnriesgo    IN       NUMBER,
      pnmovimi    IN       NUMBER,
      pnomaseg    IN       VARCHAR2,
      psperaseg   IN       NUMBER,
      pspermed    IN       NUMBER,
      pnommedi    IN       VARCHAR2,
      pceviden    IN       NUMBER,
      pteviden    IN       VARCHAR2,
      pcodevid    IN       VARCHAR2,
      pfeviden    IN       VARCHAR2,
      pcestado    IN       NUMBER,
      ptestado    IN       VARCHAR2,
      pnorden     IN       NUMBER,
      pieviden    IN       NUMBER,
      pcpago      IN       NUMBER,
      pnorden_r   IN       NUMBER,
      pctipevi    IN       NUMBER,
      mensajes    OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      citasmedi   t_iax_citamedica;
      num_err     NUMBER;
      vpasexec    NUMBER (8)       := 1;
      vparam      VARCHAR2 (2000)
         :=    'psseguro='
            || poliza.det_poliza.sseguro
            || ' pnriesgo='
            || pnriesgo
            || ' pnmovimi='
            || pnmovimi
            || ' pnomaseg='
            || pnomaseg
            || ' psperaseg='
            || NVL (pac_persona.f_sperson_spereal (psperaseg), psperaseg)
            || ' pspermed='
            || NVL (pac_persona.f_sperson_spereal (pspermed), pspermed)
            || ' pnommedi='
            || pnommedi
            || ' pceviden='
            || pceviden
            || ' pteviden='
            || pteviden
            || ' pcodevid='
            || pcodevid
            || ' pfeviden='
            || pfeviden
            || ' pcestado='
            || pcestado
            || ' ptestado='
            || ptestado
            || ' pieviden='
            || pieviden
            || ' pcpago='
            || pcpago
            || ' pnorden='
            || pnorden
            || ' pnorden_r='
            || pnorden_r
            || ' pctipevi='
            || pctipevi;
      vobject     VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_editar_citasmedicas';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      num_err :=
         pac_md_underwriting.f_edit_citasmedicas
                              (poliza.det_poliza.sseguro,
                               pnriesgo,
                               pnmovimi,
                               NVL (pac_persona.f_sperson_spereal (psperaseg),
                                    psperaseg
                                   ),
                               NVL (pac_persona.f_sperson_spereal (pspermed),
                                    pspermed
                                   ),
                               pceviden,
                               TO_DATE (pfeviden, 'dd/MM/yyyy HH24:mi:ss'),
                               pcestado,
                               'EST',
                               pieviden,
                               pcpago,
                               pnorden_r,
                               mensajes
                              );
      citasmedi :=
                  pac_iobj_prod.f_partpolcitamed (poliza.det_poliza, mensajes);

      IF num_err = 0
      THEN
         IF citasmedi IS NOT NULL
         THEN
            IF citasmedi.COUNT > 0
            THEN
               vpasexec := 3;

               FOR i IN citasmedi.FIRST .. citasmedi.LAST
               LOOP
                  vpasexec := 4;

                  IF citasmedi.EXISTS (i)
                  THEN
                     vpasexec := 5;

                     IF citasmedi (i).norden = pnorden
                     THEN
                        vpasexec := 6;
                        citasmedi (i).nriesgo := pnriesgo;
                        citasmedi (i).nmovimi := pnmovimi;
                        citasmedi (i).nomaseg := pnomaseg;
                        citasmedi (i).sperson := psperaseg;
                        citasmedi (i).sperson_med := pspermed;
                        citasmedi (i).nommedi := pnommedi;
                        citasmedi (i).ceviden := pceviden;
                        citasmedi (i).teviden := pteviden;
                        citasmedi (i).codevid := pcodevid;
                        citasmedi (i).feviden := pfeviden;
                        citasmedi (i).cestado := pcestado;
                        citasmedi (i).testado := ptestado;
                        citasmedi (i).ieviden := pieviden;
                        citasmedi (i).cpago := pcpago;
                        citasmedi (i).tpago :=
                           pac_md_listvalores.f_getdescripvalores (8001028,
                                                                   pcpago,
                                                                   mensajes
                                                                  );
                        citasmedi (i).norden_r := pnorden_r;
                        citasmedi (i).ctipevi := pctipevi;
                     END IF;
                  END IF;
               END LOOP;
            END IF;
         END IF;
      END IF;

      num_err :=
         pac_iobj_prod.f_set_partpolcitamed (poliza.det_poliza,
                                             citasmedi,
                                             mensajes
                                            );
      vpasexec := 9;

      IF num_err = 0
      THEN
         COMMIT;
      END IF;

      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_editar_citasmedicas;

   /*************************************************************************
   Devuelve el objeto asegurado segun su sperson
   param in sperson   : codigo de persona
   param out mensajes : mensajes de error
   return             : objeto tomador
   *************************************************************************/
   FUNCTION f_eliminar_citasmedicas (
      pnorden    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      citasmedi     t_iax_citamedica;
      vcita         NUMBER;
      num_err       NUMBER;
      vpasexec      NUMBER (8)       := 1;
      vencontrado   BOOLEAN;
      vparam        VARCHAR2 (100)   := 'pnorden=' || pnorden;
      vobject       VARCHAR2 (200)
                              := 'PAC_IAX_PRODUCCION.f_eliminar_citasmedicas';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      citasmedi :=
                  pac_iobj_prod.f_partpolcitamed (poliza.det_poliza, mensajes);

      IF citasmedi IS NOT NULL
      THEN
         IF citasmedi.COUNT > 0
         THEN
            vpasexec := 2;

            FOR i IN citasmedi.FIRST .. citasmedi.LAST
            LOOP
               vpasexec := 3;

               IF citasmedi.EXISTS (i)
               THEN
                  vpasexec := 5;

                  IF citasmedi (i).norden = pnorden
                  THEN
                     vpasexec := 6;
                     vencontrado := TRUE;
                     vcita := i;
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      IF NOT vencontrado
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 104367);
         RETURN 1;
      END IF;

      num_err :=
         pac_md_underwriting.f_delete_citasmedicas (poliza.det_poliza.sseguro,
                                                    citasmedi (vcita).nriesgo,
                                                    citasmedi (vcita).nmovimi,
                                                    citasmedi (vcita).sperson,
                                                    citasmedi (vcita).ceviden,
                                                    'EST',
                                                    citasmedi (vcita).norden_r,
                                                    mensajes
                                                   );

      IF num_err = 0
      THEN
         citasmedi.DELETE (vcita);
      END IF;

      num_err :=
         pac_iobj_prod.f_set_partpolcitamed (poliza.det_poliza,
                                             citasmedi,
                                             mensajes
                                            );

      IF num_err = 0
      THEN
         COMMIT;
      END IF;

      vpasexec := 9;
      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_eliminar_citasmedicas;

   /*************************************************************************
   Comprova el numero asegurats permessos
   param in out     : mensajes de error
   return           : 0 pot afegir com asegurat
   1 no pot afegir com asegurat
   *************************************************************************/
   FUNCTION f_get_listasegura (mensajes OUT t_iax_mensajes)
      RETURN t_iax_asegurados
   IS
      naseg      NUMBER           := 1;
      aaseg      NUMBER           := pac_iaxpar_productos.f_permitirmultiaseg;
      aseg       t_iax_asegurados;
      aseg_r     t_iax_asegurados;
      ries       t_iax_riesgos;
      rie        ob_iax_riesgos;
      nerr       NUMBER           := 0;
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)   := 'PAC_IAX_PRODUCCION.f_get_listasegura';
   BEGIN
      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);
      vpasexec := 2;
      aseg_r := t_iax_asegurados ();

      FOR vrie IN ries.FIRST .. ries.LAST
      LOOP
         vpasexec := 3;

         IF ries.EXISTS (vrie)
         THEN
            vpasexec := 4;
            aseg := pac_iobj_prod.f_partriesasegurado (ries (vrie), mensajes);
            vpasexec := 5;

            IF aseg IS NOT NULL
            THEN
               IF aseg.COUNT > 0
               THEN
                  FOR vaseg IN aseg.FIRST .. aseg.LAST
                  LOOP
                     IF aseg.EXISTS (vaseg)
                     THEN
                        aseg_r.EXTEND;
                        aseg_r (aseg_r.LAST) := aseg (vaseg);
                        naseg := naseg + 1;
                     END IF;
                  END LOOP;
               END IF;
            END IF;
         END IF;
      END LOOP;

      RETURN aseg_r;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_listasegura;

   FUNCTION f_get_psu_retenidas (mensajes OUT t_iax_mensajes)
      RETURN t_iax_psu_retenidas
   IS
      psu_rets     t_iax_psu_retenidas  := t_iax_psu_retenidas ();
      psu_ret      ob_iax_psu_retenidas;
      vpasexec     NUMBER (8)           := 1;
      vparam       VARCHAR2 (1)         := NULL;
      vobject      VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.F_Get_Psu_Retenidas';
      v_cvisible   NUMBER (1);
      v_num_err    NUMBER;
   BEGIN
      vpasexec := 1;

      IF (poliza IS NULL OR poliza.det_poliza IS NULL)
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000644,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      END IF;

      vpasexec := 2;
      psu_rets := pac_md_produccion.f_get_psu_retenidas (poliza, mensajes);
      RETURN psu_rets;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_psu_retenidas;

   FUNCTION f_eliminar_citas_ais (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      citasmedi     t_iax_citamedica;
      vcita         NUMBER;
      num_err       NUMBER;
      vpasexec      NUMBER (8)       := 1;
      vencontrado   BOOLEAN;
      vparam        VARCHAR2 (100)   := '';
      vobject       VARCHAR2 (200)
                                 := 'PAC_IAX_PRODUCCION.f_eliminar_citas_ais';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      citasmedi :=
                  pac_iobj_prod.f_partpolcitamed (poliza.det_poliza, mensajes);

      IF citasmedi IS NOT NULL
      THEN
         IF citasmedi.COUNT > 0
         THEN
            vpasexec := 2;

            FOR i IN citasmedi.FIRST .. citasmedi.LAST
            LOOP
               vpasexec := 3;

               IF citasmedi.EXISTS (i)
               THEN
                  vpasexec := 5;

                  IF citasmedi (i).cais = 1
                  THEN
                     vpasexec := 6;
                     vcita := i;
                     citasmedi.DELETE (vcita);
                  END IF;
               END IF;
            END LOOP;
         END IF;
      END IF;

      num_err :=
         pac_iobj_prod.f_set_partpolcitamed (poliza.det_poliza,
                                             citasmedi,
                                             mensajes
                                            );
      vpasexec := 9;
      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_eliminar_citas_ais;

   FUNCTION f_val_tomador_cbancar (
      psseguro   IN       NUMBER,
      psperson   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      toma          t_iax_tomadores;
      tom           ob_iax_tomadores;
      num_err       NUMBER;
      vpasexec      NUMBER (8)       := 1;
      vencontrado   BOOLEAN;
      vparam        VARCHAR2 (100)   := '';
      vobject       VARCHAR2 (200)
                                := 'PAC_IAX_PRODUCCION.f_val_tomador_cbancar';
   BEGIN
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      toma := pac_iobj_prod.f_partpoltomadores (poliza.det_poliza, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      IF toma IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001089);
         vpasexec := 5;
         RAISE e_object_error;
      ELSE
         IF toma.COUNT = 0
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001089);
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      END IF;

      vpasexec := 7;
      tom := toma (toma.FIRST);

      IF tom IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 9001089);
         vpasexec := 8;
         RAISE e_object_error;
      END IF;

      vpasexec := 2;
      num_err :=
         pac_md_produccion.f_val_tomador_cbancar (poliza.det_poliza.sseguro,
                                                  psperson,
                                                  mensajes
                                                 );
      COMMIT;
      RETURN num_err;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_val_tomador_cbancar;

   -- BUG 0026373 - JMT - 04/04/2016
   /*************************************************************************
   Lee los datos de la poliza del tomador
   param out mensajes : mensajes de error
   param in  npoliza :  numero poliza
   param in ncertif  : numero certificado
   return             : objeto tomadores
   *************************************************************************/
   FUNCTION f_leedatoscontacto (
      npoliza    IN       NUMBER,
      ncertif    IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN t_iax_datos_contacto
   IS
      contact    t_iax_datos_contacto;
      vpasexec   NUMBER (8)           := 1;
      vparam     VARCHAR2 (100)
                           := 'npoliza=' || npoliza || ' ncertif=' || ncertif;
      vobject    VARCHAR2 (200)    := 'PAC_IAX_PRODUCCION.F_leedatoscontacto';
   BEGIN
      IF npoliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      contact :=
            pac_md_produccion.f_get_datoscontacto (npoliza, ncertif, mensajes);
      vpasexec := 3;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN contact;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_leedatoscontacto;

   -- BUG 0026373 - JMT - 07/04/2016
   /*************************************************************************
   FUNCTION  f_guardadatoscontacto
   Guarda el tipo de notificacion elegido en los datos de contacto
   param out mensajes : mensajes de error
   param in  npoliza :  numero poliza
   param in ncertif  : numero certificado
   param in spersona : numero de persona
   param in tipopers : tipo de persona
   param in lmail    : permite contacto por mail (0-no, 1-si)
   param in ltel     : permite contacto por telefono (0-no, 1-si)
   return              : number
   *************************************************************************/
   FUNCTION f_guardadatoscontacto (
      npoliza    IN       NUMBER,
      ncertif    IN       NUMBER,
      spersona   IN       NUMBER,
      tipopers   IN       NUMBER,
      lmail      IN       NUMBER,
      ltel       IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      contact    NUMBER;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (100)
                           := 'npoliza=' || npoliza || ' ncertif=' || ncertif;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_guardadatoscontacto';
   BEGIN
      IF    npoliza IS NULL
         OR ncertif IS NULL
         OR spersona IS NULL
         OR tipopers IS NULL
         OR lmail IS NULL
         OR ltel IS NULL
      THEN
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      contact :=
         pac_md_produccion.f_set_datoscontacto (npoliza,
                                                ncertif,
                                                spersona,
                                                tipopers,
                                                lmail,
                                                ltel,
                                                mensajes
                                               );
      vpasexec := 3;

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN contact;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 0;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 0;
   END f_guardadatoscontacto;

   -- INI BUG 41143/229973 - 17/03/2016 - JAEG
   /*************************************************************************
   Grabar informacion de las vigencias de garantias
   param in nriesgo   : numero de riesgo
   param in cgarant   : codigo garantia
   param in pfinivig  : Fecha inicio vigencia garant�a
   param in pffinvig  : Fecha Fin vigencia garant�a
   param out mensajes : mensajes de error
   return             : 0 todo correcto - 1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabargarantiasvigencia (
      nriesgo    IN       NUMBER,
      cgarant    IN       NUMBER,
      pfinivig   IN       DATE,
      pffinvig   IN       DATE,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      --
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)
                            := 'PAC_IAX_PRODUCCION.f_grabargarantiasvigencia';
      rie        ob_iax_riesgos;
      gar        ob_iax_garantias;
      nerr       NUMBER;
   --
   BEGIN
      --
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      --
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza        => poliza.det_poliza,
                                        pnriesgo      => nriesgo,
                                        mensajes      => mensajes
                                       );

      --
      IF rie IS NULL
      THEN
         --
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         RAISE e_object_error;
      --
      END IF;

      --
      gar :=
         pac_iobj_prod.f_partriesgarantia (riesgo        => rie,
                                           cgarant       => cgarant,
                                           mensajes      => mensajes
                                          );
      --
      gar.finivig := pfinivig;
      gar.ffinvig := pffinvig;
      --
      nerr :=
         pac_iobj_prod.f_set_partriesgarantia (poliza        => poliza.det_poliza,
                                               nriesgo       => nriesgo,
                                               gar           => gar,
                                               mensajes      => mensajes
                                              );

      IF nerr != 0
      THEN
         --
         RAISE e_object_error;
      --
      END IF;

      --
      RETURN 0;
   --
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabargarantiasvigencia;

   /*************************************************************************
   Grabar informacion si cobra prima la garantia
   param in nriesgo   : numero de riesgo
   param in cgarant   : codigo garantia
   param in pccobprima: Cobra prima
   param out mensajes : mensajes de error
   return             : 0 todo correcto - 1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabargarantiascobprima (
      nriesgo      IN       NUMBER,
      cgarant      IN       NUMBER,
      pccobprima   IN       NUMBER,
      mensajes     OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      --
      vpasexec   NUMBER (8)       := 1;
      vparam     VARCHAR2 (1)     := NULL;
      vobject    VARCHAR2 (200)
                            := 'PAC_IAX_PRODUCCION.f_grabargarantiasvigencia';
      rie        ob_iax_riesgos;
      gar        ob_iax_garantias;
      nerr       NUMBER;
   --
   BEGIN
      --
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      --
      rie :=
         pac_iobj_prod.f_partpolriesgo (poliza        => poliza.det_poliza,
                                        pnriesgo      => nriesgo,
                                        mensajes      => mensajes
                                       );

      --
      IF rie IS NULL
      THEN
         --
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000646);
         RAISE e_object_error;
      --
      END IF;

      --
      gar :=
         pac_iobj_prod.f_partriesgarantia (riesgo        => rie,
                                           cgarant       => cgarant,
                                           mensajes      => mensajes
                                          );
      --
      gar.ccobprima := pccobprima;
      --
      nerr :=
         pac_iobj_prod.f_set_partriesgarantia (poliza        => poliza.det_poliza,
                                               nriesgo       => nriesgo,
                                               gar           => gar,
                                               mensajes      => mensajes
                                              );

      IF nerr != 0
      THEN
         --
         RAISE e_object_error;
      --
      END IF;

      --
      RETURN 0;
   --
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabargarantiascobprima;

   -- FIN BUG 41143/229973 - 17/03/2016 - JAEG
   -- INI BUG 40927/228750 - 17/03/2016 - JAEG
   /*************************************************************************
   FUNCTION f_get_contragaran
   param in mensajes  : t_iax_mensajes
   return             : t_iax_contragaran
   *************************************************************************/
   FUNCTION f_get_contragaran (mensajes OUT t_iax_mensajes)
      RETURN t_iax_contragaran
   IS
      --
      vpasexec        NUMBER            := 1;
      vobject         VARCHAR2 (200)
                                    := 'pac_iax_produccion.f_get_contragaran';
      vparam          VARCHAR2 (500);
      --
      v_contragaran   t_iax_contragaran;
      vnum_err        NUMBER;
   --
   BEGIN
      --
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      --
      vpasexec := 2;
      v_contragaran :=
                pac_iobj_prod.f_partpolcontgaran (poliza.det_poliza, mensajes);

      --
      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 3;
            RAISE e_object_error;
         END IF;
      END IF;

      --
      vpasexec := 4;
      RETURN v_contragaran;
   --
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_contragaran;

   /*************************************************************************
   FUNCTION f_set_contragaran
   param in pscontgar : Contragarant�as
   param in pcactivo  : Activo
   param in mensajes  : t_iax_mensajes
   return             : NUMBER
   *************************************************************************/
   FUNCTION f_set_contragaran (
      pscontgar   IN       NUMBER,
      pcactivo    IN       NUMBER,
      mensajes    OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      --
      vpasexec        NUMBER            := 1;
      vobject         VARCHAR2 (200)
                                    := 'pac_iax_produccion.f_set_contragaran';
      vparam          VARCHAR2 (500);
      --
      v_contragaran   t_iax_contragaran;
      vnum_err        NUMBER;
   --
   BEGIN
      --
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      --
      v_contragaran :=
                pac_iobj_prod.f_partpolcontgaran (poliza.det_poliza, mensajes);

      --
      IF v_contragaran IS NOT NULL
      THEN
         IF v_contragaran.COUNT > 0
         THEN
            vpasexec := 1;

            FOR i IN v_contragaran.FIRST .. v_contragaran.LAST
            LOOP
               vpasexec := 2;

               IF v_contragaran.EXISTS (i)
               THEN
                  vpasexec := 3;

                  IF v_contragaran (i).scontgar = pscontgar
                  THEN
                     vpasexec := 4;
                     v_contragaran (i).cactivo := pcactivo;
                  END IF;
               END IF;
            END LOOP;

            --
            poliza.det_poliza.contragaran := v_contragaran;
         --
         END IF;
      END IF;

      --
      RETURN 0;
   --
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_set_contragaran;

   /*************************************************************************
   FUNCTION f_refresh_contragaran
   param in mensajes  : t_iax_mensajes
   return             : NUMBER
   *************************************************************************/
   FUNCTION f_refresh_contragaran (mensajes OUT t_iax_mensajes)
      RETURN NUMBER
   IS
      --
      vpasexec            NUMBER            := 1;
      vobject             VARCHAR2 (200)
                                := 'pac_iax_produccion.f_refresh_contragaran';
      vparam              VARCHAR2 (500);
      --
      v_contragaran       t_iax_contragaran;
      v_contragaran_det   t_iax_contragaran;
      vnum_err            NUMBER;
   --
   BEGIN
      --
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      --
      vpasexec := 2;
      v_contragaran :=
         pac_md_obtenerdatos.f_leecontgaran
                                       (psseguro      => poliza.det_poliza.sseguro,
                                        mensajes      => mensajes
                                       );
      --
      vpasexec := 3;
      v_contragaran_det :=
                pac_iobj_prod.f_partpolcontgaran (poliza.det_poliza, mensajes);

      --
      IF v_contragaran IS NOT NULL AND v_contragaran_det IS NOT NULL
      THEN
         IF v_contragaran.COUNT != v_contragaran_det.COUNT
         THEN
            --
            vpasexec := 4;
            vnum_err :=
               pac_iobj_prod.f_set_partcontgaran
                                             (poliza         => poliza.det_poliza,
                                              contgaran      => v_contragaran_det,
                                              mensajes       => mensajes
                                             );
         --
         END IF;
      END IF;

      --
      RETURN 0;
   --
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_refresh_contragaran;

   -- FIN BUG 40927/228750 - 17/03/2016 - JAEG
   FUNCTION f_borrar_simulaciones (
      psseguro   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      --
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (100) := 'sseguro=' || psseguro;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_borrar_simulaciones';
      nerror     NUMBER;
   --
   BEGIN
      IF psseguro IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 2;
      nerror := pac_md_produccion.f_borrar_simulaciones (psseguro, mensajes);
      RETURN nerror;
   --
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_borrar_simulaciones;

   /*************************************************************************
   FUNCTION f_importe_cambio
   Devuelve el importe en la moneda especificada a una fecha concreta                                      --
   (DRA 18-06-2008: Cambio el tipo del parametro p_redondear para usarlo en UPDATES                     --
   p_moneda_inicial IN : C�digo de moneda inicial.
   p_moneda_final IN   : C�digo de moneda final.
   p_importe IN        : importe en moneda inicial
   p_redondear IN      : '0' --> Si, '1' --> No
   return              : importe en la moneda final
   *************************************************************************/
   FUNCTION f_importe_cambio (
      p_moneda_inicial   IN       eco_tipocambio.cmonori%TYPE,
      p_moneda_final     IN OUT   eco_tipocambio.cmondes%TYPE,
      p_fecha            IN       eco_tipocambio.fcambio%TYPE,
      p_importe          IN       NUMBER,
      p_redondear        IN       NUMBER DEFAULT 1,
      p_cambio           OUT      NUMBER
   )
      RETURN NUMBER
   IS
      --
      vpasexec      NUMBER                      := 1;
      vobject       VARCHAR2 (200)   := 'pac_iax_produccion.f_importe_cambio';
      vparam        VARCHAR2 (500);
      --
      v_pas         NUMBER                      := 100;
      v_cambio      eco_tipocambio.itasa%TYPE;
      v_resultado   NUMBER;
      cmonpol       NUMBER;
      cmonpolint    VARCHAR2 (3);
      tmonpol       VARCHAR2 (200);
      mensajes      t_iax_mensajes;
   BEGIN
      IF p_moneda_final IS NULL
      THEN
         cmonpol := pac_parametros.f_parinstalacion_n ('MONEDAINST');
         tmonpol :=
             pac_md_listvalores.f_get_tmoneda (cmonpol, cmonpolint, mensajes);
         p_moneda_final := cmonpolint;
      END IF;

      p_cambio :=
         pac_eco_tipocambio.f_cambio (p_moneda_inicial,
                                      p_moneda_final,
                                      NVL (p_fecha, f_sysdate)
                                     );
      RETURN pac_eco_tipocambio.f_importe_cambio (p_moneda_inicial,
                                                  p_moneda_final,
                                                  NVL (p_fecha, f_sysdate),
                                                  p_importe
                                                 );
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_importe_cambio;

   -- FIN BUG 40871 ASDQ
   -- INI BUG CONF-114 - 21/09/2016 - JAEG
   /*************************************************************************
   Graba detalle del riesgo
   param in pnriesgo       : numero de riesgo
   param in ptdescripcion  : detalle del riesgo
   param out mensajes      : mensajes de error
   return                  : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabariedetalle (
      pnriesgo        IN       NUMBER,
      ptdescripcion   IN       VARCHAR2,
      mensajes        OUT      t_iax_mensajes
   )
      RETURN NUMBER
   IS
      ries       t_iax_riesgos;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (1)   := NULL;
      vobject    VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_grabariedetalle';
   BEGIN
      --
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      --
      ries := pac_iobj_prod.f_partpolriesgos (poliza.det_poliza, mensajes);

      --
      IF pnriesgo IS NOT NULL
      THEN
         --
         FOR vrie IN ries.FIRST .. ries.LAST
         LOOP
            IF ries.EXISTS (vrie)
            THEN
               IF ries (vrie).nriesgo = pnriesgo
               THEN
                  ries (vrie).tdescrie := ptdescripcion;
                  poliza.det_poliza.riesgos := ries;
                  RETURN 0;
               END IF;
            END IF;
         END LOOP;
      --
      END IF;

      --
      RETURN 1;
   --
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN 1;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN 1;
   END f_grabariedetalle;

   -- FIN BUG CONF-114 - 21/09/2016 - JAEG

   -- Ini  TCS_827 - ACL - 17/02/2019
   /*************************************************************************
   Consulta las p�lizas v�lidas
   param out mensajes      : mensajes de error
   return                  : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_consultapoliza_contrag (
      pramo              IN       NUMBER,
      psproduc           IN       NUMBER,
      pnpoliza           IN       NUMBER,
      pncert             IN       NUMBER DEFAULT -1,
      pnnumide           IN       VARCHAR2,
      psnip              IN       VARCHAR2,
      pbuscar            IN       VARCHAR2,
      pnsolici           IN       NUMBER,
      ptipopersona       IN       NUMBER,
      pcagente           IN       NUMBER,
      pcmatric           IN       VARCHAR2,
      pcpostal           IN       VARCHAR2,
      ptdomici           IN       VARCHAR2,
      ptnatrie           IN       VARCHAR2,
      pcsituac           IN       NUMBER,
      p_filtroprod       IN       VARCHAR2,
      pcpolcia           IN       VARCHAR2,
      pccompani          IN       NUMBER,
      pcactivi           IN       NUMBER,
      pcestsupl          IN       NUMBER,
      pnpolrelacionada   IN       NUMBER,
      pnpolini           IN       VARCHAR2,
      mensajes           OUT      t_iax_mensajes,
      pfilage            IN       NUMBER,
      pcsucursal         IN       NUMBER DEFAULT NULL,
      pcadm              IN       NUMBER DEFAULT NULL,
      pcmotor            IN       VARCHAR2 DEFAULT NULL,
      pcchasis           IN       VARCHAR2 DEFAULT NULL,
      pnbastid           IN       VARCHAR2 DEFAULT NULL,
      pcmodo             IN       NUMBER DEFAULT NULL,
      pncontrato         IN       VARCHAR2 DEFAULT NULL
   )
      RETURN sys_refcursor
   IS
      cur        sys_refcursor;
      vpasexec   NUMBER (8)     := 1;
      vparam     VARCHAR2 (500)
         :=    'psproduc='
            || psproduc
            || ' pnpoliza: '
            || pnpoliza
            || ' pncert='
            || pncert
            || ' pnnumide='
            || pnnumide
            || ' psnip='
            || psnip
            || ' pbuscar='
            || pbuscar
            || ' ptipopersona='
            || ptipopersona
            || ' pnsolici='
            || pnsolici
            || ' p_filtroprod='
            || p_filtroprod
            || ' pcpolcia='
            || pcpolcia
            || ' pccompani= '
            || pccompani
            || ' pcactivi='
            || pcactivi
            || ' pcestsupl='
            || pcestsupl
            || ' pnpolrelacionada='
            || pnpolrelacionada
            || ',pnpolini = '
            || pnpolini;
      vobject    VARCHAR2 (200)
                              := 'PAC_IAX_PRODUCCION.f_consultapoliza_contrag';
   BEGIN
      cur :=
         pac_md_produccion.f_consultapoliza_contrag (pramo,
                                                     psproduc,
                                                     pnpoliza,
                                                     pncert,
                                                     pnnumide,
                                                     psnip,
                                                     pbuscar,
                                                     pnsolici,
                                                     ptipopersona,
                                                     pcagente,
                                                     pcmatric,
                                                     pcpostal,
                                                     ptdomici,
                                                     ptnatrie,
                                                     pcsituac,
                                                     p_filtroprod,
                                                     pcpolcia,
                                                     pccompani,
                                                     pcactivi,
                                                     pcestsupl,
                                                     pnpolrelacionada,
                                                     pnpolini,
                                                     mensajes,
                                                     pfilage,
                                                     pcsucursal,
                                                     pcadm,
                                                     pcmotor,
                                                     pcchasis,
                                                     pnbastid,
                                                     pcmodo,
                                                     pncontrato
                                                    );
      RETURN cur;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );

         IF cur%ISOPEN
         THEN
            CLOSE cur;
         END IF;

         RETURN cur;
   END f_consultapoliza_contrag;

   -- Fin  TCS_827 - ACL - 17/02/2019
   -- INI BUG 3324 - SGM Interacci�n del Rango DIAN con la p�liza (No. Certificado)
   /***********************************************************************
   Busca el certificado dian de la p�liza ligado al movimiento
   param in pnrecibo     : Numero de recibo
   param in out mensajes : mensajes error
   return                : numero certificado DIAN
   ***********************************************************************/
   FUNCTION f_get_certdian (
      psseguro   IN       NUMBER,
      pnrecibo   IN       NUMBER,
      mensajes   OUT      t_iax_mensajes
   )
      RETURN VARCHAR2
   IS
      gest          ob_iax_gestion;
      vpasexec      NUMBER (8)     := 1;
      vparam        VARCHAR2 (1)   := NULL;
      vobject       VARCHAR2 (200) := 'PAC_IAX_PRODUCCION.f_get_certdian';
      v_ncertdian   VARCHAR2 (10)  := NULL;
   BEGIN
      /*IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;*/
      vpasexec := 2;

      IF pnrecibo IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje (mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;

      vpasexec := 3;
      v_ncertdian :=
               pac_md_produccion.f_get_certdian (psseguro, pnrecibo, mensajes);

      IF mensajes IS NOT NULL
      THEN
         IF mensajes.COUNT > 0
         THEN
            vpasexec := 4;
            RAISE e_object_error;
         END IF;
      END IF;

      RETURN v_ncertdian;
   EXCEPTION
      WHEN e_param_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000005,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN e_object_error
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000006,
                                            vpasexec,
                                            vparam
                                           );
         RETURN NULL;
      WHEN OTHERS
      THEN
         pac_iobj_mensajes.p_tratarmensaje (mensajes,
                                            vobject,
                                            1000001,
                                            vpasexec,
                                            vparam,
                                            psqcode      => SQLCODE,
                                            psqerrm      => SQLERRM
                                           );
         RETURN NULL;
   END f_get_certdian;
-- FIN CONF-1243 QT_724

    /*************************************************************************
   Graba un nuevo riesgo o lo modifica en el objeto persistente
   param in pnriesgo       : numero de riesgo
   param in ptdescripcion  : descripcion del riesgo
   param in pnasegur       : numero de asegurados
   param in pnedadcol      : Edad de un riesgo de un colectivo inominado
   param in psexcol        : Sexo de un riesgo de un colectivo inominado
   param out mensajes      : mensajes de error
   return                  : 0 todo correcto
   1 ha habido un error
   *************************************************************************/
   FUNCTION f_grabariedescripcionin(pnriesgo      IN NUMBER,
                                  ptdescripcion IN VARCHAR2,
                                  pnasegur      IN VARCHAR2,
                                  pnedadcol     IN NUMBER,
                                  psexcol       IN NUMBER,
                                  mensajes      OUT t_iax_mensajes)
      RETURN NUMBER IS
      rie          ob_iax_riesgos;
      ries         t_iax_riesgos;
      nerr         NUMBER;
      vpasexec     NUMBER(8) := 1;
      vparam       VARCHAR2(1) := NULL;
      vobject      VARCHAR2(200) := 'PAC_IAX_PRODUCCION.F_GrabaRieDescripcion';
      vnriesgo     NUMBER;
      vdescripcion VARCHAR2(300);
      vmaxtriesgo  NUMBER := 300;
      vefectsuple  DATE := NULL;
   BEGIN
      /*-------------*/
      IF poliza.det_poliza IS NULL
      THEN
         pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 1000644);
         RAISE e_param_error;
      END IF;
      vpasexec := 2;
      ries     := pac_iobj_prod.f_partpolriesgos(poliza.det_poliza, mensajes);
      vpasexec := 3;
      /* BUG11263:DRA:21/04/2010:Inici*/
      IF poliza.det_poliza.cobjase IN (3,4)
      THEN
         vnriesgo := 1;
         IF ries IS NULL OR
            ries.count = 0
         THEN
            /* si entra aqui es que no han clicado "Asegurado"*/
            vnriesgo := NULL;
         ELSE
            IF ries(ries.last).riesdescripcion IS NOT NULL
            THEN
               IF pnriesgo IS NULL
               THEN
                  vnriesgo := NULL;
                  /* Para que a�ada otro riesgo*/
               ELSE
                  vnriesgo := pnriesgo;
                  /* Estan editando el riesgo actual*/
               END IF;
            END IF;
         END IF;
      ELSE
         vnriesgo := pnriesgo;
      END IF;
      /* BUG11263:DRA:21/04/2010:Fi*/
      IF ries IS NULL
      THEN
         vpasexec := 4;
         /*----------*/
         ries := t_iax_riesgos();
         /*---------*/
         vpasexec := 5;
         IF nerr = 1
         THEN
            pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 1000645);
            vpasexec := 6;
            RAISE e_object_error;
         END IF;
      END IF;
      vpasexec := 7;
      IF mensajes IS NOT NULL
      THEN
         IF mensajes.count > 0
         THEN
            vpasexec := 8;
            RAISE e_object_error;
         END IF;
      END IF;
      vpasexec     := 9;
      vdescripcion := 'OBJETO:';
      IF length(vdescripcion) > vmaxtriesgo
      THEN
         vdescripcion := SUBSTR(vdescripcion, 1, vmaxtriesgo);
      END IF;
      /*-------------*/
      IF vnriesgo IS NOT NULL
      THEN
         vpasexec := 10;
         FOR vrie IN ries.first .. ries.last
         LOOP
            IF ries.exists(vrie)
            THEN
               IF ries(vrie).nriesgo = vnriesgo
               THEN
                  vpasexec := 11;
                  ries(vrie).riesdescripcion := ob_iax_descripcion();
                  /* BUG11263:DRA:21/04/2010*/
                  ries(vrie).riesdescripcion.nasegur := pnasegur;
                  ries(vrie).riesdescripcion.nedacol := pnedadcol;
                  ries(vrie).riesdescripcion.csexcol := psexcol;
                  ries(vrie).triesgo := vdescripcion;
                  ries(vrie).tnatrie := vdescripcion;
                  ries(vrie).nmovima := vnmovimi;
                  ries(vrie).tdescrie := ptdescripcion;
                  vpasexec := 12;
                  poliza.det_poliza.riesgos := ries;
                  RETURN 0;
               END IF;
            END IF;
         END LOOP;
         vpasexec := 15;
      ELSE
         vpasexec := 16;
         vnriesgo := ries.count + 1;
         vpasexec := 17;
         ries.extend;
         ries(ries.last) := ob_iax_riesgos();
         vpasexec := 18;
         ries(ries.last).nriesgo := vnriesgo;
         ries(ries.last).riesdescripcion := ob_iax_descripcion();
         ries(ries.last).riesdescripcion.nasegur := pnasegur;
         ries(ries.last).riesdescripcion.nedacol := pnedadcol;
         ries(ries.last).riesdescripcion.csexcol := psexcol;
         ries(ries.last).triesgo := vdescripcion;
         ries(ries.last).tnatrie := vdescripcion;
         ries(ries.last).nmovima := vnmovimi;
         ries(ries.last).tdescrie := ptdescripcion;
         /* Ini bug 29582#c164832 jds 04/02/2014*/
         IF issuplem
         THEN
            nerr := pac_md_suplementos.f_get_fefecto_supl(vsolicit, vnmovimi,
                                                          vefectsuple,
                                                          mensajes);
            IF (nerr <> 0)
            THEN
               pac_iobj_mensajes.crea_nuevo_mensaje(mensajes, 1, 9000827);
               RAISE e_object_error;
            END IF;
         END IF;
         ries(ries.last).fefecto := NVL(vefectsuple, vfefecto);
         /*Fi bug 29582#c164832 jds 04/02/2014*/
         vpasexec                  := 19;
         poliza.det_poliza.riesgos := ries;
         vpasexec                  := 20;
         RETURN 0;
      END IF;
      RETURN 1;
      /*no se ha modificado ningun riesgo -- Error*/
      /*---------------------*/
   EXCEPTION
      WHEN e_param_error THEN
         pac_iobj_mensajes.p_tratarmensaje(mensajes, vobject, 1000005,
                                           vpasexec, vparam);
         RETURN 1;
      WHEN e_object_error THEN
         pac_iobj_mensajes.p_tratarmensaje(mensajes, vobject, 1000006,
                                           vpasexec, vparam);
         RETURN 1;
      WHEN OTHERS THEN
         pac_iobj_mensajes.p_tratarmensaje(mensajes, vobject, 1000001,
                                           vpasexec, vparam,
                                           psqcode => SQLCODE,
                                           psqerrm => SQLERRM);
         RETURN 1;
   END f_grabariedescripcionin;


END pac_iax_produccion;
/